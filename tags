!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
-name-prefix	src/cuda-sim/Makefile	/^	bison --name-prefix=ptx_ -v -d ptx.y --file-prefix=$(OUTPUT_DIR)\/ptx$/;"	m
-name-prefix	src/cuda-sim/Makefile	/^	bison --name-prefix=ptxinfo_ -v -d ptxinfo.y --file-prefix=$(OUTPUT_DIR)\/ptxinfo$/;"	m
-outfile	src/cuda-sim/Makefile	/^	flex --outfile=$(OUTPUT_DIR)\/lex.ptx_.c ptx.l $/;"	m
-outfile	src/cuda-sim/Makefile	/^	flex --outfile=$(OUTPUT_DIR)\/lex.ptxinfo_.c ptxinfo.l $/;"	m
ABSTRACT_HARDWARE_MODEL_INCLUDED	src/abstract_hardware_model.h	29;"	d
ABS_OPTION	build/src/cuda-sim/ptx.tab.c	/^    ABS_OPTION = 401,$/;"	e	enum:yytokentype	file:
ABS_OPTION	build/src/cuda-sim/ptx.tab.h	/^    ABS_OPTION = 401,$/;"	e	enum:yytokentype
ACT	src/ramulator_sim/ALDRAM.h	/^        ACT, PRE, PREA,$/;"	m	class:ALDRAM::Command
ACT	src/ramulator_sim/DDR3.h	/^        ACT, PRE, PREA,$/;"	m	class:DDR3::Command
ACT	src/ramulator_sim/DDR4.h	/^        ACT, PRE, PREA,$/;"	m	class:DDR4::Command
ACT	src/ramulator_sim/DSARP.h	/^        ACT, PRE, PREA,$/;"	m	class:DSARP::Command
ACT	src/ramulator_sim/GDDR5.h	/^        ACT, PRE, PREA,$/;"	m	class:GDDR5::Command
ACT	src/ramulator_sim/HBM.h	/^        ACT, PRE,   PREA,$/;"	m	class:HBM::Command
ACT	src/ramulator_sim/LPDDR3.h	/^        ACT, PRE, PRA,$/;"	m	class:LPDDR3::Command
ACT	src/ramulator_sim/LPDDR4.h	/^        ACT, PRE, PREA,$/;"	m	class:LPDDR4::Command
ACT	src/ramulator_sim/SALP.h	/^        ACT, SASEL, PRE, PRER, \/\/ precharge bank\/bank\/rank(SALP-1), subarray\/bank\/rank(SALP-2, MASA)$/;"	m	class:SALP::Command
ACT	src/ramulator_sim/TLDRAM.h	/^        ACT, PRE, PREA,$/;"	m	class:TLDRAM::Command
ACT	src/ramulator_sim/WideIO.h	/^        ACT, PRE, PRA,$/;"	m	class:WideIO::Command
ACT	src/ramulator_sim/WideIO2.h	/^        ACT, PRE,   PRA,$/;"	m	class:WideIO2::Command
ACTF	src/ramulator_sim/TLDRAM.h	/^        ACTF, PREF, PREAF,$/;"	m	class:TLDRAM::Command
ACTM	src/ramulator_sim/TLDRAM.h	/^        ACTM, PREM, PREAM,$/;"	m	class:TLDRAM::Command
ADDRDEC_H	src/gpgpu-sim/addrdec.h	34;"	d
ADDRESS_BITS	src/gpuwattch/cacti/const.h	/^const int ADDRESS_BITS = 42;$/;"	v
ADDRESS_SIZE_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    ADDRESS_SIZE_DIRECTIVE = 292,$/;"	e	enum:yytokentype	file:
ADDRESS_SIZE_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    ADDRESS_SIZE_DIRECTIVE = 292,$/;"	e	enum:yytokentype
ADDR_CHIP_S	src/gpgpu-sim/addrdec.h	/^   int ADDR_CHIP_S;$/;"	m	class:linear_to_raw_address_translation
ADJ	src/gpuwattch/cacti/crossbar.cc	35;"	d	file:
AF	src/gpuwattch/arch_const.h	/^const double 		AF 				= 	0.5;$/;"	v
AF	src/gpuwattch/cacti/highradix.h	/^    double AF;\/\/ activity factor$/;"	m	class:HighRadix
ALDRAM	src/ramulator_sim/ALDRAM.cpp	/^ALDRAM::ALDRAM(Org org, Speed speed) :$/;"	f	class:ALDRAM
ALDRAM	src/ramulator_sim/ALDRAM.cpp	/^ALDRAM::ALDRAM(const string& org_str, const string& speed_str) :$/;"	f	class:ALDRAM
ALDRAM	src/ramulator_sim/ALDRAM.h	/^class ALDRAM$/;"	c
ALDRAM_1066E	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_1066E, ALDRAM_1066F, ALDRAM_1066G,$/;"	m	class:ALDRAM::Speed
ALDRAM_1066F	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_1066E, ALDRAM_1066F, ALDRAM_1066G,$/;"	m	class:ALDRAM::Speed
ALDRAM_1066G	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_1066E, ALDRAM_1066F, ALDRAM_1066G,$/;"	m	class:ALDRAM::Speed
ALDRAM_1333G	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_1333G, ALDRAM_1333H,$/;"	m	class:ALDRAM::Speed
ALDRAM_1333H	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_1333G, ALDRAM_1333H,$/;"	m	class:ALDRAM::Speed
ALDRAM_1600H	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_1600H, ALDRAM_1600J, ALDRAM_1600K,$/;"	m	class:ALDRAM::Speed
ALDRAM_1600J	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_1600H, ALDRAM_1600J, ALDRAM_1600K,$/;"	m	class:ALDRAM::Speed
ALDRAM_1600K	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_1600H, ALDRAM_1600J, ALDRAM_1600K,$/;"	m	class:ALDRAM::Speed
ALDRAM_1866K	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_1866K, ALDRAM_1866L,$/;"	m	class:ALDRAM::Speed
ALDRAM_1866L	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_1866K, ALDRAM_1866L,$/;"	m	class:ALDRAM::Speed
ALDRAM_1Gb_x16	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_1Gb_x4,   ALDRAM_1Gb_x8,   ALDRAM_1Gb_x16,$/;"	m	class:ALDRAM::Org
ALDRAM_1Gb_x4	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_1Gb_x4,   ALDRAM_1Gb_x8,   ALDRAM_1Gb_x16,$/;"	m	class:ALDRAM::Org
ALDRAM_1Gb_x8	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_1Gb_x4,   ALDRAM_1Gb_x8,   ALDRAM_1Gb_x16,$/;"	m	class:ALDRAM::Org
ALDRAM_2133L	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_2133L, ALDRAM_2133M,$/;"	m	class:ALDRAM::Speed
ALDRAM_2133M	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_2133L, ALDRAM_2133M,$/;"	m	class:ALDRAM::Speed
ALDRAM_2Gb_x16	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_2Gb_x4,   ALDRAM_2Gb_x8,   ALDRAM_2Gb_x16,$/;"	m	class:ALDRAM::Org
ALDRAM_2Gb_x4	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_2Gb_x4,   ALDRAM_2Gb_x8,   ALDRAM_2Gb_x16,$/;"	m	class:ALDRAM::Org
ALDRAM_2Gb_x8	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_2Gb_x4,   ALDRAM_2Gb_x8,   ALDRAM_2Gb_x16,$/;"	m	class:ALDRAM::Org
ALDRAM_4Gb_x16	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_4Gb_x4,   ALDRAM_4Gb_x8,   ALDRAM_4Gb_x16,$/;"	m	class:ALDRAM::Org
ALDRAM_4Gb_x4	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_4Gb_x4,   ALDRAM_4Gb_x8,   ALDRAM_4Gb_x16,$/;"	m	class:ALDRAM::Org
ALDRAM_4Gb_x8	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_4Gb_x4,   ALDRAM_4Gb_x8,   ALDRAM_4Gb_x16,$/;"	m	class:ALDRAM::Org
ALDRAM_512Mb_x16	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_512Mb_x4, ALDRAM_512Mb_x8, ALDRAM_512Mb_x16,$/;"	m	class:ALDRAM::Org
ALDRAM_512Mb_x4	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_512Mb_x4, ALDRAM_512Mb_x8, ALDRAM_512Mb_x16,$/;"	m	class:ALDRAM::Org
ALDRAM_512Mb_x8	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_512Mb_x4, ALDRAM_512Mb_x8, ALDRAM_512Mb_x16,$/;"	m	class:ALDRAM::Org
ALDRAM_800D	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_800D,  ALDRAM_800E,$/;"	m	class:ALDRAM::Speed
ALDRAM_800E	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_800D,  ALDRAM_800E,$/;"	m	class:ALDRAM::Speed
ALDRAM_8Gb_x16	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_8Gb_x4,   ALDRAM_8Gb_x8,   ALDRAM_8Gb_x16,$/;"	m	class:ALDRAM::Org
ALDRAM_8Gb_x4	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_8Gb_x4,   ALDRAM_8Gb_x8,   ALDRAM_8Gb_x16,$/;"	m	class:ALDRAM::Org
ALDRAM_8Gb_x8	src/ramulator_sim/ALDRAM.h	/^        ALDRAM_8Gb_x4,   ALDRAM_8Gb_x8,   ALDRAM_8Gb_x16,$/;"	m	class:ALDRAM::Org
ALIGN_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    ALIGN_DIRECTIVE = 260,$/;"	e	enum:yytokentype	file:
ALIGN_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    ALIGN_DIRECTIVE = 260,$/;"	e	enum:yytokentype
ALLOCATORS	src/intersim2/Makefile	/^ALLOCATORS:= $(wildcard allocators\/*.cpp)$/;"	m
ALLXMLClearTag	src/gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR lpszOpen; int openTagLen; XMLCSTR lpszClose;} ALLXMLClearTag;$/;"	t	typeref:struct:__anon6	file:
ALL_OPTION	build/src/cuda-sim/ptx.tab.c	/^    ALL_OPTION = 395,$/;"	e	enum:yytokentype	file:
ALL_OPTION	build/src/cuda-sim/ptx.tab.h	/^    ALL_OPTION = 395,$/;"	e	enum:yytokentype
ALU	src/gpuwattch/basic_components.h	/^    ALU,$/;"	e	enum:FU_type
ALU_OP	src/abstract_hardware_model.h	/^   ALU_OP=1,$/;"	e	enum:uarch_op_t
ALU_SFU_OP	src/abstract_hardware_model.h	/^   ALU_SFU_OP,$/;"	e	enum:uarch_op_t
ALU_cdb_duty_cycle	src/gpuwattch/XML_Parse.h	/^	double ALU_cdb_duty_cycle ;$/;"	m	struct:__anon15
ALU_cdb_duty_cycle	src/gpuwattch/basic_components.h	/^	       FPU_duty_cycle, ALU_cdb_duty_cycle,MUL_cdb_duty_cycle,$/;"	m	class:CoreDynParam
ALU_duty_cycle	src/gpuwattch/XML_Parse.h	/^	double ALU_duty_cycle ;$/;"	m	struct:__anon15
ALU_duty_cycle	src/gpuwattch/basic_components.h	/^	       MemManU_D_duty_cycle, ALU_duty_cycle,MUL_duty_cycle,$/;"	m	class:CoreDynParam
ALU_per_core	src/gpuwattch/XML_Parse.h	/^	int ALU_per_core;$/;"	m	struct:__anon15
ANY_OPTION	build/src/cuda-sim/ptx.tab.c	/^    ANY_OPTION = 394,$/;"	e	enum:yytokentype	file:
ANY_OPTION	build/src/cuda-sim/ptx.tab.h	/^    ANY_OPTION = 394,$/;"	e	enum:yytokentype
ANY_TYPE	src/intersim2/flit.hpp	/^                  ANY_TYPE      = 4 };$/;"	e	enum:Flit::FlitType
APPROX_OPTION	build/src/cuda-sim/ptx.tab.c	/^    APPROX_OPTION = 392,$/;"	e	enum:yytokentype	file:
APPROX_OPTION	build/src/cuda-sim/ptx.tab.h	/^    APPROX_OPTION = 392,$/;"	e	enum:yytokentype
ARBITERS	src/intersim2/Makefile	/^ARBITERS:= $(wildcard arbiters\/*.cpp)$/;"	m
ARCH_CONST_H_	src/gpuwattch/arch_const.h	33;"	d
ARRAY_H_	src/gpuwattch/array.h	33;"	d
ARRAY_IDENTIFIER	src/cuda-sim/ptx_parser.h	99;"	d
ARRAY_IDENTIFIER_NO_DIM	src/cuda-sim/ptx_parser.h	98;"	d
ASPECT_THRESHOLD	src/gpuwattch/cacti/crossbar.cc	34;"	d	file:
ASSOC	src/gpgpu-sim/gpu-cache.h	/^    ASSOC \/\/ normal cache $/;"	e	enum:mshr_config_t
ATOMIC_ADD	build/src/cuda-sim/ptx.tab.c	/^    ATOMIC_ADD = 383,$/;"	e	enum:yytokentype	file:
ATOMIC_ADD	build/src/cuda-sim/ptx.tab.h	/^    ATOMIC_ADD = 383,$/;"	e	enum:yytokentype
ATOMIC_AND	build/src/cuda-sim/ptx.tab.c	/^    ATOMIC_AND = 378,$/;"	e	enum:yytokentype	file:
ATOMIC_AND	build/src/cuda-sim/ptx.tab.h	/^    ATOMIC_AND = 378,$/;"	e	enum:yytokentype
ATOMIC_CAS	build/src/cuda-sim/ptx.tab.c	/^    ATOMIC_CAS = 381,$/;"	e	enum:yytokentype	file:
ATOMIC_CAS	build/src/cuda-sim/ptx.tab.h	/^    ATOMIC_CAS = 381,$/;"	e	enum:yytokentype
ATOMIC_DEC	build/src/cuda-sim/ptx.tab.c	/^    ATOMIC_DEC = 385,$/;"	e	enum:yytokentype	file:
ATOMIC_DEC	build/src/cuda-sim/ptx.tab.h	/^    ATOMIC_DEC = 385,$/;"	e	enum:yytokentype
ATOMIC_EXCH	build/src/cuda-sim/ptx.tab.c	/^    ATOMIC_EXCH = 382,$/;"	e	enum:yytokentype	file:
ATOMIC_EXCH	build/src/cuda-sim/ptx.tab.h	/^    ATOMIC_EXCH = 382,$/;"	e	enum:yytokentype
ATOMIC_INC	build/src/cuda-sim/ptx.tab.c	/^    ATOMIC_INC = 384,$/;"	e	enum:yytokentype	file:
ATOMIC_INC	build/src/cuda-sim/ptx.tab.h	/^    ATOMIC_INC = 384,$/;"	e	enum:yytokentype
ATOMIC_MAX	build/src/cuda-sim/ptx.tab.c	/^    ATOMIC_MAX = 387,$/;"	e	enum:yytokentype	file:
ATOMIC_MAX	build/src/cuda-sim/ptx.tab.h	/^    ATOMIC_MAX = 387,$/;"	e	enum:yytokentype
ATOMIC_MIN	build/src/cuda-sim/ptx.tab.c	/^    ATOMIC_MIN = 386,$/;"	e	enum:yytokentype	file:
ATOMIC_MIN	build/src/cuda-sim/ptx.tab.h	/^    ATOMIC_MIN = 386,$/;"	e	enum:yytokentype
ATOMIC_OR	build/src/cuda-sim/ptx.tab.c	/^    ATOMIC_OR = 379,$/;"	e	enum:yytokentype	file:
ATOMIC_OR	build/src/cuda-sim/ptx.tab.h	/^    ATOMIC_OR = 379,$/;"	e	enum:yytokentype
ATOMIC_XOR	build/src/cuda-sim/ptx.tab.c	/^    ATOMIC_XOR = 380,$/;"	e	enum:yytokentype	file:
ATOMIC_XOR	build/src/cuda-sim/ptx.tab.h	/^    ATOMIC_XOR = 380,$/;"	e	enum:yytokentype
ActPowerDown	src/ramulator_sim/ALDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ALDRAM::State
ActPowerDown	src/ramulator_sim/DDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DDR3::State
ActPowerDown	src/ramulator_sim/DDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DDR4::State
ActPowerDown	src/ramulator_sim/DSARP.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DSARP::State
ActPowerDown	src/ramulator_sim/GDDR5.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:GDDR5::State
ActPowerDown	src/ramulator_sim/HBM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:HBM::State
ActPowerDown	src/ramulator_sim/LPDDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:LPDDR3::State
ActPowerDown	src/ramulator_sim/LPDDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:LPDDR4::State
ActPowerDown	src/ramulator_sim/SALP.h	/^        Opened, Closed, Selected, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:SALP::State
ActPowerDown	src/ramulator_sim/TLDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:TLDRAM::State
ActPowerDown	src/ramulator_sim/WideIO.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:WideIO::State
ActPowerDown	src/ramulator_sim/WideIO2.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:WideIO2::State
Add	src/intersim/outputset.cpp	/^void OutputSet::Add( int output_port, int vc, int pri  )$/;"	f	class:OutputSet
Add	src/intersim2/outputset.cpp	/^void OutputSet::Add( int output_port, int vc, int pri  )$/;"	f	class:OutputSet
AddFlit	src/intersim/vc.cpp	/^bool VC::AddFlit( Flit *f )$/;"	f	class:VC
AddFlit	src/intersim2/buffer.cpp	/^void Buffer::AddFlit( int vc, Flit *f )$/;"	f	class:Buffer
AddFlit	src/intersim2/vc.cpp	/^void VC::AddFlit( Flit *f )$/;"	f	class:VC
AddInputChannel	src/intersim/router.cpp	/^void Router::AddInputChannel( Flit **channel, Credit **backchannel )$/;"	f	class:Router
AddInputChannel	src/intersim2/routers/router.cpp	/^void Router::AddInputChannel( FlitChannel *channel, CreditChannel *backchannel )$/;"	f	class:Router
AddOutputChannel	src/intersim/router.cpp	/^void Router::AddOutputChannel( Flit **channel, Credit **backchannel )$/;"	f	class:Router
AddOutputChannel	src/intersim2/routers/iq_router.cpp	/^void IQRouter::AddOutputChannel(FlitChannel * channel, CreditChannel * backchannel)$/;"	f	class:IQRouter
AddOutputChannel	src/intersim2/routers/router.cpp	/^void Router::AddOutputChannel( FlitChannel *channel, CreditChannel *backchannel )$/;"	f	class:Router
AddRange	src/intersim/outputset.cpp	/^void OutputSet::AddRange( int output_port, int vc_start, int vc_end, int pri )$/;"	f	class:OutputSet
AddRange	src/intersim2/outputset.cpp	/^void OutputSet::AddRange( int output_port, int vc_start, int vc_end, int pri )$/;"	f	class:OutputSet
AddRequest	src/intersim/allocator.cpp	/^void DenseAllocator::AddRequest( int in, int out, int label, $/;"	f	class:DenseAllocator
AddRequest	src/intersim/allocator.cpp	/^void SparseAllocator::AddRequest( int in, int out, int label, $/;"	f	class:SparseAllocator
AddRequest	src/intersim/arbiter.cpp	/^void Arbiter::AddRequest( int in, int label, int pri )$/;"	f	class:Arbiter
AddRequest	src/intersim2/allocators/allocator.cpp	/^void Allocator::AddRequest( int in, int out, int label, int in_pri,$/;"	f	class:Allocator
AddRequest	src/intersim2/allocators/allocator.cpp	/^void DenseAllocator::AddRequest( int in, int out, int label, $/;"	f	class:DenseAllocator
AddRequest	src/intersim2/allocators/allocator.cpp	/^void SparseAllocator::AddRequest( int in, int out, int label, $/;"	f	class:SparseAllocator
AddRequest	src/intersim2/allocators/wavefront.cpp	/^void Wavefront::AddRequest( int in, int out, int label, $/;"	f	class:Wavefront
AddRequest	src/intersim2/arbiters/arbiter.cpp	/^void Arbiter::AddRequest( int input, int id, int pri )$/;"	f	class:Arbiter
AddRequest	src/intersim2/arbiters/matrix_arb.cpp	/^void MatrixArbiter::AddRequest( int input, int id, int pri )$/;"	f	class:MatrixArbiter
AddRequest	src/intersim2/arbiters/prio_arb.cpp	/^void PriorityArbiter::AddRequest( int in, int label, int pri )$/;"	f	class:PriorityArbiter
AddRequest	src/intersim2/arbiters/roundrobin_arb.cpp	/^void RoundRobinArbiter::AddRequest( int input, int id, int pri )$/;"	f	class:RoundRobinArbiter
AddRequest	src/intersim2/arbiters/tree_arb.cpp	/^void TreeArbiter::AddRequest( int input, int id, int pri )$/;"	f	class:TreeArbiter
AddSample	src/intersim/stats.cpp	/^void Stats::AddSample( double val )$/;"	f	class:Stats
AddSample	src/intersim/stats.cpp	/^void Stats::AddSample( int val )$/;"	f	class:Stats
AddSample	src/intersim2/stats.cpp	/^void Stats::AddSample( double val )$/;"	f	class:Stats
AddSample	src/intersim2/stats.hpp	/^  inline void AddSample( int val ) {$/;"	f	class:Stats
AddStrField	src/intersim/config_utils.cpp	/^void Configuration::AddStrField( const string &field, const string &value )$/;"	f	class:Configuration
AddStrField	src/intersim2/config_utils.cpp	/^void Configuration::AddStrField(string const & field, string const & value)$/;"	f	class:Configuration
Add_htree	src/gpuwattch/cacti/basic_circuit.h	/^    Add_htree,$/;"	e	enum:Htree_type
Advance	src/intersim/pipefifo.hpp	/^template<class T> void PipelineFIFO<T>::Advance( )$/;"	f	class:PipelineFIFO
Advance	src/intersim2/interconnect_interface.cpp	/^void InterconnectInterface::Advance()$/;"	f	class:InterconnectInterface
Advance	src/intersim2/pipefifo.hpp	/^template<class T> void PipelineFIFO<T>::Advance( )$/;"	f	class:PipelineFIFO
AdvanceTime	src/intersim/vc.cpp	/^void VC::AdvanceTime( )$/;"	f	class:VC
Allocate	src/intersim/islip.cpp	/^void iSLIP_Sparse::Allocate( )$/;"	f	class:iSLIP_Sparse
Allocate	src/intersim/loa.cpp	/^void LOA::Allocate( )$/;"	f	class:LOA
Allocate	src/intersim/maxsize.cpp	/^void MaxSizeMatch::Allocate( )$/;"	f	class:MaxSizeMatch
Allocate	src/intersim/pim.cpp	/^void PIM::Allocate( )$/;"	f	class:PIM
Allocate	src/intersim/selalloc.cpp	/^void SelAlloc::Allocate( )$/;"	f	class:SelAlloc
Allocate	src/intersim/wavefront.cpp	/^void Wavefront::Allocate( )$/;"	f	class:Wavefront
Allocate	src/intersim2/allocators/islip.cpp	/^void iSLIP_Sparse::Allocate( )$/;"	f	class:iSLIP_Sparse
Allocate	src/intersim2/allocators/loa.cpp	/^void LOA::Allocate( )$/;"	f	class:LOA
Allocate	src/intersim2/allocators/maxsize.cpp	/^void MaxSizeMatch::Allocate( )$/;"	f	class:MaxSizeMatch
Allocate	src/intersim2/allocators/pim.cpp	/^void PIM::Allocate( )$/;"	f	class:PIM
Allocate	src/intersim2/allocators/selalloc.cpp	/^void SelAlloc::Allocate( )$/;"	f	class:SelAlloc
Allocate	src/intersim2/allocators/separable_input_first.cpp	/^void SeparableInputFirstAllocator::Allocate() {$/;"	f	class:SeparableInputFirstAllocator
Allocate	src/intersim2/allocators/separable_output_first.cpp	/^void SeparableOutputFirstAllocator::Allocate() {$/;"	f	class:SeparableOutputFirstAllocator
Allocate	src/intersim2/allocators/wavefront.cpp	/^void Wavefront::Allocate( )$/;"	f	class:Wavefront
Allocator	src/intersim/allocator.cpp	/^Allocator::Allocator( const Configuration &config,$/;"	f	class:Allocator
Allocator	src/intersim/allocator.hpp	/^class Allocator : public Module {$/;"	c
Allocator	src/intersim2/allocators/allocator.cpp	/^Allocator::Allocator( Module *parent, const string& name,$/;"	f	class:Allocator
Allocator	src/intersim2/allocators/allocator.hpp	/^class Allocator : public Module {$/;"	c
Allocators	src/intersim/doc/manual.tex	/^independent of the number of VCs.$/;"	u
AnyNet	src/intersim2/networks/anynet.cpp	/^AnyNet::AnyNet( const Configuration &config, const string & name )$/;"	f	class:AnyNet
AnyNet	src/intersim2/networks/anynet.hpp	/^class AnyNet : public Network {$/;"	c
App1_write_hit	src/gpgpu-sim/gpu-cache.cc	/^unsigned long long App1_write_hit = 0;$/;"	v
App2_write_hit	src/gpgpu-sim/gpu-cache.cc	/^unsigned long long App2_write_hit = 0;$/;"	v
Arbiter	src/intersim/arbiter.cpp	/^Arbiter::Arbiter( const Configuration &,$/;"	f	class:Arbiter
Arbiter	src/intersim/arbiter.hpp	/^class Arbiter : public Module {$/;"	c
Arbiter	src/intersim2/arbiters/arbiter.cpp	/^Arbiter::Arbiter( Module *parent, const string &name, int size )$/;"	f	class:Arbiter
Arbiter	src/intersim2/arbiters/arbiter.hpp	/^class Arbiter : public Module {$/;"	c
Arbitrate	src/intersim/arbiter.cpp	/^void PriorityArbiter::Arbitrate( )$/;"	f	class:PriorityArbiter
Arbitrate	src/intersim2/arbiters/arbiter.cpp	/^int Arbiter::Arbitrate( int* id, int* pri )$/;"	f	class:Arbiter
Arbitrate	src/intersim2/arbiters/matrix_arb.cpp	/^int MatrixArbiter::Arbitrate( int* id, int* pri ) {$/;"	f	class:MatrixArbiter
Arbitrate	src/intersim2/arbiters/prio_arb.cpp	/^void PriorityArbiter::Arbitrate( )$/;"	f	class:PriorityArbiter
Arbitrate	src/intersim2/arbiters/roundrobin_arb.cpp	/^int RoundRobinArbiter::Arbitrate( int* id, int* pri ) {$/;"	f	class:RoundRobinArbiter
Arbitrate	src/intersim2/arbiters/tree_arb.cpp	/^int TreeArbiter::Arbitrate( int* id, int* pri ) {$/;"	f	class:TreeArbiter
Area	src/gpuwattch/cacti/area.h	/^  Area():w(0), h(0), area(0) { }$/;"	f	class:Area
Area	src/gpuwattch/cacti/area.h	/^class Area$/;"	c
ArrayST	src/gpuwattch/array.cc	/^ArrayST::ArrayST(const InputParameter *configure_interface,$/;"	f	class:ArrayST
ArrayST	src/gpuwattch/array.h	/^  ArrayST(){};$/;"	f	class:ArrayST
ArrayST	src/gpuwattch/array.h	/^class ArrayST :public Component{$/;"	c
Assign	src/intersim/config_utils.cpp	/^void Configuration::Assign( const string &field, const string &value )$/;"	f	class:Configuration
Assign	src/intersim/config_utils.cpp	/^void Configuration::Assign( const string &field, double value )$/;"	f	class:Configuration
Assign	src/intersim/config_utils.cpp	/^void Configuration::Assign( const string &field, unsigned int value )$/;"	f	class:Configuration
Assign	src/intersim2/config_utils.cpp	/^void Configuration::Assign(string const & field, double value)$/;"	f	class:Configuration
Assign	src/intersim2/config_utils.cpp	/^void Configuration::Assign(string const & field, int value)$/;"	f	class:Configuration
Assign	src/intersim2/config_utils.cpp	/^void Configuration::Assign(string const & field, string const & value)$/;"	f	class:Configuration
AsymmetricTrafficPattern	src/intersim2/traffic.cpp	/^AsymmetricTrafficPattern::AsymmetricTrafficPattern(int nodes)$/;"	f	class:AsymmetricTrafficPattern
AsymmetricTrafficPattern	src/intersim2/traffic.hpp	/^class AsymmetricTrafficPattern : public RandomTrafficPattern {$/;"	c
Attrib	src/gpuwattch/xmlParser.cc	/^typedef enum Attrib$/;"	g	file:
Attrib	src/gpuwattch/xmlParser.cc	/^} Attrib;$/;"	t	typeref:enum:Attrib	file:
AvailableFor	src/intersim2/buffer_state.cpp	/^int BufferState::FeedbackSharedBufferPolicy::AvailableFor(int vc) const$/;"	f	class:BufferState::FeedbackSharedBufferPolicy
AvailableFor	src/intersim2/buffer_state.cpp	/^int BufferState::LimitedSharedBufferPolicy::AvailableFor(int vc) const$/;"	f	class:BufferState::LimitedSharedBufferPolicy
AvailableFor	src/intersim2/buffer_state.cpp	/^int BufferState::PrivateBufferPolicy::AvailableFor(int vc) const$/;"	f	class:BufferState::PrivateBufferPolicy
AvailableFor	src/intersim2/buffer_state.cpp	/^int BufferState::SharedBufferPolicy::AvailableFor(int vc) const$/;"	f	class:BufferState::SharedBufferPolicy
AvailableFor	src/intersim2/buffer_state.hpp	/^  inline int AvailableFor( int vc = 0 ) const {$/;"	f	class:BufferState
Average	launcher/stats/stats.h	/^class Average : public ScalarBase<AverageScalarStorage, double> {$/;"	c	namespace:Stats
Average	src/intersim/stats.cpp	/^double Stats::Average( ) const$/;"	f	class:Stats
Average	src/intersim2/stats.cpp	/^double Stats::Average( ) const$/;"	f	class:Stats
Average	src/ramulator_sim/StatType.h	/^  Average(): current(0), lastReset(0), total_val(0), last(0) {}$/;"	f	class:Stats_Ram::Average
Average	src/ramulator_sim/StatType.h	/^class Average: public ScalarBase<Average> {$/;"	c	namespace:Stats_Ram
AverageDeviation	src/ramulator_sim/StatType.h	/^  AverageDeviation(): sum(Counter()), squares(Counter()) {}$/;"	f	class:Stats_Ram::AverageDeviation
AverageDeviation	src/ramulator_sim/StatType.h	/^class AverageDeviation: public Stat<AverageDeviation> {$/;"	c	namespace:Stats_Ram
AverageDeviationStat	src/ramulator_sim/Statistics.h	/^class AverageDeviationStat : public DistStatBase<Stats_Ram::AverageDeviation> {$/;"	c
AverageScalarStorage	launcher/stats/stats.h	/^  AverageScalarStorage()$/;"	f	class:Stats::AverageScalarStorage
AverageScalarStorage	launcher/stats/stats.h	/^class AverageScalarStorage : ScalarStorage<double> {$/;"	c	namespace:Stats
AverageStat	src/ramulator_sim/Statistics.h	/^class AverageStat : public ScalarStatBase<Stats_Ram::Average> {$/;"	c
AverageVector	src/ramulator_sim/StatType.h	/^class AverageVector: public VectorBase<AverageVector, Average> {$/;"	c	namespace:Stats_Ram
AverageVectorStat	src/ramulator_sim/Statistics.h	/^class AverageVectorStat : public VectorStatBase<Stats_Ram::AverageVector, Stats_Ram::Average> {$/;"	c
B16_TYPE	build/src/cuda-sim/ptx.tab.c	/^    B16_TYPE = 311,$/;"	e	enum:yytokentype	file:
B16_TYPE	build/src/cuda-sim/ptx.tab.h	/^    B16_TYPE = 311,$/;"	e	enum:yytokentype
B32_TYPE	build/src/cuda-sim/ptx.tab.c	/^    B32_TYPE = 312,$/;"	e	enum:yytokentype	file:
B32_TYPE	build/src/cuda-sim/ptx.tab.h	/^    B32_TYPE = 312,$/;"	e	enum:yytokentype
B64_TYPE	build/src/cuda-sim/ptx.tab.c	/^    B64_TYPE = 313,$/;"	e	enum:yytokentype	file:
B64_TYPE	build/src/cuda-sim/ptx.tab.h	/^    B64_TYPE = 313,$/;"	e	enum:yytokentype
B8_TYPE	build/src/cuda-sim/ptx.tab.c	/^    B8_TYPE = 310,$/;"	e	enum:yytokentype	file:
B8_TYPE	build/src/cuda-sim/ptx.tab.h	/^    B8_TYPE = 310,$/;"	e	enum:yytokentype
BACKSLASH	build/src/cuda-sim/ptx.tab.c	/^    BACKSLASH = 361,$/;"	e	enum:yytokentype	file:
BACKSLASH	build/src/cuda-sim/ptx.tab.h	/^    BACKSLASH = 361,$/;"	e	enum:yytokentype
BALLOT_OPTION	build/src/cuda-sim/ptx.tab.c	/^    BALLOT_OPTION = 396,$/;"	e	enum:yytokentype	file:
BALLOT_OPTION	build/src/cuda-sim/ptx.tab.h	/^    BALLOT_OPTION = 396,$/;"	e	enum:yytokentype
BARRIER_OP	src/abstract_hardware_model.h	/^   BARRIER_OP,$/;"	e	enum:uarch_op_t
BASE64DECODE_READ_NEXT_CHAR	src/gpuwattch/xmlParser.cc	2823;"	d	file:
BASE64DECODE_READ_NEXT_CHAR	src/gpuwattch/xmlParser.cc	2872;"	d	file:
BASIC_COMPONENTS_H_	src/gpuwattch/basic_components.h	33;"	d
BB128_TYPE	build/src/cuda-sim/ptx.tab.c	/^    BB128_TYPE = 315,$/;"	e	enum:yytokentype	file:
BB128_TYPE	build/src/cuda-sim/ptx.tab.h	/^    BB128_TYPE = 315,$/;"	e	enum:yytokentype
BB64_TYPE	build/src/cuda-sim/ptx.tab.c	/^    BB64_TYPE = 314,$/;"	e	enum:yytokentype	file:
BB64_TYPE	build/src/cuda-sim/ptx.tab.h	/^    BB64_TYPE = 314,$/;"	e	enum:yytokentype
BEGIN	build/src/cuda-sim/lex.ptx_.c	145;"	d	file:
BEGIN	build/src/cuda-sim/lex.ptxinfo_.c	145;"	d	file:
BEGIN	src/intersim2/lex.yy.c	125;"	d	file:
BIGNUM	src/gpuwattch/cacti/const.h	103;"	d
BK	src/gpgpu-sim/addrdec.h	/^      BK    = 3,$/;"	e	enum:linear_to_raw_address_translation::__anon29
BK_CONF	src/gpgpu-sim/stats.h	/^   BK_CONF,$/;"	e	enum:mem_stage_stall_type
BL	src/gpgpu-sim/gpu-sim.h	/^   unsigned BL;     \/\/Burst Length in bytes (4 in GDDR3, 8 in GDDR5)$/;"	m	struct:memory_config
BPT	src/gpuwattch/core.h	/^	BranchPredictor * BPT;$/;"	m	class:InstFetchU
BRANCHTARGETS_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    BRANCHTARGETS_DIRECTIVE = 261,$/;"	e	enum:yytokentype	file:
BRANCHTARGETS_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    BRANCHTARGETS_DIRECTIVE = 261,$/;"	e	enum:yytokentype
BRANCH_OP	src/abstract_hardware_model.h	/^   BRANCH_OP,$/;"	e	enum:uarch_op_t
BR_duty_cycle	src/gpuwattch/XML_Parse.h	/^	double BR_duty_cycle ;$/;"	m	struct:__anon15
BR_duty_cycle	src/gpuwattch/basic_components.h	/^	double IFU_duty_cycle,BR_duty_cycle,LSU_duty_cycle,MemManU_I_duty_cycle,$/;"	m	class:CoreDynParam
BTB	src/gpuwattch/XML_Parse.h	/^	BTB_systemcore BTB;$/;"	m	struct:__anon15
BTB	src/gpuwattch/core.h	/^	ArrayST * BTB;$/;"	m	class:InstFetchU
BTBEntries	src/gpuwattch/arch_const.h	/^const int BTBEntries=4096;$/;"	v
BTBTagSize	src/gpuwattch/arch_const.h	/^const int BTBTagSize=16;$/;"	v
BTB_config	src/gpuwattch/XML_Parse.h	/^	int BTB_config[20];$/;"	m	struct:__anon14
BTB_systemcore	src/gpuwattch/XML_Parse.h	/^} BTB_systemcore;$/;"	t	typeref:struct:__anon14
BUFFER_SEPARATION_LENGTH_MULTIPLIER	src/gpuwattch/cacti/const.h	165;"	d
BULK_CU_RESISTIVITY	src/gpuwattch/cacti/const.h	/^const double BULK_CU_RESISTIVITY = 0.018; \/\/ohm-micron$/;"	v
BURST	src/gpgpu-sim/addrdec.h	/^      BURST = 6,$/;"	e	enum:linear_to_raw_address_translation::__anon29
BYTES	build/src/cuda-sim/ptxinfo.tab.c	/^    BYTES = 264,$/;"	e	enum:yytokentype	file:
BYTES	build/src/cuda-sim/ptxinfo.tab.h	/^    BYTES = 264,$/;"	e	enum:yytokentype
BYTE_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    BYTE_DIRECTIVE = 262,$/;"	e	enum:yytokentype	file:
BYTE_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    BYTE_DIRECTIVE = 262,$/;"	e	enum:yytokentype
BadPermDFlyTrafficPattern	src/intersim2/traffic.cpp	/^BadPermDFlyTrafficPattern::BadPermDFlyTrafficPattern(int nodes, int k, int n)$/;"	f	class:BadPermDFlyTrafficPattern
BadPermDFlyTrafficPattern	src/intersim2/traffic.hpp	/^class BadPermDFlyTrafficPattern : public DigitPermutationTrafficPattern {$/;"	c
BadPermYarcTrafficPattern	src/intersim2/traffic.cpp	/^BadPermYarcTrafficPattern::BadPermYarcTrafficPattern(int nodes, int k, int n, $/;"	f	class:BadPermYarcTrafficPattern
BadPermYarcTrafficPattern	src/intersim2/traffic.hpp	/^class BadPermYarcTrafficPattern : public DigitPermutationTrafficPattern {$/;"	c
Bank	src/gpuwattch/cacti/bank.cc	/^Bank::Bank(const DynamicParameter & dyn_p):$/;"	f	class:Bank
Bank	src/gpuwattch/cacti/bank.h	/^class Bank : public Component$/;"	c
Bank	src/ramulator_sim/ALDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ALDRAM::Level
Bank	src/ramulator_sim/DDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:DDR3::Level
Bank	src/ramulator_sim/DDR4.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:DDR4::Level
Bank	src/ramulator_sim/DSARP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:DSARP::Level
Bank	src/ramulator_sim/GDDR5.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:GDDR5::Level
Bank	src/ramulator_sim/HBM.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:HBM::Level
Bank	src/ramulator_sim/LPDDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:LPDDR3::Level
Bank	src/ramulator_sim/LPDDR4.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:LPDDR4::Level
Bank	src/ramulator_sim/SALP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:SALP::Level
Bank	src/ramulator_sim/TLDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:TLDRAM::Level
Bank	src/ramulator_sim/WideIO.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:WideIO::Level
Bank	src/ramulator_sim/WideIO2.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:WideIO2::Level
BankGroup	src/ramulator_sim/DDR4.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:DDR4::Level
BankGroup	src/ramulator_sim/GDDR5.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:GDDR5::Level
BankGroup	src/ramulator_sim/HBM.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:HBM::Level
BatchTrafficManager	src/intersim2/batchtrafficmanager.cpp	/^BatchTrafficManager::BatchTrafficManager( const Configuration &config, $/;"	f	class:BatchTrafficManager
BatchTrafficManager	src/intersim2/batchtrafficmanager.hpp	/^class BatchTrafficManager : public TrafficManager {$/;"	c
BernoulliInjectionProcess	src/intersim2/injection.cpp	/^BernoulliInjectionProcess::BernoulliInjectionProcess(int nodes, double rate)$/;"	f	class:BernoulliInjectionProcess
BernoulliInjectionProcess	src/intersim2/injection.hpp	/^class BernoulliInjectionProcess : public InjectionProcess {$/;"	c
BitCompTrafficPattern	src/intersim2/traffic.cpp	/^BitCompTrafficPattern::BitCompTrafficPattern(int nodes)$/;"	f	class:BitCompTrafficPattern
BitCompTrafficPattern	src/intersim2/traffic.hpp	/^class BitCompTrafficPattern : public BitPermutationTrafficPattern {$/;"	c
BitPermutationTrafficPattern	src/intersim2/traffic.cpp	/^BitPermutationTrafficPattern::BitPermutationTrafficPattern(int nodes)$/;"	f	class:BitPermutationTrafficPattern
BitPermutationTrafficPattern	src/intersim2/traffic.hpp	/^class BitPermutationTrafficPattern : public PermutationTrafficPattern {$/;"	c
BitRevTrafficPattern	src/intersim2/traffic.cpp	/^BitRevTrafficPattern::BitRevTrafficPattern(int nodes)$/;"	f	class:BitRevTrafficPattern
BitRevTrafficPattern	src/intersim2/traffic.hpp	/^class BitRevTrafficPattern : public BitPermutationTrafficPattern {$/;"	c
Block_width_of_DRAM_chip	src/gpuwattch/XML_Parse.h	/^	int Block_width_of_DRAM_chip;$/;"	m	struct:__anon22
BookSimConfig	src/intersim/booksim_config.cpp	/^BookSimConfig::BookSimConfig( )$/;"	f	class:BookSimConfig
BookSimConfig	src/intersim/booksim_config.hpp	/^class BookSimConfig : public Configuration {$/;"	c
BookSimConfig	src/intersim2/booksim_config.cpp	/^BookSimConfig::BookSimConfig( )$/;"	f	class:BookSimConfig
BookSimConfig	src/intersim2/booksim_config.hpp	/^class BookSimConfig : public Configuration {$/;"	c
BranchPredictor	src/gpuwattch/core.cc	/^BranchPredictor::BranchPredictor(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_, const CoreDynParam & dyn_p_, bool exist_)$/;"	f	class:BranchPredictor
BranchPredictor	src/gpuwattch/core.h	/^class BranchPredictor :public Component {$/;"	c
Buffer	src/intersim2/buffer.cpp	/^Buffer::Buffer( const Configuration& config, int outputs, $/;"	f	class:Buffer
Buffer	src/intersim2/buffer.hpp	/^class Buffer : public Module {$/;"	c
BufferMonitor	src/intersim2/power/buffer_monitor.cpp	/^BufferMonitor::BufferMonitor( int inputs, int classes ) $/;"	f	class:BufferMonitor
BufferMonitor	src/intersim2/power/buffer_monitor.hpp	/^class BufferMonitor {$/;"	c
BufferPolicy	src/intersim2/buffer_state.cpp	/^BufferState::BufferPolicy::BufferPolicy(Configuration const & config, BufferState * parent, const string & name)$/;"	f	class:BufferState::BufferPolicy
BufferPolicy	src/intersim2/buffer_state.hpp	/^  class BufferPolicy : public Module {$/;"	c	class:BufferState
BufferState	src/intersim/buffer_state.cpp	/^BufferState::BufferState( const Configuration& config, $/;"	f	class:BufferState
BufferState	src/intersim/buffer_state.hpp	/^    BufferState() : Module( ) {}$/;"	f	class:BufferState
BufferState	src/intersim/buffer_state.hpp	/^class BufferState : public Module {$/;"	c
BufferState	src/intersim2/buffer_state.cpp	/^BufferState::BufferState( const Configuration& config, Module *parent, const string& name ) : $/;"	f	class:BufferState
BufferState	src/intersim2/buffer_state.hpp	/^class BufferState : public Module {$/;"	c
Busy	src/intersim2/interconnect_interface.cpp	/^bool InterconnectInterface::Busy() const$/;"	f	class:InterconnectInterface
CACHE_ALL	src/abstract_hardware_model.h	/^    CACHE_ALL,          \/\/ .ca$/;"	e	enum:cache_operator_type
CACHE_GLOBAL	src/abstract_hardware_model.h	/^    CACHE_GLOBAL,       \/\/ .cg$/;"	e	enum:cache_operator_type
CACHE_LAST_USE	src/abstract_hardware_model.h	/^    CACHE_LAST_USE,     \/\/ .lu$/;"	e	enum:cache_operator_type
CACHE_STREAMING	src/abstract_hardware_model.h	/^    CACHE_STREAMING,    \/\/ .cs$/;"	e	enum:cache_operator_type
CACHE_TYPE_L1	src/gpgpu-sim/gpu-cache.h	/^      CACHE_TYPE_L1,$/;"	e	enum:baseline_cache::CacheType
CACHE_TYPE_L2	src/gpgpu-sim/gpu-cache.h	/^      CACHE_TYPE_L2,$/;"	e	enum:baseline_cache::CacheType
CACHE_TYPE_OTHER	src/gpgpu-sim/gpu-cache.h	/^      CACHE_TYPE_OTHER,$/;"	e	enum:baseline_cache::CacheType
CACHE_UNDEFINED	src/abstract_hardware_model.h	/^    CACHE_UNDEFINED, $/;"	e	enum:cache_operator_type
CACHE_VOLATILE	src/abstract_hardware_model.h	/^    CACHE_VOLATILE,     \/\/ .cv$/;"	e	enum:cache_operator_type
CACHE_WRITE_BACK	src/abstract_hardware_model.h	/^    CACHE_WRITE_BACK,   \/\/ .wb$/;"	e	enum:cache_operator_type
CACHE_WRITE_THROUGH	src/abstract_hardware_model.h	/^    CACHE_WRITE_THROUGH \/\/ .wt$/;"	e	enum:cache_operator_type
CALLPROTOTYPE_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    CALLPROTOTYPE_DIRECTIVE = 263,$/;"	e	enum:yytokentype	file:
CALLPROTOTYPE_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    CALLPROTOTYPE_DIRECTIVE = 263,$/;"	e	enum:yytokentype
CALLTARGETS_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    CALLTARGETS_DIRECTIVE = 264,$/;"	e	enum:yytokentype	file:
CALLTARGETS_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    CALLTARGETS_DIRECTIVE = 264,$/;"	e	enum:yytokentype
CALL_OPS	src/abstract_hardware_model.h	/^   CALL_OPS,$/;"	e	enum:uarch_op_t
CAMbased	src/gpuwattch/basic_components.h	/^	CAMbased$/;"	e	enum:Renaming_type
CA_OPTION	build/src/cuda-sim/ptx.tab.c	/^    CA_OPTION = 403,$/;"	e	enum:yytokentype	file:
CA_OPTION	build/src/cuda-sim/ptx.tab.h	/^    CA_OPTION = 403,$/;"	e	enum:yytokentype
CB_ADJ	src/gpuwattch/cacti/crossbar.h	/^	  double CB_ADJ;$/;"	m	class:Crossbar
CC	src/gpuwattch/cacti/cacti.mk	/^	CC  = gcc -m32$/;"	m
CC	src/gpuwattch/cacti/cacti.mk	/^	CC  = gcc -m64$/;"	m
CC	src/gpuwattch/mcpat.mk	/^	CC  = gcc -m32$/;"	m
CC	src/gpuwattch/mcpat.mk	/^	CC  = gcc -m64$/;"	m
CC	src/gpuwattch/mcpat.mk	/^CC=$/;"	m
CC	src/gpuwattch/mcpatXeonCore.mk	/^CC  = gcc -m32$/;"	m
CC	src/intersim2/Makefile	/^CC = gcc$/;"	m
CC	src/ramulator_sim/Makefile	/^CC = gcc$/;"	m
CCP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   CCP,$/;"	e	enum:pwr_cmp_t	file:
CC_H	src/gpuwattch/XML_Parse.h	/^   CC_H,$/;"	e	enum:perf_count_t
CC_M	src/gpuwattch/XML_Parse.h	/^   CC_M,$/;"	e	enum:perf_count_t
CCdir	src/gpuwattch/sharedcache.h	/^class CCdir :public Component{$/;"	c
CF_OPTION	build/src/cuda-sim/ptx.tab.c	/^    CF_OPTION = 344,$/;"	e	enum:yytokentype	file:
CF_OPTION	build/src/cuda-sim/ptx.tab.h	/^    CF_OPTION = 344,$/;"	e	enum:yytokentype
CG_OPTION	build/src/cuda-sim/ptx.tab.c	/^    CG_OPTION = 404,$/;"	e	enum:yytokentype	file:
CG_OPTION	build/src/cuda-sim/ptx.tab.h	/^    CG_OPTION = 404,$/;"	e	enum:yytokentype
CHECK_UNSIGNED	build/src/cuda-sim/lex.ptx_.c	1367;"	d	file:
CHILD_TO_PARENT_PIPE_PREFIX	launcher/communicate.cc	/^const std::string Communicate::CHILD_TO_PARENT_PIPE_PREFIX = ".gpgpu-sim_ctop_";$/;"	m	class:Communicate	file:
CHILD_TO_PARENT_PIPE_PREFIX	launcher/communicate.h	/^  static const std::string CHILD_TO_PARENT_PIPE_PREFIX;$/;"	m	class:Communicate
CHIP	src/gpgpu-sim/addrdec.h	/^      CHIP  = 0,$/;"	e	enum:linear_to_raw_address_translation::__anon29
CHIPLET	src/gpgpu-sim/gpu-sim.cc	96;"	d	file:
CL	src/gpgpu-sim/gpu-sim.h	/^   unsigned CL;     \/\/CAS latency$/;"	m	struct:memory_config
CLOCK64_REG	src/cuda-sim/opcodes.h	/^   CLOCK64_REG,$/;"	e	enum:special_regs
CLOCKRATE	src/gpuwattch/arch_const.h	/^const double 		CLOCKRATE 		= 	1.2*1e9;$/;"	v
CLOCK_REG	src/cuda-sim/opcodes.h	/^   CLOCK_REG,$/;"	e	enum:special_regs
CMEM	build/src/cuda-sim/ptxinfo.tab.c	/^    CMEM = 267,$/;"	e	enum:yytokentype	file:
CMEM	build/src/cuda-sim/ptxinfo.tab.h	/^    CMEM = 267,$/;"	e	enum:yytokentype
CMesh	src/intersim2/networks/cmesh.cpp	/^CMesh::CMesh( const Configuration& config, const string & name ) $/;"	f	class:CMesh
CMesh	src/intersim2/networks/cmesh.hpp	/^class CMesh : public Network {$/;"	c
COALESCE_SCALE	src/gpuwattch/memoryctrl.cc	610;"	d	file:
COALESCE_SCALE	src/gpuwattch/processor.h	103;"	d
COAL_STALL	src/gpgpu-sim/stats.h	/^   COAL_STALL,$/;"	e	enum:mem_stage_stall_type
COL	src/gpgpu-sim/addrdec.h	/^      COL   = 5,$/;"	e	enum:linear_to_raw_address_translation::__anon29
COLD	src/ramulator_sim/ALDRAM.h	/^        COLD, HOT, MAX$/;"	m	class:ALDRAM::Temp
COLON	build/src/cuda-sim/ptx.tab.c	/^    COLON = 353,$/;"	e	enum:yytokentype	file:
COLON	build/src/cuda-sim/ptx.tab.h	/^    COLON = 353,$/;"	e	enum:yytokentype
COLON	build/src/cuda-sim/ptxinfo.tab.c	/^    COLON = 273,$/;"	e	enum:yytokentype	file:
COLON	build/src/cuda-sim/ptxinfo.tab.h	/^    COLON = 273,$/;"	e	enum:yytokentype
COLUMNS	src/gpuwattch/cacti/highradix.h	/^    double COLUMNS;$/;"	m	class:HighRadix
COL_BUFF_ENT	src/gpuwattch/cacti/highradix.h	/^    double COL_BUFF_ENT;$/;"	m	class:HighRadix
COL_BUFF_SZ	src/gpuwattch/cacti/highradix.h	/^    double COL_BUFF_SZ;$/;"	m	class:HighRadix
COMMA	build/src/cuda-sim/ptx.tab.c	/^    COMMA = 323,$/;"	e	enum:yytokentype	file:
COMMA	build/src/cuda-sim/ptx.tab.h	/^    COMMA = 323,$/;"	e	enum:yytokentype
COMMA	build/src/cuda-sim/ptxinfo.tab.c	/^    COMMA = 270,$/;"	e	enum:yytokentype	file:
COMMA	build/src/cuda-sim/ptxinfo.tab.h	/^    COMMA = 270,$/;"	e	enum:yytokentype
COMMON_TYPES_H_	common/types.h	2;"	d
CONCRETE_SCHEDULER_GTO	src/gpgpu-sim/shader.h	/^    CONCRETE_SCHEDULER_GTO,$/;"	e	enum:concrete_scheduler
CONCRETE_SCHEDULER_LRR	src/gpgpu-sim/shader.h	/^    CONCRETE_SCHEDULER_LRR = 0,$/;"	e	enum:concrete_scheduler
CONCRETE_SCHEDULER_TWO_LEVEL_ACTIVE	src/gpgpu-sim/shader.h	/^    CONCRETE_SCHEDULER_TWO_LEVEL_ACTIVE,$/;"	e	enum:concrete_scheduler
CONCRETE_SCHEDULER_WARP_LIMITING	src/gpgpu-sim/shader.h	/^    CONCRETE_SCHEDULER_WARP_LIMITING,$/;"	e	enum:concrete_scheduler
CONSTANT	src/gpgpu-sim/stat-tool.cc	/^   NORMAL, TEXTURE, CONSTANT, INSTRUCTION$/;"	e	enum:cache_access_logger_types	file:
CONSTPTR_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    CONSTPTR_DIRECTIVE = 266,$/;"	e	enum:yytokentype	file:
CONSTPTR_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    CONSTPTR_DIRECTIVE = 266,$/;"	e	enum:yytokentype
CONST_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    CONST_DIRECTIVE = 265,$/;"	e	enum:yytokentype	file:
CONST_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    CONST_DIRECTIVE = 265,$/;"	e	enum:yytokentype
CONST_DYNAMICN	src/gpuwattch/XML_Parse.h	/^   CONST_DYNAMICN,$/;"	e	enum:perf_count_t
CONST_DYNAMICP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   CONST_DYNAMICP,$/;"	e	enum:pwr_cmp_t	file:
CONST_MSHR_MERGE	src/gpgpu-sim/gpu-sim.h	55;"	d
CONTEXT_READ_REPLY	src/gpgpu-sim/mem_fetch.h	/^   CONTEXT_READ_REPLY, \/\/ add by kain$/;"	e	enum:context_type
CONTEXT_READ_REQUEST	src/gpgpu-sim/mem_fetch.h	/^   CONTEXT_READ_REQUEST ,\/\/add by kain$/;"	e	enum:context_type
CONTEXT_WRITE_ACK	src/gpgpu-sim/mem_fetch.h	/^   CONTEXT_WRITE_ACK\/\/add by kain$/;"	e	enum:context_type
CONTEXT_WRITE_REQUEST	src/gpgpu-sim/mem_fetch.h	/^   CONTEXT_WRITE_REQUEST, \/\/ add by kain$/;"	e	enum:context_type
CONTR_2_BANK_LAT	src/gpuwattch/cacti/nuca.cc	41;"	d	file:
CORE	src/gpgpu-sim/gpu-sim.cc	92;"	d	file:
CORE_H_	src/gpuwattch/core.h	41;"	d
CPP	src/cuda-sim/Makefile	/^CPP = $(CXX)$/;"	m
CPP	src/gpgpu-sim/Makefile	/^CPP = $(CXX)$/;"	m
CPPFLAGS	src/intersim2/Makefile	/^CPPFLAGS = -Wall $(INCPATH) -O2 -fPIC $(DEFINE)$/;"	m
CPP_SRCS	src/intersim2/Makefile	/^CPP_SRCS =  \\$/;"	m
CPP_SRCS	src/ramulator_sim/Makefile	/^CPP_SRCS = $(wildcard *.cpp)$/;"	m
CPX_NUMBER_INPUT_PORTS_CROSSBAR	src/gpuwattch/arch_const.h	/^const int CPX_NUMBER_INPUT_PORTS_CROSSBAR = 5;$/;"	v
CPX_NUMBER_OUTPUT_PORTS_CROSSBAR	src/gpuwattch/arch_const.h	/^const int CPX_NUMBER_OUTPUT_PORTS_CROSSBAR = 8;$/;"	v
CPX_NUMBER_SIGNALS_PER_PORT_CROSSBAR	src/gpuwattch/arch_const.h	/^const int CPX_NUMBER_SIGNALS_PER_PORT_CROSSBAR =150;$/;"	v
CREATELOG	src/gpgpu-sim/gpu-sim.h	61;"	d
CREATE_LIBRARY	src/Makefile	/^	make "CREATE_LIBRARY=1" -C .\/ramulator_sim$/;"	m
CREATE_LIBRARY	src/ramulator_sim/Makefile	/^CREATE_LIBRARY ?= 0$/;"	m
CSRCS	src/gpgpu-sim/Makefile	/^CSRCS = $(filter-out $(EXCLUDES), $(SRCS))$/;"	m
CS_OPTION	build/src/cuda-sim/ptx.tab.c	/^    CS_OPTION = 405,$/;"	e	enum:yytokentype	file:
CS_OPTION	build/src/cuda-sim/ptx.tab.h	/^    CS_OPTION = 405,$/;"	e	enum:yytokentype
CTAID_REG	src/cuda-sim/opcodes.h	/^   CTAID_REG,$/;"	e	enum:special_regs
CTA_FINISH_FLUSH	src/gpgpu-sim/shader.h	/^      CTA_FINISH_FLUSH,$/;"	e	enum:shader_core_ctx::CTA_FINISH_STATUS
CTA_FINISH_NORMAL	src/gpgpu-sim/shader.h	/^      CTA_FINISH_NORMAL,$/;"	e	enum:shader_core_ctx::CTA_FINISH_STATUS
CTA_FINISH_NUM	src/gpgpu-sim/shader.h	/^      CTA_FINISH_NUM$/;"	e	enum:shader_core_ctx::CTA_FINISH_STATUS
CTA_FINISH_STATUS	src/gpgpu-sim/shader.h	/^    enum CTA_FINISH_STATUS {$/;"	g	class:shader_core_ctx
CTA_FINISH_SWITCH	src/gpgpu-sim/shader.h	/^      CTA_FINISH_SWITCH,$/;"	e	enum:shader_core_ctx::CTA_FINISH_STATUS
CTA_OPTION	build/src/cuda-sim/ptx.tab.c	/^    CTA_OPTION = 398,$/;"	e	enum:yytokentype	file:
CTA_OPTION	build/src/cuda-sim/ptx.tab.h	/^    CTA_OPTION = 398,$/;"	e	enum:yytokentype
CTA_STAT_CONTEXT_H_	common/cta_stat_context.h	2;"	d
CTA_executes_atomic	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::CTA_executes_atomic(kernel_info_t* kernel, const unsigned shader_id, const unsigned cta_id)$/;"	f	class:DynamicScheduler
CTA_executes_atomic	launcher/mk-sched/mk_scheduler.h	/^  virtual void CTA_executes_atomic(kernel_info_t* kernel, const unsigned shader_id, const unsigned cta_id)  {}$/;"	f	class:StaticScheduler
CTA_finished_number_stream1	src/gpgpu-sim/gpu-sim.cc	/^unsigned CTA_finished_number_stream1 = 0;$/;"	v
CTA_finished_number_stream2	src/gpgpu-sim/gpu-sim.cc	/^unsigned CTA_finished_number_stream2 = 0;$/;"	v
CTA_finished_number_stream3	src/gpgpu-sim/gpu-sim.cc	/^unsigned CTA_finished_number_stream3 = 0;$/;"	v
CTA_finished_number_stream4	src/gpgpu-sim/gpu-sim.cc	/^unsigned CTA_finished_number_stream4 = 0;$/;"	v
CTA_overwrites_input	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::CTA_overwrites_input(kernel_info_t* kernel, const unsigned shader_id, const unsigned cta_id)$/;"	f	class:DynamicScheduler
CTA_overwrites_input	launcher/mk-sched/mk_scheduler.h	/^  virtual void CTA_overwrites_input(kernel_info_t* kernel, const unsigned shader_id, const unsigned cta_id) {}$/;"	f	class:StaticScheduler
CUDASIM_H_INCLUDED	src/cuda-sim/cuda-sim.h	29;"	d
CUDA_DEVICE_PRINTF_INCLUDED	src/cuda-sim/cuda_device_printf.h	29;"	d
CUDA_FLOAT_MATH_FUNCTIONS	src/cuda-sim/cuda-math.h	101;"	d
CUDA_MATH	src/cuda-sim/cuda-math.h	68;"	d
CURRENT_STAT_IDX	src/gpgpu-sim/power_stat.h	/^    CURRENT_STAT_IDX = 0,    \/\/ Current activity count$/;"	e	enum:_stat_idx
CUSTOM_SET_FUNCTION	src/gpgpu-sim/gpu-cache.h	/^    CUSTOM_SET_FUNCTION$/;"	e	enum:set_index_function
CU_EVENT_ST_H	common/cu_event_st.h	2;"	d
CU_RESISTIVITY	src/gpuwattch/cacti/const.h	/^const double CU_RESISTIVITY = 0.022; \/\/ohm-micron$/;"	v
CUctx_st	launcher/simulator.h	/^    CUctx_st( _cuda_device_id *gpu ) { m_gpu = gpu; }$/;"	f	struct:Simulator::CUctx_st
CUctx_st	launcher/simulator.h	/^  struct CUctx_st {$/;"	s	class:Simulator
CUevent_st	common/cu_event_st.h	/^   CUevent_st( bool blocking )$/;"	f	class:CUevent_st
CUevent_st	common/cu_event_st.h	/^class CUevent_st {$/;"	c
CUstream_st	src/stream_manager.cc	/^CUstream_st::CUstream_st() $/;"	f	class:CUstream_st
CUstream_st	src/stream_manager.h	/^struct CUstream_st {$/;"	s
CUuuid	libcuda/cuda_runtime_api.cc	/^} CUuuid;$/;"	t	typeref:struct:CUuuid_st	file:
CUuuid_st	libcuda/cuda_runtime_api.cc	/^typedef struct CUuuid_st {                                \/**< CUDA definition of UUID *\/$/;"	s	file:
CV_OPTION	build/src/cuda-sim/ptx.tab.c	/^    CV_OPTION = 407,$/;"	e	enum:yytokentype	file:
CV_OPTION	build/src/cuda-sim/ptx.tab.h	/^    CV_OPTION = 407,$/;"	e	enum:yytokentype
CXX	src/gpuwattch/cacti/cacti.mk	/^	CXX = g++ -m32$/;"	m
CXX	src/gpuwattch/cacti/cacti.mk	/^	CXX = g++ -m64$/;"	m
CXX	src/gpuwattch/mcpat.mk	/^	CXX = g++ -m32$/;"	m
CXX	src/gpuwattch/mcpat.mk	/^	CXX = g++ -m64$/;"	m
CXX	src/gpuwattch/mcpat.mk	/^CXX=$/;"	m
CXX	src/gpuwattch/mcpatXeonCore.mk	/^CXX = g++ -m32$/;"	m
CXX	src/intersim2/Makefile	/^CXX = g++$/;"	m
CXX	src/ramulator_sim/Makefile	/^CXX = g++$/;"	m
CXXFLAGS	src/gpgpu-sim/Makefile	/^CXXFLAGS = -Wall -std=c++0x$/;"	m
CXXFLAGS	src/gpuwattch/cacti/cacti.mk	/^CXXFLAGS = -Wno-unknown-pragmas $(DBG) $(OPT) $/;"	m
CXXFLAGS	src/gpuwattch/mcpat.mk	/^CXXFLAGS = -Wno-unknown-pragmas $(DBG) $(OPT) $/;"	m
CXXFLAGS	src/gpuwattch/mcpatXeonCore.mk	/^CXXFLAGS = -Wno-unknown-pragmas $(DBG) $(OPT) $/;"	m
CXX_OPT	src/cuda-sim/Makefile	/^CXX_OPT = $(OPT)$/;"	m
C_MEM	src/gpgpu-sim/stats.h	/^   C_MEM,$/;"	e	enum:mem_stage_access_type
C_bl	src/gpuwattch/cacti/mat.h	/^    double   C_bl;$/;"	m	class:Mat
C_bl	src/gpuwattch/cacti/subarray.h	/^    double  C_bl, C_bl_cam;$/;"	m	class:Subarray
C_bl_cam	src/gpuwattch/cacti/subarray.h	/^    double  C_bl, C_bl_cam;$/;"	m	class:Subarray
C_fringe	src/gpuwattch/cacti/parameter.h	/^    double C_fringe;$/;"	m	class:TechnologyParameter::DeviceType
C_g_ideal	src/gpuwattch/cacti/parameter.h	/^    double C_g_ideal;$/;"	m	class:TechnologyParameter::DeviceType
C_junc	src/gpuwattch/cacti/parameter.h	/^    double C_junc;  \/\/ C_junc_area$/;"	m	class:TechnologyParameter::DeviceType
C_junc_sidewall	src/gpuwattch/cacti/parameter.h	/^    double C_junc_sidewall;$/;"	m	class:TechnologyParameter::DeviceType
C_ld_dec_out	src/gpuwattch/cacti/decoder.h	/^    double C_ld_dec_out;$/;"	m	class:Decoder
C_ld_predec_blk_out	src/gpuwattch/cacti/decoder.h	/^  double C_ld_predec_blk_out;$/;"	m	class:PredecBlk
C_overlap	src/gpuwattch/cacti/parameter.h	/^    double C_overlap;$/;"	m	class:TechnologyParameter::DeviceType
C_ox	src/gpuwattch/cacti/parameter.h	/^    double C_ox;$/;"	m	class:TechnologyParameter::DeviceType
C_per_um	src/gpuwattch/cacti/parameter.h	/^    double C_per_um;$/;"	m	class:TechnologyParameter::InterconnectType
C_wl	src/gpuwattch/cacti/subarray.h	/^    double  C_wl, C_wl_cam, C_wl_ram;$/;"	m	class:Subarray
C_wl_cam	src/gpuwattch/cacti/subarray.h	/^    double  C_wl, C_wl_cam, C_wl_ram;$/;"	m	class:Subarray
C_wl_ram	src/gpuwattch/cacti/subarray.h	/^    double  C_wl, C_wl_cam, C_wl_ram;$/;"	m	class:Subarray
Cache	src/ramulator_sim/Cache.cpp	/^Cache::Cache(int size, int assoc, int block_size,$/;"	f	class:Cache
Cache	src/ramulator_sim/Cache.h	/^class Cache {$/;"	c
CacheDynParam	src/gpuwattch/basic_components.h	/^	CacheDynParam(){};$/;"	f	class:CacheDynParam
CacheDynParam	src/gpuwattch/basic_components.h	/^class CacheDynParam {$/;"	c
CacheSystem	src/ramulator_sim/Cache.h	/^  CacheSystem(const Config& configs, std::function<bool(Request)> send_memory):$/;"	f	class:CacheSystem
CacheSystem	src/ramulator_sim/Cache.h	/^class CacheSystem {$/;"	c
CacheType	src/gpgpu-sim/gpu-cache.h	/^    enum CacheType {$/;"	g	class:baseline_cache
Cache_policy	src/gpuwattch/basic_components.h	/^enum Cache_policy {$/;"	g
Capacity	src/intersim/fly.cpp	/^double KNFly::Capacity( ) const$/;"	f	class:KNFly
Capacity	src/intersim/kncube.cpp	/^double KNCube::Capacity( ) const$/;"	f	class:KNCube
Capacity	src/intersim/network.cpp	/^double Network::Capacity( ) const$/;"	f	class:Network
Capacity	src/intersim2/networks/anynet.hpp	/^  double Capacity( ) const {return -1;}$/;"	f	class:AnyNet
Capacity	src/intersim2/networks/dragonfly.cpp	/^double DragonFlyNew::Capacity( ) const$/;"	f	class:DragonFlyNew
Capacity	src/intersim2/networks/flatfly_onchip.cpp	/^double FlatFlyOnChip::Capacity( ) const$/;"	f	class:FlatFlyOnChip
Capacity	src/intersim2/networks/fly.cpp	/^double KNFly::Capacity( ) const$/;"	f	class:KNFly
Capacity	src/intersim2/networks/kncube.cpp	/^double KNCube::Capacity( ) const$/;"	f	class:KNCube
Capacity	src/intersim2/networks/network.cpp	/^double Network::Capacity( ) const$/;"	f	class:Network
Cd	src/intersim2/power/power_module.hpp	/^  double Cd   ;           \/\/ [F\/um] (for Delay)$/;"	m	class:Power_Module
Cd_pwr	src/intersim2/power/power_module.hpp	/^  double Cd_pwr;           \/\/ [F\/um] (for Power)$/;"	m	class:Power_Module
Cg	src/intersim2/power/power_module.hpp	/^  double Cg  ;           \/\/ [F\/um] (for Delay)$/;"	m	class:Power_Module
Cg_pwr	src/intersim2/power/power_module.hpp	/^  double Cg_pwr  ;           \/\/ [F\/um] (for Power)$/;"	m	class:Power_Module
Cgdl	src/intersim2/power/power_module.hpp	/^  double Cgdl  ;           \/\/ [F\/um] (for Delay)$/;"	m	class:Power_Module
ChRaBaRoCo	src/ramulator_sim/Memory.h	/^        ChRaBaRoCo,$/;"	m	class:Memory::Type
Channel	src/intersim2/channel.hpp	/^Channel<T>::Channel(Module * parent, string const & name)$/;"	f	class:Channel
Channel	src/intersim2/channel.hpp	/^class Channel : public TimedModule {$/;"	c
Channel	src/ramulator_sim/ALDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ALDRAM::Level
Channel	src/ramulator_sim/DDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:DDR3::Level
Channel	src/ramulator_sim/DDR4.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:DDR4::Level
Channel	src/ramulator_sim/DSARP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:DSARP::Level
Channel	src/ramulator_sim/GDDR5.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:GDDR5::Level
Channel	src/ramulator_sim/HBM.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:HBM::Level
Channel	src/ramulator_sim/LPDDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:LPDDR3::Level
Channel	src/ramulator_sim/LPDDR4.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:LPDDR4::Level
Channel	src/ramulator_sim/SALP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:SALP::Level
Channel	src/ramulator_sim/TLDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:TLDRAM::Level
Channel	src/ramulator_sim/WideIO.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:WideIO::Level
Channel	src/ramulator_sim/WideIO2.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:WideIO2::Level
ChannelPitch	src/intersim2/power/power_module.hpp	/^  double  ChannelPitch ;$/;"	m	class:Power_Module
ChaosRouter	src/intersim2/routers/chaos_router.cpp	/^ChaosRouter::ChaosRouter( const Configuration& config,$/;"	f	class:ChaosRouter
ChaosRouter	src/intersim2/routers/chaos_router.hpp	/^class ChaosRouter : public Router {$/;"	c
ChildProcess	launcher/child_process.h	/^  ChildProcess(const std::string& _binary, const std::vector<std::string>& _args)$/;"	f	class:ChildProcess
ChildProcess	launcher/child_process.h	/^class ChildProcess {$/;"	c
Chiplet_cycle_near	src/gpgpu-sim/l2cache.h	/^        void Chiplet_cycle_near()\/\/Near bandwidth is 128byte * Operating frequency$/;"	f	class:KAIN_GPU_chiplet
Chiplet_cycle_near_internal	src/gpgpu-sim/l2cache.h	/^        void Chiplet_cycle_near_internal()\/\/Near bandwidth is 128byte * Operating frequency$/;"	f	class:KAIN_GPU_chiplet
Chiplet_cycle_remote	src/gpgpu-sim/l2cache.h	/^        void Chiplet_cycle_remote()\/\/Remote bandwidth is 128byte * Operating frequency$/;"	f	class:KAIN_GPU_chiplet
Ci	src/intersim2/power/power_module.hpp	/^  double Ci ;$/;"	m	class:Power_Module
Ci_delay	src/intersim2/power/power_module.hpp	/^  double Ci_delay;   $/;"	m	class:Power_Module
Clear	src/intersim/allocator.cpp	/^void DenseAllocator::Clear( )$/;"	f	class:DenseAllocator
Clear	src/intersim/allocator.cpp	/^void SparseAllocator::Clear( )$/;"	f	class:SparseAllocator
Clear	src/intersim/arbiter.cpp	/^void Arbiter::Clear( )$/;"	f	class:Arbiter
Clear	src/intersim/outputset.cpp	/^void OutputSet::Clear( )$/;"	f	class:OutputSet
Clear	src/intersim/stats.cpp	/^void Stats::Clear( )$/;"	f	class:Stats
Clear	src/intersim2/allocators/allocator.cpp	/^void Allocator::Clear( )$/;"	f	class:Allocator
Clear	src/intersim2/allocators/allocator.cpp	/^void DenseAllocator::Clear( )$/;"	f	class:DenseAllocator
Clear	src/intersim2/allocators/allocator.cpp	/^void SparseAllocator::Clear( )$/;"	f	class:SparseAllocator
Clear	src/intersim2/allocators/separable.cpp	/^void SeparableAllocator::Clear() {$/;"	f	class:SeparableAllocator
Clear	src/intersim2/arbiters/arbiter.cpp	/^void Arbiter::Clear()$/;"	f	class:Arbiter
Clear	src/intersim2/arbiters/matrix_arb.cpp	/^void MatrixArbiter::Clear()$/;"	f	class:MatrixArbiter
Clear	src/intersim2/arbiters/prio_arb.cpp	/^void PriorityArbiter::Clear( )$/;"	f	class:PriorityArbiter
Clear	src/intersim2/arbiters/roundrobin_arb.cpp	/^void RoundRobinArbiter::Clear()$/;"	f	class:RoundRobinArbiter
Clear	src/intersim2/arbiters/tree_arb.cpp	/^void TreeArbiter::Clear()$/;"	f	class:TreeArbiter
Clear	src/intersim2/outputset.cpp	/^void OutputSet::Clear( )$/;"	f	class:OutputSet
Clear	src/intersim2/stats.cpp	/^void Stats::Clear( )$/;"	f	class:Stats
Closed	src/ramulator_sim/ALDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ALDRAM::State
Closed	src/ramulator_sim/DDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DDR3::State
Closed	src/ramulator_sim/DDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DDR4::State
Closed	src/ramulator_sim/DSARP.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DSARP::State
Closed	src/ramulator_sim/GDDR5.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:GDDR5::State
Closed	src/ramulator_sim/HBM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:HBM::State
Closed	src/ramulator_sim/LPDDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:LPDDR3::State
Closed	src/ramulator_sim/LPDDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:LPDDR4::State
Closed	src/ramulator_sim/SALP.h	/^        Opened, Closed, Selected, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:SALP::State
Closed	src/ramulator_sim/Scheduler.h	/^        Closed, Opened, Timeout, MAX$/;"	m	class:RowPolicy::Type
Closed	src/ramulator_sim/TLDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:TLDRAM::State
Closed	src/ramulator_sim/WideIO.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:WideIO::State
Closed	src/ramulator_sim/WideIO2.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:WideIO2::State
CmpOp	src/cuda-sim/instructions.cc	/^bool CmpOp( int type, ptx_reg_t a, ptx_reg_t b, unsigned cmpop )$/;"	f
Co	src/intersim2/power/power_module.hpp	/^  double Co ;$/;"	m	class:Power_Module
Co_delay	src/intersim2/power/power_module.hpp	/^  double Co_delay ;              $/;"	m	class:Power_Module
Column	src/ramulator_sim/ALDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ALDRAM::Level
Column	src/ramulator_sim/DDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:DDR3::Level
Column	src/ramulator_sim/DDR4.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:DDR4::Level
Column	src/ramulator_sim/DSARP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:DSARP::Level
Column	src/ramulator_sim/GDDR5.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:GDDR5::Level
Column	src/ramulator_sim/HBM.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:HBM::Level
Column	src/ramulator_sim/LPDDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:LPDDR3::Level
Column	src/ramulator_sim/LPDDR4.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:LPDDR4::Level
Column	src/ramulator_sim/SALP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:SALP::Level
Column	src/ramulator_sim/TLDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:TLDRAM::Level
Column	src/ramulator_sim/WideIO.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:WideIO::Level
Column	src/ramulator_sim/WideIO2.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:WideIO2::Level
Command	src/ramulator_sim/ALDRAM.h	/^    enum class Command : int$/;"	c	class:ALDRAM
Command	src/ramulator_sim/DDR3.h	/^    enum class Command : int$/;"	c	class:DDR3
Command	src/ramulator_sim/DDR4.h	/^    enum class Command : int$/;"	c	class:DDR4
Command	src/ramulator_sim/DSARP.h	/^    enum class Command : int$/;"	c	class:DSARP
Command	src/ramulator_sim/GDDR5.h	/^    enum class Command : int$/;"	c	class:GDDR5
Command	src/ramulator_sim/HBM.h	/^    enum class Command : int$/;"	c	class:HBM
Command	src/ramulator_sim/LPDDR3.h	/^    enum class Command : int$/;"	c	class:LPDDR3
Command	src/ramulator_sim/LPDDR4.h	/^    enum class Command : int$/;"	c	class:LPDDR4
Command	src/ramulator_sim/SALP.h	/^    enum class Command : int$/;"	c	class:SALP
Command	src/ramulator_sim/TLDRAM.h	/^    enum class Command : int$/;"	c	class:TLDRAM
Command	src/ramulator_sim/WideIO.h	/^    enum class Command : int$/;"	c	class:WideIO
Command	src/ramulator_sim/WideIO2.h	/^    enum class Command : int$/;"	c	class:WideIO2
Communicate	launcher/communicate.cc	/^Communicate::Communicate() {$/;"	f	class:Communicate
Communicate	launcher/communicate.cc	/^Communicate::Communicate(pid_t cpid) {$/;"	f	class:Communicate
Communicate	launcher/communicate.h	/^class Communicate {$/;"	c
Component	src/gpuwattch/cacti/component.cc	/^Component::Component()$/;"	f	class:Component
Component	src/gpuwattch/cacti/component.h	/^class Component$/;"	c
Config	src/ramulator_sim/Config.cpp	/^Config::Config(const std::string& fname) {$/;"	f	class:Config
Config	src/ramulator_sim/Config.h	/^  Config() {}$/;"	f	class:Config
Config	src/ramulator_sim/Config.h	/^class Config {$/;"	c
Configuration	src/intersim/config_utils.cpp	/^Configuration::Configuration( )$/;"	f	class:Configuration
Configuration	src/intersim/config_utils.hpp	/^class Configuration {$/;"	c
Configuration	src/intersim2/config_utils.cpp	/^Configuration::Configuration()$/;"	f	class:Configuration
Configuration	src/intersim2/config_utils.hpp	/^class Configuration {$/;"	c
ConstValue	src/ramulator_sim/StatType.h	/^  ConstValue(Counter __value): _value(__value) {}$/;"	f	class:Stats_Ram::ConstValue
ConstValue	src/ramulator_sim/StatType.h	/^class ConstValue: public ScalarBase<ConstValue> {$/;"	c	namespace:Stats_Ram
Controller	src/ramulator_sim/Controller.h	/^    Controller(const Config& configs, DRAM<T>* channel, fifo_pipeline<mem_fetch> *r_returnq) :$/;"	f	class:Controller
Controller	src/ramulator_sim/Controller.h	/^class Controller$/;"	c
Core	src/gpuwattch/core.cc	/^Core::Core(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_)$/;"	f	class:Core
Core	src/gpuwattch/core.h	/^class Core :public Component {$/;"	c
CoreDynParam	src/gpuwattch/basic_components.h	/^	CoreDynParam(){};$/;"	f	class:CoreDynParam
CoreDynParam	src/gpuwattch/basic_components.h	/^class CoreDynParam {$/;"	c
Core_device	src/gpuwattch/basic_components.h	/^	Core_device,$/;"	e	enum:Device_ty
Core_type	src/gpuwattch/basic_components.h	/^enum Core_type {$/;"	g
CountLinesAndColumns	src/gpuwattch/xmlParser.cc	/^static void CountLinesAndColumns(XMLCSTR lpXML, int nUpto, XMLResults *pResults)$/;"	f	file:
CountScalarStorage	launcher/stats/stats.h	/^  CountScalarStorage()$/;"	f	class:Stats::CountScalarStorage
CountScalarStorage	launcher/stats/stats.h	/^class CountScalarStorage : ScalarStorage<uint64_t> {$/;"	c	namespace:Stats
Counter	launcher/stats/stats.h	/^class Counter : public ScalarBase<CountScalarStorage, uint64_t> {$/;"	c	namespace:Stats
Counter	src/ramulator_sim/StatType.h	/^typedef double Counter;$/;"	t	namespace:Stats_Ram
CounterLimits	src/ramulator_sim/StatType.h	/^typedef std::numeric_limits<Counter> CounterLimits;$/;"	t	namespace:Stats_Ram
Cpolywire	src/gpuwattch/cacti/const.h	/^const double Cpolywire = 0;$/;"	v
Create	launcher/mk-sched/mk_scheduler.cc	/^MKScheduler::Create(const SchedulerInfo& info)$/;"	f	class:MKScheduler
CreateInterconnect	src/intersim2/interconnect_interface.cpp	/^void InterconnectInterface::CreateInterconnect(unsigned n_shader, unsigned n_mem)$/;"	f	class:InterconnectInterface
CreateXMLStringR	src/gpuwattch/xmlParser.cc	/^int XMLNode::CreateXMLStringR(XMLNodeData *pEntry, XMLSTR lpszMarker, int nFormat)$/;"	f	class:XMLNode
Credit	src/intersim/credit.cpp	/^Credit::Credit( int max_vcs )$/;"	f	class:Credit
Credit	src/intersim/credit.hpp	/^class Credit {$/;"	c
Credit	src/intersim2/credit.cpp	/^Credit::Credit()$/;"	f	class:Credit
Credit	src/intersim2/credit.hpp	/^class Credit {$/;"	c
CreditChannel	src/intersim2/networks/network.hpp	/^typedef Channel<Credit> CreditChannel;$/;"	t
CreditChannel	src/intersim2/routers/router.hpp	/^typedef Channel<Credit> CreditChannel;$/;"	t
Crossbar	src/gpuwattch/cacti/crossbar.cc	/^Crossbar::Crossbar($/;"	f	class:Crossbar
Crossbar	src/gpuwattch/cacti/crossbar.h	/^class Crossbar : public Component$/;"	c
CrossbarPitch	src/intersim2/power/power_module.hpp	/^  double   CrossbarPitch;$/;"	m	class:Power_Module
Cw	src/intersim2/power/power_module.hpp	/^  double Cw ;$/;"	m	class:Power_Module
Cw3	src/gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::Cw3(double length) {$/;"	f	class:MCPAT_Arbiter
Cw3	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::Cw3(double length) {$/;"	f	class:MCPAT_Router
Cw_cpl	src/intersim2/power/power_module.hpp	/^  double Cw_cpl ; $/;"	m	class:Power_Module
Cw_gnd	src/intersim2/power/power_module.hpp	/^  double Cw_gnd  ;$/;"	m	class:Power_Module
DARP	src/ramulator_sim/DSARP.h	/^        REFAB, REFPB, DARP, SARP, DSARP, MAX$/;"	m	class:DSARP::Type
DATA_PORT_STALL	src/gpgpu-sim/stats.h	/^   DATA_PORT_STALL,$/;"	e	enum:mem_stage_stall_type
DBG	src/gpuwattch/cacti/cacti.mk	/^  DBG = $/;"	m
DBG	src/gpuwattch/cacti/cacti.mk	/^  DBG = -Wall $/;"	m
DBG	src/gpuwattch/mcpat.mk	/^  DBG = $/;"	m
DBG	src/gpuwattch/mcpat.mk	/^  DBG = -Wall $/;"	m
DBG	src/gpuwattch/mcpatXeonCore.mk	/^  DBG = $/;"	m
DBG	src/gpuwattch/mcpatXeonCore.mk	/^  DBG = -Wall $/;"	m
DC	src/gpuwattch/basic_components.h	/^	DC,\/\/directory cache$/;"	e	enum:Dir_type
DCP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   DCP,$/;"	e	enum:pwr_cmp_t	file:
DC_RH	src/gpuwattch/XML_Parse.h	/^   DC_RH,$/;"	e	enum:perf_count_t
DC_RM	src/gpuwattch/XML_Parse.h	/^   DC_RM,$/;"	e	enum:perf_count_t
DC_WH	src/gpuwattch/XML_Parse.h	/^   DC_WH,$/;"	e	enum:perf_count_t
DC_WM	src/gpuwattch/XML_Parse.h	/^   DC_WM,$/;"	e	enum:perf_count_t
DDR3	src/ramulator_sim/DDR3.cpp	/^DDR3::DDR3(Org org, Speed speed) :$/;"	f	class:DDR3
DDR3	src/ramulator_sim/DDR3.cpp	/^DDR3::DDR3(const string& org_str, const string& speed_str) :$/;"	f	class:DDR3
DDR3	src/ramulator_sim/DDR3.h	/^class DDR3$/;"	c
DDR3_1066E	src/ramulator_sim/DDR3.h	/^        DDR3_1066E, DDR3_1066F, DDR3_1066G,$/;"	m	class:DDR3::Speed
DDR3_1066F	src/ramulator_sim/DDR3.h	/^        DDR3_1066E, DDR3_1066F, DDR3_1066G,$/;"	m	class:DDR3::Speed
DDR3_1066G	src/ramulator_sim/DDR3.h	/^        DDR3_1066E, DDR3_1066F, DDR3_1066G,$/;"	m	class:DDR3::Speed
DDR3_1333G	src/ramulator_sim/DDR3.h	/^        DDR3_1333G, DDR3_1333H,$/;"	m	class:DDR3::Speed
DDR3_1333H	src/ramulator_sim/DDR3.h	/^        DDR3_1333G, DDR3_1333H,$/;"	m	class:DDR3::Speed
DDR3_1600H	src/ramulator_sim/DDR3.h	/^        DDR3_1600H, DDR3_1600J, DDR3_1600K,$/;"	m	class:DDR3::Speed
DDR3_1600J	src/ramulator_sim/DDR3.h	/^        DDR3_1600H, DDR3_1600J, DDR3_1600K,$/;"	m	class:DDR3::Speed
DDR3_1600K	src/ramulator_sim/DDR3.h	/^        DDR3_1600H, DDR3_1600J, DDR3_1600K,$/;"	m	class:DDR3::Speed
DDR3_1866K	src/ramulator_sim/DDR3.h	/^        DDR3_1866K, DDR3_1866L,$/;"	m	class:DDR3::Speed
DDR3_1866L	src/ramulator_sim/DDR3.h	/^        DDR3_1866K, DDR3_1866L,$/;"	m	class:DDR3::Speed
DDR3_1Gb_x16	src/ramulator_sim/DDR3.h	/^        DDR3_1Gb_x4,   DDR3_1Gb_x8,   DDR3_1Gb_x16,$/;"	m	class:DDR3::Org
DDR3_1Gb_x4	src/ramulator_sim/DDR3.h	/^        DDR3_1Gb_x4,   DDR3_1Gb_x8,   DDR3_1Gb_x16,$/;"	m	class:DDR3::Org
DDR3_1Gb_x8	src/ramulator_sim/DDR3.h	/^        DDR3_1Gb_x4,   DDR3_1Gb_x8,   DDR3_1Gb_x16,$/;"	m	class:DDR3::Org
DDR3_2133L	src/ramulator_sim/DDR3.h	/^        DDR3_2133L, DDR3_2133M,$/;"	m	class:DDR3::Speed
DDR3_2133M	src/ramulator_sim/DDR3.h	/^        DDR3_2133L, DDR3_2133M,$/;"	m	class:DDR3::Speed
DDR3_2Gb_x16	src/ramulator_sim/DDR3.h	/^        DDR3_2Gb_x4,   DDR3_2Gb_x8,   DDR3_2Gb_x16,$/;"	m	class:DDR3::Org
DDR3_2Gb_x4	src/ramulator_sim/DDR3.h	/^        DDR3_2Gb_x4,   DDR3_2Gb_x8,   DDR3_2Gb_x16,$/;"	m	class:DDR3::Org
DDR3_2Gb_x8	src/ramulator_sim/DDR3.h	/^        DDR3_2Gb_x4,   DDR3_2Gb_x8,   DDR3_2Gb_x16,$/;"	m	class:DDR3::Org
DDR3_4Gb_x16	src/ramulator_sim/DDR3.h	/^        DDR3_4Gb_x4,   DDR3_4Gb_x8,   DDR3_4Gb_x16,$/;"	m	class:DDR3::Org
DDR3_4Gb_x4	src/ramulator_sim/DDR3.h	/^        DDR3_4Gb_x4,   DDR3_4Gb_x8,   DDR3_4Gb_x16,$/;"	m	class:DDR3::Org
DDR3_4Gb_x8	src/ramulator_sim/DDR3.h	/^        DDR3_4Gb_x4,   DDR3_4Gb_x8,   DDR3_4Gb_x16,$/;"	m	class:DDR3::Org
DDR3_512Mb_x16	src/ramulator_sim/DDR3.h	/^        DDR3_512Mb_x4, DDR3_512Mb_x8, DDR3_512Mb_x16,$/;"	m	class:DDR3::Org
DDR3_512Mb_x4	src/ramulator_sim/DDR3.h	/^        DDR3_512Mb_x4, DDR3_512Mb_x8, DDR3_512Mb_x16,$/;"	m	class:DDR3::Org
DDR3_512Mb_x8	src/ramulator_sim/DDR3.h	/^        DDR3_512Mb_x4, DDR3_512Mb_x8, DDR3_512Mb_x16,$/;"	m	class:DDR3::Org
DDR3_800D	src/ramulator_sim/DDR3.h	/^        DDR3_800D,  DDR3_800E,$/;"	m	class:DDR3::Speed
DDR3_800E	src/ramulator_sim/DDR3.h	/^        DDR3_800D,  DDR3_800E,$/;"	m	class:DDR3::Speed
DDR3_8Gb_x16	src/ramulator_sim/DDR3.h	/^        DDR3_8Gb_x4,   DDR3_8Gb_x8,   DDR3_8Gb_x16,$/;"	m	class:DDR3::Org
DDR3_8Gb_x4	src/ramulator_sim/DDR3.h	/^        DDR3_8Gb_x4,   DDR3_8Gb_x8,   DDR3_8Gb_x16,$/;"	m	class:DDR3::Org
DDR3_8Gb_x8	src/ramulator_sim/DDR3.h	/^        DDR3_8Gb_x4,   DDR3_8Gb_x8,   DDR3_8Gb_x16,$/;"	m	class:DDR3::Org
DDR4	src/ramulator_sim/DDR4.cpp	/^DDR4::DDR4(Org org, Speed speed)$/;"	f	class:DDR4
DDR4	src/ramulator_sim/DDR4.cpp	/^DDR4::DDR4(const string& org_str, const string& speed_str) :$/;"	f	class:DDR4
DDR4	src/ramulator_sim/DDR4.h	/^class DDR4$/;"	c
DDR4_1600K	src/ramulator_sim/DDR4.h	/^        DDR4_1600K, DDR4_1600L,$/;"	m	class:DDR4::Speed
DDR4_1600L	src/ramulator_sim/DDR4.h	/^        DDR4_1600K, DDR4_1600L,$/;"	m	class:DDR4::Speed
DDR4_1866M	src/ramulator_sim/DDR4.h	/^        DDR4_1866M, DDR4_1866N,$/;"	m	class:DDR4::Speed
DDR4_1866N	src/ramulator_sim/DDR4.h	/^        DDR4_1866M, DDR4_1866N,$/;"	m	class:DDR4::Speed
DDR4_2133P	src/ramulator_sim/DDR4.h	/^        DDR4_2133P, DDR4_2133R,$/;"	m	class:DDR4::Speed
DDR4_2133R	src/ramulator_sim/DDR4.h	/^        DDR4_2133P, DDR4_2133R,$/;"	m	class:DDR4::Speed
DDR4_2400R	src/ramulator_sim/DDR4.h	/^        DDR4_2400R, DDR4_2400U,$/;"	m	class:DDR4::Speed
DDR4_2400U	src/ramulator_sim/DDR4.h	/^        DDR4_2400R, DDR4_2400U,$/;"	m	class:DDR4::Speed
DDR4_2Gb_x16	src/ramulator_sim/DDR4.h	/^        DDR4_2Gb_x4,   DDR4_2Gb_x8,   DDR4_2Gb_x16,$/;"	m	class:DDR4::Org
DDR4_2Gb_x4	src/ramulator_sim/DDR4.h	/^        DDR4_2Gb_x4,   DDR4_2Gb_x8,   DDR4_2Gb_x16,$/;"	m	class:DDR4::Org
DDR4_2Gb_x8	src/ramulator_sim/DDR4.h	/^        DDR4_2Gb_x4,   DDR4_2Gb_x8,   DDR4_2Gb_x16,$/;"	m	class:DDR4::Org
DDR4_4Gb_x16	src/ramulator_sim/DDR4.h	/^        DDR4_4Gb_x4,   DDR4_4Gb_x8,   DDR4_4Gb_x16,$/;"	m	class:DDR4::Org
DDR4_4Gb_x4	src/ramulator_sim/DDR4.h	/^        DDR4_4Gb_x4,   DDR4_4Gb_x8,   DDR4_4Gb_x16,$/;"	m	class:DDR4::Org
DDR4_4Gb_x8	src/ramulator_sim/DDR4.h	/^        DDR4_4Gb_x4,   DDR4_4Gb_x8,   DDR4_4Gb_x16,$/;"	m	class:DDR4::Org
DDR4_8Gb_x16	src/ramulator_sim/DDR4.h	/^        DDR4_8Gb_x4,   DDR4_8Gb_x8,   DDR4_8Gb_x16,$/;"	m	class:DDR4::Org
DDR4_8Gb_x4	src/ramulator_sim/DDR4.h	/^        DDR4_8Gb_x4,   DDR4_8Gb_x8,   DDR4_8Gb_x16,$/;"	m	class:DDR4::Org
DDR4_8Gb_x8	src/ramulator_sim/DDR4.h	/^        DDR4_8Gb_x4,   DDR4_8Gb_x8,   DDR4_8Gb_x16,$/;"	m	class:DDR4::Org
DEBUG	src/intersim/trafficmanager.cpp	12;"	d	file:
DEBUG	src/ramulator_sim/Makefile	/^DEBUG ?= 0$/;"	m
DEBUGL1MISS	src/gpgpu-sim/gpu-misc.h	34;"	d
DEBUG_CXX_OPT	src/cuda-sim/Makefile	/^DEBUG_CXX_OPT = $(DEBUG_OPT)$/;"	m
DEBUG_OBJECTS	Makefile	/^DEBUG_OBJECTS=$(wildcard $(BUILD_DIR)\/launcher\/*.g)$/;"	m
DEBUG_OBJECTS	common/Makefile	/^DEBUG_OBJECTS=$(SOURCES:%.cc=$(BUILD_DIR)\/common\/%.g)$/;"	m
DEBUG_OBJECTS	launcher/Makefile	/^DEBUG_OBJECTS=$(SOURCES:%.cc=$(BUILD_DIR)\/launcher\/%.g)$/;"	m
DEBUG_OBJECTS	launcher/mk-sched/Makefile	/^DEBUG_OBJECTS=$(SOURCES:%.cc=$(BUILD_DIR)\/launcher\/mk-sched\/%.g)$/;"	m
DEBUG_OBJECTS	launcher/stats/Makefile	/^DEBUG_OBJECTS=$(SOURCES:%.cc=$(BUILD_DIR)\/launcher\/stats\/%.g)$/;"	m
DEBUG_OBJECTS	src/Makefile	/^DEBUG_OBJECTS=$(SOURCES:%.cc=$(BUILD_DIR)\/src\/%.g)$/;"	m
DEBUG_OBJS	src/cuda-sim/Makefile	/^DEBUG_OBJS := $(OUTPUT_DIR)\/ptx_parser.g $(OUTPUT_DIR)\/ptx_loader.g $(OUTPUT_DIR)\/cuda_device_printf.g $(OUTPUT_DIR)\/instructions.g $(OUTPUT_DIR)\/cuda-sim.g $(OUTPUT_DIR)\/ptx_ir.g $(OUTPUT_DIR)\/ptx_sim.g  $(OUTPUT_DIR)\/memory.g $(OUTPUT_DIR)\/ptx-stats.g $(OUTPUT_DIR)\/decuda_pred_table\/decuda_pred_table.g $(OUTPUT_DIR)\/ptx.tab.g $(OUTPUT_DIR)\/lex.ptx_.g $(OUTPUT_DIR)\/ptxinfo.tab.g $(OUTPUT_DIR)\/lex.ptxinfo_.g$/;"	m
DEBUG_OBJS	src/gpgpu-sim/Makefile	/^DEBUG_OBJS = $(CSRCS:%.cc=$(OUTPUT_DIR)\/%.$(GEXT))$/;"	m
DEBUG_OPT	src/cuda-sim/Makefile	/^DEBUG_OPT := -O0 -g -Wall -Wno-unused-function -Wno-sign-compare -I$(CUDA_INSTALL_PATH)\/include\/ -I$(OUTPUT_DIR)\/ -I. -fPIC -DCUDART_VERSION=$(CUDART_VERSION)$/;"	m
DEBUG_OPTFLAGS	src/gpgpu-sim/Makefile	/^DEBUG_OPTFLAGS = -O0 -g -fPIC$/;"	m
DEBUG_TARGETS	Makefile	/^DEBUG_TARGETS=$(BIN_DIR)\/multikernel-sim.debug$/;"	m
DEF	src/cuda-sim/ptx_parser.cc	120;"	d	file:
DEF	src/cuda-sim/ptx_parser.cc	122;"	d	file:
DEFINE	src/intersim2/Makefile	/^DEFINE = -DCREATE_LIBRARY$/;"	m
DELAYQUEUE_H	src/gpgpu-sim/delayqueue.h	33;"	d
DEP_OBJECTS	common/Makefile	/^DEP_OBJECTS=$(SOURCES:%.cc=$(BUILD_DIR)\/common\/%.d)$/;"	m
DEP_OBJECTS	launcher/Makefile	/^DEP_OBJECTS=$(SOURCES:%.cc=$(BUILD_DIR)\/launcher\/%.d)$/;"	m
DEP_OBJECTS	launcher/mk-sched/Makefile	/^DEP_OBJECTS=$(SOURCES:%.cc=$(BUILD_DIR)\/launcher\/mk-sched\/%.d)$/;"	m
DEP_OBJECTS	launcher/stats/Makefile	/^DEP_OBJECTS=$(SOURCES:%.cc=$(BUILD_DIR)\/launcher\/stats\/%.d)$/;"	m
DEP_OBJECTS	libcuda/Makefile	/^DEP_OBJECTS=$(BUILD_DIR)\/libcuda\/cuda_runtime_api.d$/;"	m
DFFCell	src/gpuwattch/logic.cc	/^DFFCell::DFFCell($/;"	f	class:DFFCell
DFFCell	src/gpuwattch/logic.h	/^class DFFCell : public Component {$/;"	c
DIE_HT	src/gpuwattch/cacti/highradix.h	/^    double DIE_HT;\/\/u$/;"	m	class:HighRadix
DIE_LEN	src/gpuwattch/cacti/highradix.h	/^    double DIE_LEN;\/\/u$/;"	m	class:HighRadix
DIMENSION_MODIFIER	build/src/cuda-sim/ptx.tab.c	/^    DIMENSION_MODIFIER = 362,$/;"	e	enum:yytokentype	file:
DIMENSION_MODIFIER	build/src/cuda-sim/ptx.tab.h	/^    DIMENSION_MODIFIER = 362,$/;"	e	enum:yytokentype
DISPLAY_HOP_DIST	src/intersim/trafficmanager.cpp	/^int DISPLAY_HOP_DIST     = 1;    \/\/ distribution of hop counts$/;"	v
DISPLAY_LAT_DIST	src/intersim/trafficmanager.cpp	/^int DISPLAY_LAT_DIST     = 1; \/\/ distribution of packet latencies$/;"	v
DISPLAY_PAIR_LATENCY	src/intersim/trafficmanager.cpp	/^int DISPLAY_PAIR_LATENCY = 0;    \/\/ avg. latency for each s-d pair$/;"	v
DOUBLE_OPERAND	build/src/cuda-sim/ptx.tab.c	/^    DOUBLE_OPERAND = 297,$/;"	e	enum:yytokentype	file:
DOUBLE_OPERAND	build/src/cuda-sim/ptx.tab.h	/^    DOUBLE_OPERAND = 297,$/;"	e	enum:yytokentype
DPRINTF	src/trace.h	63;"	d
DRAGON_LATENCY	src/intersim2/networks/dragonfly.cpp	38;"	d	file:
DRAM	src/gpgpu-sim/gpu-sim.cc	94;"	d	file:
DRAM	src/gpuwattch/memoryctrl.cc	/^DRAM::DRAM(ParseXML *XML_interface,InputParameter* interface_ip_, enum Dram_type dram_type_)$/;"	f	class:DRAM
DRAM	src/gpuwattch/memoryctrl.h	/^class DRAM : public Component {$/;"	c
DRAM	src/ramulator_sim/DRAM.h	/^    DRAM() {}$/;"	f	class:DRAM
DRAM	src/ramulator_sim/DRAM.h	/^DRAM<T>::DRAM(T* spec, typename T::Level level) :$/;"	f	class:DRAM
DRAM	src/ramulator_sim/DRAM.h	/^class DRAM$/;"	c
DRAMP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   DRAMP,$/;"	e	enum:pwr_cmp_t	file:
DRAMParam	src/gpuwattch/basic_components.h	/^	DRAMParam(){};$/;"	f	class:DRAMParam
DRAMParam	src/gpuwattch/basic_components.h	/^class DRAMParam {$/;"	c
DRAM_FIFO	src/gpgpu-sim/gpu-sim.h	/^   DRAM_FIFO=0,$/;"	e	enum:dram_ctrl_t
DRAM_FRFCFS	src/gpgpu-sim/gpu-sim.h	/^   DRAM_FRFCFS=1$/;"	e	enum:dram_ctrl_t
DSARP	src/ramulator_sim/DSARP.cpp	/^DSARP::DSARP(Org org, Speed speed, Type type, int n_sa) :$/;"	f	class:DSARP
DSARP	src/ramulator_sim/DSARP.cpp	/^DSARP::DSARP(const string& org_str, const string& speed_str, Type type, int n_sa) :$/;"	f	class:DSARP
DSARP	src/ramulator_sim/DSARP.h	/^        REFAB, REFPB, DARP, SARP, DSARP, MAX$/;"	m	class:DSARP::Type
DSARP	src/ramulator_sim/DSARP.h	/^class DSARP$/;"	c
DSARP_1333	src/ramulator_sim/DSARP.h	/^        DSARP_1333,$/;"	m	class:DSARP::Speed
DSARP_16Gb_x8	src/ramulator_sim/DSARP.h	/^        DSARP_16Gb_x8,$/;"	m	class:DSARP::Org
DSARP_32Gb_x8	src/ramulator_sim/DSARP.h	/^        DSARP_32Gb_x8,$/;"	m	class:DSARP::Org
DSARP_8Gb_x8	src/ramulator_sim/DSARP.h	/^        DSARP_8Gb_x8,$/;"	m	class:DSARP::Org
DSARP_H_	src/ramulator_sim/DSARP.h	36;"	d
DTRACE	src/trace.h	62;"	d
DUMPLOG	src/gpgpu-sim/gpu-sim.h	63;"	d
DYNAMIC_WARP_PRINT_RESOLUTION	src/gpgpu-sim/shader.cc	566;"	d	file:
DataCache	src/gpuwattch/array.h	/^  DataCache(){wbb=0;};$/;"	f	class:DataCache
DataCache	src/gpuwattch/array.h	/^class DataCache :public InstCache{$/;"	c
Data_in_htree	src/gpuwattch/cacti/basic_circuit.h	/^    Data_in_htree,$/;"	e	enum:Htree_type
Data_out_htree	src/gpuwattch/cacti/basic_circuit.h	/^    Data_out_htree,$/;"	e	enum:Htree_type
Dcache_dual_pump	src/gpuwattch/XML_Parse.h	/^	char Dcache_dual_pump[20];$/;"	m	struct:__anon15
Debug	src/intersim/module.cpp	/^void Module::Debug( const string& msg ) const$/;"	f	class:Module
Debug	src/intersim2/module.cpp	/^void Module::Debug( const string& msg ) const$/;"	f	class:Module
Decoder	src/gpuwattch/cacti/decoder.cc	/^Decoder::Decoder($/;"	f	class:Decoder
Decoder	src/gpuwattch/cacti/decoder.h	/^class Decoder : public Component$/;"	c
DenseAllocator	src/intersim/allocator.cpp	/^DenseAllocator::DenseAllocator( const Configuration &config,$/;"	f	class:DenseAllocator
DenseAllocator	src/intersim/allocator.hpp	/^class DenseAllocator : public Allocator {$/;"	c
DenseAllocator	src/intersim2/allocators/allocator.cpp	/^DenseAllocator::DenseAllocator( Module *parent, const string& name,$/;"	f	class:DenseAllocator
DenseAllocator	src/intersim2/allocators/allocator.hpp	/^class DenseAllocator : public Allocator {$/;"	c
DeviceType	src/gpuwattch/cacti/parameter.h	/^    DeviceType(): C_g_ideal(0), C_fringe(0), C_overlap(0), C_junc(0),$/;"	f	class:TechnologyParameter::DeviceType
DeviceType	src/gpuwattch/cacti/parameter.h	/^  class DeviceType$/;"	c	class:TechnologyParameter
Device_ty	src/gpuwattch/basic_components.h	/^enum Device_ty {$/;"	g
DiagonalTrafficPattern	src/intersim2/traffic.cpp	/^DiagonalTrafficPattern::DiagonalTrafficPattern(int nodes)$/;"	f	class:DiagonalTrafficPattern
DiagonalTrafficPattern	src/intersim2/traffic.hpp	/^class DiagonalTrafficPattern : public RandomTrafficPattern {$/;"	c
DigitPermutationTrafficPattern	src/intersim2/traffic.cpp	/^DigitPermutationTrafficPattern::DigitPermutationTrafficPattern(int nodes, int k,$/;"	f	class:DigitPermutationTrafficPattern
DigitPermutationTrafficPattern	src/intersim2/traffic.hpp	/^class DigitPermutationTrafficPattern : public PermutationTrafficPattern {$/;"	c
Dir_config	src/gpuwattch/XML_Parse.h	/^	double Dir_config[20];$/;"	m	struct:__anon16
Dir_config	src/gpuwattch/XML_Parse.h	/^	double Dir_config[20];$/;"	m	struct:__anon17
Dir_type	src/gpuwattch/basic_components.h	/^enum Dir_type {$/;"	g
Directory_type	src/gpuwattch/XML_Parse.h	/^	int Directory_type;$/;"	m	struct:__anon16
Directory_type	src/gpuwattch/XML_Parse.h	/^	int Directory_type;$/;"	m	struct:__anon17
Display	src/intersim/buffer_state.cpp	/^void BufferState::Display( ) const$/;"	f	class:BufferState
Display	src/intersim/event_router.cpp	/^void EventRouter::Display( ) const$/;"	f	class:EventRouter
Display	src/intersim/iq_router.cpp	/^void IQRouter::Display( ) const$/;"	f	class:IQRouter
Display	src/intersim/module.cpp	/^void Module::Display( ) const $/;"	f	class:Module
Display	src/intersim/network.cpp	/^void Network::Display( ) const$/;"	f	class:Network
Display	src/intersim/singlenet.cpp	/^void SingleNet::Display( ) const$/;"	f	class:SingleNet
Display	src/intersim/stats.cpp	/^void Stats::Display( ) const$/;"	f	class:Stats
Display	src/intersim/vc.cpp	/^void VC::Display( ) const$/;"	f	class:VC
Display	src/intersim2/buffer.cpp	/^void Buffer::Display( ostream & os ) const$/;"	f	class:Buffer
Display	src/intersim2/buffer_state.cpp	/^void BufferState::Display( ostream & os ) const$/;"	f	class:BufferState
Display	src/intersim2/module.cpp	/^void Module::Display( ostream & os ) const $/;"	f	class:Module
Display	src/intersim2/networks/network.cpp	/^void Network::Display( ostream & os ) const$/;"	f	class:Network
Display	src/intersim2/routers/chaos_router.cpp	/^void ChaosRouter::Display( ostream & os ) const$/;"	f	class:ChaosRouter
Display	src/intersim2/routers/event_router.cpp	/^void EventRouter::Display( ostream & os ) const$/;"	f	class:EventRouter
Display	src/intersim2/routers/iq_router.cpp	/^void IQRouter::Display( ostream & os ) const$/;"	f	class:IQRouter
Display	src/intersim2/stats.cpp	/^void Stats::Display( ostream & os ) const$/;"	f	class:Stats
Display	src/intersim2/vc.cpp	/^void VC::Display( ostream & os ) const$/;"	f	class:VC
DisplayHierarchy	src/intersim/module.cpp	/^void Module::DisplayHierarchy( int level ) const$/;"	f	class:Module
DisplayHierarchy	src/intersim2/module.cpp	/^void Module::DisplayHierarchy( int level, ostream & os ) const$/;"	f	class:Module
DisplayOverallStats	src/intersim2/batchtrafficmanager.cpp	/^void BatchTrafficManager::DisplayOverallStats(ostream & os) const {$/;"	f	class:BatchTrafficManager
DisplayOverallStats	src/intersim2/interconnect_interface.cpp	/^void InterconnectInterface::DisplayOverallStats() const$/;"	f	class:InterconnectInterface
DisplayOverallStats	src/intersim2/trafficmanager.cpp	/^void TrafficManager::DisplayOverallStats( ostream & os ) const {$/;"	f	class:TrafficManager
DisplayOverallStatsCSV	src/intersim2/trafficmanager.cpp	/^void TrafficManager::DisplayOverallStatsCSV(ostream & os) const {$/;"	f	class:TrafficManager
DisplayState	src/intersim2/interconnect_interface.cpp	/^void InterconnectInterface::DisplayState(FILE *fp) const$/;"	f	class:InterconnectInterface
DisplayStats	src/intersim2/batchtrafficmanager.cpp	/^void BatchTrafficManager::DisplayStats(ostream & os) const {$/;"	f	class:BatchTrafficManager
DisplayStats	src/intersim2/interconnect_interface.cpp	/^void InterconnectInterface::DisplayStats() const$/;"	f	class:InterconnectInterface
DisplayStats	src/intersim2/trafficmanager.cpp	/^void TrafficManager::DisplayStats(ostream & os) const {$/;"	f	class:TrafficManager
DistStatBase	src/ramulator_sim/Statistics.h	/^class DistStatBase : public StatBase<StatType> { \/\/ wrapper for Stats::DistBase$/;"	c
Distribution	src/ramulator_sim/StatType.h	/^  Distribution(): param_min(Counter()), param_max(Counter()),$/;"	f	class:Stats_Ram::Distribution
Distribution	src/ramulator_sim/StatType.h	/^class Distribution: public Stat<Distribution> {$/;"	c	namespace:Stats_Ram
DistributionStat	src/ramulator_sim/Statistics.h	/^class DistributionStat : public DistStatBase<Stats_Ram::Distribution> {$/;"	c
Downloading and building the simulator	src/intersim/doc/manual.tex	/^\\label{sec:get_started}$/;"	u
DragonFlyNew	src/intersim2/networks/dragonfly.cpp	/^DragonFlyNew::DragonFlyNew( const Configuration &config, const string & name ) :$/;"	f	class:DragonFlyNew
DragonFlyNew	src/intersim2/networks/dragonfly.hpp	/^class DragonFlyNew : public Network {$/;"	c
Dram_type	src/gpuwattch/basic_components.h	/^enum Dram_type {$/;"	g
Driver	src/gpuwattch/cacti/decoder.cc	/^Driver::Driver(double c_gate_load_, double c_wire_load_, double r_wire_load_, bool is_dram)$/;"	f	class:Driver
Driver	src/gpuwattch/cacti/decoder.h	/^class Driver : public Component$/;"	c
DumpChannelMap	src/intersim2/networks/network.cpp	/^void Network::DumpChannelMap( ostream & os, string const & prefix ) const$/;"	f	class:Network
DumpNodeMap	src/intersim2/networks/network.cpp	/^void Network::DumpNodeMap( ostream & os, string const & prefix ) const$/;"	f	class:Network
DynamicLimitedSharedBufferPolicy	src/intersim2/buffer_state.cpp	/^BufferState::DynamicLimitedSharedBufferPolicy::DynamicLimitedSharedBufferPolicy(Configuration const & config, BufferState * parent, const string & name)$/;"	f	class:BufferState::DynamicLimitedSharedBufferPolicy
DynamicLimitedSharedBufferPolicy	src/intersim2/buffer_state.hpp	/^  class DynamicLimitedSharedBufferPolicy : public LimitedSharedBufferPolicy {$/;"	c	class:BufferState
DynamicParameter	src/gpuwattch/cacti/parameter.cc	/^DynamicParameter::DynamicParameter($/;"	f	class:DynamicParameter
DynamicParameter	src/gpuwattch/cacti/parameter.cc	/^DynamicParameter::DynamicParameter():$/;"	f	class:DynamicParameter
DynamicParameter	src/gpuwattch/cacti/parameter.h	/^class DynamicParameter$/;"	c
DynamicScheduler	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::DynamicScheduler(const std::string& _preempt, const std::string& _progress)$/;"	f	class:DynamicScheduler
DynamicScheduler	launcher/mk-sched/mk_scheduler.h	/^class DynamicScheduler : public MKScheduler {$/;"	c
ECHO	build/src/cuda-sim/lex.ptx_.c	1473;"	d	file:
ECHO	build/src/cuda-sim/lex.ptxinfo_.c	725;"	d	file:
ECHO	src/intersim2/lex.yy.c	592;"	d	file:
ELFSECTION	libcuda/cuda_runtime_api.cc	/^    ELFSECTION$/;"	e	enum:cuobjdumpSectionType	file:
ENTRY_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    ENTRY_DIRECTIVE = 268,$/;"	e	enum:yytokentype	file:
ENTRY_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    ENTRY_DIRECTIVE = 268,$/;"	e	enum:yytokentype
ENVREG_REG	src/cuda-sim/opcodes.h	/^   ENVREG_REG,$/;"	e	enum:special_regs
EOB_ACT_CONTINUE_SCAN	build/src/cuda-sim/lex.ptx_.c	188;"	d	file:
EOB_ACT_CONTINUE_SCAN	build/src/cuda-sim/lex.ptxinfo_.c	188;"	d	file:
EOB_ACT_CONTINUE_SCAN	src/intersim2/lex.yy.c	168;"	d	file:
EOB_ACT_END_OF_FILE	build/src/cuda-sim/lex.ptx_.c	189;"	d	file:
EOB_ACT_END_OF_FILE	build/src/cuda-sim/lex.ptxinfo_.c	189;"	d	file:
EOB_ACT_END_OF_FILE	src/intersim2/lex.yy.c	169;"	d	file:
EOB_ACT_LAST_MATCH	build/src/cuda-sim/lex.ptx_.c	190;"	d	file:
EOB_ACT_LAST_MATCH	build/src/cuda-sim/lex.ptxinfo_.c	190;"	d	file:
EOB_ACT_LAST_MATCH	src/intersim2/lex.yy.c	170;"	d	file:
EPSILON	src/gpuwattch/cacti/const.h	115;"	d
EPSILON2	src/gpuwattch/cacti/const.h	131;"	d
EPSILON3	src/gpuwattch/cacti/const.h	132;"	d
EQUALS	build/src/cuda-sim/ptx.tab.c	/^    EQUALS = 359,$/;"	e	enum:yytokentype	file:
EQUALS	build/src/cuda-sim/ptx.tab.h	/^    EQUALS = 359,$/;"	e	enum:yytokentype
EQU_OPTION	build/src/cuda-sim/ptx.tab.c	/^    EQU_OPTION = 336,$/;"	e	enum:yytokentype	file:
EQU_OPTION	build/src/cuda-sim/ptx.tab.h	/^    EQU_OPTION = 336,$/;"	e	enum:yytokentype
EQ_OPTION	build/src/cuda-sim/ptx.tab.c	/^    EQ_OPTION = 326,$/;"	e	enum:yytokentype	file:
EQ_OPTION	build/src/cuda-sim/ptx.tab.h	/^    EQ_OPTION = 326,$/;"	e	enum:yytokentype
ERP	src/gpuwattch/cacti/mat.h	/^    int ERP;$/;"	m	class:Mat
ERP	src/gpuwattch/cacti/uca.h	/^    int   RWP, ERP, EWP,SCHP;$/;"	m	class:UCA
EWP	src/gpuwattch/cacti/mat.h	/^    int EWP;$/;"	m	class:Mat
EWP	src/gpuwattch/cacti/uca.h	/^    int   RWP, ERP, EWP,SCHP;$/;"	m	class:UCA
EXCLAMATION	build/src/cuda-sim/ptx.tab.c	/^    EXCLAMATION = 355,$/;"	e	enum:yytokentype	file:
EXCLAMATION	build/src/cuda-sim/ptx.tab.h	/^    EXCLAMATION = 355,$/;"	e	enum:yytokentype
EXECU	src/gpuwattch/core.cc	/^EXECU::EXECU(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_, double lsq_height_, const CoreDynParam & dyn_p_,  double exClockRate, bool exist_)$/;"	f	class:EXECU
EXECU	src/gpuwattch/core.h	/^class EXECU :public Component {$/;"	c
EXIT_OPTION	build/src/cuda-sim/ptx.tab.c	/^    EXIT_OPTION = 400,$/;"	e	enum:yytokentype	file:
EXIT_OPTION	build/src/cuda-sim/ptx.tab.h	/^    EXIT_OPTION = 400,$/;"	e	enum:yytokentype
EXIT_SUCCESS	build/src/cuda-sim/ptx.tab.c	434;"	d	file:
EXIT_SUCCESS	build/src/cuda-sim/ptx.tab.c	462;"	d	file:
EXIT_SUCCESS	build/src/cuda-sim/ptxinfo.tab.c	305;"	d	file:
EXIT_SUCCESS	build/src/cuda-sim/ptxinfo.tab.c	333;"	d	file:
EXIT_SUCCESS	src/intersim2/y.tab.c	283;"	d	file:
EXIT_SUCCESS	src/intersim2/y.tab.c	311;"	d	file:
EXTENSION	src/ramulator_sim/Request.h	/^        EXTENSION,$/;"	m	class:Request::Type
EXTERN	src/gpuwattch/globalvar.h	37;"	d
EXTERN	src/gpuwattch/globalvar.h	39;"	d
EXTERN_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    EXTERN_DIRECTIVE = 269,$/;"	e	enum:yytokentype	file:
EXTERN_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    EXTERN_DIRECTIVE = 269,$/;"	e	enum:yytokentype
EXTRA_TAG_BITS	src/gpuwattch/cacti/const.h	/^const int EXTRA_TAG_BITS = 5;$/;"	v
EX_WB	src/gpgpu-sim/shader.h	/^    EX_WB,$/;"	e	enum:pipeline_stage_name_t
Embedded	src/gpuwattch/XML_Parse.h	/^	bool Embedded;$/;"	m	struct:__anon26
Embedded	src/gpuwattch/basic_components.h	/^	bool Embedded;$/;"	m	class:CoreDynParam
Empty	src/intersim/vc.cpp	/^bool VC::Empty( ) const$/;"	f	class:VC
Empty	src/intersim2/buffer.hpp	/^  inline bool Empty( int vc ) const$/;"	f	class:Buffer
Empty	src/intersim2/vc.hpp	/^  inline bool Empty( ) const$/;"	f	class:VC
Entry	src/ramulator_sim/Scheduler.h	/^    struct Entry {$/;"	s	class:RowTable
Error	src/intersim/module.cpp	/^void Module::Error( const string& msg ) const$/;"	f	class:Module
Error	src/intersim2/module.cpp	/^void Module::Error( const string& msg ) const$/;"	f	class:Module
Evaluate	src/intersim2/channel.hpp	/^  virtual void Evaluate() {}$/;"	f	class:Channel
Evaluate	src/intersim2/networks/network.cpp	/^void Network::Evaluate( )$/;"	f	class:Network
Evaluate	src/intersim2/routers/router.cpp	/^void Router::Evaluate( )$/;"	f	class:Router
EvenScheduler	launcher/mk-sched/even_scheduler.h	/^  EvenScheduler()  {}$/;"	f	class:EvenScheduler
EvenScheduler	launcher/mk-sched/even_scheduler.h	/^class EvenScheduler : public StaticScheduler {$/;"	c
EventNextVCState	src/intersim/event_router.cpp	/^EventNextVCState::EventNextVCState( const Configuration& config, $/;"	f	class:EventNextVCState
EventNextVCState	src/intersim/event_router.hpp	/^   EventNextVCState() : Module() {}$/;"	f	class:EventNextVCState
EventNextVCState	src/intersim/event_router.hpp	/^class EventNextVCState : public Module {$/;"	c
EventNextVCState	src/intersim2/routers/event_router.cpp	/^EventNextVCState::EventNextVCState( const Configuration& config, $/;"	f	class:EventNextVCState
EventNextVCState	src/intersim2/routers/event_router.hpp	/^class EventNextVCState : public Module {$/;"	c
EventRouter	src/intersim/event_router.cpp	/^EventRouter::EventRouter( const Configuration& config,$/;"	f	class:EventRouter
EventRouter	src/intersim/event_router.hpp	/^class EventRouter : public Router {$/;"	c
EventRouter	src/intersim2/routers/event_router.cpp	/^EventRouter::EventRouter( const Configuration& config,$/;"	f	class:EventRouter
EventRouter	src/intersim2/routers/event_router.hpp	/^class EventRouter : public Router {$/;"	c
F16_TYPE	build/src/cuda-sim/ptx.tab.c	/^    F16_TYPE = 306,$/;"	e	enum:yytokentype	file:
F16_TYPE	build/src/cuda-sim/ptx.tab.h	/^    F16_TYPE = 306,$/;"	e	enum:yytokentype
F32_TYPE	build/src/cuda-sim/ptx.tab.c	/^    F32_TYPE = 307,$/;"	e	enum:yytokentype	file:
F32_TYPE	build/src/cuda-sim/ptx.tab.h	/^    F32_TYPE = 307,$/;"	e	enum:yytokentype
F64_TYPE	build/src/cuda-sim/ptx.tab.c	/^    F64_TYPE = 308,$/;"	e	enum:yytokentype	file:
F64_TYPE	build/src/cuda-sim/ptx.tab.h	/^    F64_TYPE = 308,$/;"	e	enum:yytokentype
FALL	src/gpuwattch/cacti/const.h	110;"	d
FALSE	src/gpuwattch/xmlParser.h	180;"	d
FCFS	src/ramulator_sim/Scheduler.h	/^        FCFS, FRFCFS, FRFCFS_Cap, FRFCFS_PriorHit, MAX$/;"	m	class:Scheduler::Type
FERMI_HASH_SET_FUNCTION	src/gpgpu-sim/gpu-cache.h	/^    FERMI_HASH_SET_FUNCTION = 0,$/;"	e	enum:set_index_function
FF64_TYPE	build/src/cuda-sim/ptx.tab.c	/^    FF64_TYPE = 309,$/;"	e	enum:yytokentype	file:
FF64_TYPE	build/src/cuda-sim/ptx.tab.h	/^    FF64_TYPE = 309,$/;"	e	enum:yytokentype
FIFO	src/gpgpu-sim/gpu-cache.h	/^    FIFO$/;"	e	enum:replacement_policy_t
FILE_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    FILE_DIRECTIVE = 270,$/;"	e	enum:yytokentype	file:
FILE_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    FILE_DIRECTIVE = 270,$/;"	e	enum:yytokentype
FIXED_OVERHEAD	src/gpuwattch/cacti/nuca.cc	39;"	d	file:
FLASHC	src/gpuwattch/basic_components.h	/^	FLASHC \/\/flash controller$/;"	e	enum:MemoryCtrl_type
FLEXINT_H	build/src/cuda-sim/lex.ptx_.c	49;"	d	file:
FLEXINT_H	build/src/cuda-sim/lex.ptxinfo_.c	49;"	d	file:
FLEXINT_H	src/intersim2/lex.yy.c	29;"	d	file:
FLEX_BETA	build/src/cuda-sim/lex.ptx_.c	33;"	d	file:
FLEX_BETA	build/src/cuda-sim/lex.ptxinfo_.c	33;"	d	file:
FLEX_BETA	src/intersim2/lex.yy.c	13;"	d	file:
FLEX_SCANNER	build/src/cuda-sim/lex.ptx_.c	28;"	d	file:
FLEX_SCANNER	build/src/cuda-sim/lex.ptxinfo_.c	28;"	d	file:
FLEX_SCANNER	src/intersim2/lex.yy.c	8;"	d	file:
FLIP_FLOP_D	src/gpuwattch/cacti/highradix.h	58;"	d
FLIP_FLOP_L	src/gpuwattch/cacti/highradix.h	57;"	d
FLITCHANNEL_HPP	src/intersim2/flitchannel.hpp	38;"	d
FLIT_SZ	src/gpuwattch/cacti/highradix.h	/^    double FLIT_SZ;$/;"	m	class:HighRadix
FLOAT_OPERAND	build/src/cuda-sim/ptx.tab.c	/^    FLOAT_OPERAND = 296,$/;"	e	enum:yytokentype	file:
FLOAT_OPERAND	build/src/cuda-sim/ptx.tab.h	/^    FLOAT_OPERAND = 296,$/;"	e	enum:yytokentype
FNUM	src/intersim2/y.tab.c	/^    FNUM = 260$/;"	e	enum:yytokentype	file:
FNUM	src/intersim2/y.tab.c	123;"	d	file:
FNUM	src/intersim2/y.tab.h	/^    FNUM = 260$/;"	e	enum:yytokentype
FNUM	src/intersim2/y.tab.h	56;"	d
FO4	src/gpuwattch/cacti/parameter.h	/^  double FO4;$/;"	m	class:TechnologyParameter
FO4	src/intersim2/power/power_module.hpp	/^  double FO4   ;		     $/;"	m	class:Power_Module
FOR	build/src/cuda-sim/ptxinfo.tab.c	/^    FOR = 278$/;"	e	enum:yytokentype	file:
FOR	build/src/cuda-sim/ptxinfo.tab.h	/^    FOR = 278$/;"	e	enum:yytokentype
FPU	src/gpuwattch/XML_Parse.h	/^	char FPU[20];$/;"	m	struct:__anon15
FPU	src/gpuwattch/basic_components.h	/^    FPU,$/;"	e	enum:FU_type
FPUP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   FPUP,$/;"	e	enum:pwr_cmp_t	file:
FPU_ACC	src/gpuwattch/XML_Parse.h	/^   FPU_ACC,$/;"	e	enum:perf_count_t
FPU_cdb_duty_cycle	src/gpuwattch/XML_Parse.h	/^	double FPU_cdb_duty_cycle ;$/;"	m	struct:__anon15
FPU_cdb_duty_cycle	src/gpuwattch/basic_components.h	/^	       FPU_cdb_duty_cycle;$/;"	m	class:CoreDynParam
FPU_duty_cycle	src/gpuwattch/XML_Parse.h	/^	double FPU_duty_cycle ;$/;"	m	struct:__anon15
FPU_duty_cycle	src/gpuwattch/basic_components.h	/^	       FPU_duty_cycle, ALU_cdb_duty_cycle,MUL_cdb_duty_cycle,$/;"	m	class:CoreDynParam
FPU_per_core	src/gpuwattch/XML_Parse.h	/^	double FPU_per_core;$/;"	m	struct:__anon15
FP_DIV_OP	src/abstract_hardware_model.h	/^    FP_DIV_OP,$/;"	e	enum:special_operations_t
FP_EXP_OP	src/abstract_hardware_model.h	/^	FP_EXP_OP$/;"	e	enum:special_operations_t
FP_INT	src/gpuwattch/XML_Parse.h	/^   FP_INT,$/;"	e	enum:perf_count_t
FP_LG_OP	src/abstract_hardware_model.h	/^	FP_LG_OP,$/;"	e	enum:special_operations_t
FP_MUL_OP	src/abstract_hardware_model.h	/^    FP_MUL_OP,$/;"	e	enum:special_operations_t
FP_OP	src/abstract_hardware_model.h	/^    FP_OP$/;"	e	enum:uarch_operand_type_t
FP_SIN_OP	src/abstract_hardware_model.h	/^	FP_SIN_OP,$/;"	e	enum:special_operations_t
FP_SQRT_OP	src/abstract_hardware_model.h	/^	FP_SQRT_OP,$/;"	e	enum:special_operations_t
FP__OP	src/abstract_hardware_model.h	/^    FP__OP,$/;"	e	enum:special_operations_t
FREQUENCY	src/gpuwattch/cacti/highradix.h	/^    double FREQUENCY;\/\/ GHz$/;"	m	class:HighRadix
FREQUENCY	src/gpuwattch/cacti/router.h	/^	double FREQUENCY; \/\/ move this to config file --TODO$/;"	m	class:MCPAT_Router
FRF	src/gpuwattch/core.h	/^	ArrayST * FRF;$/;"	m	class:RegFU
FRFCFS	src/ramulator_sim/Scheduler.h	/^        FCFS, FRFCFS, FRFCFS_Cap, FRFCFS_PriorHit, MAX$/;"	m	class:Scheduler::Type
FRFCFS_Cap	src/ramulator_sim/Scheduler.h	/^        FCFS, FRFCFS, FRFCFS_Cap, FRFCFS_PriorHit, MAX$/;"	m	class:Scheduler::Type
FRFCFS_PriorHit	src/ramulator_sim/Scheduler.h	/^        FCFS, FRFCFS, FRFCFS_Cap, FRFCFS_PriorHit, MAX$/;"	m	class:Scheduler::Type
FTZ_OPTION	build/src/cuda-sim/ptx.tab.c	/^    FTZ_OPTION = 376,$/;"	e	enum:yytokentype	file:
FTZ_OPTION	build/src/cuda-sim/ptx.tab.h	/^    FTZ_OPTION = 376,$/;"	e	enum:yytokentype
FULL_OPTION	build/src/cuda-sim/ptx.tab.c	/^    FULL_OPTION = 393,$/;"	e	enum:yytokentype	file:
FULL_OPTION	build/src/cuda-sim/ptx.tab.h	/^    FULL_OPTION = 393,$/;"	e	enum:yytokentype
FUNC	build/src/cuda-sim/ptxinfo.tab.c	/^    FUNC = 261,$/;"	e	enum:yytokentype	file:
FUNC	build/src/cuda-sim/ptxinfo.tab.h	/^    FUNC = 261,$/;"	e	enum:yytokentype
FUNC_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    FUNC_DIRECTIVE = 271,$/;"	e	enum:yytokentype	file:
FUNC_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    FUNC_DIRECTIVE = 271,$/;"	e	enum:yytokentype
FU_height	src/gpuwattch/logic.h	/^	double FU_height;$/;"	m	class:FunctionalUnit
FU_type	src/gpuwattch/basic_components.h	/^enum FU_type {$/;"	g
F_sz_nm	src/gpuwattch/cacti/cacti_interface.h	/^    double   F_sz_nm;          \/\/ feature size in nm$/;"	m	class:InputParameter
F_sz_um	src/gpuwattch/cacti/cacti_interface.h	/^    double   F_sz_um;          \/\/ feature size in um$/;"	m	class:InputParameter
FatTree	src/intersim2/networks/fattree.cpp	/^FatTree::FatTree( const Configuration& config,const string & name )$/;"	f	class:FatTree
FatTree	src/intersim2/networks/fattree.hpp	/^class FatTree : public Network {$/;"	c
FeedbackSharedBufferPolicy	src/intersim2/buffer_state.cpp	/^BufferState::FeedbackSharedBufferPolicy::FeedbackSharedBufferPolicy(Configuration const & config, BufferState * parent, const string & name)$/;"	f	class:BufferState::FeedbackSharedBufferPolicy
FeedbackSharedBufferPolicy	src/intersim2/buffer_state.hpp	/^  class FeedbackSharedBufferPolicy : public SharedBufferPolicy {$/;"	c	class:BufferState
FindAvailable	src/intersim/buffer_state.cpp	/^int BufferState::FindAvailable( )$/;"	f	class:BufferState
FixedScheduler	launcher/mk-sched/fixed_scheduler.cc	/^FixedScheduler::FixedScheduler(const std::list<unsigned>& allocs)$/;"	f	class:FixedScheduler
FixedScheduler	launcher/mk-sched/fixed_scheduler.h	/^class FixedScheduler : public StaticScheduler {$/;"	c
Flags	src/ramulator_sim/StatType.h	/^  Flags() {}$/;"	f	class:Stats_Ram::Flags
Flags	src/ramulator_sim/StatType.h	/^  Flags(uint16_t flags): flags(flags) {}$/;"	f	class:Stats_Ram::Flags
Flags	src/ramulator_sim/StatType.h	/^class Flags {$/;"	c	namespace:Stats_Ram
FlashController	src/gpuwattch/iocontrollers.cc	/^FlashController::FlashController(ParseXML *XML_interface,InputParameter* interface_ip_)$/;"	f	class:FlashController
FlashController	src/gpuwattch/iocontrollers.h	/^class FlashController : public Component {$/;"	c
FlatFlyOnChip	src/intersim2/networks/flatfly_onchip.cpp	/^FlatFlyOnChip::FlatFlyOnChip( const Configuration &config, const string & name ) :$/;"	f	class:FlatFlyOnChip
FlatFlyOnChip	src/intersim2/networks/flatfly_onchip.hpp	/^class FlatFlyOnChip : public Network {$/;"	c
Flit	src/intersim/flit.hpp	/^struct Flit {$/;"	s
Flit	src/intersim2/flit.cpp	/^Flit::Flit() $/;"	f	class:Flit
Flit	src/intersim2/flit.hpp	/^class Flit {$/;"	c
FlitChannel	src/intersim2/flitchannel.cpp	/^FlitChannel::FlitChannel(Module * parent, string const & name, int classes)$/;"	f	class:FlitChannel
FlitChannel	src/intersim2/flitchannel.hpp	/^class FlitChannel : public Channel<Flit> {$/;"	c
FlitType	src/intersim2/flit.hpp	/^  enum FlitType { READ_REQUEST  = 0, $/;"	g	class:Flit
Flow control	src/intersim/doc/manual.tex	/^(see the \\texttt{routefunc.cpp} file in the simulator's source code).$/;"	u
Free	src/intersim2/credit.cpp	/^void Credit::Free() {$/;"	f	class:Credit
Free	src/intersim2/flit.cpp	/^void Flit::Free() {$/;"	f	class:Flit
Free	src/intersim2/packet_reply_info.cpp	/^void PacketReplyInfo::Free()$/;"	f	class:PacketReplyInfo
FreeAll	src/intersim2/credit.cpp	/^void Credit::FreeAll() {$/;"	f	class:Credit
FreeAll	src/intersim2/flit.cpp	/^void Flit::FreeAll() {$/;"	f	class:Flit
FreeAll	src/intersim2/packet_reply_info.cpp	/^void PacketReplyInfo::FreeAll()$/;"	f	class:PacketReplyInfo
FreeCredits	src/intersim2/routers/chaos_router.hpp	/^  virtual vector<int> FreeCredits() const { return vector<int>(); }$/;"	f	class:ChaosRouter
FreeCredits	src/intersim2/routers/event_router.hpp	/^  virtual vector<int> FreeCredits() const { return vector<int>(); }$/;"	f	class:EventRouter
FreeCredits	src/intersim2/routers/iq_router.cpp	/^vector<int> IQRouter::FreeCredits() const$/;"	f	class:IQRouter
FreeSlotFor	src/intersim2/buffer_state.cpp	/^void BufferState::BufferPolicy::FreeSlotFor(int vc) {$/;"	f	class:BufferState::BufferPolicy
FreeSlotFor	src/intersim2/buffer_state.cpp	/^void BufferState::FeedbackSharedBufferPolicy::FreeSlotFor(int vc)$/;"	f	class:BufferState::FeedbackSharedBufferPolicy
FreeSlotFor	src/intersim2/buffer_state.cpp	/^void BufferState::SharedBufferPolicy::FreeSlotFor(int vc)$/;"	f	class:BufferState::SharedBufferPolicy
FreeSlotFor	src/intersim2/buffer_state.cpp	/^void BufferState::SimpleFeedbackSharedBufferPolicy::FreeSlotFor(int vc)$/;"	f	class:BufferState::SimpleFeedbackSharedBufferPolicy
FrontFlit	src/intersim/vc.cpp	/^Flit *VC::FrontFlit( )$/;"	f	class:VC
FrontFlit	src/intersim2/buffer.hpp	/^  inline Flit *FrontFlit( int vc ) const$/;"	f	class:Buffer
FrontFlit	src/intersim2/vc.hpp	/^  inline Flit *FrontFlit( ) const$/;"	f	class:VC
Full	src/intersim2/buffer.hpp	/^  inline bool Full( ) const$/;"	f	class:Buffer
FullName	src/intersim2/module.hpp	/^  inline const string & FullName() const { return _fullname; }$/;"	f	class:Module
FuncCache	src/abstract_hardware_model.h	/^enum FuncCache$/;"	g
FuncCachePreferL1	src/abstract_hardware_model.h	/^  FuncCachePreferL1 = 2$/;"	e	enum:FuncCache
FuncCachePreferNone	src/abstract_hardware_model.h	/^  FuncCachePreferNone = 0,$/;"	e	enum:FuncCache
FuncCachePreferShared	src/abstract_hardware_model.h	/^  FuncCachePreferShared = 1,$/;"	e	enum:FuncCache
FunctionalUnit	src/gpuwattch/logic.cc	/^FunctionalUnit::FunctionalUnit(ParseXML *XML_interface, int ithCore_, InputParameter* interface_ip_,const CoreDynParam & dyn_p_, enum FU_type fu_type_, double exClockRate)$/;"	f	class:FunctionalUnit
FunctionalUnit	src/gpuwattch/logic.h	/^class FunctionalUnit :public Component{$/;"	c
GDDR3	src/gpuwattch/basic_components.h	/^	GDDR3$/;"	e	enum:Dram_type
GDDR5	src/gpuwattch/basic_components.h	/^	GDDR5,$/;"	e	enum:Dram_type
GDDR5	src/ramulator_sim/GDDR5.cpp	/^GDDR5::GDDR5(Org org, Speed speed) :$/;"	f	class:GDDR5
GDDR5	src/ramulator_sim/GDDR5.cpp	/^GDDR5::GDDR5(const string& org_str, const string& speed_str) :$/;"	f	class:GDDR5
GDDR5	src/ramulator_sim/GDDR5.h	/^class GDDR5$/;"	c
GDDR5_1Gb_x16	src/ramulator_sim/GDDR5.h	/^        GDDR5_1Gb_x16,   GDDR5_1Gb_x32,$/;"	m	class:GDDR5::Org
GDDR5_1Gb_x32	src/ramulator_sim/GDDR5.h	/^        GDDR5_1Gb_x16,   GDDR5_1Gb_x32,$/;"	m	class:GDDR5::Org
GDDR5_2Gb_x16	src/ramulator_sim/GDDR5.h	/^        GDDR5_2Gb_x16,   GDDR5_2Gb_x32,$/;"	m	class:GDDR5::Org
GDDR5_2Gb_x32	src/ramulator_sim/GDDR5.h	/^        GDDR5_2Gb_x16,   GDDR5_2Gb_x32,$/;"	m	class:GDDR5::Org
GDDR5_4000	src/ramulator_sim/GDDR5.h	/^        GDDR5_4000, GDDR5_4500,$/;"	m	class:GDDR5::Speed
GDDR5_4500	src/ramulator_sim/GDDR5.h	/^        GDDR5_4000, GDDR5_4500,$/;"	m	class:GDDR5::Speed
GDDR5_4Gb_x16	src/ramulator_sim/GDDR5.h	/^        GDDR5_4Gb_x16,   GDDR5_4Gb_x32,$/;"	m	class:GDDR5::Org
GDDR5_4Gb_x32	src/ramulator_sim/GDDR5.h	/^        GDDR5_4Gb_x16,   GDDR5_4Gb_x32,$/;"	m	class:GDDR5::Org
GDDR5_5000	src/ramulator_sim/GDDR5.h	/^        GDDR5_5000, GDDR5_5500,$/;"	m	class:GDDR5::Speed
GDDR5_512Mb_x16	src/ramulator_sim/GDDR5.h	/^        GDDR5_512Mb_x16, GDDR5_512Mb_x32,$/;"	m	class:GDDR5::Org
GDDR5_512Mb_x32	src/ramulator_sim/GDDR5.h	/^        GDDR5_512Mb_x16, GDDR5_512Mb_x32,$/;"	m	class:GDDR5::Org
GDDR5_5500	src/ramulator_sim/GDDR5.h	/^        GDDR5_5000, GDDR5_5500,$/;"	m	class:GDDR5::Speed
GDDR5_6000	src/ramulator_sim/GDDR5.h	/^        GDDR5_6000, GDDR5_6500,$/;"	m	class:GDDR5::Speed
GDDR5_6500	src/ramulator_sim/GDDR5.h	/^        GDDR5_6000, GDDR5_6500,$/;"	m	class:GDDR5::Speed
GDDR5_7000	src/ramulator_sim/GDDR5.h	/^        GDDR5_7000,$/;"	m	class:GDDR5::Speed
GDDR5_8Gb_x16	src/ramulator_sim/GDDR5.h	/^        GDDR5_8Gb_x16,   GDDR5_8Gb_x32,$/;"	m	class:GDDR5::Org
GDDR5_8Gb_x32	src/ramulator_sim/GDDR5.h	/^        GDDR5_8Gb_x16,   GDDR5_8Gb_x32,$/;"	m	class:GDDR5::Org
GEOM_MODIFIER_1D	build/src/cuda-sim/ptx.tab.c	/^    GEOM_MODIFIER_1D = 372,$/;"	e	enum:yytokentype	file:
GEOM_MODIFIER_1D	build/src/cuda-sim/ptx.tab.h	/^    GEOM_MODIFIER_1D = 372,$/;"	e	enum:yytokentype
GEOM_MODIFIER_2D	build/src/cuda-sim/ptx.tab.c	/^    GEOM_MODIFIER_2D = 373,$/;"	e	enum:yytokentype	file:
GEOM_MODIFIER_2D	build/src/cuda-sim/ptx.tab.h	/^    GEOM_MODIFIER_2D = 373,$/;"	e	enum:yytokentype
GEOM_MODIFIER_3D	build/src/cuda-sim/ptx.tab.c	/^    GEOM_MODIFIER_3D = 374,$/;"	e	enum:yytokentype	file:
GEOM_MODIFIER_3D	build/src/cuda-sim/ptx.tab.h	/^    GEOM_MODIFIER_3D = 374,$/;"	e	enum:yytokentype
GEU_OPTION	build/src/cuda-sim/ptx.tab.c	/^    GEU_OPTION = 341,$/;"	e	enum:yytokentype	file:
GEU_OPTION	build/src/cuda-sim/ptx.tab.h	/^    GEU_OPTION = 341,$/;"	e	enum:yytokentype
GEXT	src/gpgpu-sim/Makefile	/^GEXT = g$/;"	m
GE_OPTION	build/src/cuda-sim/ptx.tab.c	/^    GE_OPTION = 331,$/;"	e	enum:yytokentype	file:
GE_OPTION	build/src/cuda-sim/ptx.tab.h	/^    GE_OPTION = 331,$/;"	e	enum:yytokentype
GLOBALVAR	src/gpuwattch/array.cc	32;"	d	file:
GLOBALVAR_H_	src/gpuwattch/globalvar.h	34;"	d
GLOBAL_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    GLOBAL_DIRECTIVE = 272,$/;"	e	enum:yytokentype	file:
GLOBAL_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    GLOBAL_DIRECTIVE = 272,$/;"	e	enum:yytokentype
GLOBAL_HEAP_START	src/abstract_hardware_model.h	219;"	d
GLOBAL_MSHR_MERGE	src/gpgpu-sim/gpu-sim.h	56;"	d
GLOBAL_OPTION	build/src/cuda-sim/ptx.tab.c	/^    GLOBAL_OPTION = 397,$/;"	e	enum:yytokentype	file:
GLOBAL_OPTION	build/src/cuda-sim/ptx.tab.h	/^    GLOBAL_OPTION = 397,$/;"	e	enum:yytokentype
GL_GLEXT_PROTOTYPES	libcuda/cuda_runtime_api.cc	116;"	d	file:
GLuint	libcuda/cuda_runtime_api.cc	/^typedef unsigned long GLuint;$/;"	t	file:
GPGPUSIM_ENTRYPOINT_H_INCLUDED	src/gpgpusim_entrypoint.h	29;"	d
GPGPUSIM_POWER_MODEL	src/gpgpu-sim/gpu-sim.h	64;"	d
GPGPUSim_Context	launcher/simulator.cc	/^Simulator::GPGPUSim_Context()$/;"	f	class:Simulator
GPGPUSim_Init	launcher/simulator.cc	/^Simulator::GPGPUSim_Init()$/;"	f	class:Simulator
GPGPU_SIM_WRAPPER_H_	src/gpuwattch/gpgpu_sim_wrapper.h	29;"	d
GPUTrafficManager	src/intersim2/gputrafficmanager.cpp	/^GPUTrafficManager::GPUTrafficManager( const Configuration &config, const vector<Network *> &net)$/;"	f	class:GPUTrafficManager
GPUTrafficManager	src/intersim2/gputrafficmanager.hpp	/^class GPUTrafficManager : public TrafficManager {$/;"	c
GPU_Architecture	src/gpuwattch/XML_Parse.h	/^	int GPU_Architecture;$/;"	m	struct:__anon26
GPU_CACHE_H	src/gpgpu-sim/gpu-cache.h	29;"	d
GPU_MEMLATSTAT_MC	src/gpgpu-sim/gpu-sim.h	51;"	d
GPU_MISC_H	src/gpgpu-sim/gpu-misc.h	30;"	d
GPU_RSTAT_BW_STAT	src/gpgpu-sim/gpu-sim.h	45;"	d
GPU_RSTAT_DWF_MAP	src/gpgpu-sim/gpu-sim.h	47;"	d
GPU_RSTAT_L1MISS	src/gpgpu-sim/gpu-sim.h	48;"	d
GPU_RSTAT_PDOM	src/gpgpu-sim/gpu-sim.h	49;"	d
GPU_RSTAT_SCHED	src/gpgpu-sim/gpu-sim.h	50;"	d
GPU_RSTAT_SHD_INFO	src/gpgpu-sim/gpu-sim.h	44;"	d
GPU_RSTAT_WARP_DIS	src/gpgpu-sim/gpu-sim.h	46;"	d
GPU_SIM_H	src/gpgpu-sim/gpu-sim.h	29;"	d
GRIDID_REG	src/cuda-sim/opcodes.h	/^   GRIDID_REG,$/;"	e	enum:special_regs
GTU_OPTION	build/src/cuda-sim/ptx.tab.c	/^    GTU_OPTION = 340,$/;"	e	enum:yytokentype	file:
GTU_OPTION	build/src/cuda-sim/ptx.tab.h	/^    GTU_OPTION = 340,$/;"	e	enum:yytokentype
GT_OPTION	build/src/cuda-sim/ptx.tab.c	/^    GT_OPTION = 330,$/;"	e	enum:yytokentype	file:
GT_OPTION	build/src/cuda-sim/ptx.tab.h	/^    GT_OPTION = 330,$/;"	e	enum:yytokentype
G_MEM_LD	src/gpgpu-sim/stats.h	/^   G_MEM_LD,$/;"	e	enum:mem_stage_access_type
G_MEM_ST	src/gpgpu-sim/stats.h	/^   G_MEM_ST,$/;"	e	enum:mem_stage_access_type
Gate_type	src/gpuwattch/cacti/basic_circuit.h	/^enum Gate_type {$/;"	g
GenerateRandomPerm	src/intersim/traffic.cpp	/^void GenerateRandomPerm( int total_nodes )$/;"	f
GetActivePackets	src/intersim2/routers/router.hpp	/^  inline vector<int> const & GetActivePackets(int c) const {$/;"	f	class:Router
GetActivity	src/intersim2/flitchannel.hpp	/^  inline vector<int> const & GetActivity() const {$/;"	f	class:FlitChannel
GetActivity	src/intersim2/power/switch_monitor.hpp	/^  vector<int> const & GetActivity() const {$/;"	f	class:SwitchMonitor
GetBin	src/intersim2/stats.hpp	/^  int GetBin(int b){ return _hist[b];}$/;"	f	class:Stats
GetBufferBusyStalls	src/intersim2/routers/router.hpp	/^  inline int GetBufferBusyStalls(int c) const {$/;"	f	class:Router
GetBufferConflictStalls	src/intersim2/routers/router.hpp	/^  inline int GetBufferConflictStalls(int c) const {$/;"	f	class:Router
GetBufferFullStalls	src/intersim2/routers/router.hpp	/^  inline int GetBufferFullStalls(int c) const {$/;"	f	class:Router
GetBufferMonitor	src/intersim2/routers/iq_router.hpp	/^  BufferMonitor const * const GetBufferMonitor() const {return _bufferMonitor;}$/;"	f	class:IQRouter
GetBufferOccupancy	src/intersim2/routers/chaos_router.hpp	/^  virtual int GetBufferOccupancy(int i) const {return 0;}$/;"	f	class:ChaosRouter
GetBufferOccupancy	src/intersim2/routers/event_router.hpp	/^  virtual int GetBufferOccupancy(int i) const {return 0;}$/;"	f	class:EventRouter
GetBufferOccupancy	src/intersim2/routers/iq_router.cpp	/^int IQRouter::GetBufferOccupancy(int i) const {$/;"	f	class:IQRouter
GetBufferOccupancyForClass	src/intersim2/routers/chaos_router.hpp	/^  virtual int GetBufferOccupancyForClass(int input, int cl) const {return 0;}$/;"	f	class:ChaosRouter
GetBufferOccupancyForClass	src/intersim2/routers/event_router.hpp	/^  virtual int GetBufferOccupancyForClass(int input, int cl) const {return 0;}$/;"	f	class:EventRouter
GetBufferOccupancyForClass	src/intersim2/routers/iq_router.cpp	/^int IQRouter::GetBufferOccupancyForClass(int input, int cl) const$/;"	f	class:IQRouter
GetBufferReservedStalls	src/intersim2/routers/router.hpp	/^  inline int GetBufferReservedStalls(int c) const {$/;"	f	class:Router
GetChannels	src/intersim2/networks/network.hpp	/^  const vector<FlitChannel *> & GetChannels(){return _chan;}$/;"	f	class:Network
GetChannelsCred	src/intersim2/networks/network.hpp	/^  const vector<CreditChannel *> & GetChannelsCred(){return _chan_cred;}$/;"	f	class:Network
GetCredits	src/intersim/event_router.cpp	/^int EventNextVCState::GetCredits( int vc ) const$/;"	f	class:EventNextVCState
GetCredits	src/intersim2/routers/event_router.cpp	/^int EventNextVCState::GetCredits( int vc ) const$/;"	f	class:EventNextVCState
GetCrossbarConflictStalls	src/intersim2/routers/router.hpp	/^  inline int GetCrossbarConflictStalls(int c) const {$/;"	f	class:Router
GetDesc	src/option_parser.cc	/^   const string& GetDesc() { return m_optionDesc; }$/;"	f	class:OptionRegistryInterface
GetEject	src/intersim2/networks/network.hpp	/^  FlitChannel * GetEject(int index) {return _eject[index];}$/;"	f	class:Network
GetEject	src/intersim2/networks/network.hpp	/^  const vector<FlitChannel *> & GetEject(){return _eject;}$/;"	f	class:Network
GetEjectCred	src/intersim2/networks/network.hpp	/^  CreditChannel * GetEjectCred(int index) {return _eject_cred[index];}$/;"	f	class:Network
GetEjectCred	src/intersim2/networks/network.hpp	/^  const vector<CreditChannel *> & GetEjectCred(){return _eject_cred;}$/;"	f	class:Network
GetEjectedFlit	src/intersim2/interconnect_interface.cpp	/^Flit* InterconnectInterface::GetEjectedFlit(int subnet, int node)$/;"	f	class:InterconnectInterface
GetFlitSize	src/intersim2/interconnect_interface.cpp	/^unsigned InterconnectInterface::GetFlitSize() const$/;"	f	class:InterconnectInterface
GetFloat	src/intersim/config_utils.cpp	/^double Configuration::GetFloat( const string &field, double def ) const$/;"	f	class:Configuration
GetFloat	src/intersim2/config_utils.cpp	/^double Configuration::GetFloat(string const & field) const$/;"	f	class:Configuration
GetFloatArray	src/intersim2/config_utils.cpp	/^vector<double> Configuration::GetFloatArray(string const & field) const$/;"	f	class:Configuration
GetFloatMap	src/intersim2/config_utils.hpp	/^  inline const map<string, double> & GetFloatMap() const {$/;"	f	class:Configuration
GetID	src/intersim/router.cpp	/^int Router::GetID( ) const$/;"	f	class:Router
GetID	src/intersim2/routers/router.hpp	/^  inline int GetID( ) const {return _id;}$/;"	f	class:Router
GetIcntStats	src/intersim2/interconnect_interface.cpp	/^Stats* InterconnectInterface::GetIcntStats(const string &name) const$/;"	f	class:InterconnectInterface
GetIcntTime	src/intersim2/interconnect_interface.cpp	/^int InterconnectInterface::GetIcntTime() const$/;"	f	class:InterconnectInterface
GetInject	src/intersim2/networks/network.hpp	/^  FlitChannel * GetInject(int index) {return _inject[index];}$/;"	f	class:Network
GetInject	src/intersim2/networks/network.hpp	/^  const vector<FlitChannel *> & GetInject() {return _inject;}$/;"	f	class:Network
GetInjectCred	src/intersim2/networks/network.hpp	/^  CreditChannel * GetInjectCred(int index) {return _inject_cred[index];}$/;"	f	class:Network
GetInjectCred	src/intersim2/networks/network.hpp	/^  const vector<CreditChannel *> & GetInjectCred() {return _inject_cred;}$/;"	f	class:Network
GetInjectionProcess	src/intersim/injection.cpp	/^tInjectionProcess GetInjectionProcess( const Configuration& config )$/;"	f
GetInput	src/intersim/event_router.cpp	/^int EventNextVCState::GetInput( int vc ) const$/;"	f	class:EventNextVCState
GetInput	src/intersim2/routers/event_router.cpp	/^int EventNextVCState::GetInput( int vc ) const$/;"	f	class:EventNextVCState
GetInputChannel	src/intersim2/routers/router.hpp	/^  inline FlitChannel * GetInputChannel( int input ) const {$/;"	f	class:Router
GetInputVC	src/intersim/event_router.cpp	/^int EventNextVCState::GetInputVC( int vc ) const$/;"	f	class:EventNextVCState
GetInputVC	src/intersim2/routers/event_router.cpp	/^int EventNextVCState::GetInputVC( int vc ) const$/;"	f	class:EventNextVCState
GetInt	src/intersim/config_utils.cpp	/^unsigned int Configuration::GetInt( const string &field, unsigned int def ) const$/;"	f	class:Configuration
GetInt	src/intersim2/config_utils.cpp	/^int Configuration::GetInt(string const & field) const$/;"	f	class:Configuration
GetIntArray	src/intersim2/config_utils.cpp	/^vector<int> Configuration::GetIntArray(string const & field) const$/;"	f	class:Configuration
GetIntMap	src/intersim2/config_utils.hpp	/^  inline const map<string, int> & GetIntMap() const {$/;"	f	class:Configuration
GetK	src/intersim/fly.cpp	/^int KNFly::GetK( ) const$/;"	f	class:KNFly
GetK	src/intersim/kncube.cpp	/^int KNCube::GetK( ) const$/;"	f	class:KNCube
GetK	src/intersim2/networks/anynet.hpp	/^  int GetK( ) const{ return -1;}$/;"	f	class:AnyNet
GetK	src/intersim2/networks/dragonfly.cpp	/^int DragonFlyNew::GetK( ) const$/;"	f	class:DragonFlyNew
GetK	src/intersim2/networks/flatfly_onchip.cpp	/^int FlatFlyOnChip::GetK( ) const$/;"	f	class:FlatFlyOnChip
GetK	src/intersim2/networks/fly.cpp	/^int KNFly::GetK( ) const$/;"	f	class:KNFly
GetK	src/intersim2/networks/kncube.cpp	/^int KNCube::GetK( ) const$/;"	f	class:KNCube
GetLatency	src/intersim2/channel.hpp	/^  int GetLatency() const { return _delay ; }$/;"	f	class:Channel
GetN	src/intersim/fly.cpp	/^int KNFly::GetN( ) const$/;"	f	class:KNFly
GetN	src/intersim/kncube.cpp	/^int KNCube::GetN( ) const$/;"	f	class:KNCube
GetN	src/intersim2/networks/anynet.hpp	/^  int GetN( ) const{ return -1;}$/;"	f	class:AnyNet
GetN	src/intersim2/networks/dragonfly.cpp	/^int DragonFlyNew::GetN( ) const$/;"	f	class:DragonFlyNew
GetN	src/intersim2/networks/flatfly_onchip.cpp	/^int FlatFlyOnChip::GetN( ) const$/;"	f	class:FlatFlyOnChip
GetN	src/intersim2/networks/fly.cpp	/^int KNFly::GetN( ) const$/;"	f	class:KNFly
GetN	src/intersim2/networks/kncube.cpp	/^int KNCube::GetN( ) const$/;"	f	class:KNCube
GetName	src/option_parser.cc	/^   const string& GetName() { return m_optionName; }$/;"	f	class:OptionRegistryInterface
GetNextToken	src/gpuwattch/xmlParser.cc	/^static NextToken GetNextToken(XML *pXML, int *pcbToken, enum XMLTokenTypeTag *pType)$/;"	f	file:
GetOccupancy	src/intersim2/buffer.hpp	/^  inline int GetOccupancy( ) const$/;"	f	class:Buffer
GetOccupancy	src/intersim2/buffer.hpp	/^  inline int GetOccupancy( int vc ) const$/;"	f	class:Buffer
GetOccupancy	src/intersim2/vc.hpp	/^  inline int GetOccupancy() const$/;"	f	class:VC
GetOccupancyForClass	src/intersim2/buffer.hpp	/^  inline int GetOccupancyForClass(int c) const$/;"	f	class:Buffer
GetOutputChannel	src/intersim2/routers/router.hpp	/^  inline FlitChannel * GetOutputChannel( int output ) const {$/;"	f	class:Router
GetOutputPort	src/intersim/vc.cpp	/^int VC::GetOutputPort( ) const$/;"	f	class:VC
GetOutputPort	src/intersim2/buffer.hpp	/^  inline int GetOutputPort( int vc ) const$/;"	f	class:Buffer
GetOutputPort	src/intersim2/vc.hpp	/^  inline int GetOutputPort( ) const$/;"	f	class:VC
GetOutputVC	src/intersim/vc.cpp	/^int VC::GetOutputVC( ) const$/;"	f	class:VC
GetOutputVC	src/intersim2/buffer.hpp	/^  inline int GetOutputVC( int vc ) const$/;"	f	class:Buffer
GetOutputVC	src/intersim2/vc.hpp	/^  inline int GetOutputVC( ) const$/;"	f	class:VC
GetOutstandingCredits	src/intersim2/routers/router.hpp	/^  inline vector<int> const & GetOutstandingCredits(int c) const {$/;"	f	class:Router
GetPortVC	src/intersim/outputset.cpp	/^bool OutputSet::GetPortVC( int *out_port, int *out_vc ) const$/;"	f	class:OutputSet
GetPortVC	src/intersim2/outputset.cpp	/^bool OutputSet::GetPortVC( int *out_port, int *out_vc ) const$/;"	f	class:OutputSet
GetPresence	src/intersim/event_router.cpp	/^int EventNextVCState::GetPresence( int vc ) const$/;"	f	class:EventNextVCState
GetPresence	src/intersim2/routers/event_router.cpp	/^int EventNextVCState::GetPresence( int vc ) const$/;"	f	class:EventNextVCState
GetPriority	src/intersim/vc.cpp	/^int VC::GetPriority( ) const$/;"	f	class:VC
GetPriority	src/intersim2/buffer.hpp	/^  inline int GetPriority( int vc ) const$/;"	f	class:Buffer
GetPriority	src/intersim2/vc.hpp	/^  inline int GetPriority( ) const$/;"	f	class:VC
GetReads	src/intersim2/power/buffer_monitor.hpp	/^  inline const vector<int> & GetReads() const {$/;"	f	class:BufferMonitor
GetReceivedFlits	src/intersim2/routers/router.hpp	/^  inline vector<int> const & GetReceivedFlits(int c) const {$/;"	f	class:Router
GetRouteSet	src/intersim/vc.cpp	/^const OutputSet *VC::GetRouteSet( ) const$/;"	f	class:VC
GetRouteSet	src/intersim2/buffer.hpp	/^  inline const OutputSet *GetRouteSet( int vc ) const$/;"	f	class:Buffer
GetRouteSet	src/intersim2/vc.cpp	/^const OutputSet *VC::GetRouteSet( ) const$/;"	f	class:VC
GetRouter	src/intersim2/networks/network.hpp	/^  Router * GetRouter(int index) {return _routers[index];}$/;"	f	class:Network
GetRouters	src/intersim2/networks/network.hpp	/^  const vector<Router *> & GetRouters(){return _routers;}$/;"	f	class:Network
GetRoutingFunction	src/intersim/routefunc.cpp	/^tRoutingFunction GetRoutingFunction( const Configuration& config )$/;"	f
GetSentFlits	src/intersim2/routers/router.hpp	/^  inline vector<int> const & GetSentFlits(int c) const {$/;"	f	class:Router
GetSet	src/intersim2/outputset.cpp	/^const set<OutputSet::sSetElement> & OutputSet::GetSet() const{$/;"	f	class:OutputSet
GetSimTime	src/intersim2/main.cpp	/^int GetSimTime() {$/;"	f
GetSink	src/intersim2/flitchannel.hpp	/^  inline Router const * const GetSink() const {$/;"	f	class:FlitChannel
GetSinkPort	src/intersim2/flitchannel.hpp	/^  inline int const & GetSinkPort() const {$/;"	f	class:FlitChannel
GetSource	src/intersim2/flitchannel.hpp	/^  inline Router const * const GetSource() const {$/;"	f	class:FlitChannel
GetSourcePort	src/intersim2/flitchannel.hpp	/^  inline int const & GetSourcePort() const {$/;"	f	class:FlitChannel
GetState	src/intersim/event_router.cpp	/^EventNextVCState::eNextVCState EventNextVCState::GetState( int vc ) const$/;"	f	class:EventNextVCState
GetState	src/intersim/vc.cpp	/^VC::eVCState VC::GetState( ) const$/;"	f	class:VC
GetState	src/intersim2/buffer.hpp	/^  inline VC::eVCState GetState( int vc ) const$/;"	f	class:Buffer
GetState	src/intersim2/routers/event_router.cpp	/^EventNextVCState::eNextVCState EventNextVCState::GetState( int vc ) const$/;"	f	class:EventNextVCState
GetState	src/intersim2/vc.hpp	/^  inline VC::eVCState GetState( ) const$/;"	f	class:VC
GetStateTime	src/intersim/vc.cpp	/^int VC::GetStateTime( ) const$/;"	f	class:VC
GetStats	src/intersim2/main.cpp	/^Stats * GetStats(const std::string & name) {$/;"	f
GetStoredFlits	src/intersim2/routers/router.hpp	/^  inline vector<int> const & GetStoredFlits(int c) const {$/;"	f	class:Router
GetStr	src/intersim/config_utils.cpp	/^void Configuration::GetStr( const string &field, string &value, const string &def ) const$/;"	f	class:Configuration
GetStr	src/intersim2/config_utils.cpp	/^string Configuration::GetStr(string const & field) const$/;"	f	class:Configuration
GetStrArray	src/intersim2/config_utils.cpp	/^vector<string> Configuration::GetStrArray(string const & field) const$/;"	f	class:Configuration
GetStrMap	src/intersim2/config_utils.hpp	/^  inline const map<string, string> & GetStrMap() const {$/;"	f	class:Configuration
GetSwitchMonitor	src/intersim2/routers/iq_router.hpp	/^  SwitchMonitor const * const GetSwitchMonitor() const {return _switchMonitor;}$/;"	f	class:IQRouter
GetTheConfig	src/intersim/config_utils.cpp	/^Configuration *Configuration::GetTheConfig( )$/;"	f	class:Configuration
GetTheConfig	src/intersim2/config_utils.cpp	/^Configuration * Configuration::GetTheConfig()$/;"	f	class:Configuration
GetTrafficFunction	src/intersim/traffic.cpp	/^tTrafficFunction GetTrafficFunction( const Configuration& config )$/;"	f
GetUsedCredit	src/intersim2/routers/chaos_router.hpp	/^  virtual int GetUsedCredit(int out) const {return 0;}$/;"	f	class:ChaosRouter
GetUsedCredit	src/intersim2/routers/event_router.hpp	/^  virtual int GetUsedCredit(int o) const {return 0;}$/;"	f	class:EventRouter
GetUsedCredit	src/intersim2/routers/iq_router.cpp	/^int IQRouter::GetUsedCredit(int o) const$/;"	f	class:IQRouter
GetUsedCreditForClass	src/intersim2/routers/chaos_router.hpp	/^  virtual int GetUsedCreditForClass(int output, int cl) const {return 0;}$/;"	f	class:ChaosRouter
GetUsedCreditForClass	src/intersim2/routers/event_router.hpp	/^  virtual int GetUsedCreditForClass(int output, int cl) const {return 0;}$/;"	f	class:EventRouter
GetUsedCreditForClass	src/intersim2/routers/iq_router.cpp	/^int IQRouter::GetUsedCreditForClass(int output, int cl) const$/;"	f	class:IQRouter
GetVC	src/intersim/outputset.cpp	/^int OutputSet::GetVC( int output_port, int vc_index, int *pri ) const$/;"	f	class:OutputSet
GetVC	src/intersim2/outputset.cpp	/^int OutputSet::GetVC( int output_port, int vc_index, int *pri ) const$/;"	f	class:OutputSet
GetWrites	src/intersim2/power/buffer_monitor.hpp	/^  inline const vector<int> & GetWrites() const {$/;"	f	class:BufferMonitor
Getting started	src/intersim/doc/manual.tex	/^Section~\\ref{sec:config_params} for reference.$/;"	s
Global	src/gpuwattch/cacti/cacti_interface.h	/^    Global \/* gloabl wires with repeaters *\/,$/;"	e	enum:Wire_type
Global_10	src/gpuwattch/cacti/cacti_interface.h	/^    Global_10 \/* 10% delay penalty *\/,$/;"	e	enum:Wire_type
Global_20	src/gpuwattch/cacti/cacti_interface.h	/^    Global_20 \/* 20% delay penalty *\/,$/;"	e	enum:Wire_type
Global_30	src/gpuwattch/cacti/cacti_interface.h	/^    Global_30 \/* 30% delay penalty *\/,$/;"	e	enum:Wire_type
Global_5	src/gpuwattch/cacti/cacti_interface.h	/^    Global_5 \/* 5% delay penalty *\/,$/;"	e	enum:Wire_type
GpuWrapper	src/ramulator_sim/gpu_wrapper.cpp	/^GpuWrapper::GpuWrapper(const Config& configs, int cacheline,  memory_partition_unit *mp, unsigned id):$/;"	f	class:GpuWrapper
GpuWrapper	src/ramulator_sim/gpu_wrapper.h	/^class GpuWrapper$/;"	c
HALFCLOCK_ID	src/cuda-sim/opcodes.h	/^   HALFCLOCK_ID,$/;"	e	enum:special_regs
HALF_OPTION	build/src/cuda-sim/ptx.tab.c	/^    HALF_OPTION = 325,$/;"	e	enum:yytokentype	file:
HALF_OPTION	build/src/cuda-sim/ptx.tab.h	/^    HALF_OPTION = 325,$/;"	e	enum:yytokentype
HBM	src/ramulator_sim/HBM.cpp	/^HBM::HBM(Org org, Speed speed)$/;"	f	class:HBM
HBM	src/ramulator_sim/HBM.cpp	/^HBM::HBM(const string& org_str, const string& speed_str) :$/;"	f	class:HBM
HBM	src/ramulator_sim/HBM.h	/^class HBM$/;"	c
HBM_1Gb	src/ramulator_sim/HBM.h	/^        HBM_1Gb,$/;"	m	class:HBM::Org
HBM_1Gbps	src/ramulator_sim/HBM.h	/^        HBM_1Gbps,$/;"	m	class:HBM::Speed
HBM_2Gb	src/ramulator_sim/HBM.h	/^        HBM_2Gb,$/;"	m	class:HBM::Org
HBM_4Gb	src/ramulator_sim/HBM.h	/^        HBM_4Gb,$/;"	m	class:HBM::Org
HEADER	build/src/cuda-sim/ptxinfo.tab.c	/^    HEADER = 259,$/;"	e	enum:yytokentype	file:
HEADER	build/src/cuda-sim/ptxinfo.tab.h	/^    HEADER = 259,$/;"	e	enum:yytokentype
HGPUNV	libcuda/cuda_runtime_api.cc	/^typedef void* HGPUNV;$/;"	t	file:
HISTOGRAM_H	src/gpgpu-sim/histogram.h	29;"	d
HIT	src/gpgpu-sim/gpu-cache.h	/^    HIT = 0,$/;"	e	enum:cache_request_status
HIT_RESERVED	src/gpgpu-sim/gpu-cache.h	/^    HIT_RESERVED,$/;"	e	enum:cache_request_status
HI_OPTION	build/src/cuda-sim/ptx.tab.c	/^    HI_OPTION = 334,$/;"	e	enum:yytokentype	file:
HI_OPTION	build/src/cuda-sim/ptx.tab.h	/^    HI_OPTION = 334,$/;"	e	enum:yytokentype
HOT	src/ramulator_sim/ALDRAM.h	/^        COLD, HOT, MAX$/;"	m	class:ALDRAM::Temp
HPOWERRAIL	src/gpuwattch/cacti/parameter.h	/^  double HPOWERRAIL;$/;"	m	class:TechnologyParameter
HS_OPTION	build/src/cuda-sim/ptx.tab.c	/^    HS_OPTION = 335,$/;"	e	enum:yytokentype	file:
HS_OPTION	build/src/cuda-sim/ptx.tab.h	/^    HS_OPTION = 335,$/;"	e	enum:yytokentype
H_DFQD1	src/intersim2/power/power_module.hpp	/^  double H_DFQD1;$/;"	m	class:Power_Module
H_INVD2	src/intersim2/power/power_module.hpp	/^  double H_INVD2;$/;"	m	class:Power_Module
H_ND2D1	src/intersim2/power/power_module.hpp	/^  double H_ND2D1;$/;"	m	class:Power_Module
H_SRAM	src/intersim2/power/power_module.hpp	/^  double H_SRAM;$/;"	m	class:Power_Module
Half_net_topology	src/gpuwattch/cacti/basic_circuit.h	/^enum Half_net_topology {$/;"	g
HasBuffer	src/intersim2/interconnect_interface.cpp	/^bool InterconnectInterface::HasBuffer(unsigned deviceID, unsigned int size) const$/;"	f	class:InterconnectInterface
HasPacket	src/intersim2/interconnect_interface.hpp	/^    inline bool HasPacket() const { return _packet_n; }$/;"	f	class:InterconnectInterface::_BoundaryBufferItem
HeightFromID	src/intersim2/networks/qtree.cpp	/^int QTree::HeightFromID( int id ) $/;"	f	class:QTree
HighRadix	src/gpuwattch/cacti/highradix.cc	/^HighRadix::HighRadix($/;"	f	class:HighRadix
HighRadix	src/gpuwattch/cacti/highradix.h	/^class HighRadix : public Component$/;"	c
Histogram	src/ramulator_sim/StatType.h	/^  Histogram(): param_buckets(0) { reset(); }$/;"	f	class:Stats_Ram::Histogram
Histogram	src/ramulator_sim/StatType.h	/^  Histogram(size_type __buckets): cvec(__buckets) {$/;"	f	class:Stats_Ram::Histogram
Histogram	src/ramulator_sim/StatType.h	/^class Histogram: public Stat<Histogram> {$/;"	c	namespace:Stats_Ram
HistogramStat	src/ramulator_sim/Statistics.h	/^class HistogramStat : public DistStatBase<Stats_Ram::Histogram> {$/;"	c
HotSpotTrafficPattern	src/intersim2/traffic.cpp	/^HotSpotTrafficPattern::HotSpotTrafficPattern(int nodes, vector<int> hotspots, $/;"	f	class:HotSpotTrafficPattern
HotSpotTrafficPattern	src/intersim2/traffic.hpp	/^class HotSpotTrafficPattern : public TrafficPattern {$/;"	c
Htree2	src/gpuwattch/cacti/htree2.cc	/^Htree2::Htree2($/;"	f	class:Htree2
Htree2	src/gpuwattch/cacti/htree2.h	/^class Htree2 : public Component$/;"	c
Htree_type	src/gpuwattch/cacti/basic_circuit.h	/^enum Htree_type {$/;"	g
I	src/gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router
IB	src/gpuwattch/core.h	/^	ArrayST * IB;$/;"	m	class:InstFetchU
IBP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   IBP=0,$/;"	e	enum:pwr_cmp_t	file:
IBUFFER_SIZE	common/shd_warp_t.h	/^    static const unsigned IBUFFER_SIZE=2;$/;"	m	class:shd_warp_t
IBassoc	src/gpuwattch/arch_const.h	/^const int IBassoc				=	0;\/\/In Niagara it is still fully associ$/;"	v
IBblocksize	src/gpuwattch/arch_const.h	/^const int IBblocksize			=	4;$/;"	v
IBsize	src/gpuwattch/arch_const.h	/^const int IBsize				=	64;\/\/2*4*instruction_length\/8*2;$/;"	v
ICNT	src/gpgpu-sim/gpu-sim.cc	95;"	d	file:
ICNT_RC_FAIL	src/gpgpu-sim/stats.h	/^   ICNT_RC_FAIL,$/;"	e	enum:mem_stage_stall_type
ICNT_WRAPPER_H	src/gpgpu-sim/icnt_wrapper.h	29;"	d
ICP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   ICP,$/;"	e	enum:pwr_cmp_t	file:
IC_H	src/gpuwattch/XML_Parse.h	/^   IC_H,$/;"	e	enum:perf_count_t
IC_M	src/gpuwattch/XML_Parse.h	/^   IC_M,$/;"	e	enum:perf_count_t
ID	launcher/child_process.h	/^  unsigned        ID;$/;"	m	class:ChildProcess
IDENTIFIER	build/src/cuda-sim/ptx.tab.c	/^    IDENTIFIER = 294,$/;"	e	enum:yytokentype	file:
IDENTIFIER	build/src/cuda-sim/ptx.tab.h	/^    IDENTIFIER = 294,$/;"	e	enum:yytokentype
IDENTIFIER	build/src/cuda-sim/ptxinfo.tab.c	/^    IDENTIFIER = 268,$/;"	e	enum:yytokentype	file:
IDENTIFIER	build/src/cuda-sim/ptxinfo.tab.h	/^    IDENTIFIER = 268,$/;"	e	enum:yytokentype
IDLE_COREP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   IDLE_COREP,$/;"	e	enum:pwr_cmp_t	file:
IDLE_CORE_N	src/gpuwattch/XML_Parse.h	/^   IDLE_CORE_N,$/;"	e	enum:perf_count_t
ID_OC_MEM	src/gpgpu-sim/shader.h	/^    ID_OC_MEM,  $/;"	e	enum:pipeline_stage_name_t
ID_OC_SFU	src/gpgpu-sim/shader.h	/^    ID_OC_SFU,  $/;"	e	enum:pipeline_stage_name_t
ID_OC_SP	src/gpgpu-sim/shader.h	/^    ID_OC_SP=0,$/;"	e	enum:pipeline_stage_name_t
ID_inst	src/gpuwattch/core.h	/^	inst_decoder * ID_inst;$/;"	m	class:InstFetchU
ID_misc	src/gpuwattch/core.h	/^	inst_decoder * ID_misc;$/;"	m	class:InstFetchU
ID_operand	src/gpuwattch/core.h	/^	inst_decoder * ID_operand;$/;"	m	class:InstFetchU
IFBassoc	src/gpuwattch/arch_const.h	/^const int IFBassoc=0;\/\/In Niagara it is still fully associ$/;"	v
IFBblocksize	src/gpuwattch/arch_const.h	/^const int IFBblocksize=4;$/;"	v
IFBsize	src/gpuwattch/arch_const.h	/^const int IFBsize=128;\/\/$/;"	v
IFU_duty_cycle	src/gpuwattch/XML_Parse.h	/^	double IFU_duty_cycle ;$/;"	m	struct:__anon15
IFU_duty_cycle	src/gpuwattch/basic_components.h	/^	double IFU_duty_cycle,BR_duty_cycle,LSU_duty_cycle,MemManU_I_duty_cycle,$/;"	m	class:CoreDynParam
INCLUDES	src/gpuwattch/cacti/cacti.mk	/^INCLUDES       = -I \/usr\/include\/python2.4 -I \/usr\/lib\/python2.4\/config$/;"	m
INCPATH	src/intersim2/Makefile	/^INCPATH = -I. -Iarbiters -Iallocators -Irouters -Inetworks -Ipower -I..\/gpgpu-sim\/$/;"	m
INCS	src/gpuwattch/cacti/cacti.mk	/^INCS = -lm$/;"	m
INCS	src/gpuwattch/mcpat.mk	/^INCS = -lm$/;"	m
INCS	src/gpuwattch/mcpatXeonCore.mk	/^INCS = -lm$/;"	m
INDENTCHAR	src/gpuwattch/xmlParser.cc	145;"	d	file:
INF	src/gpuwattch/cacti/const.h	104;"	d
INFO	build/src/cuda-sim/ptxinfo.tab.c	/^    INFO = 260,$/;"	e	enum:yytokentype	file:
INFO	build/src/cuda-sim/ptxinfo.tab.h	/^    INFO = 260,$/;"	e	enum:yytokentype
INITIAL	build/src/cuda-sim/lex.ptx_.c	1379;"	d	file:
INITIAL	build/src/cuda-sim/lex.ptxinfo_.c	633;"	d	file:
INITIAL	src/intersim2/lex.yy.c	500;"	d	file:
INPUT_WIRE_TO_INPUT_GATE_CAP_RATIO	src/gpuwattch/cacti/const.h	164;"	d
INP_BUFF_ENT	src/gpuwattch/cacti/highradix.h	/^    double INP_BUFF_ENT;$/;"	m	class:HighRadix
INP_BUFF_SZ	src/gpuwattch/cacti/highradix.h	/^    double INP_BUFF_SZ;$/;"	m	class:HighRadix
INSTRUCTION	src/gpgpu-sim/stat-tool.cc	/^   NORMAL, TEXTURE, CONSTANT, INSTRUCTION$/;"	e	enum:cache_access_logger_types	file:
INT16_MAX	build/src/cuda-sim/lex.ptx_.c	91;"	d	file:
INT16_MAX	build/src/cuda-sim/lex.ptxinfo_.c	91;"	d	file:
INT16_MAX	src/intersim2/lex.yy.c	71;"	d	file:
INT16_MIN	build/src/cuda-sim/lex.ptx_.c	82;"	d	file:
INT16_MIN	build/src/cuda-sim/lex.ptxinfo_.c	82;"	d	file:
INT16_MIN	src/intersim2/lex.yy.c	62;"	d	file:
INT32_MAX	build/src/cuda-sim/lex.ptx_.c	94;"	d	file:
INT32_MAX	build/src/cuda-sim/lex.ptxinfo_.c	94;"	d	file:
INT32_MAX	src/intersim2/lex.yy.c	74;"	d	file:
INT32_MIN	build/src/cuda-sim/lex.ptx_.c	85;"	d	file:
INT32_MIN	build/src/cuda-sim/lex.ptxinfo_.c	85;"	d	file:
INT32_MIN	src/intersim2/lex.yy.c	65;"	d	file:
INT8_MAX	build/src/cuda-sim/lex.ptx_.c	88;"	d	file:
INT8_MAX	build/src/cuda-sim/lex.ptxinfo_.c	88;"	d	file:
INT8_MAX	src/intersim2/lex.yy.c	68;"	d	file:
INT8_MIN	build/src/cuda-sim/lex.ptx_.c	79;"	d	file:
INT8_MIN	build/src/cuda-sim/lex.ptxinfo_.c	79;"	d	file:
INT8_MIN	src/intersim2/lex.yy.c	59;"	d	file:
INTEGRATED_WITH_GEM5	src/ramulator_sim/Statistics.h	8;"	d
INTERCONNECT_INTERFACE_H	src/intersim/interconnect_interface.h	2;"	d
INTERFACE	src/ramulator_sim/Makefile	/^INTERFACE = gpu_wrapper.cpp$/;"	m
INTERSIM	src/gpgpu-sim/icnt_wrapper.h	/^   INTERSIM = 1,$/;"	e	enum:network_mode
INT_DIV_OP	src/abstract_hardware_model.h	/^    INT_DIV_OP,$/;"	e	enum:special_operations_t
INT_MAX	src/cuda-sim/cuda-math.h	75;"	d
INT_MUL24_OP	src/abstract_hardware_model.h	/^	INT_MUL24_OP,$/;"	e	enum:special_operations_t
INT_MUL32_OP	src/abstract_hardware_model.h	/^	INT_MUL32_OP,$/;"	e	enum:special_operations_t
INT_MUL_OP	src/abstract_hardware_model.h	/^	INT_MUL_OP,$/;"	e	enum:special_operations_t
INT_OP	src/abstract_hardware_model.h	/^    INT_OP,$/;"	e	enum:uarch_operand_type_t
INT_OPERAND	build/src/cuda-sim/ptx.tab.c	/^    INT_OPERAND = 295,$/;"	e	enum:yytokentype	file:
INT_OPERAND	build/src/cuda-sim/ptx.tab.h	/^    INT_OPERAND = 295,$/;"	e	enum:yytokentype
INT_OPERAND	build/src/cuda-sim/ptxinfo.tab.c	/^    INT_OPERAND = 258,$/;"	e	enum:yytokentype	file:
INT_OPERAND	build/src/cuda-sim/ptxinfo.tab.h	/^    INT_OPERAND = 258,$/;"	e	enum:yytokentype
INT__OP	src/abstract_hardware_model.h	/^    INT__OP,$/;"	e	enum:special_operations_t
INV	src/gpuwattch/cacti/const.h	144;"	d
INVALID	src/gpgpu-sim/gpu-cache.h	/^    INVALID,$/;"	e	enum:cache_block_state
INV_LEAK_STACK_FACTOR	src/gpuwattch/cacti/const.h	234;"	d
IN_COMMENT	build/src/cuda-sim/lex.ptx_.c	1381;"	d	file:
IN_FUNC_DECL	build/src/cuda-sim/lex.ptx_.c	1382;"	d	file:
IN_STRING	build/src/cuda-sim/lex.ptx_.c	1380;"	d	file:
IOCONTROLLERS_H_	src/gpuwattch/iocontrollers.h	32;"	d
IO_buffer_size_per_channel	src/gpuwattch/XML_Parse.h	/^	int IO_buffer_size_per_channel;$/;"	m	struct:__anon23
IQRouter	src/intersim/iq_router.cpp	/^IQRouter::IQRouter( const Configuration& config,$/;"	f	class:IQRouter
IQRouter	src/intersim/iq_router.hpp	/^class IQRouter : public Router {$/;"	c
IQRouter	src/intersim2/routers/iq_router.cpp	/^IQRouter::IQRouter( Configuration const & config, Module *parent, $/;"	f	class:IQRouter
IQRouter	src/intersim2/routers/iq_router.hpp	/^class IQRouter : public Router {$/;"	c
IRF	src/gpuwattch/core.h	/^	ArrayST * IRF;$/;"	m	class:RegFU
IS_CROSSBAR	src/gpuwattch/cacti/const.h	200;"	d
I_g_on_n	src/gpuwattch/cacti/parameter.h	/^    double I_g_on_n;$/;"	m	class:TechnologyParameter::DeviceType
I_g_on_p	src/gpuwattch/cacti/parameter.h	/^    double I_g_on_p;$/;"	m	class:TechnologyParameter::DeviceType
I_off_n	src/gpuwattch/cacti/parameter.h	/^    double I_off_n;$/;"	m	class:TechnologyParameter::DeviceType
I_off_p	src/gpuwattch/cacti/parameter.h	/^    double I_off_p;$/;"	m	class:TechnologyParameter::DeviceType
I_on_n	src/gpuwattch/cacti/parameter.h	/^    double I_on_n;$/;"	m	class:TechnologyParameter::DeviceType
I_on_p	src/gpuwattch/cacti/parameter.h	/^    double I_on_p;$/;"	m	class:TechnologyParameter::DeviceType
IcntInitPerGrid	src/intersim/trafficmanager.cpp	/^void TrafficManager::IcntInitPerGrid  (int time)$/;"	f	class:TrafficManager
IdleCoreEnergy	src/gpuwattch/core.h	/^	double IdleCoreEnergy;$/;"	m	class:Core
IdlePower_PerCore	src/gpuwattch/core.h	/^	double IdlePower_PerCore;$/;"	m	class:Core
IncrWaiting	src/intersim/event_router.cpp	/^void EventNextVCState::IncrWaiting( int vc, int w_input, int w_vc )$/;"	f	class:EventNextVCState
IncrWaiting	src/intersim2/routers/event_router.cpp	/^void EventNextVCState::IncrWaiting( int vc, int w_input, int w_vc )$/;"	f	class:EventNextVCState
Init	src/intersim2/gputrafficmanager.cpp	/^void GPUTrafficManager::Init()$/;"	f	class:GPUTrafficManager
Init	src/intersim2/interconnect_interface.cpp	/^void InterconnectInterface::Init()$/;"	f	class:InterconnectInterface
InitializeInjectionMap	src/intersim/injection.cpp	/^void InitializeInjectionMap( )$/;"	f
InitializeRoutingMap	src/intersim/routefunc.cpp	/^void InitializeRoutingMap( )$/;"	f
InitializeRoutingMap	src/intersim2/routefunc.cpp	/^void InitializeRoutingMap( const Configuration & config )$/;"	f
InitializeTrafficMap	src/intersim/traffic.cpp	/^void InitializeTrafficMap( )$/;"	f
InjectionProcess	src/intersim2/injection.cpp	/^InjectionProcess::InjectionProcess(int nodes, double rate)$/;"	f	class:InjectionProcess
InjectionProcess	src/intersim2/injection.hpp	/^class InjectionProcess {$/;"	c
Inorder	src/gpuwattch/basic_components.h	/^	Inorder$/;"	e	enum:Core_type
Input	src/intersim/config_utils.cpp	/^int Configuration::Input( char *line, int max_size )$/;"	f	class:Configuration
Input	src/intersim2/config_utils.cpp	/^int Configuration::Input(char * line, int max_size)$/;"	f	class:Configuration
InputAssigned	src/intersim/allocator.cpp	/^int Allocator::InputAssigned( int out ) const$/;"	f	class:Allocator
InputAssigned	src/intersim2/allocators/allocator.cpp	/^int Allocator::InputAssigned( int out ) const$/;"	f	class:Allocator
InputHasRequests	src/intersim2/allocators/allocator.cpp	/^bool DenseAllocator::InputHasRequests( int in ) const$/;"	f	class:DenseAllocator
InputHasRequests	src/intersim2/allocators/allocator.cpp	/^bool SparseAllocator::InputHasRequests( int in ) const$/;"	f	class:SparseAllocator
InputParameter	src/gpuwattch/cacti/cacti_interface.h	/^class InputParameter$/;"	c
InputParameter	src/gpuwattch/cacti/io.cc	/^InputParameter::InputParameter()$/;"	f	class:InputParameter
InsertRandomFaults	src/intersim/kncube.cpp	/^void KNCube::InsertRandomFaults( const Configuration &config )$/;"	f	class:KNCube
InsertRandomFaults	src/intersim/network.cpp	/^void Network::InsertRandomFaults( const Configuration &config )$/;"	f	class:Network
InsertRandomFaults	src/intersim2/networks/anynet.hpp	/^  void InsertRandomFaults( const Configuration &config ){}$/;"	f	class:AnyNet
InsertRandomFaults	src/intersim2/networks/dragonfly.cpp	/^void DragonFlyNew::InsertRandomFaults( const Configuration &config )$/;"	f	class:DragonFlyNew
InsertRandomFaults	src/intersim2/networks/flatfly_onchip.cpp	/^void FlatFlyOnChip::InsertRandomFaults( const Configuration &config )$/;"	f	class:FlatFlyOnChip
InsertRandomFaults	src/intersim2/networks/kncube.cpp	/^void KNCube::InsertRandomFaults( const Configuration &config )$/;"	f	class:KNCube
InsertRandomFaults	src/intersim2/networks/network.cpp	/^void Network::InsertRandomFaults( const Configuration &config )$/;"	f	class:Network
InstCache	src/gpuwattch/array.h	/^  InstCache(){caches=0;missb=0;ifb=0;prefetchb=0;};$/;"	f	class:InstCache
InstCache	src/gpuwattch/array.h	/^class InstCache :public Component{$/;"	c
InstFetchU	src/gpuwattch/core.cc	/^InstFetchU::InstFetchU(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_, const CoreDynParam & dyn_p_, bool exist_)$/;"	f	class:InstFetchU
InstFetchU	src/gpuwattch/core.h	/^class InstFetchU :public Component {$/;"	c
InterconnectInterface	src/intersim2/interconnect_interface.cpp	/^InterconnectInterface::InterconnectInterface()$/;"	f	class:InterconnectInterface
InterconnectInterface	src/intersim2/interconnect_interface.hpp	/^class InterconnectInterface {$/;"	c
InterconnectType	src/gpuwattch/cacti/parameter.h	/^    InterconnectType(): pitch(0), R_per_um(0), C_per_um(0) { };$/;"	f	class:TechnologyParameter::InterconnectType
InterconnectType	src/gpuwattch/cacti/parameter.h	/^  class InterconnectType$/;"	c	class:TechnologyParameter
InternalStep	src/intersim/event_router.cpp	/^void EventRouter::InternalStep( )$/;"	f	class:EventRouter
InternalStep	src/intersim/iq_router.cpp	/^void IQRouter::InternalStep( )$/;"	f	class:IQRouter
InternalStep	src/intersim/network.cpp	/^void Network::InternalStep( )$/;"	f	class:Network
IntersimConfig	src/intersim2/intersim_config.cpp	/^IntersimConfig::IntersimConfig()$/;"	f	class:IntersimConfig
IntersimConfig	src/intersim2/intersim_config.hpp	/^class IntersimConfig : public BookSimConfig {$/;"	c
Invalid_wtype	src/gpuwattch/cacti/cacti_interface.h	/^    Invalid_wtype$/;"	e	enum:Wire_type
IoffN	src/intersim2/power/power_module.hpp	/^  double IoffN  ;            \/\/ [A\/um]$/;"	m	class:Power_Module
IoffP	src/intersim2/power/power_module.hpp	/^  double IoffP  ;            \/\/ [A\/um]$/;"	m	class:Power_Module
IoffSRAM	src/intersim2/power/power_module.hpp	/^  double IoffSRAM;  $/;"	m	class:Power_Module
IsAvailableFor	src/intersim/buffer_state.cpp	/^bool BufferState::IsAvailableFor( int vc ) const$/;"	f	class:BufferState
IsAvailableFor	src/intersim2/buffer_state.hpp	/^  inline bool IsAvailableFor( int vc = 0 ) const {$/;"	f	class:BufferState
IsEmptyFor	src/intersim2/buffer_state.hpp	/^  inline bool IsEmptyFor(int vc = 0) const {$/;"	f	class:BufferState
IsFaultyOutput	src/intersim/router.cpp	/^bool Router::IsFaultyOutput( int c ) const$/;"	f	class:Router
IsFaultyOutput	src/intersim2/routers/router.cpp	/^bool Router::IsFaultyOutput( int c ) const$/;"	f	class:Router
IsFull	src/intersim2/buffer_state.hpp	/^  inline bool IsFull() const {$/;"	f	class:BufferState
IsFullFor	src/intersim/buffer_state.cpp	/^bool BufferState::IsFullFor( int vc  ) const$/;"	f	class:BufferState
IsFullFor	src/intersim2/buffer_state.cpp	/^bool BufferState::FeedbackSharedBufferPolicy::IsFullFor(int vc) const$/;"	f	class:BufferState::FeedbackSharedBufferPolicy
IsFullFor	src/intersim2/buffer_state.cpp	/^bool BufferState::LimitedSharedBufferPolicy::IsFullFor(int vc) const$/;"	f	class:BufferState::LimitedSharedBufferPolicy
IsFullFor	src/intersim2/buffer_state.cpp	/^bool BufferState::PrivateBufferPolicy::IsFullFor(int vc) const$/;"	f	class:BufferState::PrivateBufferPolicy
IsFullFor	src/intersim2/buffer_state.cpp	/^bool BufferState::SharedBufferPolicy::IsFullFor(int vc) const$/;"	f	class:BufferState::SharedBufferPolicy
IsFullFor	src/intersim2/buffer_state.hpp	/^  inline bool IsFullFor( int vc = 0 ) const {$/;"	f	class:BufferState
IsInputWaiting	src/intersim/event_router.cpp	/^bool EventNextVCState::IsInputWaiting( int vc, int w_input, int w_vc ) const$/;"	f	class:EventNextVCState
IsInputWaiting	src/intersim2/routers/event_router.cpp	/^bool EventNextVCState::IsInputWaiting( int vc, int w_input, int w_vc ) const$/;"	f	class:EventNextVCState
IsWaiting	src/intersim/event_router.cpp	/^bool EventNextVCState::IsWaiting( int vc ) const$/;"	f	class:EventNextVCState
IsWaiting	src/intersim2/routers/event_router.cpp	/^bool EventNextVCState::IsWaiting( int vc ) const$/;"	f	class:EventNextVCState
IsWatched	src/intersim/vc.cpp	/^bool VC::IsWatched( ) const$/;"	f	class:VC
IsWatched	src/intersim2/buffer.hpp	/^  inline bool IsWatched( int vc ) const$/;"	f	class:Buffer
IsWatched	src/intersim2/vc.cpp	/^bool VC::IsWatched( ) const$/;"	f	class:VC
Ishort_ckt	src/gpuwattch/cacti/wire.cc	593;"	d	file:
Ishort_ckt	src/gpuwattch/cacti/wire.cc	754;"	d	file:
Iw_height	src/gpuwattch/core.h	/^	double Iw_height, fp_Iw_height,ROB_height;$/;"	m	class:SchedulerU
K	src/intersim2/power/power_module.hpp	/^  double K;$/;"	m	struct:wire
KAIN_Big_max_cta	src/gpgpu-sim/shader.h	72;"	d
KAIN_Big_register	src/gpgpu-sim/shader.h	69;"	d
KAIN_Big_sharedmemory	src/gpgpu-sim/shader.h	66;"	d
KAIN_Big_thread	src/gpgpu-sim/shader.h	60;"	d
KAIN_Big_warp	src/gpgpu-sim/shader.h	63;"	d
KAIN_CTA_number_stream3_record	src/gpgpu-sim/gpu-sim.cc	/^std::map<std::string, unsigned> KAIN_CTA_number_stream3_record;$/;"	v
KAIN_CTA_number_stream4_record	src/gpgpu-sim/gpu-sim.cc	/^std::map<std::string, unsigned> KAIN_CTA_number_stream4_record;$/;"	v
KAIN_GPU_chiplet	src/gpgpu-sim/l2cache.h	/^        KAIN_GPU_chiplet(unsigned MC_count)$/;"	f	class:KAIN_GPU_chiplet
KAIN_GPU_chiplet	src/gpgpu-sim/l2cache.h	/^class KAIN_GPU_chiplet $/;"	c
KAIN_HBM_Cache_hit	src/gpgpu-sim/l2cache.cc	/^long long KAIN_HBM_Cache_hit = 0;$/;"	v
KAIN_HBM_Cache_miss	src/gpgpu-sim/l2cache.cc	/^long long KAIN_HBM_Cache_miss = 0;$/;"	v
KAIN_HBM_Cache_request	src/gpgpu-sim/l2cache.cc	/^std::list<mem_fetch*> KAIN_HBM_Cache_request[32];$/;"	v
KAIN_IPC	src/gpgpu-sim/gpu-sim.h	/^struct KAIN_IPC$/;"	s
KAIN_Power_Gate_Number_Cycles	src/gpgpu-sim/gpu-sim.h	/^struct KAIN_Power_Gate_Number_Cycles$/;"	s
KAIN_Re_partition	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_Re_partition = true;$/;"	v
KAIN_Remote_Memory_request	src/gpgpu-sim/l2cache.h	/^   std::list<mem_fetch*> KAIN_Remote_Memory_request;$/;"	m	class:memory_partition_unit
KAIN_Small_max_cta	src/gpgpu-sim/shader.h	73;"	d
KAIN_Small_register	src/gpgpu-sim/shader.h	70;"	d
KAIN_Small_sharedmemory	src/gpgpu-sim/shader.h	67;"	d
KAIN_Small_thread	src/gpgpu-sim/shader.h	61;"	d
KAIN_Small_warp	src/gpgpu-sim/shader.h	64;"	d
KAIN_all_port_receive	src/gpgpu-sim/gpu-sim.cc	/^std::vector<int> KAIN_all_port_receive;$/;"	v
KAIN_app1_bw_util	src/gpgpu-sim/l2cache.h	/^   float KAIN_app1_bw_util()$/;"	f	class:memory_partition_unit
KAIN_app2_bw_util	src/gpgpu-sim/l2cache.h	/^   float KAIN_app2_bw_util()$/;"	f	class:memory_partition_unit
KAIN_atomic_count	src/gpgpu-sim/shader.h	/^    unsigned KAIN_atomic_count()$/;"	f	class:shader_core_ctx
KAIN_begin_profile	src/gpgpu-sim/shader.h	/^	bool KAIN_begin_profile;$/;"	m	class:shader_core_ctx
KAIN_check_profile_done	src/gpgpu-sim/shader.h	/^	bool KAIN_check_profile_done (unsigned long long total_cycle)$/;"	f	class:shader_core_ctx
KAIN_check_profile_done	src/gpgpu-sim/shader.h	/^	bool KAIN_check_profile_done(unsigned long long total_cycle)$/;"	f	class:simt_core_cluster
KAIN_chiplet_frequency	src/gpgpu-sim/gpu-sim.cc	1372;"	d	file:
KAIN_clear_SM_counter	src/gpgpu-sim/gpu-sim.h	/^	void KAIN_clear_SM_counter (int i, unsigned long long total_cycle)$/;"	f	class:gpgpu_sim
KAIN_clear_SM_counter	src/gpgpu-sim/shader.h	/^	void KAIN_clear_SM_counter(unsigned long long total_cycle)$/;"	f	class:simt_core_cluster
KAIN_clear_SM_counter_set_profile	src/gpgpu-sim/shader.h	/^	void KAIN_clear_SM_counter_set_profile(unsigned long long total_cycle)$/;"	f	class:shader_core_ctx
KAIN_cluster_port_receive	src/gpgpu-sim/gpu-sim.cc	/^std::vector<int> KAIN_cluster_port_receive[8];$/;"	v
KAIN_cluster_receive	src/gpgpu-sim/gpu-sim.cc	/^std::vector<int> KAIN_cluster_receive;$/;"	v
KAIN_contention_failed_number	src/gpgpu-sim/gpu-sim.cc	/^std::vector<float> KAIN_contention_failed_number;$/;"	v
KAIN_contention_portion	src/gpgpu-sim/gpu-sim.cc	/^std::vector<float> KAIN_contention_portion;$/;"	v
KAIN_contention_total_number	src/gpgpu-sim/gpu-sim.cc	/^std::vector<float> KAIN_contention_total_number;$/;"	v
KAIN_context_load	src/gpgpu-sim/shader.h	/^	int KAIN_context_load[5];\/\/KAIN up to 4 kernel streams now$/;"	m	class:shader_core_ctx
KAIN_context_load_request	src/gpgpu-sim/shader.h	/^	int KAIN_context_load_request;$/;"	m	class:shader_core_ctx
KAIN_context_store	src/gpgpu-sim/shader.h	/^	int KAIN_context_store[5];\/\/KAIN up to 4 kernel streams now$/;"	m	class:shader_core_ctx
KAIN_cycle_init	src/gpgpu-sim/shader.h	/^	unsigned long long KAIN_cycle_init;$/;"	m	class:shader_core_ctx
KAIN_epoch	src/gpgpu-sim/gpu-sim.cc	1492;"	d	file:
KAIN_epoch_cycle	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long KAIN_epoch_cycle = 0;$/;"	v
KAIN_false_profile	src/gpgpu-sim/shader.h	/^	void KAIN_false_profile()$/;"	f	class:shader_core_ctx
KAIN_false_profile	src/gpgpu-sim/shader.h	/^	void KAIN_false_profile()$/;"	f	class:simt_core_cluster
KAIN_finished_a_CTA	src/gpgpu-sim/shader.h	/^	bool KAIN_finished_a_CTA;$/;"	m	class:shader_core_ctx
KAIN_in_context_switch	src/gpgpu-sim/shader.h	/^	bool KAIN_in_context_switch()$/;"	f	class:shader_core_ctx
KAIN_in_context_switch	src/gpgpu-sim/shader.h	/^	bool KAIN_in_context_switch()$/;"	f	class:simt_core_cluster
KAIN_instruction	src/gpgpu-sim/shader.h	/^	unsigned long long KAIN_instruction;$/;"	m	class:shader_core_ctx
KAIN_is_preempting	src/gpgpu-sim/shader.h	/^	bool KAIN_is_preempting()$/;"	f	class:simt_core_cluster
KAIN_kernel1	src/gpgpu-sim/gpu-sim.cc	/^std::string KAIN_kernel1;$/;"	v
KAIN_kernel1_LLC_access	src/gpgpu-sim/gpu-cache.cc	/^unsigned long long KAIN_kernel1_LLC_access = 0;$/;"	v
KAIN_kernel1_LLC_hit	src/gpgpu-sim/gpu-cache.cc	/^unsigned long long KAIN_kernel1_LLC_hit = 0;$/;"	v
KAIN_kernel1_cache_access	src/gpgpu-sim/gpu-cache.cc	/^bool tag_array::KAIN_kernel1_cache_access(new_addr_type addr, unsigned time)$/;"	f	class:tag_array
KAIN_kernel2	src/gpgpu-sim/gpu-sim.cc	/^std::string KAIN_kernel2;$/;"	v
KAIN_kernel2_LLC_access	src/gpgpu-sim/gpu-cache.cc	/^unsigned long long KAIN_kernel2_LLC_access = 0;$/;"	v
KAIN_kernel2_LLC_hit	src/gpgpu-sim/gpu-cache.cc	/^unsigned long long KAIN_kernel2_LLC_hit = 0;$/;"	v
KAIN_kernel2_cache_access	src/gpgpu-sim/gpu-cache.cc	/^bool tag_array::KAIN_kernel2_cache_access(new_addr_type addr, unsigned time)$/;"	f	class:tag_array
KAIN_kernel3	src/gpgpu-sim/gpu-sim.cc	/^std::string KAIN_kernel3;$/;"	v
KAIN_kernel4	src/gpgpu-sim/gpu-sim.cc	/^std::string KAIN_kernel4;$/;"	v
KAIN_mem_app1	src/gpgpu-sim/gpu-sim.cc	/^int KAIN_mem_app1 = 0;$/;"	v
KAIN_mem_app2	src/gpgpu-sim/gpu-sim.cc	/^int KAIN_mem_app2 = 0;$/;"	v
KAIN_mem_queue_app1	src/gpgpu-sim/gpu-sim.cc	/^std::vector<int> KAIN_mem_queue_app1;$/;"	v
KAIN_mem_queue_app2	src/gpgpu-sim/gpu-sim.cc	/^std::vector<int> KAIN_mem_queue_app2;$/;"	v
KAIN_mem_sample_count	src/gpgpu-sim/gpu-sim.cc	/^int KAIN_mem_sample_count= 0;$/;"	v
KAIN_page_addr	src/gpgpusim_entrypoint.cc	/^std::set <unsigned long long> KAIN_page_addr[4];$/;"	v
KAIN_page_table	src/gpgpu-sim/addrdec.cc	/^std::map<new_addr_type, new_addr_type*> KAIN_page_table;$/;"	v
KAIN_power_gated_count	src/gpgpu-sim/gpu-sim.cc	/^int KAIN_power_gated_count;$/;"	v
KAIN_profiling_phase1	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_profiling_phase1 = false;$/;"	v
KAIN_profiling_phase2	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_profiling_phase2 = false;$/;"	v
KAIN_profiling_phase3	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_profiling_phase3 = false;$/;"	v
KAIN_receive_reply_network	src/intersim2/routers/iq_router.cpp	/^int KAIN_receive_reply_network[384];$/;"	v
KAIN_reply_Near	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long KAIN_reply_Near;$/;"	v
KAIN_reply_Remote	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long KAIN_reply_Remote;$/;"	v
KAIN_request_Near	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long KAIN_request_Near;$/;"	v
KAIN_request_Remote	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long KAIN_request_Remote;$/;"	v
KAIN_reset_cycle	launcher/launcher_option_parser.h	/^  void KAIN_reset_cycle(unsigned long long value)$/;"	f	class:LauncherOptionParser
KAIN_reset_cycle	src/gpgpusim_entrypoint.cc	/^bool KAIN_reset_cycle = false;$/;"	v
KAIN_return_IPC	src/gpgpu-sim/shader.h	/^	float KAIN_return_IPC(unsigned long long total_cycle, unsigned long long &total_inst)$/;"	f	class:shader_core_ctx
KAIN_return_IPC	src/gpgpu-sim/shader.h	/^	float KAIN_return_IPC(unsigned long long total_cycle, unsigned long long &total_inst)$/;"	f	class:simt_core_cluster
KAIN_sampling_cycles_THREHOLD	src/gpgpu-sim/shader.h	77;"	d
KAIN_stable_cycles	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long KAIN_stable_cycles = 0;$/;"	v
KAIN_stable_cycles_THREHOLD	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long KAIN_stable_cycles_THREHOLD = 20000;$/;"	v
KAIN_stall_recording_kernel0	launcher/child_process.cc	/^bool KAIN_stall_recording_kernel0 = false;$/;"	v
KAIN_stall_recording_kernel1	launcher/child_process.cc	/^bool KAIN_stall_recording_kernel1 = false;$/;"	v
KAIN_stream1	src/gpgpu-sim/gpu-sim.cc	/^std::map<std::string, KAIN_IPC> KAIN_stream1;$/;"	v
KAIN_stream1_H_SM	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_stream1_H_SM = true;$/;"	v
KAIN_stream1_ipc	src/gpgpu-sim/gpu-sim.cc	/^std::vector<float> KAIN_stream1_ipc;$/;"	v
KAIN_stream1_kernel_new_launch	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_stream1_kernel_new_launch= false;$/;"	v
KAIN_stream1_kernel_profiling_wait_result	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_stream1_kernel_profiling_wait_result = false;$/;"	v
KAIN_stream2	src/gpgpu-sim/gpu-sim.cc	/^std::map<std::string, KAIN_IPC> KAIN_stream2;$/;"	v
KAIN_stream2_H_SM	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_stream2_H_SM = true;$/;"	v
KAIN_stream2_ipc	src/gpgpu-sim/gpu-sim.cc	/^std::vector<float> KAIN_stream2_ipc;$/;"	v
KAIN_stream2_kernel_new_launch	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_stream2_kernel_new_launch = false;$/;"	v
KAIN_stream2_kernel_profiling_wait_result	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_stream2_kernel_profiling_wait_result = false;$/;"	v
KAIN_stream3	src/gpgpu-sim/gpu-sim.cc	/^std::map<std::string, KAIN_IPC> KAIN_stream3;$/;"	v
KAIN_stream3_H_SM	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_stream3_H_SM = true;$/;"	v
KAIN_stream3_ipc	src/gpgpu-sim/gpu-sim.cc	/^std::vector<float> KAIN_stream3_ipc;$/;"	v
KAIN_stream3_kernel_new_launch	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_stream3_kernel_new_launch= false;$/;"	v
KAIN_stream3_kernel_profiling	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_stream3_kernel_profiling = false;$/;"	v
KAIN_stream3_kernel_profiling_wait_result	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_stream3_kernel_profiling_wait_result = false;$/;"	v
KAIN_stream4	src/gpgpu-sim/gpu-sim.cc	/^std::map<std::string, KAIN_IPC> KAIN_stream4;$/;"	v
KAIN_stream4_H_SM	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_stream4_H_SM = true;$/;"	v
KAIN_stream4_ipc	src/gpgpu-sim/gpu-sim.cc	/^std::vector<float> KAIN_stream4_ipc;$/;"	v
KAIN_stream4_kernel_new_launch	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_stream4_kernel_new_launch= false;$/;"	v
KAIN_stream4_kernel_profiling	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_stream4_kernel_profiling = false;$/;"	v
KAIN_stream4_kernel_profiling_wait_result	src/gpgpu-sim/gpu-sim.cc	/^bool KAIN_stream4_kernel_profiling_wait_result = false;$/;"	v
KERNEL_INFO_T_H	common/kernel_info_t.h	2;"	d
KK	src/intersim/rng.cpp	21;"	d	file:
KK	src/intersim/rng_double.cpp	21;"	d	file:
KK	src/intersim2/rng-double.c	20;"	d	file:
KK	src/intersim2/rng.c	20;"	d	file:
KNCube	src/intersim/kncube.cpp	/^KNCube::KNCube( const Configuration &config, bool mesh ) :$/;"	f	class:KNCube
KNCube	src/intersim/kncube.hpp	/^class KNCube : public Network {$/;"	c
KNCube	src/intersim2/networks/kncube.cpp	/^KNCube::KNCube( const Configuration &config, const string & name, bool mesh ) :$/;"	f	class:KNCube
KNCube	src/intersim2/networks/kncube.hpp	/^class KNCube : public Network {$/;"	c
KNFly	src/intersim/fly.cpp	/^KNFly::KNFly( const Configuration &config ) :$/;"	f	class:KNFly
KNFly	src/intersim/fly.hpp	/^class KNFly : public Network {$/;"	c
KNFly	src/intersim2/networks/fly.cpp	/^KNFly::KNFly( const Configuration &config, const string & name ) :$/;"	f	class:KNFly
KNFly	src/intersim2/networks/fly.hpp	/^class KNFly : public Network {$/;"	c
L	src/intersim2/power/power_module.hpp	/^  double L;$/;"	m	struct:wire
L1	src/ramulator_sim/Cache.h	/^    L1,$/;"	m	class:Cache::Level
L1D_block_addr	src/gpgpu-sim/shader.h	/^   new_addr_type L1D_block_addr(new_addr_type addr) const$/;"	f	class:ldst_unit
L1Directory	src/gpuwattch/XML_Parse.h	/^	system_L1Directory L1Directory[64];$/;"	m	struct:__anon26
L1Directory	src/gpuwattch/basic_components.h	/^    L1Directory,$/;"	e	enum:cache_level
L1_localBPT	src/gpuwattch/core.h	/^	ArrayST * L1_localBPT;$/;"	m	class:BranchPredictor
L1_property	src/gpuwattch/XML_Parse.h	/^	int L1_property;$/;"	m	struct:__anon26
L1_property	src/gpuwattch/arch_const.h	/^const int			L1_property		=	0; \/\/private 0; coherent 1, shared 2.$/;"	v
L2	src/gpgpu-sim/gpu-sim.cc	93;"	d	file:
L2	src/gpuwattch/XML_Parse.h	/^	system_L2 L2[64];$/;"	m	struct:__anon26
L2	src/gpuwattch/basic_components.h	/^    L2,$/;"	e	enum:cache_level
L2	src/ramulator_sim/Cache.h	/^    L2,$/;"	m	class:Cache::Level
L2CP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   L2CP,$/;"	e	enum:pwr_cmp_t	file:
L2Directory	src/gpuwattch/XML_Parse.h	/^	system_L2Directory L2Directory[64];$/;"	m	struct:__anon26
L2Directory	src/gpuwattch/basic_components.h	/^    L2Directory$/;"	e	enum:cache_level
L2Tot	src/gpuwattch/sharedcache.h	/^    Component L2Tot, cc, cc1, ccTot;$/;"	m	class:CCdir
L2_L2tocblength	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int *L2_L2tocblength;$/;"	m	class:memory_stats_t
L2_L2todramlength	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int *L2_L2todramlength;$/;"	m	class:memory_stats_t
L2_RH	src/gpuwattch/XML_Parse.h	/^   L2_RH,$/;"	e	enum:perf_count_t
L2_RM	src/gpuwattch/XML_Parse.h	/^   L2_RM,$/;"	e	enum:perf_count_t
L2_WH	src/gpuwattch/XML_Parse.h	/^   L2_WH,$/;"	e	enum:perf_count_t
L2_WM	src/gpuwattch/XML_Parse.h	/^   L2_WM,$/;"	e	enum:perf_count_t
L2_cbtoL2length	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int *L2_cbtoL2length;$/;"	m	class:memory_stats_t
L2_cbtoL2writelength	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int *L2_cbtoL2writelength;$/;"	m	class:memory_stats_t
L2_config	src/gpuwattch/XML_Parse.h	/^	double L2_config[20];$/;"	m	struct:__anon18
L2_dram_queue_empty	src/gpgpu-sim/l2cache.cc	/^bool memory_sub_partition::L2_dram_queue_empty() const$/;"	f	class:memory_sub_partition
L2_dram_queue_pop	src/gpgpu-sim/l2cache.cc	/^void memory_sub_partition::L2_dram_queue_pop() $/;"	f	class:memory_sub_partition
L2_dram_queue_top	src/gpgpu-sim/l2cache.cc	/^class mem_fetch* memory_sub_partition::L2_dram_queue_top() const$/;"	f	class:memory_sub_partition
L2_dramtoL2length	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int *L2_dramtoL2length;$/;"	m	class:memory_stats_t
L2_dramtoL2writelength	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int *L2_dramtoL2writelength;$/;"	m	class:memory_stats_t
L2_localBPT	src/gpuwattch/core.h	/^	ArrayST * L2_localBPT;$/;"	m	class:BranchPredictor
L2_property	src/gpuwattch/XML_Parse.h	/^	int L2_property;$/;"	m	struct:__anon26
L2_property	src/gpuwattch/arch_const.h	/^const int		 	L2_property		=	2;$/;"	v
L2dramout	src/gpgpu-sim/l2cache.h	/^   class mem_fetch *L2dramout; $/;"	m	class:memory_sub_partition	typeref:class:memory_sub_partition::mem_fetch
L2interface	src/gpgpu-sim/l2cache.h	/^    L2interface( memory_sub_partition *unit ) { m_unit=unit; }$/;"	f	class:L2interface
L2interface	src/gpgpu-sim/l2cache.h	/^class L2interface : public mem_fetch_interface {$/;"	c
L3	src/gpuwattch/XML_Parse.h	/^	system_L3 L3[64];$/;"	m	struct:__anon26
L3	src/gpuwattch/basic_components.h	/^    L3,$/;"	e	enum:cache_level
L3	src/ramulator_sim/Cache.h	/^    L3,$/;"	m	class:Cache::Level
L3_config	src/gpuwattch/XML_Parse.h	/^	double L3_config[20];$/;"	m	struct:__anon19
L3_property	src/gpuwattch/XML_Parse.h	/^	int L3_property;$/;"	m	struct:__anon26
L3_property	src/gpuwattch/arch_const.h	/^const bool		    L3_property		= 	2;$/;"	v
LAMBDA	src/intersim2/power/power_module.hpp	/^  double LAMBDA  ;       \/\/ [um\/LAMBDA]$/;"	m	class:Power_Module
LANEID_REG	src/cuda-sim/opcodes.h	/^   LANEID_REG,$/;"	e	enum:special_regs
LANEMASK_EQ_REG	src/cuda-sim/opcodes.h	/^   LANEMASK_EQ_REG,$/;"	e	enum:special_regs
LANEMASK_GE_REG	src/cuda-sim/opcodes.h	/^   LANEMASK_GE_REG,$/;"	e	enum:special_regs
LANEMASK_GT_REG	src/cuda-sim/opcodes.h	/^   LANEMASK_GT_REG,$/;"	e	enum:special_regs
LANEMASK_LE_REG	src/cuda-sim/opcodes.h	/^   LANEMASK_LE_REG,$/;"	e	enum:special_regs
LANEMASK_LT_REG	src/cuda-sim/opcodes.h	/^   LANEMASK_LT_REG,$/;"	e	enum:special_regs
LATCH_DELAY	src/gpuwattch/cacti/nuca.cc	40;"	d	file:
LATENCY_LIMIT	launcher/launcher_option_parser.cc	/^unsigned long long LATENCY_LIMIT = 10500; \/\/ 15us$/;"	v
LAYER	src/gpgpu-sim/addrdec.h	/^      LAYER = 2,$/;"	e	enum:linear_to_raw_address_translation::__anon29
LEAKAGE_REDUCTION_DUE_TO_LONG_CHANNEL_HP_TRANSISTORS_FACTOR	src/gpuwattch/cacti/const.h	207;"	d
LEFT_ANGLE_BRACKET	build/src/cuda-sim/ptx.tab.c	/^    LEFT_ANGLE_BRACKET = 388,$/;"	e	enum:yytokentype	file:
LEFT_ANGLE_BRACKET	build/src/cuda-sim/ptx.tab.h	/^    LEFT_ANGLE_BRACKET = 388,$/;"	e	enum:yytokentype
LEFT_BRACE	build/src/cuda-sim/ptx.tab.c	/^    LEFT_BRACE = 358,$/;"	e	enum:yytokentype	file:
LEFT_BRACE	build/src/cuda-sim/ptx.tab.h	/^    LEFT_BRACE = 358,$/;"	e	enum:yytokentype
LEFT_PAREN	build/src/cuda-sim/ptx.tab.c	/^    LEFT_PAREN = 390,$/;"	e	enum:yytokentype	file:
LEFT_PAREN	build/src/cuda-sim/ptx.tab.h	/^    LEFT_PAREN = 390,$/;"	e	enum:yytokentype
LEFT_SQUARE_BRACKET	build/src/cuda-sim/ptx.tab.c	/^    LEFT_SQUARE_BRACKET = 347,$/;"	e	enum:yytokentype	file:
LEFT_SQUARE_BRACKET	build/src/cuda-sim/ptx.tab.h	/^    LEFT_SQUARE_BRACKET = 347,$/;"	e	enum:yytokentype
LEFT_SQUARE_BRACKET	build/src/cuda-sim/ptxinfo.tab.c	/^    LEFT_SQUARE_BRACKET = 271,$/;"	e	enum:yytokentype	file:
LEFT_SQUARE_BRACKET	build/src/cuda-sim/ptxinfo.tab.h	/^    LEFT_SQUARE_BRACKET = 271,$/;"	e	enum:yytokentype
LENGTH_INTERCONNECT_FROM_BANK_TO_CROSSBAR	src/gpuwattch/cacti/const.h	198;"	d
LENSTR	src/gpuwattch/xmlParser.cc	1848;"	d	file:
LENSTR	src/gpuwattch/xmlParser.cc	2076;"	d	file:
LEU_OPTION	build/src/cuda-sim/ptx.tab.c	/^    LEU_OPTION = 339,$/;"	e	enum:yytokentype	file:
LEU_OPTION	build/src/cuda-sim/ptx.tab.h	/^    LEU_OPTION = 339,$/;"	e	enum:yytokentype
LEVEL	Makefile	/^LEVEL=.$/;"	m
LEVEL	common/Makefile	/^LEVEL=..$/;"	m
LEVEL	launcher/Makefile	/^LEVEL=..$/;"	m
LEVEL	launcher/mk-sched/Makefile	/^LEVEL=..\/..$/;"	m
LEVEL	launcher/stats/Makefile	/^LEVEL=..\/..$/;"	m
LEVEL	libcuda/Makefile	/^LEVEL=..$/;"	m
LEVEL	src/Makefile	/^LEVEL=..$/;"	m
LEVEL	src/cuda-sim/Makefile	/^LEVEL=..\/..$/;"	m
LEVEL	src/gpgpu-sim/Makefile	/^LEVEL=..\/..$/;"	m
LEVEL	src/intersim2/Makefile	/^LEVEL=..\/..$/;"	m
LEVEL	src/ramulator_sim/Makefile	/^LEVEL=..\/..$/;"	m
LEX	src/intersim2/Makefile	/^LEX = flex$/;"	m
LEX_OBJS	src/intersim2/Makefile	/^LEX_OBJS  = ${OBJDIR}\/lex.yy.o$/;"	m
LE_OPTION	build/src/cuda-sim/ptx.tab.c	/^    LE_OPTION = 329,$/;"	e	enum:yytokentype	file:
LE_OPTION	build/src/cuda-sim/ptx.tab.h	/^    LE_OPTION = 329,$/;"	e	enum:yytokentype
LFSTSize	src/gpuwattch/arch_const.h	/^const int LFSTSize=1024;$/;"	v
LIBS	src/gpuwattch/cacti/cacti.mk	/^LIBS = $/;"	m
LIBS	src/gpuwattch/mcpat.mk	/^LIBS = -I\/usr\/lib\/ -I\/usr\/lib64\/$/;"	m
LIBS	src/gpuwattch/mcpatXeonCore.mk	/^LIBS = $/;"	m
LIMITED_BY_CTA	common/kernel_info_t.h	/^     LIMITED_BY_CTA,$/;"	e	enum:kernel_info_t::limitCause
LIMITED_BY_MSHR	common/kernel_info_t.h	/^     LIMITED_BY_MSHR,$/;"	e	enum:kernel_info_t::limitCause
LIMITED_BY_REGS	common/kernel_info_t.h	/^     LIMITED_BY_REGS,$/;"	e	enum:kernel_info_t::limitCause
LIMITED_BY_SHMEM	common/kernel_info_t.h	/^     LIMITED_BY_SHMEM,$/;"	e	enum:kernel_info_t::limitCause
LIMITED_BY_THREADS	common/kernel_info_t.h	/^     LIMITED_BY_THREADS,$/;"	e	enum:kernel_info_t::limitCause
LINE	build/src/cuda-sim/ptxinfo.tab.c	/^    LINE = 276,$/;"	e	enum:yytokentype	file:
LINE	build/src/cuda-sim/ptxinfo.tab.h	/^    LINE = 276,$/;"	e	enum:yytokentype
LINEAR_SET_FUNCTION	src/gpgpu-sim/gpu-cache.h	/^    LINEAR_SET_FUNCTION,$/;"	e	enum:set_index_function
LINEBUF_SIZE	build/src/cuda-sim/lex.ptxinfo_.c	624;"	d	file:
LL	src/intersim/rng.cpp	22;"	d	file:
LL	src/intersim/rng_double.cpp	22;"	d	file:
LL	src/intersim2/rng-double.c	21;"	d	file:
LL	src/intersim2/rng.c	21;"	d	file:
LLC_device	src/gpuwattch/basic_components.h	/^	LLC_device$/;"	e	enum:Device_ty
LMEM	build/src/cuda-sim/ptxinfo.tab.c	/^    LMEM = 265,$/;"	e	enum:yytokentype	file:
LMEM	build/src/cuda-sim/ptxinfo.tab.h	/^    LMEM = 265,$/;"	e	enum:yytokentype
LOA	src/intersim/loa.cpp	/^LOA::LOA( const Configuration &config,$/;"	f	class:LOA
LOA	src/intersim/loa.hpp	/^class LOA : public DenseAllocator {$/;"	c
LOA	src/intersim2/allocators/loa.cpp	/^LOA::LOA( Module *parent, const string& name,$/;"	f	class:LOA
LOA	src/intersim2/allocators/loa.hpp	/^class LOA : public DenseAllocator {$/;"	c
LOAD_OP	src/abstract_hardware_model.h	/^   LOAD_OP,$/;"	e	enum:uarch_op_t
LOCAL_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    LOCAL_DIRECTIVE = 273,$/;"	e	enum:yytokentype	file:
LOCAL_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    LOCAL_DIRECTIVE = 273,$/;"	e	enum:yytokentype
LOCAL_GENERIC_START	src/abstract_hardware_model.h	229;"	d
LOCAL_MEM_SIZE_MAX	src/abstract_hardware_model.h	222;"	d
LOCAL_WB_GLOBAL_WT	src/gpgpu-sim/gpu-cache.h	/^    LOCAL_WB_GLOBAL_WT$/;"	e	enum:write_policy_t
LOC_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    LOC_DIRECTIVE = 274,$/;"	e	enum:yytokentype	file:
LOC_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    LOC_DIRECTIVE = 274,$/;"	e	enum:yytokentype
LOGB2	src/gpgpu-sim/gpu-misc.cc	/^unsigned int LOGB2( unsigned int v ) {$/;"	f
LOGB2_32	src/gpgpu-sim/addrdec.cc	/^static unsigned int LOGB2_32( unsigned int v ) $/;"	f	file:
LOGIC_H_	src/gpuwattch/logic.h	39;"	d
LO_OPTION	build/src/cuda-sim/ptx.tab.c	/^    LO_OPTION = 332,$/;"	e	enum:yytokentype	file:
LO_OPTION	build/src/cuda-sim/ptx.tab.h	/^    LO_OPTION = 332,$/;"	e	enum:yytokentype
LPDDR3	src/ramulator_sim/LPDDR3.cpp	/^LPDDR3::LPDDR3(Org org, Speed speed)$/;"	f	class:LPDDR3
LPDDR3	src/ramulator_sim/LPDDR3.cpp	/^LPDDR3::LPDDR3(const string& org_str, const string& speed_str) :$/;"	f	class:LPDDR3
LPDDR3	src/ramulator_sim/LPDDR3.h	/^class LPDDR3$/;"	c
LPDDR3_12Gb_x16	src/ramulator_sim/LPDDR3.h	/^        LPDDR3_12Gb_x16, LPDDR3_12Gb_x32,$/;"	m	class:LPDDR3::Org
LPDDR3_12Gb_x32	src/ramulator_sim/LPDDR3.h	/^        LPDDR3_12Gb_x16, LPDDR3_12Gb_x32,$/;"	m	class:LPDDR3::Org
LPDDR3_1333	src/ramulator_sim/LPDDR3.h	/^        LPDDR3_1333,$/;"	m	class:LPDDR3::Speed
LPDDR3_1600	src/ramulator_sim/LPDDR3.h	/^        LPDDR3_1600,$/;"	m	class:LPDDR3::Speed
LPDDR3_16Gb_x16	src/ramulator_sim/LPDDR3.h	/^        LPDDR3_16Gb_x16, LPDDR3_16Gb_x32,$/;"	m	class:LPDDR3::Org
LPDDR3_16Gb_x32	src/ramulator_sim/LPDDR3.h	/^        LPDDR3_16Gb_x16, LPDDR3_16Gb_x32,$/;"	m	class:LPDDR3::Org
LPDDR3_1866	src/ramulator_sim/LPDDR3.h	/^        LPDDR3_1866,$/;"	m	class:LPDDR3::Speed
LPDDR3_2133	src/ramulator_sim/LPDDR3.h	/^        LPDDR3_2133,$/;"	m	class:LPDDR3::Speed
LPDDR3_4Gb_x16	src/ramulator_sim/LPDDR3.h	/^        LPDDR3_4Gb_x16, LPDDR3_4Gb_x32,$/;"	m	class:LPDDR3::Org
LPDDR3_4Gb_x32	src/ramulator_sim/LPDDR3.h	/^        LPDDR3_4Gb_x16, LPDDR3_4Gb_x32,$/;"	m	class:LPDDR3::Org
LPDDR3_6Gb_x16	src/ramulator_sim/LPDDR3.h	/^        LPDDR3_6Gb_x16, LPDDR3_6Gb_x32,$/;"	m	class:LPDDR3::Org
LPDDR3_6Gb_x32	src/ramulator_sim/LPDDR3.h	/^        LPDDR3_6Gb_x16, LPDDR3_6Gb_x32,$/;"	m	class:LPDDR3::Org
LPDDR3_8Gb_x16	src/ramulator_sim/LPDDR3.h	/^        LPDDR3_8Gb_x16, LPDDR3_8Gb_x32,$/;"	m	class:LPDDR3::Org
LPDDR3_8Gb_x32	src/ramulator_sim/LPDDR3.h	/^        LPDDR3_8Gb_x16, LPDDR3_8Gb_x32,$/;"	m	class:LPDDR3::Org
LPDDR4	src/ramulator_sim/LPDDR4.cpp	/^LPDDR4::LPDDR4(Org org, Speed speed)$/;"	f	class:LPDDR4
LPDDR4	src/ramulator_sim/LPDDR4.cpp	/^LPDDR4::LPDDR4(const string& org_str, const string& speed_str) :$/;"	f	class:LPDDR4
LPDDR4	src/ramulator_sim/LPDDR4.h	/^class LPDDR4$/;"	c
LPDDR4_1600	src/ramulator_sim/LPDDR4.h	/^        LPDDR4_1600,$/;"	m	class:LPDDR4::Speed
LPDDR4_2400	src/ramulator_sim/LPDDR4.h	/^        LPDDR4_2400,$/;"	m	class:LPDDR4::Speed
LPDDR4_3200	src/ramulator_sim/LPDDR4.h	/^        LPDDR4_3200,$/;"	m	class:LPDDR4::Speed
LPDDR4_4Gb_x16	src/ramulator_sim/LPDDR4.h	/^        LPDDR4_4Gb_x16,$/;"	m	class:LPDDR4::Org
LPDDR4_6Gb_x16	src/ramulator_sim/LPDDR4.h	/^        LPDDR4_6Gb_x16,$/;"	m	class:LPDDR4::Org
LPDDR4_8Gb_x16	src/ramulator_sim/LPDDR4.h	/^        LPDDR4_8Gb_x16,$/;"	m	class:LPDDR4::Org
LQEntries	src/gpuwattch/arch_const.h	/^const int LQEntries=32;$/;"	v
LRU	src/gpgpu-sim/gpu-cache.h	/^    LRU,$/;"	e	enum:replacement_policy_t
LSQ	src/gpuwattch/core.h	/^	ArrayST * LSQ;\/\/it is actually the store queue but for inorder processors it serves as both loadQ and StoreQ$/;"	m	class:LoadStoreU
LSU_duty_cycle	src/gpuwattch/XML_Parse.h	/^	double LSU_duty_cycle ;$/;"	m	struct:__anon15
LSU_duty_cycle	src/gpuwattch/basic_components.h	/^	double IFU_duty_cycle,BR_duty_cycle,LSU_duty_cycle,MemManU_I_duty_cycle,$/;"	m	class:CoreDynParam
LSU_order	src/gpuwattch/XML_Parse.h	/^	char LSU_order[20];$/;"	m	struct:__anon15
LS_OPTION	build/src/cuda-sim/ptx.tab.c	/^    LS_OPTION = 333,$/;"	e	enum:yytokentype	file:
LS_OPTION	build/src/cuda-sim/ptx.tab.h	/^    LS_OPTION = 333,$/;"	e	enum:yytokentype
LTU_OPTION	build/src/cuda-sim/ptx.tab.c	/^    LTU_OPTION = 338,$/;"	e	enum:yytokentype	file:
LTU_OPTION	build/src/cuda-sim/ptx.tab.h	/^    LTU_OPTION = 338,$/;"	e	enum:yytokentype
LT_OPTION	build/src/cuda-sim/ptx.tab.c	/^    LT_OPTION = 328,$/;"	e	enum:yytokentype	file:
LT_OPTION	build/src/cuda-sim/ptx.tab.h	/^    LT_OPTION = 328,$/;"	e	enum:yytokentype
LU_OPTION	build/src/cuda-sim/ptx.tab.c	/^    LU_OPTION = 406,$/;"	e	enum:yytokentype	file:
LU_OPTION	build/src/cuda-sim/ptx.tab.h	/^    LU_OPTION = 406,$/;"	e	enum:yytokentype
LVDS	src/gpuwattch/XML_Parse.h	/^	bool LVDS;$/;"	m	struct:__anon23
LVDS	src/gpuwattch/basic_components.h	/^    bool   LVDS, withPHY;$/;"	m	class:MCParam
L_MEM_LD	src/gpgpu-sim/stats.h	/^   L_MEM_LD,$/;"	e	enum:mem_stage_access_type
L_MEM_ST	src/gpgpu-sim/stats.h	/^   L_MEM_ST,$/;"	e	enum:mem_stage_access_type
LastTime_Reply	src/gpgpu-sim/l2cache.h	/^        int LastTime_Reply;$/;"	m	class:KAIN_GPU_chiplet
LastTime_Request	src/gpgpu-sim/l2cache.h	/^        int LastTime_Request;$/;"	m	class:KAIN_GPU_chiplet
LastWinner	src/intersim2/arbiters/arbiter.hpp	/^  inline int LastWinner() const {$/;"	f	class:Arbiter
Last_Near_ID_ID	src/gpgpu-sim/l2cache.h	/^        int Last_Near_ID_ID[4];$/;"	m	class:KAIN_GPU_chiplet
Last_Remote_ID	src/gpgpu-sim/l2cache.h	/^        int Last_Remote_ID;$/;"	m	class:KAIN_GPU_chiplet
Last_Remote_ID_ID	src/gpgpu-sim/l2cache.h	/^        int Last_Remote_ID_ID[4];$/;"	m	class:KAIN_GPU_chiplet
LauncherOptionParser	launcher/launcher_option_parser.cc	/^LauncherOptionParser::LauncherOptionParser(int argc, char *argv[])$/;"	f	class:LauncherOptionParser
LauncherOptionParser	launcher/launcher_option_parser.h	/^class LauncherOptionParser {$/;"	c
Level	src/ramulator_sim/ALDRAM.h	/^    enum class Level : int$/;"	c	class:ALDRAM
Level	src/ramulator_sim/Cache.h	/^  enum class Level {$/;"	c	class:Cache
Level	src/ramulator_sim/DDR3.h	/^    enum class Level : int$/;"	c	class:DDR3
Level	src/ramulator_sim/DDR4.h	/^    enum class Level : int$/;"	c	class:DDR4
Level	src/ramulator_sim/DSARP.h	/^    enum class Level : int$/;"	c	class:DSARP
Level	src/ramulator_sim/GDDR5.h	/^    enum class Level : int$/;"	c	class:GDDR5
Level	src/ramulator_sim/HBM.h	/^    enum class Level : int$/;"	c	class:HBM
Level	src/ramulator_sim/LPDDR3.h	/^    enum class Level : int$/;"	c	class:LPDDR3
Level	src/ramulator_sim/LPDDR4.h	/^    enum class Level : int$/;"	c	class:LPDDR4
Level	src/ramulator_sim/SALP.h	/^    enum class Level : int$/;"	c	class:SALP
Level	src/ramulator_sim/TLDRAM.h	/^    enum class Level : int$/;"	c	class:TLDRAM
Level	src/ramulator_sim/WideIO.h	/^    enum class Level : int$/;"	c	class:WideIO
Level	src/ramulator_sim/WideIO2.h	/^    enum class Level : int$/;"	c	class:WideIO2
LimitFor	src/intersim2/buffer_state.cpp	/^int BufferState::FeedbackSharedBufferPolicy::LimitFor(int vc) const$/;"	f	class:BufferState::FeedbackSharedBufferPolicy
LimitFor	src/intersim2/buffer_state.cpp	/^int BufferState::LimitedSharedBufferPolicy::LimitFor(int vc) const$/;"	f	class:BufferState::LimitedSharedBufferPolicy
LimitFor	src/intersim2/buffer_state.cpp	/^int BufferState::PrivateBufferPolicy::LimitFor(int vc) const$/;"	f	class:BufferState::PrivateBufferPolicy
LimitFor	src/intersim2/buffer_state.cpp	/^int BufferState::SharedBufferPolicy::LimitFor(int vc) const$/;"	f	class:BufferState::SharedBufferPolicy
LimitFor	src/intersim2/buffer_state.hpp	/^  inline int LimitFor( int vc = 0 ) const {$/;"	f	class:BufferState
LimitedSharedBufferPolicy	src/intersim2/buffer_state.cpp	/^BufferState::LimitedSharedBufferPolicy::LimitedSharedBufferPolicy(Configuration const & config, BufferState * parent, const string & name)$/;"	f	class:BufferState::LimitedSharedBufferPolicy
LimitedSharedBufferPolicy	src/intersim2/buffer_state.hpp	/^  class LimitedSharedBufferPolicy : public SharedBufferPolicy {$/;"	c	class:BufferState
Line	src/ramulator_sim/Cache.h	/^    Line(long addr, long tag):$/;"	f	struct:Cache::Line
Line	src/ramulator_sim/Cache.h	/^    Line(long addr, long tag, bool lock, bool dirty):$/;"	f	struct:Cache::Line
Line	src/ramulator_sim/Cache.h	/^  struct Line {$/;"	s	class:Cache
LoadQ	src/gpuwattch/core.h	/^	ArrayST * LoadQ;$/;"	m	class:LoadStoreU
LoadStoreU	src/gpuwattch/core.cc	/^LoadStoreU::LoadStoreU(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_, const CoreDynParam & dyn_p_,bool exist_)$/;"	f	class:LoadStoreU
LoadStoreU	src/gpuwattch/core.h	/^class LoadStoreU :public Component {$/;"	c
Low_swing	src/gpuwattch/cacti/cacti_interface.h	/^    Low_swing \/* differential low power wires with high area overhead *\/,$/;"	e	enum:Wire_type
M	src/gpuwattch/cacti/router.h	/^    double M; \/\/network load$/;"	m	class:MCPAT_Router
M	src/intersim2/power/power_module.hpp	/^  double M;$/;"	m	struct:wire
MAIN_MEM_PER_CHIP_STANDBY_CURRENT_mA	src/gpuwattch/cacti/const.h	211;"	d
MASA	src/ramulator_sim/SALP.h	/^        SALP_1, SALP_2, MASA, MAX$/;"	m	class:SALP::Type
MATLAB_OUTPUT	src/intersim/trafficmanager.cpp	/^int MATLAB_OUTPUT        = 0;    \/\/ output data in MATLAB friendly format$/;"	v
MAT_LEAKAGE_REDUCTION_DUE_TO_SLEEP_TRANSISTORS_FACTOR	src/gpuwattch/cacti/const.h	206;"	d
MAX	src/cuda-sim/cuda-sim.cc	2113;"	d	file:
MAX	src/gpgpu-sim/gpu-sim.cc	77;"	d	file:
MAX	src/gpgpu-sim/shader.cc	53;"	d	file:
MAX	src/gpgpusim_entrypoint.cc	39;"	d	file:
MAX	src/gpuwattch/cacti/const.h	105;"	d
MAX	src/ramulator_sim/Memory.h	/^        MAX,$/;"	m	class:Memory::Translation
MAX	src/ramulator_sim/Memory.h	/^        MAX,$/;"	m	class:Memory::Type
MAXDATAN	src/gpuwattch/cacti/const.h	/^const unsigned int MAXDATAN     = 512;      \/\/ maximum for Ndwl and Ndbl$/;"	v
MAXDATASPD	src/gpuwattch/cacti/const.h	/^const unsigned int MAXDATASPD   = 256;      \/\/ maximum for Nspd$/;"	v
MAXNCTAPERSM_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    MAXNCTAPERSM_DIRECTIVE = 275,$/;"	e	enum:yytokentype	file:
MAXNCTAPERSM_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    MAXNCTAPERSM_DIRECTIVE = 275,$/;"	e	enum:yytokentype
MAXNNREG_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    MAXNNREG_DIRECTIVE = 276,$/;"	e	enum:yytokentype	file:
MAXNNREG_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    MAXNNREG_DIRECTIVE = 276,$/;"	e	enum:yytokentype
MAXNTID_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    MAXNTID_DIRECTIVE = 277,$/;"	e	enum:yytokentype	file:
MAXNTID_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    MAXNTID_DIRECTIVE = 277,$/;"	e	enum:yytokentype
MAXSUBARRAYCOLS	src/gpuwattch/cacti/const.h	141;"	d
MAXSUBARRAYROWS	src/gpuwattch/cacti/const.h	138;"	d
MAXSUBARRAYS	src/gpuwattch/cacti/const.h	/^const unsigned int MAXSUBARRAYS = 1048576;  \/\/ maximum subarrays for data and tag arrays$/;"	v
MAX_ACCESSES_PER_INSN_PER_THREAD	src/abstract_hardware_model.h	/^const unsigned MAX_ACCESSES_PER_INSN_PER_THREAD = 8;$/;"	v
MAX_ADDR_BIT	src/gpgpu-sim/addrdec.h	39;"	d
MAX_ALU_LATENCY	src/gpgpu-sim/shader.h	/^    static const unsigned MAX_ALU_LATENCY = 512;$/;"	m	class:shader_core_ctx
MAX_ALU_LATENCY	src/gpgpu-sim/shader.h	/^    static const unsigned MAX_ALU_LATENCY = 512;$/;"	m	class:simd_function_unit
MAX_CLASS_KER	src/cuda-sim/cuda-sim.cc	1165;"	d	file:
MAX_COL_MUX	src/gpuwattch/cacti/const.h	/^const unsigned int MAX_COL_MUX  = 256;$/;"	v
MAX_CTA_PER_SHADER	common/hard_consts.h	5;"	d
MAX_DEFAULT_CACHE_SIZE_MULTIBLIER	src/gpgpu-sim/gpu-cache.cc	32;"	d	file:
MAX_INST_SIZE	src/cuda-sim/cuda-sim.cc	207;"	d	file:
MAX_MEMORY_ACCESS_SIZE	src/abstract_hardware_model.h	/^const unsigned MAX_MEMORY_ACCESS_SIZE = 128;$/;"	v
MAX_NUMBER_ARRAY_PARTITIONS	src/gpuwattch/cacti/const.h	235;"	d
MAX_NUMBER_GATES_STAGE	src/gpuwattch/cacti/const.h	229;"	d
MAX_NUMBER_HTREE_NODES	src/gpuwattch/cacti/const.h	230;"	d
MAX_PERCENT_AWAY_FROM_ALLOTED_AREA	src/gpuwattch/cacti/const.h	176;"	d
MAX_PERCENT_AWAY_FROM_ASPECT_RATIO	src/gpuwattch/cacti/const.h	188;"	d
MAX_REG_OPERANDS	src/abstract_hardware_model.h	565;"	d
MAX_STREAMING_MULTIPROCESSORS	src/abstract_hardware_model.h	223;"	d
MAX_THREAD_PER_SM	src/abstract_hardware_model.h	224;"	d
MAX_WAIT_FOR_PIPE	launcher/communicate.cc	/^const int Communicate::MAX_WAIT_FOR_PIPE = 60;$/;"	m	class:Communicate	file:
MAX_WAIT_FOR_PIPE	launcher/communicate.h	/^  static const int MAX_WAIT_FOR_PIPE;$/;"	m	class:Communicate
MAX_WARP_SIZE	common/warp_consts.h	/^const unsigned MAX_WARP_SIZE = 32;$/;"	v
MAX_WARP_SIZE_SIMT_STACK	common/warp_consts.h	5;"	d
MAX_WIRE_SCALE	src/gpuwattch/cacti/highradix.cc	46;"	d	file:
MA_TUP	src/abstract_hardware_model.cc	114;"	d	file:
MA_TUP	src/abstract_hardware_model.cc	118;"	d	file:
MA_TUP	src/abstract_hardware_model.h	446;"	d
MA_TUP	src/abstract_hardware_model.h	450;"	d
MA_TUP_BEGIN	src/abstract_hardware_model.cc	113;"	d	file:
MA_TUP_BEGIN	src/abstract_hardware_model.cc	117;"	d	file:
MA_TUP_BEGIN	src/abstract_hardware_model.h	445;"	d
MA_TUP_BEGIN	src/abstract_hardware_model.h	449;"	d
MA_TUP_END	src/abstract_hardware_model.cc	115;"	d	file:
MA_TUP_END	src/abstract_hardware_model.cc	119;"	d	file:
MA_TUP_END	src/abstract_hardware_model.h	447;"	d
MA_TUP_END	src/abstract_hardware_model.h	451;"	d
MC	src/gpuwattch/basic_components.h	/^	MC,    \/\/memory controller$/;"	e	enum:MemoryCtrl_type
MCBackend	src/gpuwattch/memoryctrl.cc	/^MCBackend::MCBackend(InputParameter* interface_ip_, const MCParam & mcp_, enum MemoryCtrl_type mc_type_)$/;"	f	class:MCBackend
MCBackend	src/gpuwattch/memoryctrl.h	/^class MCBackend : public Component {$/;"	c
MCFrontEnd	src/gpuwattch/memoryctrl.cc	/^MCFrontEnd::MCFrontEnd(ParseXML *XML_interface,InputParameter* interface_ip_, const MCParam & mcp_, enum MemoryCtrl_type mc_type_)$/;"	f	class:MCFrontEnd
MCFrontEnd	src/gpuwattch/memoryctrl.h	/^class MCFrontEnd : public Component {$/;"	c
MCP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   MCP,$/;"	e	enum:pwr_cmp_t	file:
MCPAT_Arbiter	src/gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::MCPAT_Arbiter($/;"	f	class:MCPAT_Arbiter
MCPAT_Arbiter	src/gpuwattch/cacti/arbiter.h	/^class MCPAT_Arbiter : public Component$/;"	c
MCPAT_Router	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::MCPAT_Router($/;"	f	class:MCPAT_Router
MCPAT_Router	src/gpuwattch/cacti/router.h	/^class MCPAT_Router : public Component$/;"	c
MCPHY	src/gpuwattch/memoryctrl.cc	/^MCPHY::MCPHY(InputParameter* interface_ip_, const MCParam & mcp_, enum MemoryCtrl_type mc_type_)$/;"	f	class:MCPHY
MCPHY	src/gpuwattch/memoryctrl.h	/^class MCPHY : public Component {$/;"	c
MCParam	src/gpuwattch/basic_components.h	/^	MCParam(){};$/;"	f	class:MCParam
MCParam	src/gpuwattch/basic_components.h	/^class MCParam {$/;"	c
MC_PARTITION_INCLUDED	src/gpgpu-sim/l2cache.h	29;"	d
MC_arb	src/gpuwattch/memoryctrl.h	/^	selection_logic * MC_arb;$/;"	m	class:MCFrontEnd
MEMORYCTRL_H_	src/gpuwattch/memoryctrl.h	40;"	d
MEMORYINCREASE	src/gpuwattch/xmlParser.cc	1074;"	d	file:
MEMORY_BARRIER_OP	src/abstract_hardware_model.h	/^   MEMORY_BARRIER_OP,$/;"	e	enum:uarch_op_t
MEMPART_DPRINTF	src/gpgpu-sim/l2cache_trace.h	39;"	d
MEMPART_DPRINTF	src/gpgpu-sim/l2cache_trace.h	52;"	d
MEMPART_DTRACE	src/gpgpu-sim/l2cache_trace.h	35;"	d
MEMPART_DTRACE	src/gpgpu-sim/l2cache_trace.h	51;"	d
MEMPART_PRINT_STR	src/gpgpu-sim/l2cache_trace.h	34;"	d
MEM_ACCESS_TYPE_TUP_DEF	src/abstract_hardware_model.h	429;"	d
MEM_BLOCK_SIZE	src/cuda-sim/memory.h	50;"	d
MEM_FETCH_H	src/gpgpu-sim/mem_fetch.h	29;"	d
MEM_LATENCY_STAT_H	src/gpgpu-sim/mem_latency_stat.h	29;"	d
MEM_LATENCY_STAT_IMPL	src/gpgpu-sim/gpu-sim.cc	99;"	d	file:
MEM_MAP_RESIZE	src/cuda-sim/memory.h	36;"	d
MEM_MAP_RESIZE	src/cuda-sim/memory.h	38;"	d
MEM_PRE	src/gpuwattch/XML_Parse.h	/^   MEM_PRE,$/;"	e	enum:perf_count_t
MEM_RD	src/gpuwattch/XML_Parse.h	/^   MEM_RD,$/;"	e	enum:perf_count_t
MEM_WR	src/gpuwattch/XML_Parse.h	/^   MEM_WR,$/;"	e	enum:perf_count_t
MEM__OP	src/abstract_hardware_model.h	/^    MEM__OP$/;"	e	enum:operation_pipeline_t
MESSAGE_GPU_BIND_TEXTURE	launcher/communicate.h	/^  MESSAGE_GPU_BIND_TEXTURE,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_BIND_TEXTURE_TO_ARRAY	launcher/communicate.h	/^  MESSAGE_GPU_BIND_TEXTURE_TO_ARRAY,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_CONFIGURE_CALL	launcher/communicate.h	/^  MESSAGE_GPU_CONFIGURE_CALL,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_CURR_CYCLE	launcher/communicate.h	/^  MESSAGE_GPU_CURR_CYCLE,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_END	launcher/communicate.h	/^  MESSAGE_GPU_END$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_EXIT_SIMULATION	launcher/communicate.h	/^  MESSAGE_GPU_EXIT_SIMULATION,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_GET_DEVICE	launcher/communicate.h	/^  MESSAGE_GPU_GET_DEVICE,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_GET_DEVICE_COUNT	launcher/communicate.h	/^  MESSAGE_GPU_GET_DEVICE_COUNT,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_GET_DEVICE_PROPERTY	launcher/communicate.h	/^  MESSAGE_GPU_GET_DEVICE_PROPERTY,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_GET_LAST_ERROR	launcher/communicate.h	/^  MESSAGE_GPU_GET_LAST_ERROR,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_LAUNCH	launcher/communicate.h	/^  MESSAGE_GPU_LAUNCH,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_MALLOC	launcher/communicate.h	/^  MESSAGE_GPU_MALLOC,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_MALLOCARRAY	launcher/communicate.h	/^  MESSAGE_GPU_MALLOCARRAY,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_MEMCPY	launcher/communicate.h	/^  MESSAGE_GPU_MEMCPY,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_MEMCPY_2D_TO_ARRAY	launcher/communicate.h	/^  MESSAGE_GPU_MEMCPY_2D_TO_ARRAY,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_MEMCPY_SYMBOL	launcher/communicate.h	/^  MESSAGE_GPU_MEMCPY_SYMBOL,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_MEMSET	launcher/communicate.h	/^  MESSAGE_GPU_MEMSET,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_REGISTER_CONST_VARIABLE	launcher/communicate.h	/^  MESSAGE_GPU_REGISTER_CONST_VARIABLE,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_REGISTER_FAT_BINARY	launcher/communicate.h	/^  MESSAGE_GPU_REGISTER_FAT_BINARY,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_REGISTER_FUNCTION	launcher/communicate.h	/^  MESSAGE_GPU_REGISTER_FUNCTION,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_REGISTER_GLOBAL_VARIABLE	launcher/communicate.h	/^  MESSAGE_GPU_REGISTER_GLOBAL_VARIABLE,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_REGISTER_TEXTURE	launcher/communicate.h	/^  MESSAGE_GPU_REGISTER_TEXTURE,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_SETUP_ARGUMENT	launcher/communicate.h	/^  MESSAGE_GPU_SETUP_ARGUMENT,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_SET_CACHE_CONFIG	launcher/communicate.h	/^  MESSAGE_GPU_SET_CACHE_CONFIG,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_SET_DEVICE	launcher/communicate.h	/^  MESSAGE_GPU_SET_DEVICE,$/;"	e	enum:MULTIKERNEL_MESSAGES
MESSAGE_GPU_SYNCHRONIZE	launcher/communicate.h	/^  MESSAGE_GPU_SYNCHRONIZE,$/;"	e	enum:MULTIKERNEL_MESSAGES
MF_TUP	src/gpgpu-sim/mem_fetch.cc	119;"	d	file:
MF_TUP	src/gpgpu-sim/mem_fetch.cc	123;"	d	file:
MF_TUP	src/gpgpu-sim/mem_fetch.h	51;"	d
MF_TUP	src/gpgpu-sim/mem_fetch.h	55;"	d
MF_TUP_BEGIN	src/gpgpu-sim/mem_fetch.cc	118;"	d	file:
MF_TUP_BEGIN	src/gpgpu-sim/mem_fetch.cc	122;"	d	file:
MF_TUP_BEGIN	src/gpgpu-sim/mem_fetch.h	50;"	d
MF_TUP_BEGIN	src/gpgpu-sim/mem_fetch.h	54;"	d
MF_TUP_END	src/gpgpu-sim/mem_fetch.cc	120;"	d	file:
MF_TUP_END	src/gpgpu-sim/mem_fetch.cc	124;"	d	file:
MF_TUP_END	src/gpgpu-sim/mem_fetch.h	52;"	d
MF_TUP_END	src/gpgpu-sim/mem_fetch.h	56;"	d
MIG	src/ramulator_sim/TLDRAM.h	/^        MIG,$/;"	m	class:TLDRAM::Command
MIN	src/gpgpu-sim/shader.cc	54;"	d	file:
MIN	src/gpuwattch/cacti/const.h	106;"	d
MINNCTAPERSM_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    MINNCTAPERSM_DIRECTIVE = 278,$/;"	e	enum:yytokentype	file:
MINNCTAPERSM_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    MINNCTAPERSM_DIRECTIVE = 278,$/;"	e	enum:yytokentype
MINSUBARRAYCOLS	src/gpuwattch/cacti/const.h	140;"	d
MINSUBARRAYROWS	src/gpuwattch/cacti/const.h	135;"	d
MINUS	build/src/cuda-sim/ptx.tab.c	/^    MINUS = 351,$/;"	e	enum:yytokentype	file:
MINUS	build/src/cuda-sim/ptx.tab.h	/^    MINUS = 351,$/;"	e	enum:yytokentype
MIN_AREA_EFFICIENCY	src/gpuwattch/cacti/const.h	180;"	d
MIN_BANKSIZE	src/gpuwattch/cacti/nuca.cc	/^unsigned int MIN_BANKSIZE=65536;$/;"	v
MIN_GAP_BET_P_AND_N_DIFFS	src/gpuwattch/cacti/parameter.h	/^  double MIN_GAP_BET_P_AND_N_DIFFS;$/;"	m	class:TechnologyParameter
MIN_GAP_BET_SAME_TYPE_DIFFS	src/gpuwattch/cacti/parameter.h	/^  double MIN_GAP_BET_SAME_TYPE_DIFFS;$/;"	m	class:TechnologyParameter
MISS	src/gpgpu-sim/gpu-cache.h	/^    MISS,$/;"	e	enum:cache_request_status
MKScheduler	launcher/mk-sched/mk_scheduler.h	/^  MKScheduler() : num_SMs(0)$/;"	f	class:MKScheduler
MKScheduler	launcher/mk-sched/mk_scheduler.h	/^class MKScheduler {$/;"	c
MM	src/intersim/rng.cpp	23;"	d	file:
MM	src/intersim2/rng.c	22;"	d	file:
MODIFIED	src/gpgpu-sim/gpu-cache.h	/^    MODIFIED$/;"	e	enum:cache_block_state
MSHR_RC_FAIL	src/gpgpu-sim/stats.h	/^   MSHR_RC_FAIL,$/;"	e	enum:mem_stage_stall_type
MUL	src/gpuwattch/basic_components.h	/^    MUL$/;"	e	enum:FU_type
MULTIKERNEL_MESSAGES	launcher/communicate.h	/^enum MULTIKERNEL_MESSAGES {$/;"	g
MUL_cdb_duty_cycle	src/gpuwattch/XML_Parse.h	/^	double MUL_cdb_duty_cycle ;$/;"	m	struct:__anon15
MUL_cdb_duty_cycle	src/gpuwattch/basic_components.h	/^	       FPU_duty_cycle, ALU_cdb_duty_cycle,MUL_cdb_duty_cycle,$/;"	m	class:CoreDynParam
MUL_duty_cycle	src/gpuwattch/XML_Parse.h	/^	double MUL_duty_cycle ;$/;"	m	struct:__anon15
MUL_duty_cycle	src/gpuwattch/basic_components.h	/^	       MemManU_D_duty_cycle, ALU_duty_cycle,MUL_duty_cycle,$/;"	m	class:CoreDynParam
MUL_per_core	src/gpuwattch/XML_Parse.h	/^	int MUL_per_core;$/;"	m	struct:__anon15
MY_CAS_I	src/cuda-sim/instructions.cc	647;"	d	file:
MY_DEC_I	src/cuda-sim/instructions.cc	645;"	d	file:
MY_EXCH	src/cuda-sim/instructions.cc	649;"	d	file:
MY_INC_I	src/cuda-sim/instructions.cc	644;"	d	file:
MY_MAX_F	src/cuda-sim/instructions.cc	639;"	d	file:
MY_MAX_I	src/cuda-sim/instructions.cc	638;"	d	file:
MY_MIN_F	src/cuda-sim/instructions.cc	642;"	d	file:
MY_MIN_I	src/cuda-sim/instructions.cc	641;"	d	file:
M_traffic_pattern	src/gpuwattch/noc.h	/^	double M_traffic_pattern;$/;"	m	class:NoC
MaskOutput	src/intersim/allocator.cpp	/^void Allocator::MaskOutput( int out, int mask )$/;"	f	class:Allocator
MaskOutput	src/intersim2/allocators/selalloc.cpp	/^void SelAlloc::MaskOutput( int out, int mask )$/;"	f	class:SelAlloc
Mat	src/gpuwattch/cacti/mat.cc	/^Mat::Mat(const DynamicParameter & dyn_p)$/;"	f	class:Mat
Mat	src/gpuwattch/cacti/mat.h	/^class Mat : public Component$/;"	c
Match	src/intersim/arbiter.cpp	/^int Arbiter::Match( ) const$/;"	f	class:Arbiter
Match	src/intersim2/arbiters/prio_arb.cpp	/^int PriorityArbiter::Match( ) const$/;"	f	class:PriorityArbiter
MatrixArbiter	src/intersim2/arbiters/matrix_arb.cpp	/^MatrixArbiter::MatrixArbiter( Module *parent, const string &name, int size )$/;"	f	class:MatrixArbiter
MatrixArbiter	src/intersim2/arbiters/matrix_arb.hpp	/^class MatrixArbiter : public Arbiter {$/;"	c
Max	src/intersim/stats.cpp	/^double Stats::Max( ) const$/;"	f	class:Stats
Max	src/intersim2/stats.cpp	/^double Stats::Max( ) const$/;"	f	class:Stats
MaxCredits	src/intersim2/routers/chaos_router.hpp	/^  virtual vector<int> MaxCredits() const { return vector<int>(); }$/;"	f	class:ChaosRouter
MaxCredits	src/intersim2/routers/event_router.hpp	/^  virtual vector<int> MaxCredits() const { return vector<int>(); }$/;"	f	class:EventRouter
MaxCredits	src/intersim2/routers/iq_router.cpp	/^vector<int> IQRouter::MaxCredits() const$/;"	f	class:IQRouter
MaxScalarStorage	launcher/stats/stats.h	/^  MaxScalarStorage()$/;"	f	class:Stats::MaxScalarStorage
MaxScalarStorage	launcher/stats/stats.h	/^class MaxScalarStorage : ScalarStorage<uint64_t> {$/;"	c	namespace:Stats
MaxSizeMatch	src/intersim/maxsize.cpp	/^MaxSizeMatch::MaxSizeMatch( const Configuration &config,$/;"	f	class:MaxSizeMatch
MaxSizeMatch	src/intersim/maxsize.hpp	/^class MaxSizeMatch : public DenseAllocator {$/;"	c
MaxSizeMatch	src/intersim2/allocators/maxsize.cpp	/^MaxSizeMatch::MaxSizeMatch( Module *parent, const string& name,$/;"	f	class:MaxSizeMatch
MaxSizeMatch	src/intersim2/allocators/maxsize.hpp	/^class MaxSizeMatch : public DenseAllocator {$/;"	c
Max_area_deviation	src/gpuwattch/XML_Parse.h	/^	int Max_area_deviation;$/;"	m	struct:__anon26
Max_area_deviation	src/gpuwattch/arch_const.h	/^const double 		Max_area_deviation	=	50;$/;"	v
Max_dynamic_deviation	src/gpuwattch/arch_const.h	/^const double	    Max_dynamic_deviation	=50; \/\/New$/;"	v
Max_power_deviation	src/gpuwattch/XML_Parse.h	/^	int Max_power_deviation;$/;"	m	struct:__anon26
Maximum	launcher/stats/stats.h	/^class Maximum : public ScalarBase<MaxScalarStorage, uint64_t> {$/;"	c	namespace:Stats
MemManU	src/gpuwattch/core.cc	/^MemManU::MemManU(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_, const CoreDynParam & dyn_p_,bool exist_)$/;"	f	class:MemManU
MemManU	src/gpuwattch/core.h	/^class MemManU :public Component {$/;"	c
MemManU_D_duty_cycle	src/gpuwattch/XML_Parse.h	/^	double MemManU_D_duty_cycle ;$/;"	m	struct:__anon15
MemManU_D_duty_cycle	src/gpuwattch/basic_components.h	/^	       MemManU_D_duty_cycle, ALU_duty_cycle,MUL_duty_cycle,$/;"	m	class:CoreDynParam
MemManU_I_duty_cycle	src/gpuwattch/XML_Parse.h	/^	double MemManU_I_duty_cycle;$/;"	m	struct:__anon15
MemManU_I_duty_cycle	src/gpuwattch/basic_components.h	/^	double IFU_duty_cycle,BR_duty_cycle,LSU_duty_cycle,MemManU_I_duty_cycle,$/;"	m	class:CoreDynParam
Memory	src/ramulator_sim/Memory.h	/^    Memory(const Config& configs, vector<Controller<T>*> ctrls)$/;"	f	class:Memory
Memory	src/ramulator_sim/Memory.h	/^class Memory : public MemoryBase$/;"	c
MemoryBase	src/ramulator_sim/Memory.h	/^    MemoryBase() {}$/;"	f	class:MemoryBase
MemoryBase	src/ramulator_sim/Memory.h	/^class MemoryBase {$/;"	c
MemoryController	src/gpuwattch/memoryctrl.cc	/^MemoryController::MemoryController(ParseXML *XML_interface,InputParameter* interface_ip_, enum MemoryCtrl_type mc_type_,enum Dram_type dram_type_)$/;"	f	class:MemoryController
MemoryController	src/gpuwattch/memoryctrl.h	/^class MemoryController : public Component {$/;"	c
MemoryCtrl_type	src/gpuwattch/basic_components.h	/^enum MemoryCtrl_type {$/;"	g
MemoryFactory	src/ramulator_sim/MemoryFactory.h	/^class MemoryFactory {$/;"	c
MemoryType	src/gpuwattch/cacti/parameter.h	/^  class MemoryType$/;"	c	class:TechnologyParameter
MetalPitch	src/intersim2/power/power_module.hpp	/^  double MetalPitch ; $/;"	m	class:Power_Module
MhZ	src/gpgpu-sim/gpu-sim.h	59;"	d
Min	src/intersim/stats.cpp	/^double Stats::Min( ) const$/;"	f	class:Stats
Min	src/intersim2/stats.cpp	/^double Stats::Min( ) const$/;"	f	class:Stats
Module	src/intersim/module.cpp	/^Module::Module( )$/;"	f	class:Module
Module	src/intersim/module.cpp	/^Module::Module( Module *parent, const string& name )$/;"	f	class:Module
Module	src/intersim/module.hpp	/^class Module {$/;"	c
Module	src/intersim2/module.cpp	/^Module::Module( Module *parent, const string& name )$/;"	f	class:Module
Module	src/intersim2/module.hpp	/^class Module {$/;"	c
N	src/intersim2/power/power_module.hpp	/^  double N;$/;"	m	struct:wire
NAND	src/gpuwattch/cacti/const.h	146;"	d
NAND2_LEAK_STACK_FACTOR	src/gpuwattch/cacti/const.h	231;"	d
NAND3_LEAK_STACK_FACTOR	src/gpuwattch/cacti/const.h	232;"	d
NAN_OPTION	build/src/cuda-sim/ptx.tab.c	/^    NAN_OPTION = 343,$/;"	e	enum:yytokentype	file:
NAN_OPTION	build/src/cuda-sim/ptx.tab.h	/^    NAN_OPTION = 343,$/;"	e	enum:yytokentype
NCH	src/gpuwattch/cacti/const.h	111;"	d
NCTAID_REG	src/cuda-sim/opcodes.h	/^   NCTAID_REG,$/;"	e	enum:special_regs
NEG_OPTION	build/src/cuda-sim/ptx.tab.c	/^    NEG_OPTION = 377,$/;"	e	enum:yytokentype	file:
NEG_OPTION	build/src/cuda-sim/ptx.tab.h	/^    NEG_OPTION = 377,$/;"	e	enum:yytokentype
NETWORKS	src/intersim2/Makefile	/^NETWORKS:= $(wildcard networks\/*.cpp) $/;"	m
NEU_OPTION	build/src/cuda-sim/ptx.tab.c	/^    NEU_OPTION = 337,$/;"	e	enum:yytokentype	file:
NEU_OPTION	build/src/cuda-sim/ptx.tab.h	/^    NEU_OPTION = 337,$/;"	e	enum:yytokentype
NE_OPTION	build/src/cuda-sim/ptx.tab.c	/^    NE_OPTION = 327,$/;"	e	enum:yytokentype	file:
NE_OPTION	build/src/cuda-sim/ptx.tab.h	/^    NE_OPTION = 327,$/;"	e	enum:yytokentype
NIUController	src/gpuwattch/iocontrollers.cc	/^NIUController::NIUController(ParseXML *XML_interface,InputParameter* interface_ip_)$/;"	f	class:NIUController
NIUController	src/gpuwattch/iocontrollers.h	/^class NIUController : public Component {$/;"	c
NIUParam	src/gpuwattch/basic_components.h	/^	NIUParam(){};$/;"	f	class:NIUParam
NIUParam	src/gpuwattch/basic_components.h	/^class NIUParam {$/;"	c
NOCP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   NOCP,$/;"	e	enum:pwr_cmp_t	file:
NOC_A	src/gpuwattch/XML_Parse.h	/^   NOC_A,$/;"	e	enum:perf_count_t
NOC_H_	src/gpuwattch/noc.h	40;"	d
NON_ARRAY_IDENTIFIER	src/cuda-sim/ptx_parser.h	97;"	d
NON_REG_OPs	src/gpuwattch/XML_Parse.h	/^   NON_REG_OPs,$/;"	e	enum:perf_count_t
NOR	src/gpuwattch/cacti/const.h	145;"	d
NOR2_LEAK_STACK_FACTOR	src/gpuwattch/cacti/const.h	233;"	d
NORMAL	src/gpgpu-sim/stat-tool.cc	/^   NORMAL, TEXTURE, CONSTANT, INSTRUCTION$/;"	e	enum:cache_access_logger_types	file:
NOT_OPCODE	build/src/cuda-sim/lex.ptx_.c	1383;"	d	file:
NOT_TEX	src/abstract_hardware_model.h	/^    NOT_TEX,$/;"	e	enum:mem_operation_t
NO_ALLOC	src/gpgpu-sim/shader.h	/^      NO_ALLOC,$/;"	e	enum:opndcoll_rfu_t::alloc_t
NO_BRANCH_DIVERGENCE	src/cuda-sim/cuda-sim.h	212;"	d
NO_CONTEXT	src/gpgpu-sim/mem_fetch.h	/^   NO_CONTEXT = 0,$/;"	e	enum:context_type
NO_OP	src/abstract_hardware_model.h	/^   NO_OP=-1,$/;"	e	enum:uarch_op_t
NO_OP_FLAG	src/gpgpu-sim/shader.h	80;"	d
NO_PARTIAL_WRITE	src/abstract_hardware_model.h	427;"	d
NO_RC_FAIL	src/gpgpu-sim/stats.h	/^   NO_RC_FAIL = 0, $/;"	e	enum:mem_stage_stall_type
NO_WRITE_ALLOCATE	src/gpgpu-sim/gpu-cache.h	/^	NO_WRITE_ALLOCATE,$/;"	e	enum:write_allocate_policy_t
NSF_OPTION	build/src/cuda-sim/ptx.tab.c	/^    NSF_OPTION = 346,$/;"	e	enum:yytokentype	file:
NSF_OPTION	build/src/cuda-sim/ptx.tab.h	/^    NSF_OPTION = 346,$/;"	e	enum:yytokentype
NSMID_REG	src/cuda-sim/opcodes.h	/^   NSMID_REG,$/;"	e	enum:special_regs
NTHREADS	src/gpuwattch/cacti/cacti.mk	/^  NTHREADS = 8$/;"	m
NTHREADS	src/gpuwattch/mcpat.mk	/^  NTHREADS = 4$/;"	m
NTHREADS	src/gpuwattch/mcpatXeonCore.mk	/^  NTHREADS = 4$/;"	m
NTID_REG	src/cuda-sim/opcodes.h	/^   NTID_REG,$/;"	e	enum:special_regs
NTi	src/gpuwattch/cacti/arbiter.h	/^    double NTn1, PTn1, NTn2, PTn2, R, PTi, NTi;$/;"	m	class:MCPAT_Arbiter
NTi	src/gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router
NTid	src/gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router
NTn1	src/gpuwattch/cacti/arbiter.h	/^    double NTn1, PTn1, NTn2, PTn2, R, PTi, NTi;$/;"	m	class:MCPAT_Arbiter
NTn2	src/gpuwattch/cacti/arbiter.h	/^    double NTn1, PTn1, NTn2, PTn2, R, PTi, NTi;$/;"	m	class:MCPAT_Arbiter
NTod	src/gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router
NTtr	src/gpuwattch/cacti/arbiter.h	/^    double NTtr, PTtr;$/;"	m	class:MCPAT_Arbiter
NTtr	src/gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router
NUM	src/intersim2/y.tab.c	/^    NUM = 259,$/;"	e	enum:yytokentype	file:
NUM	src/intersim2/y.tab.c	122;"	d	file:
NUM	src/intersim2/y.tab.h	/^    NUM = 259,$/;"	e	enum:yytokentype
NUM	src/intersim2/y.tab.h	55;"	d
NUMBER_INPUT_PORTS_CROSSBAR	src/gpuwattch/cacti/const.h	201;"	d
NUMBER_INTERCONNECT_PROJECTION_TYPES	src/gpuwattch/cacti/const.h	151;"	d
NUMBER_MATS_PER_REDUNDANT_MAT	src/gpuwattch/cacti/const.h	166;"	d
NUMBER_OUTPUT_PORTS_CROSSBAR	src/gpuwattch/cacti/const.h	202;"	d
NUMBER_PIPELINE_STAGES	src/gpuwattch/cacti/const.h	194;"	d
NUMBER_SIGNALS_PER_PORT_CROSSBAR	src/gpuwattch/cacti/const.h	203;"	d
NUMBER_STACKED_DIE_LAYERS	src/gpuwattch/cacti/const.h	168;"	d
NUMBER_TECH_FLAVORS	src/gpuwattch/cacti/const.h	149;"	d
NUMBER_WIRE_TYPES	src/gpuwattch/cacti/const.h	153;"	d
NUM_CACHE_REQUEST_STATUS	src/gpgpu-sim/gpu-cache.h	/^    NUM_CACHE_REQUEST_STATUS$/;"	e	enum:cache_request_status
NUM_CACHE_TYPE	src/gpgpu-sim/gpu-cache.h	/^      NUM_CACHE_TYPE$/;"	e	enum:baseline_cache::CacheType
NUM_COMPONENTS_MODELLED	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   NUM_COMPONENTS_MODELLED$/;"	e	enum:pwr_cmp_t	file:
NUM_CONCRETE_SCHEDULERS	src/gpgpu-sim/shader.h	/^    NUM_CONCRETE_SCHEDULERS$/;"	e	enum:concrete_scheduler
NUM_FLIT_TYPES	src/intersim2/flit.hpp	/^  const static int NUM_FLIT_TYPES = 5;$/;"	m	class:Flit
NUM_LIMIT_CAUSE	common/kernel_info_t.h	/^     NUM_LIMIT_CAUSE$/;"	e	enum:kernel_info_t::limitCause
NUM_OPCODES	src/cuda-sim/opcodes.h	/^   NUM_OPCODES$/;"	e	enum:opcode_t
NUM_OPTION	build/src/cuda-sim/ptx.tab.c	/^    NUM_OPTION = 342,$/;"	e	enum:yytokentype	file:
NUM_OPTION	build/src/cuda-sim/ptx.tab.h	/^    NUM_OPTION = 342,$/;"	e	enum:yytokentype
NUM_ORDERING	src/gpgpu-sim/shader.h	/^        NUM_ORDERING,$/;"	e	enum:scheduler_unit::OrderingType
NUM_PERFORMANCE_COUNTERS	src/gpuwattch/XML_Parse.h	/^   NUM_PERFORMANCE_COUNTERS$/;"	e	enum:perf_count_t
NUM_SIMD_MODEL	src/abstract_hardware_model.h	/^   NUM_SIMD_MODEL$/;"	e	enum:divergence_support_t
NUM_STAT_IDX	src/gpgpu-sim/power_stat.h	/^    NUM_STAT_IDX     \/\/ Total number of samples$/;"	e	enum:_stat_idx
NWARPID_REG	src/cuda-sim/opcodes.h	/^   NWARPID_REG,$/;"	e	enum:special_regs
N_ADDRDEC	src/gpgpu-sim/addrdec.h	/^      N_ADDRDEC$/;"	e	enum:linear_to_raw_address_translation::__anon29
N_MEM_STAGE_ACCESS_TYPE	src/gpgpu-sim/stats.h	/^   N_MEM_STAGE_ACCESS_TYPE$/;"	e	enum:mem_stage_access_type
N_MEM_STAGE_STALL_TYPE	src/gpgpu-sim/stats.h	/^   N_MEM_STAGE_STALL_TYPE$/;"	e	enum:mem_stage_stall_type
N_NETWORK_MODE	src/gpgpu-sim/icnt_wrapper.h	/^   N_NETWORK_MODE$/;"	e	enum:network_mode
N_PIPELINE_STAGES	src/gpgpu-sim/shader.h	/^    N_PIPELINE_STAGES $/;"	e	enum:pipeline_stage_name_t
Name	src/intersim2/module.hpp	/^  inline const string & Name() const { return _name; }$/;"	f	class:Module
NamedInfo	launcher/mk-sched/named_info.h	/^    NamedInfo() {}$/;"	f	class:NamedInfo
NamedInfo	launcher/mk-sched/named_info.h	/^class NamedInfo {$/;"	c
Ndbl	src/gpuwattch/cacti/cacti_interface.h	/^  int    Ndbl;$/;"	m	class:mem_array
Ndbl	src/gpuwattch/cacti/cacti_interface.h	/^  int Ndbl;$/;"	m	struct:__anon5
Ndbl	src/gpuwattch/cacti/parameter.h	/^    int Ndbl;$/;"	m	class:DynamicParameter
Ndcm	src/gpuwattch/cacti/cacti_interface.h	/^  int    Ndcm;$/;"	m	class:mem_array
Ndcm	src/gpuwattch/cacti/parameter.h	/^    int Ndcm;$/;"	m	class:DynamicParameter
Ndsam_lev_1	src/gpuwattch/cacti/cacti_interface.h	/^  int    Ndsam_lev_1;$/;"	m	class:mem_array
Ndsam_lev_1	src/gpuwattch/cacti/cacti_interface.h	/^  int Ndsam_lev_1;$/;"	m	struct:__anon5
Ndsam_lev_1	src/gpuwattch/cacti/parameter.h	/^    int Ndsam_lev_1;$/;"	m	class:DynamicParameter
Ndsam_lev_2	src/gpuwattch/cacti/cacti_interface.h	/^  int    Ndsam_lev_2;$/;"	m	class:mem_array
Ndsam_lev_2	src/gpuwattch/cacti/cacti_interface.h	/^  int Ndsam_lev_2;$/;"	m	struct:__anon5
Ndsam_lev_2	src/gpuwattch/cacti/parameter.h	/^    int Ndsam_lev_2;$/;"	m	class:DynamicParameter
Ndwl	src/gpuwattch/cacti/cacti_interface.h	/^  int    Ndwl;$/;"	m	class:mem_array
Ndwl	src/gpuwattch/cacti/cacti_interface.h	/^  int Ndwl;$/;"	m	struct:__anon5
Ndwl	src/gpuwattch/cacti/parameter.h	/^    int Ndwl;$/;"	m	class:DynamicParameter
Near_Request_turn	src/gpgpu-sim/l2cache.h	/^        int Near_Request_turn[4][4];$/;"	m	class:KAIN_GPU_chiplet
Near_cycle	src/gpgpu-sim/l2cache.h	/^        long long Near_cycle;$/;"	m	class:KAIN_GPU_chiplet
NeighborTrafficPattern	src/intersim2/traffic.cpp	/^NeighborTrafficPattern::NeighborTrafficPattern(int nodes, int k, int n, int xr)$/;"	f	class:NeighborTrafficPattern
NeighborTrafficPattern	src/intersim2/traffic.hpp	/^class NeighborTrafficPattern : public DigitPermutationTrafficPattern {$/;"	c
Network	src/intersim/network.cpp	/^Network::Network( const Configuration &config ) :$/;"	f	class:Network
Network	src/intersim/network.hpp	/^class Network : public Module {$/;"	c
Network	src/intersim2/networks/network.cpp	/^Network::Network( const Configuration &config, const string & name ) :$/;"	f	class:Network
Network	src/intersim2/networks/network.hpp	/^class Network : public TimedModule {$/;"	c
NeverUsed	src/intersim/stats.cpp	/^bool Stats::NeverUsed() const$/;"	f	class:Stats
New	src/intersim2/buffer_state.cpp	/^BufferState::BufferPolicy * BufferState::BufferPolicy::New(Configuration const & config, BufferState * parent, const string & name)$/;"	f	class:BufferState::BufferPolicy
New	src/intersim2/credit.cpp	/^Credit * Credit::New() {$/;"	f	class:Credit
New	src/intersim2/flit.cpp	/^Flit * Flit::New() {$/;"	f	class:Flit
New	src/intersim2/injection.cpp	/^InjectionProcess * InjectionProcess::New(string const & inject, int nodes, $/;"	f	class:InjectionProcess
New	src/intersim2/interconnect_interface.cpp	/^InterconnectInterface* InterconnectInterface::New(const char* const config_file)$/;"	f	class:InterconnectInterface
New	src/intersim2/networks/network.cpp	/^Network * Network::New(const Configuration & config, const string & name)$/;"	f	class:Network
New	src/intersim2/packet_reply_info.cpp	/^PacketReplyInfo * PacketReplyInfo::New()$/;"	f	class:PacketReplyInfo
New	src/intersim2/traffic.cpp	/^TrafficPattern * TrafficPattern::New(string const & pattern, int nodes, $/;"	f	class:TrafficPattern
New	src/intersim2/trafficmanager.cpp	/^TrafficManager * TrafficManager::New(Configuration const & config,$/;"	f	class:TrafficManager
NewAllocator	src/intersim/allocator.cpp	/^Allocator *Allocator::NewAllocator( const Configuration &config,$/;"	f	class:Allocator
NewAllocator	src/intersim2/allocators/allocator.cpp	/^Allocator *Allocator::NewAllocator( Module *parent, const string& name,$/;"	f	class:Allocator
NewArbiter	src/intersim2/arbiters/arbiter.cpp	/^Arbiter *Arbiter::NewArbiter( Module *parent, const string& name,$/;"	f	class:Arbiter
NewRouter	src/intersim/router.cpp	/^Router *Router::NewRouter( const Configuration& config,$/;"	f	class:Router
NewRouter	src/intersim2/routers/router.cpp	/^Router *Router::NewRouter( const Configuration& config,$/;"	f	class:Router
NextToken	src/gpuwattch/xmlParser.cc	/^} NextToken;$/;"	t	typeref:struct:__anon8	file:
NoC	src/gpuwattch/XML_Parse.h	/^    system_NoC NoC[64];$/;"	m	struct:__anon26
NoC	src/gpuwattch/noc.cc	/^NoC::NoC(ParseXML *XML_interface, int ithNoC_, InputParameter* interface_ip_, double M_traffic_pattern_, double link_len_)$/;"	f	class:NoC
NoC	src/gpuwattch/noc.h	/^class NoC :public Component {$/;"	c
NoCParam	src/gpuwattch/basic_components.h	/^	NoCParam(){};$/;"	f	class:NoCParam
NoCParam	src/gpuwattch/basic_components.h	/^class NoCParam {$/;"	c
NodeToPort	src/intersim2/networks/cmesh.cpp	/^int CMesh::NodeToPort( int address ) {$/;"	f	class:CMesh
NodeToRouter	src/intersim2/networks/cmesh.cpp	/^int CMesh::NodeToRouter( int address ) {$/;"	f	class:CMesh
NonDir	src/gpuwattch/basic_components.h	/^	NonDir$/;"	e	enum:Dir_type
None	src/ramulator_sim/Memory.h	/^        None,$/;"	m	class:Memory::Translation
Nspd	src/gpuwattch/cacti/cacti_interface.h	/^  double Nspd;$/;"	m	class:mem_array
Nspd	src/gpuwattch/cacti/cacti_interface.h	/^  double Nspd;$/;"	m	struct:__anon5
Nspd	src/gpuwattch/cacti/parameter.h	/^    double Nspd;$/;"	m	class:DynamicParameter
Nspd_min	src/gpuwattch/cacti/Ucache.h	/^  double   Nspd_min;$/;"	m	struct:calc_time_mt_wrapper_struct
Nuca	src/gpuwattch/cacti/nuca.cc	/^Nuca::Nuca($/;"	f	class:Nuca
Nuca	src/gpuwattch/cacti/nuca.cc	/^Nuca::Nuca():deviceType(&(g_tp.peri_global))$/;"	f	class:Nuca
Nuca	src/gpuwattch/cacti/nuca.h	/^class Nuca : public Component$/;"	c
NumChannels	src/intersim2/networks/network.hpp	/^  int NumChannels() const {return _channels;}$/;"	f	class:Network
NumClasses	src/intersim2/power/buffer_monitor.hpp	/^  inline int NumClasses() const {$/;"	f	class:BufferMonitor
NumClasses	src/intersim2/power/switch_monitor.hpp	/^  inline int const & NumClasses() const {$/;"	f	class:SwitchMonitor
NumDests	src/intersim/network.cpp	/^int Network::NumDests( ) const$/;"	f	class:Network
NumInputRequests	src/intersim2/allocators/allocator.cpp	/^int DenseAllocator::NumInputRequests( int in ) const$/;"	f	class:DenseAllocator
NumInputRequests	src/intersim2/allocators/allocator.cpp	/^int SparseAllocator::NumInputRequests( int in ) const$/;"	f	class:SparseAllocator
NumInputs	src/intersim2/power/buffer_monitor.hpp	/^  inline int NumInputs() const {$/;"	f	class:BufferMonitor
NumInputs	src/intersim2/power/switch_monitor.hpp	/^  inline int const & NumInputs() const {$/;"	f	class:SwitchMonitor
NumInputs	src/intersim2/routers/router.hpp	/^  inline int NumInputs() const {return _inputs;}$/;"	f	class:Router
NumNodes	src/intersim2/networks/network.hpp	/^  inline int NumNodes( ) const {return _nodes;}$/;"	f	class:Network
NumOutputRequests	src/intersim2/allocators/allocator.cpp	/^int DenseAllocator::NumOutputRequests( int out ) const$/;"	f	class:DenseAllocator
NumOutputRequests	src/intersim2/allocators/allocator.cpp	/^int SparseAllocator::NumOutputRequests( int out ) const$/;"	f	class:SparseAllocator
NumOutputs	src/intersim2/power/switch_monitor.hpp	/^  inline int const & NumOutputs() const {$/;"	f	class:SwitchMonitor
NumOutputs	src/intersim2/routers/router.hpp	/^  inline int NumOutputs() const {return _outputs;}$/;"	f	class:Router
NumRouters	src/intersim2/networks/network.hpp	/^  int NumRouters() const {return _size;}$/;"	f	class:Network
NumSamples	src/intersim/stats.cpp	/^int Stats::NumSamples( ) const$/;"	f	class:Stats
NumSamples	src/intersim2/stats.cpp	/^int Stats::NumSamples( ) const$/;"	f	class:Stats
NumSources	src/intersim/network.cpp	/^int Network::NumSources( ) const$/;"	f	class:Network
NumVCs	src/intersim/outputset.cpp	/^int OutputSet::NumVCs( int output_port ) const$/;"	f	class:OutputSet
NumVCs	src/intersim2/outputset.cpp	/^int OutputSet::NumVCs( int output_port ) const$/;"	f	class:OutputSet
O	src/gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router
OBJDIR	src/intersim2/Makefile	/^OBJDIR := $(BUILD_DIR)\/src\/intersim2$/;"	m
OBJDIR	src/ramulator_sim/Makefile	/^OBJDIR := $(BUILD_DIR)\/src\/ramulator_sim$/;"	m
OBJDIR	src/ramulator_sim/Makefile	/^OBJDIR := $(SIM_OBJ_FILES_DIR)\/ramulator_sim$/;"	m
OBJDIR	src/ramulator_sim/Makefile	/^OBJDIR := obj$/;"	m
OBJECTS	Makefile	/^OBJECTS=$(wildcard $(BUILD_DIR)\/launcher\/*.o)$/;"	m
OBJECTS	common/Makefile	/^OBJECTS=$(SOURCES:%.cc=$(BUILD_DIR)\/common\/%.o)$/;"	m
OBJECTS	launcher/Makefile	/^OBJECTS=$(SOURCES:%.cc=$(BUILD_DIR)\/launcher\/%.o)$/;"	m
OBJECTS	launcher/mk-sched/Makefile	/^OBJECTS=$(SOURCES:%.cc=$(BUILD_DIR)\/launcher\/mk-sched\/%.o)$/;"	m
OBJECTS	launcher/stats/Makefile	/^OBJECTS=$(SOURCES:%.cc=$(BUILD_DIR)\/launcher\/stats\/%.o)$/;"	m
OBJECTS	src/Makefile	/^OBJECTS=$(SOURCES:%.cc=$(BUILD_DIR)\/src\/%.o)$/;"	m
OBJS	src/cuda-sim/Makefile	/^OBJS := $(OUTPUT_DIR)\/ptx_parser.o $(OUTPUT_DIR)\/ptx_loader.o $(OUTPUT_DIR)\/cuda_device_printf.o $(OUTPUT_DIR)\/instructions.o $(OUTPUT_DIR)\/cuda-sim.o $(OUTPUT_DIR)\/ptx_ir.o $(OUTPUT_DIR)\/ptx_sim.o  $(OUTPUT_DIR)\/memory.o $(OUTPUT_DIR)\/ptx-stats.o $(OUTPUT_DIR)\/decuda_pred_table\/decuda_pred_table.o $(OUTPUT_DIR)\/ptx.tab.o $(OUTPUT_DIR)\/lex.ptx_.o $(OUTPUT_DIR)\/ptxinfo.tab.o $(OUTPUT_DIR)\/lex.ptxinfo_.o$/;"	m
OBJS	src/gpgpu-sim/Makefile	/^OBJS = $(CSRCS:%.cc=$(OUTPUT_DIR)\/%.$(OEXT))$/;"	m
OBJS	src/gpuwattch/cacti/cacti.mk	/^OBJS = $(patsubst %.cc,$(OUTPUT_DIR)\/%.o,$(SRCS))$/;"	m
OBJS	src/gpuwattch/mcpat.mk	/^OBJS = $(patsubst %.cc,$(OUTPUT_DIR)\/%.o,$(SRCS))$/;"	m
OBJS	src/gpuwattch/mcpatXeonCore.mk	/^OBJS = $(patsubst %.cc,obj_$(TAG)\/%.o,$(SRCS))$/;"	m
OBJS	src/intersim2/Makefile	/^OBJS :=  $(LEX_OBJS) $(YACC_OBJS)\\$/;"	m
OBJS	src/ramulator_sim/Makefile	/^OBJS := $(CPP_SRCS:%.cpp=${OBJDIR}\/%.o)$/;"	m
OC_EX_MEM	src/gpgpu-sim/shader.h	/^    OC_EX_MEM,$/;"	e	enum:pipeline_stage_name_t
OC_EX_SFU	src/gpgpu-sim/shader.h	/^    OC_EX_SFU,$/;"	e	enum:pipeline_stage_name_t
OC_EX_SP	src/gpgpu-sim/shader.h	/^    OC_EX_SP,$/;"	e	enum:pipeline_stage_name_t
OEXT	src/gpgpu-sim/Makefile	/^OEXT = o$/;"	m
ON_FILL	src/gpgpu-sim/gpu-cache.h	/^    ON_FILL$/;"	e	enum:allocation_policy_t
ON_MISS	src/gpgpu-sim/gpu-cache.h	/^    ON_MISS,$/;"	e	enum:allocation_policy_t
OOO	src/gpuwattch/basic_components.h	/^	OOO,$/;"	e	enum:Core_type
OPC	src/gpuwattch/core.h	/^	ArrayST * OPC;\/\/Operand collectors$/;"	m	class:RegFU
OPCODE	build/src/cuda-sim/ptx.tab.c	/^    OPCODE = 259,$/;"	e	enum:yytokentype	file:
OPCODE	build/src/cuda-sim/ptx.tab.h	/^    OPCODE = 259,$/;"	e	enum:yytokentype
OPT	src/cuda-sim/Makefile	/^OPT := -O2 -Wall -Wno-unused-function -Wno-sign-compare -I$(CUDA_INSTALL_PATH)\/include\/ -I$(OUTPUT_DIR)\/ -I.$/;"	m
OPT	src/gpuwattch/cacti/cacti.mk	/^  OPT = -O3 -msse2 -mfpmath=sse -DNTHREADS=$(NTHREADS)$/;"	m
OPT	src/gpuwattch/cacti/cacti.mk	/^  OPT = -ggdb -g -O0 -DNTHREADS=1  -gstabs+$/;"	m
OPT	src/gpuwattch/mcpat.mk	/^  OPT = -O3 -fPIC -msse2 -mfpmath=sse -DNTHREADS=$(NTHREADS) -Icacti -lz$/;"	m
OPT	src/gpuwattch/mcpat.mk	/^  OPT = -ggdb -fPIC -g -O0 -DNTHREADS=1 -Icacti -lz$/;"	m
OPT	src/gpuwattch/mcpatXeonCore.mk	/^  OPT = -O3 -msse2 -mfpmath=sse -DNTHREADS=$(NTHREADS) -Icacti$/;"	m
OPT	src/gpuwattch/mcpatXeonCore.mk	/^  OPT = -ggdb -g -O0 -DNTHREADS=1 -Icacti$/;"	m
OPTFLAGS	src/gpgpu-sim/Makefile	/^OPTFLAGS = -O2 -fPIC$/;"	m
OPT_BOOL	src/option_parser.h	/^    OPT_BOOL,$/;"	e	enum:option_dtype
OPT_CHAR	src/option_parser.h	/^    OPT_CHAR,$/;"	e	enum:option_dtype
OPT_CSTR	src/option_parser.h	/^    OPT_CSTR$/;"	e	enum:option_dtype
OPT_DOUBLE	src/option_parser.h	/^    OPT_DOUBLE,$/;"	e	enum:option_dtype
OPT_FLOAT	src/option_parser.h	/^    OPT_FLOAT,$/;"	e	enum:option_dtype
OPT_INT32	src/option_parser.h	/^    OPT_INT32,$/;"	e	enum:option_dtype
OPT_INT64	src/option_parser.h	/^    OPT_INT64,$/;"	e	enum:option_dtype
OPT_UINT32	src/option_parser.h	/^    OPT_UINT32,$/;"	e	enum:option_dtype
OPT_UINT64	src/option_parser.h	/^    OPT_UINT64,$/;"	e	enum:option_dtype
OP_DEF	src/cuda-sim/cuda-sim.cc	1241;"	d	file:
OP_DEF	src/cuda-sim/cuda-sim.cc	1243;"	d	file:
OP_DEF	src/cuda-sim/cuda-sim.cc	846;"	d	file:
OP_DEF	src/cuda-sim/cuda-sim.cc	848;"	d	file:
OP_DEF	src/cuda-sim/instructions.cc	49;"	d	file:
OP_DEF	src/cuda-sim/instructions.cc	51;"	d	file:
OP_DEF	src/cuda-sim/opcodes.h	32;"	d
OP_DEF	src/cuda-sim/opcodes.h	35;"	d
ORDERED_PRIORITY_FUNC_ONLY	src/gpgpu-sim/shader.h	/^        ORDERED_PRIORITY_FUNC_ONLY,$/;"	e	enum:scheduler_unit::OrderingType
ORDERING_GREEDY_THEN_PRIORITY_FUNC	src/gpgpu-sim/shader.h	/^        ORDERING_GREEDY_THEN_PRIORITY_FUNC = 0,$/;"	e	enum:scheduler_unit::OrderingType
OTHER_OP	src/abstract_hardware_model.h	/^    OTHER_OP,$/;"	e	enum:special_operations_t
OUTPUT_DIR	src/cuda-sim/Makefile	/^OUTPUT_DIR=$(BUILD_DIR)\/src\/cuda-sim$/;"	m
OUTPUT_DIR	src/gpgpu-sim/Makefile	/^OUTPUT_DIR=$(BUILD_DIR)\/src\/gpgpu-sim$/;"	m
OUTPUT_DIR	src/gpuwattch/cacti/cacti.mk	/^OUTPUT_DIR=$(SIM_OBJ_FILES_DIR)\/gpuwattch\/cacti$/;"	m
OUTPUT_DIR	src/gpuwattch/mcpat.mk	/^OUTPUT_DIR=$(SIM_OBJ_FILES_DIR)\/gpuwattch$/;"	m
Occupancy	src/intersim2/buffer_state.hpp	/^  inline int Occupancy() const {$/;"	f	class:BufferState
OccupancyFor	src/intersim2/buffer_state.hpp	/^  inline int OccupancyFor( int vc = 0 ) const {$/;"	f	class:BufferState
OccupancyForClass	src/intersim2/buffer_state.hpp	/^  inline int OccupancyForClass(int c) const {$/;"	f	class:BufferState
OnOffInjectionProcess	src/intersim2/injection.cpp	/^OnOffInjectionProcess::OnOffInjectionProcess(int nodes, double rate, $/;"	f	class:OnOffInjectionProcess
OnOffInjectionProcess	src/intersim2/injection.hpp	/^class OnOffInjectionProcess : public InjectionProcess {$/;"	c
Op	src/ramulator_sim/StatType.h	/^  Op() {}$/;"	f	class:Stats_Ram::Op
Op	src/ramulator_sim/StatType.h	/^  Op(std::string __opstring): opstring(__opstring) {}$/;"	f	class:Stats_Ram::Op
Op	src/ramulator_sim/StatType.h	/^class Op {$/;"	c	namespace:Stats_Ram
Opened	src/ramulator_sim/ALDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ALDRAM::State
Opened	src/ramulator_sim/DDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DDR3::State
Opened	src/ramulator_sim/DDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DDR4::State
Opened	src/ramulator_sim/DSARP.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DSARP::State
Opened	src/ramulator_sim/GDDR5.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:GDDR5::State
Opened	src/ramulator_sim/HBM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:HBM::State
Opened	src/ramulator_sim/LPDDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:LPDDR3::State
Opened	src/ramulator_sim/LPDDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:LPDDR4::State
Opened	src/ramulator_sim/SALP.h	/^        Opened, Closed, Selected, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:SALP::State
Opened	src/ramulator_sim/Scheduler.h	/^        Closed, Opened, Timeout, MAX$/;"	m	class:RowPolicy::Type
Opened	src/ramulator_sim/TLDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:TLDRAM::State
Opened	src/ramulator_sim/WideIO.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:WideIO::State
Opened	src/ramulator_sim/WideIO2.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:WideIO2::State
Optical	src/gpuwattch/cacti/cacti_interface.h	/^    Optical \/* optical wires *\/,$/;"	e	enum:Wire_type
OptionCollection	src/option_parser.cc	/^   typedef list<OptionRegistryInterface*> OptionCollection;$/;"	t	class:OptionParser	file:
OptionMap	src/option_parser.cc	/^   typedef map<string, OptionRegistryInterface*> OptionMap;$/;"	t	class:OptionParser	file:
OptionParser	src/option_parser.cc	/^   OptionParser() {}$/;"	f	class:OptionParser
OptionParser	src/option_parser.cc	/^class OptionParser$/;"	c	file:
OptionRegistry	src/option_parser.cc	/^   OptionRegistry(const string name, const string desc, T &variable)$/;"	f	class:OptionRegistry
OptionRegistry	src/option_parser.cc	/^class OptionRegistry : public OptionRegistryInterface $/;"	c	file:
OptionRegistryInterface	src/option_parser.cc	/^   OptionRegistryInterface(const string optionName, const string optionDesc) $/;"	f	class:OptionRegistryInterface
OptionRegistryInterface	src/option_parser.cc	/^class OptionRegistryInterface $/;"	c	file:
OrderingType	src/gpgpu-sim/shader.h	/^    enum OrderingType $/;"	g	class:scheduler_unit
Org	src/ramulator_sim/ALDRAM.h	/^    enum class Org : int$/;"	c	class:ALDRAM
Org	src/ramulator_sim/DDR3.h	/^    enum class Org : int$/;"	c	class:DDR3
Org	src/ramulator_sim/DDR4.h	/^    enum class Org : int$/;"	c	class:DDR4
Org	src/ramulator_sim/DSARP.h	/^    enum class Org : int$/;"	c	class:DSARP
Org	src/ramulator_sim/GDDR5.h	/^    enum class Org : int$/;"	c	class:GDDR5
Org	src/ramulator_sim/HBM.h	/^    enum class Org : int$/;"	c	class:HBM
Org	src/ramulator_sim/LPDDR3.h	/^    enum class Org : int$/;"	c	class:LPDDR3
Org	src/ramulator_sim/LPDDR4.h	/^    enum class Org : int$/;"	c	class:LPDDR4
Org	src/ramulator_sim/SALP.h	/^    enum class Org : int$/;"	c	class:SALP
Org	src/ramulator_sim/TLDRAM.h	/^    enum class Org : int$/;"	c	class:TLDRAM
Org	src/ramulator_sim/WideIO.h	/^    enum class Org : int$/;"	c	class:WideIO
Org	src/ramulator_sim/WideIO2.h	/^    enum class Org : int$/;"	c	class:WideIO2
OrgEntry	src/ramulator_sim/ALDRAM.h	/^    struct OrgEntry {$/;"	s	class:ALDRAM
OrgEntry	src/ramulator_sim/DDR3.h	/^    struct OrgEntry {$/;"	s	class:DDR3
OrgEntry	src/ramulator_sim/DDR4.h	/^    struct OrgEntry {$/;"	s	class:DDR4
OrgEntry	src/ramulator_sim/DSARP.h	/^    struct OrgEntry {$/;"	s	class:DSARP
OrgEntry	src/ramulator_sim/GDDR5.h	/^    struct OrgEntry {$/;"	s	class:GDDR5
OrgEntry	src/ramulator_sim/HBM.h	/^    struct OrgEntry {$/;"	s	class:HBM
OrgEntry	src/ramulator_sim/LPDDR3.h	/^    struct OrgEntry {$/;"	s	class:LPDDR3
OrgEntry	src/ramulator_sim/LPDDR4.h	/^    struct OrgEntry {$/;"	s	class:LPDDR4
OrgEntry	src/ramulator_sim/SALP.h	/^    struct OrgEntry {$/;"	s	class:SALP
OrgEntry	src/ramulator_sim/TLDRAM.h	/^    struct OrgEntry {$/;"	s	class:TLDRAM
OrgEntry	src/ramulator_sim/WideIO.h	/^    struct OrgEntry {$/;"	s	class:WideIO
OrgEntry	src/ramulator_sim/WideIO2.h	/^    struct OrgEntry {$/;"	s	class:WideIO2
OutChannelFault	src/intersim/network.cpp	/^void Network::OutChannelFault( int r, int c, bool fault )$/;"	f	class:Network
OutChannelFault	src/intersim/router.cpp	/^void Router::OutChannelFault( int c, bool fault )$/;"	f	class:Router
OutChannelFault	src/intersim2/networks/network.cpp	/^void Network::OutChannelFault( int r, int c, bool fault )$/;"	f	class:Network
OutChannelFault	src/intersim2/routers/router.cpp	/^void Router::OutChannelFault( int c, bool fault )$/;"	f	class:Router
OutStanding	src/intersim2/credit.cpp	/^int Credit::OutStanding(){$/;"	f	class:Credit
OutputAssigned	src/intersim/allocator.cpp	/^int Allocator::OutputAssigned( int in ) const$/;"	f	class:Allocator
OutputAssigned	src/intersim2/allocators/allocator.cpp	/^int Allocator::OutputAssigned( int in ) const$/;"	f	class:Allocator
OutputEmpty	src/intersim/outputset.cpp	/^bool OutputSet::OutputEmpty( int output_port ) const$/;"	f	class:OutputSet
OutputEmpty	src/intersim2/outputset.cpp	/^bool OutputSet::OutputEmpty( int output_port ) const$/;"	f	class:OutputSet
OutputHasRequests	src/intersim2/allocators/allocator.cpp	/^bool DenseAllocator::OutputHasRequests( int out ) const$/;"	f	class:DenseAllocator
OutputHasRequests	src/intersim2/allocators/allocator.cpp	/^bool SparseAllocator::OutputHasRequests( int out ) const$/;"	f	class:SparseAllocator
OutputSet	src/intersim/outputset.cpp	/^OutputSet::OutputSet( int num_outputs )$/;"	f	class:OutputSet
OutputSet	src/intersim/outputset.hpp	/^class OutputSet {$/;"	c
OutputSet	src/intersim2/outputset.hpp	/^class OutputSet {$/;"	c
PAGE_MODE	src/gpuwattch/cacti/const.h	209;"	d
PARAM_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    PARAM_DIRECTIVE = 279,$/;"	e	enum:yytokentype	file:
PARAM_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    PARAM_DIRECTIVE = 279,$/;"	e	enum:yytokentype
PARENT_TO_CHILD_PIPE_PREFIX	launcher/communicate.cc	/^const std::string Communicate::PARENT_TO_CHILD_PIPE_PREFIX = ".gpgpu-sim_ptoc_";$/;"	m	class:Communicate	file:
PARENT_TO_CHILD_PIPE_PREFIX	launcher/communicate.h	/^  static const std::string PARENT_TO_CHILD_PIPE_PREFIX;$/;"	m	class:Communicate
PCH	src/gpuwattch/cacti/const.h	112;"	d
PCIeController	src/gpuwattch/iocontrollers.cc	/^PCIeController::PCIeController(ParseXML *XML_interface,InputParameter* interface_ip_)$/;"	f	class:PCIeController
PCIeController	src/gpuwattch/iocontrollers.h	/^class PCIeController : public Component {$/;"	c
PCIeParam	src/gpuwattch/basic_components.h	/^	PCIeParam(){};$/;"	f	class:PCIeParam
PCIeParam	src/gpuwattch/basic_components.h	/^class PCIeParam {$/;"	c
PCX_NUMBER_INPUT_PORTS_CROSSBAR	src/gpuwattch/arch_const.h	/^const int PCX_NUMBER_INPUT_PORTS_CROSSBAR = 8;$/;"	v
PCX_NUMBER_OUTPUT_PORTS_CROSSBAR	src/gpuwattch/arch_const.h	/^const int PCX_NUMBER_OUTPUT_PORTS_CROSSBAR = 9;$/;"	v
PCX_NUMBER_SIGNALS_PER_PORT_CROSSBAR	src/gpuwattch/arch_const.h	/^const int PCX_NUMBER_SIGNALS_PER_PORT_CROSSBAR =144;$/;"	v
PD	src/ramulator_sim/LPDDR3.h	/^        REF, REFPB, PD, PDX,  SREF, SREFX,$/;"	m	class:LPDDR3::Command
PD	src/ramulator_sim/WideIO.h	/^        REF, PD,  PDX,  SREF, SREFX,$/;"	m	class:WideIO::Command
PD	src/ramulator_sim/WideIO2.h	/^        REF, REFPB, PD,  PDX,  SREF, SREFX,$/;"	m	class:WideIO2::Command
PDE	src/ramulator_sim/ALDRAM.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:ALDRAM::Command
PDE	src/ramulator_sim/DDR3.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:DDR3::Command
PDE	src/ramulator_sim/DDR4.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:DDR4::Command
PDE	src/ramulator_sim/DSARP.h	/^        REF, REFPB, PDE, PDX, SRE, SRX,$/;"	m	class:DSARP::Command
PDE	src/ramulator_sim/GDDR5.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:GDDR5::Command
PDE	src/ramulator_sim/HBM.h	/^        REF, REFSB, PDE, PDX,  SRE, SRX,$/;"	m	class:HBM::Command
PDE	src/ramulator_sim/LPDDR4.h	/^        REF, REFPB, PDE, PDX, SREF, SREFX,$/;"	m	class:LPDDR4::Command
PDE	src/ramulator_sim/SALP.h	/^        REF, PDE,   PDX, SRE, SRX,$/;"	m	class:SALP::Command
PDE	src/ramulator_sim/TLDRAM.h	/^        REF, PDE, PDX, SRE, SRX,$/;"	m	class:TLDRAM::Command
PDX	src/ramulator_sim/ALDRAM.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:ALDRAM::Command
PDX	src/ramulator_sim/DDR3.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:DDR3::Command
PDX	src/ramulator_sim/DDR4.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:DDR4::Command
PDX	src/ramulator_sim/DSARP.h	/^        REF, REFPB, PDE, PDX, SRE, SRX,$/;"	m	class:DSARP::Command
PDX	src/ramulator_sim/GDDR5.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:GDDR5::Command
PDX	src/ramulator_sim/HBM.h	/^        REF, REFSB, PDE, PDX,  SRE, SRX,$/;"	m	class:HBM::Command
PDX	src/ramulator_sim/LPDDR3.h	/^        REF, REFPB, PD, PDX,  SREF, SREFX,$/;"	m	class:LPDDR3::Command
PDX	src/ramulator_sim/LPDDR4.h	/^        REF, REFPB, PDE, PDX, SREF, SREFX,$/;"	m	class:LPDDR4::Command
PDX	src/ramulator_sim/SALP.h	/^        REF, PDE,   PDX, SRE, SRX,$/;"	m	class:SALP::Command
PDX	src/ramulator_sim/TLDRAM.h	/^        REF, PDE, PDX, SRE, SRX,$/;"	m	class:TLDRAM::Command
PDX	src/ramulator_sim/WideIO.h	/^        REF, PD,  PDX,  SREF, SREFX,$/;"	m	class:WideIO::Command
PDX	src/ramulator_sim/WideIO2.h	/^        REF, REFPB, PD,  PDX,  SREF, SREFX,$/;"	m	class:WideIO2::Command
PERIOD	build/src/cuda-sim/ptx.tab.c	/^    PERIOD = 360,$/;"	e	enum:yytokentype	file:
PERIOD	build/src/cuda-sim/ptx.tab.h	/^    PERIOD = 360,$/;"	e	enum:yytokentype
PERMITTIVITY_FREE_SPACE	src/gpuwattch/cacti/const.h	/^const double PERMITTIVITY_FREE_SPACE = 8.854e-18; \/\/F\/micron$/;"	v
PHY	src/gpuwattch/memoryctrl.h	/^    MCPHY	 * PHY;$/;"	m	class:MemoryController
PIM	src/intersim/pim.cpp	/^PIM::PIM( const Configuration &config,$/;"	f	class:PIM
PIM	src/intersim/pim.hpp	/^class PIM : public DenseAllocator {$/;"	c
PIM	src/intersim2/allocators/pim.cpp	/^PIM::PIM( Module *parent, const string& name,$/;"	f	class:PIM
PIM	src/intersim2/allocators/pim.hpp	/^class PIM : public DenseAllocator {$/;"	c
PIPE	build/src/cuda-sim/ptx.tab.c	/^    PIPE = 356,$/;"	e	enum:yytokentype	file:
PIPE	build/src/cuda-sim/ptx.tab.h	/^    PIPE = 356,$/;"	e	enum:yytokentype
PIPEP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   PIPEP,$/;"	e	enum:pwr_cmp_t	file:
PIPE_A	src/gpuwattch/XML_Parse.h	/^   PIPE_A,$/;"	e	enum:perf_count_t
PLUS	build/src/cuda-sim/ptx.tab.c	/^    PLUS = 352,$/;"	e	enum:yytokentype	file:
PLUS	build/src/cuda-sim/ptx.tab.h	/^    PLUS = 352,$/;"	e	enum:yytokentype
PLUS	build/src/cuda-sim/ptxinfo.tab.c	/^    PLUS = 269,$/;"	e	enum:yytokentype	file:
PLUS	build/src/cuda-sim/ptxinfo.tab.h	/^    PLUS = 269,$/;"	e	enum:yytokentype
PM_REG	src/cuda-sim/opcodes.h	/^   PM_REG,$/;"	e	enum:special_regs
POST_DOMINATOR	src/abstract_hardware_model.h	/^   POST_DOMINATOR = 1,$/;"	e	enum:divergence_support_t
POWER	src/intersim2/Makefile	/^POWER:= $(wildcard power\/*.cpp)$/;"	m
POWERDOWN	src/ramulator_sim/Request.h	/^        POWERDOWN,$/;"	m	class:Request::Type
POWER_FLAGS	src/gpgpu-sim/Makefile	/^POWER_FLAGS= -I..\/gpuwattch\/$/;"	m
POWER_INTERFACE_H_	src/gpgpu-sim/power_interface.h	29;"	d
POWER_STAT_H	src/gpgpu-sim/power_stat.h	29;"	d
PRA	src/ramulator_sim/LPDDR3.h	/^        ACT, PRE, PRA,$/;"	m	class:LPDDR3::Command
PRA	src/ramulator_sim/WideIO.h	/^        ACT, PRE, PRA,$/;"	m	class:WideIO::Command
PRA	src/ramulator_sim/WideIO2.h	/^        ACT, PRE,   PRA,$/;"	m	class:WideIO2::Command
PRAGMA_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    PRAGMA_DIRECTIVE = 280,$/;"	e	enum:yytokentype	file:
PRAGMA_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    PRAGMA_DIRECTIVE = 280,$/;"	e	enum:yytokentype
PRC	src/gpuwattch/memoryctrl.h	/^	ArrayST * PRC;$/;"	m	class:MCFrontEnd
PRE	src/ramulator_sim/ALDRAM.h	/^        ACT, PRE, PREA,$/;"	m	class:ALDRAM::Command
PRE	src/ramulator_sim/DDR3.h	/^        ACT, PRE, PREA,$/;"	m	class:DDR3::Command
PRE	src/ramulator_sim/DDR4.h	/^        ACT, PRE, PREA,$/;"	m	class:DDR4::Command
PRE	src/ramulator_sim/DSARP.h	/^        ACT, PRE, PREA,$/;"	m	class:DSARP::Command
PRE	src/ramulator_sim/GDDR5.h	/^        ACT, PRE, PREA,$/;"	m	class:GDDR5::Command
PRE	src/ramulator_sim/HBM.h	/^        ACT, PRE,   PREA,$/;"	m	class:HBM::Command
PRE	src/ramulator_sim/LPDDR3.h	/^        ACT, PRE, PRA,$/;"	m	class:LPDDR3::Command
PRE	src/ramulator_sim/LPDDR4.h	/^        ACT, PRE, PREA,$/;"	m	class:LPDDR4::Command
PRE	src/ramulator_sim/SALP.h	/^        ACT, SASEL, PRE, PRER, \/\/ precharge bank\/bank\/rank(SALP-1), subarray\/bank\/rank(SALP-2, MASA)$/;"	m	class:SALP::Command
PRE	src/ramulator_sim/TLDRAM.h	/^        ACT, PRE, PREA,$/;"	m	class:TLDRAM::Command
PRE	src/ramulator_sim/WideIO.h	/^        ACT, PRE, PRA,$/;"	m	class:WideIO::Command
PRE	src/ramulator_sim/WideIO2.h	/^        ACT, PRE,   PRA,$/;"	m	class:WideIO2::Command
PREA	src/ramulator_sim/ALDRAM.h	/^        ACT, PRE, PREA,$/;"	m	class:ALDRAM::Command
PREA	src/ramulator_sim/DDR3.h	/^        ACT, PRE, PREA,$/;"	m	class:DDR3::Command
PREA	src/ramulator_sim/DDR4.h	/^        ACT, PRE, PREA,$/;"	m	class:DDR4::Command
PREA	src/ramulator_sim/DSARP.h	/^        ACT, PRE, PREA,$/;"	m	class:DSARP::Command
PREA	src/ramulator_sim/GDDR5.h	/^        ACT, PRE, PREA,$/;"	m	class:GDDR5::Command
PREA	src/ramulator_sim/HBM.h	/^        ACT, PRE,   PREA,$/;"	m	class:HBM::Command
PREA	src/ramulator_sim/LPDDR4.h	/^        ACT, PRE, PREA,$/;"	m	class:LPDDR4::Command
PREA	src/ramulator_sim/TLDRAM.h	/^        ACT, PRE, PREA,$/;"	m	class:TLDRAM::Command
PREAF	src/ramulator_sim/TLDRAM.h	/^        ACTF, PREF, PREAF,$/;"	m	class:TLDRAM::Command
PREAM	src/ramulator_sim/TLDRAM.h	/^        ACTM, PREM, PREAM,$/;"	m	class:TLDRAM::Command
PRED	build/src/cuda-sim/ptx.tab.c	/^    PRED = 324,$/;"	e	enum:yytokentype	file:
PRED	build/src/cuda-sim/ptx.tab.h	/^    PRED = 324,$/;"	e	enum:yytokentype
PRED_TYPE	build/src/cuda-sim/ptx.tab.c	/^    PRED_TYPE = 316,$/;"	e	enum:yytokentype	file:
PRED_TYPE	build/src/cuda-sim/ptx.tab.h	/^    PRED_TYPE = 316,$/;"	e	enum:yytokentype
PREEMPTION_DRAIN	common/kernel_info_t.h	/^     PREEMPTION_DRAIN,$/;"	e	enum:kernel_info_t::PreemptionTechnique
PREEMPTION_FLUSH	common/kernel_info_t.h	/^     PREEMPTION_FLUSH,$/;"	e	enum:kernel_info_t::PreemptionTechnique
PREEMPTION_INFO_H_	common/preemption_info.h	2;"	d
PREEMPTION_NUM	common/kernel_info_t.h	/^     PREEMPTION_NUM$/;"	e	enum:kernel_info_t::PreemptionTechnique
PREEMPTION_SWITCH	common/kernel_info_t.h	/^     PREEMPTION_SWITCH,$/;"	e	enum:kernel_info_t::PreemptionTechnique
PREEMPTION_TECHNIQUE_ENUM	common/preemption_info.h	/^    enum PREEMPTION_TECHNIQUE_ENUM {$/;"	g	class:preemption_info_t
PREEMPTION_TECHNIQUE_NUM	common/preemption_info.h	/^      PREEMPTION_TECHNIQUE_NUM,$/;"	e	enum:preemption_info_t::PREEMPTION_TECHNIQUE_ENUM
PREEMPT_DRAIN_FLUSH	launcher/mk-sched/mk_scheduler.h	/^    PREEMPT_DRAIN_FLUSH,$/;"	e	enum:DynamicScheduler::PreemptionPolicy
PREEMPT_DRAIN_ONLY	launcher/mk-sched/mk_scheduler.h	/^    PREEMPT_DRAIN_ONLY,$/;"	e	enum:DynamicScheduler::PreemptionPolicy
PREEMPT_DRAIN_SWITCH	launcher/mk-sched/mk_scheduler.h	/^    PREEMPT_DRAIN_SWITCH,$/;"	e	enum:DynamicScheduler::PreemptionPolicy
PREEMPT_DRAIN_SWITCH_FLUSH	launcher/mk-sched/mk_scheduler.h	/^    PREEMPT_DRAIN_SWITCH_FLUSH,$/;"	e	enum:DynamicScheduler::PreemptionPolicy
PREEMPT_FINE_GRAIN	launcher/mk-sched/mk_scheduler.h	/^    PREEMPT_FINE_GRAIN,$/;"	e	enum:DynamicScheduler::PreemptionPolicy
PREEMPT_FLUSH_ONLY	launcher/mk-sched/mk_scheduler.h	/^    PREEMPT_FLUSH_ONLY,$/;"	e	enum:DynamicScheduler::PreemptionPolicy
PREEMPT_NUM	launcher/mk-sched/mk_scheduler.h	/^    PREEMPT_NUM$/;"	e	enum:DynamicScheduler::PreemptionPolicy
PREEMPT_OVERHEAD_H_	common/preempt_overhead.h	2;"	d
PREEMPT_SWITCH_FLUSH	launcher/mk-sched/mk_scheduler.h	/^    PREEMPT_SWITCH_FLUSH,$/;"	e	enum:DynamicScheduler::PreemptionPolicy
PREEMPT_SWITCH_ONLY	launcher/mk-sched/mk_scheduler.h	/^    PREEMPT_SWITCH_ONLY,$/;"	e	enum:DynamicScheduler::PreemptionPolicy
PREEMPT_WITH_DRAINING	common/preemption_info.h	/^      PREEMPT_WITH_DRAINING,$/;"	e	enum:preemption_info_t::PREEMPTION_TECHNIQUE_ENUM
PREEMPT_WITH_FLUSHING	common/preemption_info.h	/^      PREEMPT_WITH_FLUSHING,$/;"	e	enum:preemption_info_t::PREEMPTION_TECHNIQUE_ENUM
PREEMPT_WITH_SWITCHING	common/preemption_info.h	/^      PREEMPT_WITH_SWITCHING,$/;"	e	enum:preemption_info_t::PREEMPTION_TECHNIQUE_ENUM
PREF	src/ramulator_sim/TLDRAM.h	/^        ACTF, PREF, PREAF,$/;"	m	class:TLDRAM::Command
PREM	src/ramulator_sim/TLDRAM.h	/^        ACTM, PREM, PREAM,$/;"	m	class:TLDRAM::Command
PRER	src/ramulator_sim/SALP.h	/^        ACT, SASEL, PRE, PRER, \/\/ precharge bank\/bank\/rank(SALP-1), subarray\/bank\/rank(SALP-2, MASA)$/;"	m	class:SALP::Command
PREV_STAT_IDX	src/gpgpu-sim/power_stat.h	/^    PREV_STAT_IDX,           \/\/ Previous sample activity count$/;"	e	enum:_stat_idx
PRE_OTHER	src/ramulator_sim/SALP.h	/^        PRE_OTHER,$/;"	m	class:SALP::Command
PRINTDW	src/gpuwattch/cacti/basic_circuit.h	52;"	d
PRINTDW	src/gpuwattch/cacti/basic_circuit.h	55;"	d
PRINT_CALL	launcher/simulator.cc	32;"	d	file:
PRINT_CALL	libcuda/cuda_runtime_api.cc	151;"	d	file:
PRINT_CALL	libcuda/cuda_runtime_api.cc	154;"	d	file:
PRIORITIZE_MSHR_OVER_WB	src/gpgpu-sim/shader.cc	52;"	d	file:
PROCESSOR_H_	src/gpuwattch/processor.h	39;"	d
PROG	src/ramulator_sim/Makefile	/^PROG   := ramulator_sim$/;"	m
PROGRAM_MEM_START	src/gpgpu-sim/shader.cc	617;"	d	file:
PROGRESS_CYCLE	launcher/mk-sched/mk_scheduler.h	/^    PROGRESS_CYCLE,$/;"	e	enum:DynamicScheduler::ProgressPolicy
PROGRESS_INST	launcher/mk-sched/mk_scheduler.h	/^    PROGRESS_INST,$/;"	e	enum:DynamicScheduler::ProgressPolicy
PROGRESS_NUM	launcher/mk-sched/mk_scheduler.h	/^    PROGRESS_NUM$/;"	e	enum:DynamicScheduler::ProgressPolicy
PRT	src/gpuwattch/memoryctrl.h	/^	ArrayST * PRT;$/;"	m	class:MCFrontEnd
PRT_entries	src/gpuwattch/XML_Parse.h	/^	int PRT_entries;$/;"	m	struct:__anon23
PTR_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    PTR_DIRECTIVE = 267,$/;"	e	enum:yytokentype	file:
PTR_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    PTR_DIRECTIVE = 267,$/;"	e	enum:yytokentype
PTXSECTION	libcuda/cuda_runtime_api.cc	/^    PTXSECTION=0,$/;"	e	enum:cuobjdumpSectionType	file:
PTX_DEBUG_INCLUDED	src/debug.h	29;"	d
PTX_LOADER_H_INCLUDED	src/cuda-sim/ptx_loader.h	29;"	d
PTX_PARSE_DPRINTF	src/cuda-sim/ptx_parser.cc	77;"	d	file:
PTi	src/gpuwattch/cacti/arbiter.h	/^    double NTn1, PTn1, NTn2, PTn2, R, PTi, NTi;$/;"	m	class:MCPAT_Arbiter
PTi	src/gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router
PTid	src/gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router
PTn1	src/gpuwattch/cacti/arbiter.h	/^    double NTn1, PTn1, NTn2, PTn2, R, PTi, NTi;$/;"	m	class:MCPAT_Arbiter
PTn2	src/gpuwattch/cacti/arbiter.h	/^    double NTn1, PTn1, NTn2, PTn2, R, PTi, NTi;$/;"	m	class:MCPAT_Arbiter
PTod	src/gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router
PTtr	src/gpuwattch/cacti/arbiter.h	/^    double NTtr, PTtr;$/;"	m	class:MCPAT_Arbiter
PTtr	src/gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router
PYTHONLIB_OBJS	src/gpuwattch/cacti/cacti.mk	/^PYTHONLIB_OBJS = $(patsubst %.cc,%.o,$(PYTHONLIB_SRCS)) $/;"	m
PYTHONLIB_SRCS	src/gpuwattch/cacti/cacti.mk	/^PYTHONLIB_SRCS = $(patsubst main.cc, ,$(SRCS)) $(OUTPUT_DIR)\/cacti_wrap.cc$/;"	m
PacketReplyInfo	src/intersim2/packet_reply_info.hpp	/^  PacketReplyInfo() {}$/;"	f	class:PacketReplyInfo
PacketReplyInfo	src/intersim2/packet_reply_info.hpp	/^class PacketReplyInfo {$/;"	c
Parse	src/intersim/config_utils.cpp	/^void Configuration::Parse( const char* filename )$/;"	f	class:Configuration
Parse	src/intersim/config_utils.cpp	/^void Configuration::Parse( const string& filename )$/;"	f	class:Configuration
ParseArgs	src/intersim/config_utils.cpp	/^bool ParseArgs( Configuration *cf, int argc, char **argv )$/;"	f
ParseArgs	src/intersim2/config_utils.cpp	/^bool ParseArgs(Configuration * cf, int argc, char * * argv)$/;"	f
ParseCommandLine	src/option_parser.cc	/^   void ParseCommandLine(int argc, const char * const argv[])$/;"	f	class:OptionParser
ParseError	src/intersim/config_utils.cpp	/^void Configuration::ParseError( const string &msg, unsigned int lineno ) const$/;"	f	class:Configuration
ParseError	src/intersim2/config_utils.cpp	/^void Configuration::ParseError(string const & msg, unsigned int lineno) const$/;"	f	class:Configuration
ParseFile	src/intersim2/config_utils.cpp	/^void Configuration::ParseFile(string const & filename)$/;"	f	class:Configuration
ParseFile	src/option_parser.cc	/^   void ParseFile(const char *filename) {$/;"	f	class:OptionParser
ParseString	src/intersim2/config_utils.cpp	/^void Configuration::ParseString(string const & str)$/;"	f	class:Configuration
ParseString	src/option_parser.cc	/^   void ParseString(string inputString, const string delimiters = string(" ;")) {$/;"	f	class:OptionParser
ParseStringStream	src/option_parser.cc	/^   void ParseStringStream(stringstream &args) {$/;"	f	class:OptionParser
ParseXML	src/gpuwattch/XML_Parse.h	/^class ParseXML$/;"	c
ParseXMLElement	src/gpuwattch/xmlParser.cc	/^int XMLNode::ParseXMLElement(void *pa)$/;"	f	class:XMLNode
PermutationTrafficPattern	src/intersim2/traffic.cpp	/^PermutationTrafficPattern::PermutationTrafficPattern(int nodes)$/;"	f	class:PermutationTrafficPattern
PermutationTrafficPattern	src/intersim2/traffic.hpp	/^class PermutationTrafficPattern : public TrafficPattern {$/;"	c
PhysicalRegFile	src/gpuwattch/basic_components.h	/^    PhysicalRegFile,$/;"	e	enum:Scheduler_type
Pipe_Finish	libcuda/cuda_runtime_api.cc	/^void Pipe_Finish()$/;"	f
Pipe_Init	libcuda/cuda_runtime_api.cc	/^void Pipe_Init()$/;"	f
Pipeline	src/gpuwattch/logic.cc	/^Pipeline::Pipeline($/;"	f	class:Pipeline
Pipeline	src/gpuwattch/logic.h	/^class Pipeline : public Component{$/;"	c
PipelineFIFO	src/intersim/pipefifo.hpp	/^template<class T> PipelineFIFO<T>::PipelineFIFO( Module *parent, $/;"	f	class:PipelineFIFO
PipelineFIFO	src/intersim/pipefifo.hpp	/^template<class T> class PipelineFIFO : public Module {$/;"	c
PipelineFIFO	src/intersim2/pipefifo.hpp	/^template<class T> PipelineFIFO<T>::PipelineFIFO( Module *parent, $/;"	f	class:PipelineFIFO
PipelineFIFO	src/intersim2/pipefifo.hpp	/^template<class T> class PipelineFIFO : public Module {$/;"	c
Pipeline_energy	src/gpuwattch/core.h	/^	double Pipeline_energy;$/;"	m	class:Core
Pop	src/intersim2/interconnect_interface.cpp	/^void* InterconnectInterface::Pop(unsigned deviceID)$/;"	f	class:InterconnectInterface
PopPacket	src/intersim2/interconnect_interface.cpp	/^void* InterconnectInterface::_BoundaryBufferItem::PopPacket()$/;"	f	class:InterconnectInterface::_BoundaryBufferItem
PopWaiting	src/intersim/event_router.cpp	/^EventNextVCState::tWaiting *EventNextVCState::PopWaiting( int vc )$/;"	f	class:EventNextVCState
PopWaiting	src/intersim2/routers/event_router.cpp	/^EventNextVCState::tWaiting *EventNextVCState::PopWaiting( int vc )$/;"	f	class:EventNextVCState
PosFromID	src/intersim2/networks/qtree.cpp	/^int QTree::PosFromID( int id )$/;"	f	class:QTree
PowerConfig	src/intersim2/booksim_config.cpp	/^PowerConfig::PowerConfig( )$/;"	f	class:PowerConfig
PowerConfig	src/intersim2/booksim_config.hpp	/^class PowerConfig : public Configuration {$/;"	c
PowerUp	src/ramulator_sim/ALDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ALDRAM::State
PowerUp	src/ramulator_sim/DDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DDR3::State
PowerUp	src/ramulator_sim/DDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DDR4::State
PowerUp	src/ramulator_sim/DSARP.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DSARP::State
PowerUp	src/ramulator_sim/GDDR5.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:GDDR5::State
PowerUp	src/ramulator_sim/HBM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:HBM::State
PowerUp	src/ramulator_sim/LPDDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:LPDDR3::State
PowerUp	src/ramulator_sim/LPDDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:LPDDR4::State
PowerUp	src/ramulator_sim/SALP.h	/^        Opened, Closed, Selected, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:SALP::State
PowerUp	src/ramulator_sim/TLDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:TLDRAM::State
PowerUp	src/ramulator_sim/WideIO.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:WideIO::State
PowerUp	src/ramulator_sim/WideIO2.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:WideIO2::State
Power_Module	src/intersim2/power/power_module.cpp	/^Power_Module::Power_Module(Network * n , const Configuration &config)$/;"	f	class:Power_Module
Power_Module	src/intersim2/power/power_module.hpp	/^class Power_Module : public Module {$/;"	c
Power_gating_number_cycles	src/gpgpu-sim/gpu-sim.cc	/^std::vector<KAIN_Power_Gate_Number_Cycles> Power_gating_number_cycles;$/;"	v
PrePowerDown	src/ramulator_sim/ALDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ALDRAM::State
PrePowerDown	src/ramulator_sim/DDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DDR3::State
PrePowerDown	src/ramulator_sim/DDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DDR4::State
PrePowerDown	src/ramulator_sim/DSARP.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DSARP::State
PrePowerDown	src/ramulator_sim/GDDR5.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:GDDR5::State
PrePowerDown	src/ramulator_sim/HBM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:HBM::State
PrePowerDown	src/ramulator_sim/LPDDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:LPDDR3::State
PrePowerDown	src/ramulator_sim/LPDDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:LPDDR4::State
PrePowerDown	src/ramulator_sim/SALP.h	/^        Opened, Closed, Selected, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:SALP::State
PrePowerDown	src/ramulator_sim/TLDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:TLDRAM::State
PrePowerDown	src/ramulator_sim/WideIO.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:WideIO::State
PrePowerDown	src/ramulator_sim/WideIO2.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:WideIO2::State
Predec	src/gpuwattch/cacti/decoder.cc	/^Predec::Predec($/;"	f	class:Predec
Predec	src/gpuwattch/cacti/decoder.h	/^class Predec : public Component$/;"	c
PredecBlk	src/gpuwattch/cacti/decoder.cc	/^PredecBlk::PredecBlk($/;"	f	class:PredecBlk
PredecBlk	src/gpuwattch/cacti/decoder.h	/^class PredecBlk : public Component$/;"	c
PredecBlkDrv	src/gpuwattch/cacti/decoder.cc	/^PredecBlkDrv::PredecBlkDrv($/;"	f	class:PredecBlkDrv
PredecBlkDrv	src/gpuwattch/cacti/decoder.h	/^class PredecBlkDrv : public Component$/;"	c
PreemptionPolicy	launcher/mk-sched/mk_scheduler.h	/^  enum PreemptionPolicy {$/;"	g	class:DynamicScheduler
PreemptionTechnique	common/kernel_info_t.h	/^   enum PreemptionTechnique {$/;"	g	class:kernel_info_t
Print	src/option_parser.cc	/^   void Print(FILE *fout)$/;"	f	class:OptionParser
PrintGrants	src/intersim2/allocators/allocator.cpp	/^void Allocator::PrintGrants( ostream * os ) const$/;"	f	class:Allocator
PrintRequests	src/intersim/allocator.cpp	/^void DenseAllocator::PrintRequests( ) const$/;"	f	class:DenseAllocator
PrintRequests	src/intersim/allocator.cpp	/^void SparseAllocator::PrintRequests( ) const$/;"	f	class:SparseAllocator
PrintRequests	src/intersim2/allocators/allocator.cpp	/^void DenseAllocator::PrintRequests( ostream * os ) const$/;"	f	class:DenseAllocator
PrintRequests	src/intersim2/allocators/allocator.cpp	/^void SparseAllocator::PrintRequests( ostream * os ) const$/;"	f	class:SparseAllocator
PrintRequests	src/intersim2/allocators/selalloc.cpp	/^void SelAlloc::PrintRequests( ostream * os ) const$/;"	f	class:SelAlloc
PrintState	src/intersim2/arbiters/matrix_arb.cpp	/^void MatrixArbiter::PrintState() const  {$/;"	f	class:MatrixArbiter
PrintState	src/intersim2/arbiters/roundrobin_arb.cpp	/^void RoundRobinArbiter::PrintState() const  {$/;"	f	class:RoundRobinArbiter
PrintState	src/intersim2/arbiters/tree_arb.cpp	/^void TreeArbiter::PrintState() const  {$/;"	f	class:TreeArbiter
PriorityArbiter	src/intersim/arbiter.cpp	/^PriorityArbiter::PriorityArbiter( const Configuration &config,$/;"	f	class:PriorityArbiter
PriorityArbiter	src/intersim/arbiter.hpp	/^class PriorityArbiter : public Arbiter {$/;"	c
PriorityArbiter	src/intersim2/arbiters/prio_arb.cpp	/^PriorityArbiter::PriorityArbiter( const Configuration &config,$/;"	f	class:PriorityArbiter
PriorityArbiter	src/intersim2/arbiters/prio_arb.hpp	/^class PriorityArbiter : public Module {$/;"	c
PrivateBufferPolicy	src/intersim2/buffer_state.cpp	/^BufferState::PrivateBufferPolicy::PrivateBufferPolicy(Configuration const & config, BufferState * parent, const string & name)$/;"	f	class:BufferState::PrivateBufferPolicy
PrivateBufferPolicy	src/intersim2/buffer_state.hpp	/^  class PrivateBufferPolicy : public BufferPolicy {$/;"	c	class:BufferState
Private_L2	src/gpuwattch/XML_Parse.h	/^	bool Private_L2;$/;"	m	struct:__anon26
ProcParam	src/gpuwattch/basic_components.h	/^	ProcParam(){};$/;"	f	class:ProcParam
ProcParam	src/gpuwattch/basic_components.h	/^class ProcParam {$/;"	c
ProcessCredit	src/intersim/buffer_state.cpp	/^void BufferState::ProcessCredit( Credit *c )$/;"	f	class:BufferState
ProcessCredit	src/intersim2/buffer_state.cpp	/^void BufferState::ProcessCredit( Credit const * const c )$/;"	f	class:BufferState
ProcessFreeSlot	src/intersim2/buffer_state.cpp	/^void BufferState::SharedBufferPolicy::ProcessFreeSlot(int vc)$/;"	f	class:BufferState::SharedBufferPolicy
Processor	src/gpuwattch/processor.cc	/^Processor::Processor(ParseXML *XML_interface)$/;"	f	class:Processor
Processor	src/gpuwattch/processor.h	/^class Processor : public Component$/;"	c
ProgressPolicy	launcher/mk-sched/mk_scheduler.h	/^  enum ProgressPolicy {$/;"	g	class:DynamicScheduler
Push	src/intersim2/interconnect_interface.cpp	/^void InterconnectInterface::Push(unsigned input_deviceID, unsigned output_deviceID, void *data, unsigned int size)$/;"	f	class:InterconnectInterface
PushFlitData	src/intersim2/interconnect_interface.cpp	/^void InterconnectInterface::_BoundaryBufferItem::PushFlitData(void* data,bool is_tail)$/;"	f	class:InterconnectInterface::_BoundaryBufferItem
PushWaiting	src/intersim/event_router.cpp	/^void EventNextVCState::PushWaiting( int vc, tWaiting *w )$/;"	f	class:EventNextVCState
PushWaiting	src/intersim2/routers/event_router.cpp	/^void EventNextVCState::PushWaiting( int vc, tWaiting *w )$/;"	f	class:EventNextVCState
QTree	src/intersim2/networks/qtree.cpp	/^QTree::QTree( const Configuration& config, const string & name )$/;"	f	class:QTree
QTree	src/intersim2/networks/qtree.hpp	/^class QTree : public Network {$/;"	c
QUALITY	src/intersim/rng.cpp	46;"	d	file:
QUALITY	src/intersim/rng_double.cpp	45;"	d	file:
QUALITY	src/intersim2/rng-double.c	44;"	d	file:
QUALITY	src/intersim2/rng.c	45;"	d	file:
QUOTE	build/src/cuda-sim/ptxinfo.tab.c	/^    QUOTE = 275,$/;"	e	enum:yytokentype	file:
QUOTE	build/src/cuda-sim/ptxinfo.tab.h	/^    QUOTE = 275,$/;"	e	enum:yytokentype
Queue	src/ramulator_sim/Controller.h	/^    struct Queue {$/;"	s	class:Controller
R	src/gpuwattch/cacti/arbiter.h	/^    double NTn1, PTn1, NTn2, PTn2, R, PTi, NTi;$/;"	m	class:MCPAT_Arbiter
R	src/intersim2/power/power_module.hpp	/^  double R     ;                         $/;"	m	class:Power_Module
RADIX	src/gpuwattch/cacti/highradix.h	/^    double RADIX;$/;"	m	class:HighRadix
RAHT	src/gpuwattch/core.h	/^	ArrayST * RAHT;\/\/register alias history table Used to store GC$/;"	m	class:RENAMINGU
RAMbased	src/gpuwattch/basic_components.h	/^    RAMbased,$/;"	e	enum:Renaming_type
RAS	src/gpuwattch/core.h	/^	ArrayST * RAS;$/;"	m	class:BranchPredictor
RASSize	src/gpuwattch/arch_const.h	/^const int RASSize=16;$/;"	v
RAS_size	src/gpuwattch/XML_Parse.h	/^	int RAS_size;$/;"	m	struct:__anon15
RD	src/ramulator_sim/ALDRAM.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:ALDRAM::Command
RD	src/ramulator_sim/DDR3.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:DDR3::Command
RD	src/ramulator_sim/DDR4.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:DDR4::Command
RD	src/ramulator_sim/DSARP.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:DSARP::Command
RD	src/ramulator_sim/GDDR5.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:GDDR5::Command
RD	src/ramulator_sim/HBM.h	/^        RD,  WR,    RDA, WRA,$/;"	m	class:HBM::Command
RD	src/ramulator_sim/LPDDR3.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:LPDDR3::Command
RD	src/ramulator_sim/LPDDR4.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:LPDDR4::Command
RD	src/ramulator_sim/SALP.h	/^        RD,  WR,    RDA, WRA, \/\/ auto-precharge: bank(SALP-1), subarray(SALP-2, MASA)$/;"	m	class:SALP::Command
RD	src/ramulator_sim/TLDRAM.h	/^        RD, WR,$/;"	m	class:TLDRAM::Command
RD	src/ramulator_sim/WideIO.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:WideIO::Command
RD	src/ramulator_sim/WideIO2.h	/^        RD,  WR,    RDA,  WRA,$/;"	m	class:WideIO2::Command
RDA	src/ramulator_sim/ALDRAM.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:ALDRAM::Command
RDA	src/ramulator_sim/DDR3.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:DDR3::Command
RDA	src/ramulator_sim/DDR4.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:DDR4::Command
RDA	src/ramulator_sim/DSARP.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:DSARP::Command
RDA	src/ramulator_sim/GDDR5.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:GDDR5::Command
RDA	src/ramulator_sim/HBM.h	/^        RD,  WR,    RDA, WRA,$/;"	m	class:HBM::Command
RDA	src/ramulator_sim/LPDDR3.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:LPDDR3::Command
RDA	src/ramulator_sim/LPDDR4.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:LPDDR4::Command
RDA	src/ramulator_sim/SALP.h	/^        RD,  WR,    RDA, WRA, \/\/ auto-precharge: bank(SALP-1), subarray(SALP-2, MASA)$/;"	m	class:SALP::Command
RDA	src/ramulator_sim/WideIO.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:WideIO::Command
RDA	src/ramulator_sim/WideIO2.h	/^        RD,  WR,    RDA,  WRA,$/;"	m	class:WideIO2::Command
READ	src/ramulator_sim/Request.h	/^        READ,$/;"	m	class:Request::Type
READ_ALLOC	src/gpgpu-sim/shader.h	/^      READ_ALLOC,$/;"	e	enum:opndcoll_rfu_t::alloc_t
READ_ONLY	src/gpgpu-sim/gpu-cache.h	/^    READ_ONLY,$/;"	e	enum:write_policy_t
READ_PACKET_SIZE	src/gpgpu-sim/shader.h	87;"	d
READ_REPLY	src/gpgpu-sim/mem_fetch.h	/^   READ_REPLY, \/\/ send to shader$/;"	e	enum:mf_type
READ_REPLY	src/intersim2/flit.hpp	/^		  READ_REPLY    = 1,$/;"	e	enum:Flit::FlitType
READ_REQUEST	src/gpgpu-sim/mem_fetch.h	/^   READ_REQUEST = 0,$/;"	e	enum:mf_type
READ_REQUEST	src/intersim2/flit.hpp	/^  enum FlitType { READ_REQUEST  = 0, $/;"	e	enum:Flit::FlitType
READ_REQUEST_SENT	src/gpgpu-sim/gpu-cache.h	/^    READ_REQUEST_SENT,$/;"	e	enum:cache_event
RECONVERGE_RETURN_PC	src/cuda-sim/cuda-sim.h	211;"	d
RECORD_FUNCTION_CALLS	libcuda/cuda_runtime_api.cc	148;"	d	file:
REF	src/ramulator_sim/ALDRAM.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:ALDRAM::Command
REF	src/ramulator_sim/DDR3.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:DDR3::Command
REF	src/ramulator_sim/DDR4.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:DDR4::Command
REF	src/ramulator_sim/DSARP.h	/^        REF, REFPB, PDE, PDX, SRE, SRX,$/;"	m	class:DSARP::Command
REF	src/ramulator_sim/GDDR5.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:GDDR5::Command
REF	src/ramulator_sim/HBM.h	/^        REF, REFSB, PDE, PDX,  SRE, SRX,$/;"	m	class:HBM::Command
REF	src/ramulator_sim/LPDDR3.h	/^        REF, REFPB, PD, PDX,  SREF, SREFX,$/;"	m	class:LPDDR3::Command
REF	src/ramulator_sim/LPDDR4.h	/^        REF, REFPB, PDE, PDX, SREF, SREFX,$/;"	m	class:LPDDR4::Command
REF	src/ramulator_sim/SALP.h	/^        REF, PDE,   PDX, SRE, SRX,$/;"	m	class:SALP::Command
REF	src/ramulator_sim/TLDRAM.h	/^        REF, PDE, PDX, SRE, SRX,$/;"	m	class:TLDRAM::Command
REF	src/ramulator_sim/WideIO.h	/^        REF, PD,  PDX,  SREF, SREFX,$/;"	m	class:WideIO::Command
REF	src/ramulator_sim/WideIO2.h	/^        REF, REFPB, PD,  PDX,  SREF, SREFX,$/;"	m	class:WideIO2::Command
REFAB	src/ramulator_sim/DSARP.h	/^        REFAB, REFPB, DARP, SARP, DSARP, MAX$/;"	m	class:DSARP::Type
REFPB	src/ramulator_sim/DSARP.h	/^        REF, REFPB, PDE, PDX, SRE, SRX,$/;"	m	class:DSARP::Command
REFPB	src/ramulator_sim/DSARP.h	/^        REFAB, REFPB, DARP, SARP, DSARP, MAX$/;"	m	class:DSARP::Type
REFPB	src/ramulator_sim/LPDDR3.h	/^        REF, REFPB, PD, PDX,  SREF, SREFX,$/;"	m	class:LPDDR3::Command
REFPB	src/ramulator_sim/LPDDR4.h	/^        REF, REFPB, PDE, PDX, SREF, SREFX,$/;"	m	class:LPDDR4::Command
REFPB	src/ramulator_sim/WideIO2.h	/^        REF, REFPB, PD,  PDX,  SREF, SREFX,$/;"	m	class:WideIO2::Command
REFRESH	src/ramulator_sim/Request.h	/^        REFRESH,$/;"	m	class:Request::Type
REFSB	src/ramulator_sim/HBM.h	/^        REF, REFSB, PDE, PDX,  SRE, SRX,$/;"	m	class:HBM::Command
REGS	build/src/cuda-sim/ptxinfo.tab.c	/^    REGS = 263,$/;"	e	enum:yytokentype	file:
REGS	build/src/cuda-sim/ptxinfo.tab.h	/^    REGS = 263,$/;"	e	enum:yytokentype
REG_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    REG_DIRECTIVE = 281,$/;"	e	enum:yytokentype	file:
REG_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    REG_DIRECTIVE = 281,$/;"	e	enum:yytokentype
REG_RD	src/gpuwattch/XML_Parse.h	/^   REG_RD,$/;"	e	enum:perf_count_t
REG_WR	src/gpuwattch/XML_Parse.h	/^   REG_WR,$/;"	e	enum:perf_count_t
REJECT	build/src/cuda-sim/lex.ptx_.c	1325;"	d	file:
REJECT	build/src/cuda-sim/lex.ptxinfo_.c	586;"	d	file:
REJECT	src/intersim2/lex.yy.c	479;"	d	file:
REMOVE_DRAINING	launcher/mk-sched/mk_scheduler.h	/^        REMOVE_DRAINING,$/;"	e	enum:DynamicScheduler::SM_info::remove_status_st::RemoveStatus
REMOVE_FLUSHING	launcher/mk-sched/mk_scheduler.h	/^        REMOVE_FLUSHING,$/;"	e	enum:DynamicScheduler::SM_info::remove_status_st::RemoveStatus
REMOVE_NUM	launcher/mk-sched/mk_scheduler.h	/^        REMOVE_NUM$/;"	e	enum:DynamicScheduler::SM_info::remove_status_st::RemoveStatus
REMOVE_SWITCHING	launcher/mk-sched/mk_scheduler.h	/^        REMOVE_SWITCHING,$/;"	e	enum:DynamicScheduler::SM_info::remove_status_st::RemoveStatus
RENAMINGU	src/gpuwattch/core.cc	/^RENAMINGU::RENAMINGU(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_, const CoreDynParam & dyn_p_,bool exist_)$/;"	f	class:RENAMINGU
RENAMINGU	src/gpuwattch/core.h	/^class RENAMINGU :public Component {$/;"	c
REQNTID_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    REQNTID_DIRECTIVE = 282,$/;"	e	enum:yytokentype	file:
REQNTID_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    REQNTID_DIRECTIVE = 282,$/;"	e	enum:yytokentype
RESERVATION_FAIL	src/gpgpu-sim/gpu-cache.h	/^    RESERVATION_FAIL, $/;"	e	enum:cache_request_status
RESERVED	src/gpgpu-sim/gpu-cache.h	/^    RESERVED,$/;"	e	enum:cache_block_state
RES_ADJ	src/gpuwattch/cacti/wire.cc	422;"	d	file:
RET_OPS	src/abstract_hardware_model.h	/^   RET_OPS$/;"	e	enum:uarch_op_t
RFP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   RFP,$/;"	e	enum:pwr_cmp_t	file:
RFWIN	src/gpuwattch/core.h	/^	ArrayST * RFWIN;$/;"	m	class:RegFU
RIGHT_ANGLE_BRACKET	build/src/cuda-sim/ptx.tab.c	/^    RIGHT_ANGLE_BRACKET = 389,$/;"	e	enum:yytokentype	file:
RIGHT_ANGLE_BRACKET	build/src/cuda-sim/ptx.tab.h	/^    RIGHT_ANGLE_BRACKET = 389,$/;"	e	enum:yytokentype
RIGHT_BRACE	build/src/cuda-sim/ptx.tab.c	/^    RIGHT_BRACE = 357,$/;"	e	enum:yytokentype	file:
RIGHT_BRACE	build/src/cuda-sim/ptx.tab.h	/^    RIGHT_BRACE = 357,$/;"	e	enum:yytokentype
RIGHT_PAREN	build/src/cuda-sim/ptx.tab.c	/^    RIGHT_PAREN = 391,$/;"	e	enum:yytokentype	file:
RIGHT_PAREN	build/src/cuda-sim/ptx.tab.h	/^    RIGHT_PAREN = 391,$/;"	e	enum:yytokentype
RIGHT_SQUARE_BRACKET	build/src/cuda-sim/ptx.tab.c	/^    RIGHT_SQUARE_BRACKET = 348,$/;"	e	enum:yytokentype	file:
RIGHT_SQUARE_BRACKET	build/src/cuda-sim/ptx.tab.h	/^    RIGHT_SQUARE_BRACKET = 348,$/;"	e	enum:yytokentype
RIGHT_SQUARE_BRACKET	build/src/cuda-sim/ptxinfo.tab.c	/^    RIGHT_SQUARE_BRACKET = 272,$/;"	e	enum:yytokentype	file:
RIGHT_SQUARE_BRACKET	build/src/cuda-sim/ptxinfo.tab.h	/^    RIGHT_SQUARE_BRACKET = 272,$/;"	e	enum:yytokentype
RISE	src/gpuwattch/cacti/const.h	109;"	d
RMI_OPTION	build/src/cuda-sim/ptx.tab.c	/^    RMI_OPTION = 369,$/;"	e	enum:yytokentype	file:
RMI_OPTION	build/src/cuda-sim/ptx.tab.h	/^    RMI_OPTION = 369,$/;"	e	enum:yytokentype
RM_OPTION	build/src/cuda-sim/ptx.tab.c	/^    RM_OPTION = 365,$/;"	e	enum:yytokentype	file:
RM_OPTION	build/src/cuda-sim/ptx.tab.h	/^    RM_OPTION = 365,$/;"	e	enum:yytokentype
RNI_OPTION	build/src/cuda-sim/ptx.tab.c	/^    RNI_OPTION = 367,$/;"	e	enum:yytokentype	file:
RNI_OPTION	build/src/cuda-sim/ptx.tab.h	/^    RNI_OPTION = 367,$/;"	e	enum:yytokentype
RN_OPTION	build/src/cuda-sim/ptx.tab.c	/^    RN_OPTION = 363,$/;"	e	enum:yytokentype	file:
RN_OPTION	build/src/cuda-sim/ptx.tab.h	/^    RN_OPTION = 363,$/;"	e	enum:yytokentype
ROB	src/gpuwattch/core.h	/^	ArrayST         * ROB;$/;"	m	class:SchedulerU
ROB_height	src/gpuwattch/core.h	/^	double Iw_height, fp_Iw_height,ROB_height;$/;"	m	class:SchedulerU
ROB_reads	src/gpuwattch/XML_Parse.h	/^	double ROB_reads;$/;"	m	struct:__anon15
ROB_size	src/gpuwattch/XML_Parse.h	/^	int ROB_size;$/;"	m	struct:__anon15
ROB_writes	src/gpuwattch/XML_Parse.h	/^	double ROB_writes;$/;"	m	struct:__anon15
ROUTERS	src/intersim2/Makefile	/^ROUTERS:= $(wildcard routers\/*.cpp)$/;"	m
ROUTER_TYPES	src/gpuwattch/cacti/const.h	71;"	d
ROUTE_LOGIC_D	src/gpuwattch/cacti/highradix.h	59;"	d
ROUTE_LOGIC_L	src/gpuwattch/cacti/highradix.h	60;"	d
ROW	src/gpgpu-sim/addrdec.h	/^      ROW   = 4,$/;"	e	enum:linear_to_raw_address_translation::__anon29
ROWS	src/gpuwattch/cacti/highradix.h	/^    double ROWS;$/;"	m	class:HighRadix
ROW_BUFF_ENT	src/gpuwattch/cacti/highradix.h	/^    double ROW_BUFF_ENT;$/;"	m	class:HighRadix
ROW_BUFF_SZ	src/gpuwattch/cacti/highradix.h	/^    double ROW_BUFF_SZ;$/;"	m	class:HighRadix
RPI_OPTION	build/src/cuda-sim/ptx.tab.c	/^    RPI_OPTION = 370,$/;"	e	enum:yytokentype	file:
RPI_OPTION	build/src/cuda-sim/ptx.tab.h	/^    RPI_OPTION = 370,$/;"	e	enum:yytokentype
RP_OPTION	build/src/cuda-sim/ptx.tab.c	/^    RP_OPTION = 366,$/;"	e	enum:yytokentype	file:
RP_OPTION	build/src/cuda-sim/ptx.tab.h	/^    RP_OPTION = 366,$/;"	e	enum:yytokentype
RUN_UNTIL_CTA	launcher/launcher_option_parser.h	/^    RUN_UNTIL_CTA,$/;"	e	enum:LauncherOptionParser::StopSimulationCondition
RUN_UNTIL_CYCLE	launcher/launcher_option_parser.h	/^    RUN_UNTIL_CYCLE,$/;"	e	enum:LauncherOptionParser::StopSimulationCondition
RUN_UNTIL_END	launcher/launcher_option_parser.h	/^    RUN_UNTIL_END,$/;"	e	enum:LauncherOptionParser::StopSimulationCondition
RUN_UNTIL_INST	launcher/launcher_option_parser.h	/^    RUN_UNTIL_INST,$/;"	e	enum:LauncherOptionParser::StopSimulationCondition
RWP	src/gpuwattch/cacti/mat.h	/^    int RWP;$/;"	m	class:Mat
RWP	src/gpuwattch/cacti/uca.h	/^    int   RWP, ERP, EWP,SCHP;$/;"	m	class:UCA
RZI_OPTION	build/src/cuda-sim/ptx.tab.c	/^    RZI_OPTION = 368,$/;"	e	enum:yytokentype	file:
RZI_OPTION	build/src/cuda-sim/ptx.tab.h	/^    RZI_OPTION = 368,$/;"	e	enum:yytokentype
RZ_OPTION	build/src/cuda-sim/ptx.tab.c	/^    RZ_OPTION = 364,$/;"	e	enum:yytokentype	file:
RZ_OPTION	build/src/cuda-sim/ptx.tab.h	/^    RZ_OPTION = 364,$/;"	e	enum:yytokentype
R_nch_on	src/gpuwattch/cacti/parameter.h	/^    double R_nch_on;$/;"	m	class:TechnologyParameter::DeviceType
R_pch_on	src/gpuwattch/cacti/parameter.h	/^    double R_pch_on;$/;"	m	class:TechnologyParameter::DeviceType
R_per_um	src/gpuwattch/cacti/parameter.h	/^    double R_per_um;$/;"	m	class:TechnologyParameter::InterconnectType
R_to_w	src/gpuwattch/cacti/basic_circuit.cc	/^double R_to_w($/;"	f
R_wire_dec_out	src/gpuwattch/cacti/decoder.h	/^    double R_wire_dec_out;$/;"	m	class:Decoder
R_wire_predec_blk_out	src/gpuwattch/cacti/decoder.h	/^  double R_wire_predec_blk_out;$/;"	m	class:PredecBlk
R_wl	src/gpuwattch/cacti/subarray.h	/^    double  R_wl, R_wl_cam, R_wl_ram;$/;"	m	class:Subarray
R_wl_cam	src/gpuwattch/cacti/subarray.h	/^    double  R_wl, R_wl_cam, R_wl_ram;$/;"	m	class:Subarray
R_wl_ram	src/gpuwattch/cacti/subarray.h	/^    double  R_wl, R_wl_cam, R_wl_ram;$/;"	m	class:Subarray
Random	src/ramulator_sim/Memory.h	/^        Random,$/;"	m	class:Memory::Translation
RandomFloat	src/intersim/random_utils.cpp	/^float RandomFloat( float max )$/;"	f
RandomFloat	src/intersim2/random_utils.hpp	/^inline double RandomFloat(  ) {$/;"	f
RandomFloat	src/intersim2/random_utils.hpp	/^inline double RandomFloat( double max ) {$/;"	f
RandomInt	src/intersim/random_utils.cpp	/^int RandomInt( int max ) $/;"	f
RandomInt	src/intersim2/random_utils.hpp	/^inline int RandomInt( int max ) {$/;"	f
RandomIntLong	src/intersim/random_utils.cpp	/^unsigned long RandomIntLong( )$/;"	f
RandomIntLong	src/intersim2/random_utils.hpp	/^inline unsigned long RandomIntLong( ) {$/;"	f
RandomPermutationTrafficPattern	src/intersim2/traffic.cpp	/^RandomPermutationTrafficPattern::RandomPermutationTrafficPattern(int nodes, $/;"	f	class:RandomPermutationTrafficPattern
RandomPermutationTrafficPattern	src/intersim2/traffic.hpp	/^class RandomPermutationTrafficPattern : public TrafficPattern {$/;"	c
RandomSeed	src/intersim/random_utils.cpp	/^void RandomSeed( long seed )$/;"	f
RandomSeed	src/intersim2/random_utils.hpp	/^inline void RandomSeed( long seed ) {$/;"	f
RandomTrafficPattern	src/intersim2/traffic.cpp	/^RandomTrafficPattern::RandomTrafficPattern(int nodes)$/;"	f	class:RandomTrafficPattern
RandomTrafficPattern	src/intersim2/traffic.hpp	/^class RandomTrafficPattern : public TrafficPattern {$/;"	c
Rank	src/ramulator_sim/ALDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ALDRAM::Level
Rank	src/ramulator_sim/DDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:DDR3::Level
Rank	src/ramulator_sim/DDR4.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:DDR4::Level
Rank	src/ramulator_sim/DSARP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:DSARP::Level
Rank	src/ramulator_sim/GDDR5.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:GDDR5::Level
Rank	src/ramulator_sim/HBM.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:HBM::Level
Rank	src/ramulator_sim/LPDDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:LPDDR3::Level
Rank	src/ramulator_sim/LPDDR4.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:LPDDR4::Level
Rank	src/ramulator_sim/SALP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:SALP::Level
Rank	src/ramulator_sim/TLDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:TLDRAM::Level
Rank	src/ramulator_sim/WideIO.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:WideIO::Level
Rank	src/ramulator_sim/WideIO2.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:WideIO2::Level
Read	src/intersim/pipefifo.hpp	/^template<class T> T* PipelineFIFO<T>::Read( int lane )$/;"	f	class:PipelineFIFO
Read	src/intersim2/pipefifo.hpp	/^template<class T> T* PipelineFIFO<T>::Read( int lane )$/;"	f	class:PipelineFIFO
ReadCredit	src/intersim/network.cpp	/^Credit *Network::ReadCredit( int source )$/;"	f	class:Network
ReadCredit	src/intersim2/networks/network.cpp	/^Credit *Network::ReadCredit( int source )$/;"	f	class:Network
ReadFlit	src/intersim/network.cpp	/^Flit *Network::ReadFlit( int dest )$/;"	f	class:Network
ReadFlit	src/intersim2/networks/network.cpp	/^Flit *Network::ReadFlit( int dest )$/;"	f	class:Network
ReadInputs	src/intersim/event_router.cpp	/^void EventRouter::ReadInputs( )$/;"	f	class:EventRouter
ReadInputs	src/intersim/iq_router.cpp	/^void IQRouter::ReadInputs( )$/;"	f	class:IQRouter
ReadInputs	src/intersim/network.cpp	/^void Network::ReadInputs( )$/;"	f	class:Network
ReadInputs	src/intersim2/channel.hpp	/^void Channel<T>::ReadInputs() {$/;"	f	class:Channel
ReadInputs	src/intersim2/flitchannel.cpp	/^void FlitChannel::ReadInputs() {$/;"	f	class:FlitChannel
ReadInputs	src/intersim2/networks/network.cpp	/^void Network::ReadInputs( )$/;"	f	class:Network
ReadInputs	src/intersim2/routers/chaos_router.cpp	/^void ChaosRouter::ReadInputs( )$/;"	f	class:ChaosRouter
ReadInputs	src/intersim2/routers/event_router.cpp	/^void EventRouter::ReadInputs( )$/;"	f	class:EventRouter
ReadInputs	src/intersim2/routers/iq_router.cpp	/^void IQRouter::ReadInputs( )$/;"	f	class:IQRouter
ReadRequest	src/intersim/allocator.cpp	/^bool DenseAllocator::ReadRequest( sRequest &req, int in, int out ) const$/;"	f	class:DenseAllocator
ReadRequest	src/intersim/allocator.cpp	/^bool SparseAllocator::ReadRequest( sRequest &req, int in, int out ) const$/;"	f	class:SparseAllocator
ReadRequest	src/intersim/allocator.cpp	/^int DenseAllocator::ReadRequest( int in, int out ) const$/;"	f	class:DenseAllocator
ReadRequest	src/intersim/allocator.cpp	/^int SparseAllocator::ReadRequest( int in, int out ) const$/;"	f	class:SparseAllocator
ReadRequest	src/intersim2/allocators/allocator.cpp	/^bool DenseAllocator::ReadRequest( sRequest &req, int in, int out ) const$/;"	f	class:DenseAllocator
ReadRequest	src/intersim2/allocators/allocator.cpp	/^bool SparseAllocator::ReadRequest( sRequest &req, int in, int out ) const$/;"	f	class:SparseAllocator
ReadRequest	src/intersim2/allocators/allocator.cpp	/^int DenseAllocator::ReadRequest( int in, int out ) const$/;"	f	class:DenseAllocator
ReadRequest	src/intersim2/allocators/allocator.cpp	/^int SparseAllocator::ReadRequest( int in, int out ) const$/;"	f	class:SparseAllocator
Receive	src/intersim2/channel.hpp	/^T * Channel<T>::Receive() {$/;"	f	class:Channel
Refresh	src/ramulator_sim/Refresh.cpp	/^Refresh<DSARP>::Refresh(Controller<DSARP>* ctrl) : ctrl(ctrl) {$/;"	f	class:Refresh
Refresh	src/ramulator_sim/Refresh.h	/^  Refresh(Controller<T>* ctrl) : ctrl(ctrl) {$/;"	f	class:Refresh
Refresh	src/ramulator_sim/Refresh.h	/^class Refresh {$/;"	c
RefreshMode	src/ramulator_sim/DDR4.h	/^    enum class RefreshMode : int$/;"	c	class:DDR4
RefreshMode	src/ramulator_sim/DSARP.h	/^    enum class RefreshMode : int$/;"	c	class:DSARP
RefreshMode	src/ramulator_sim/LPDDR4.h	/^    enum class RefreshMode : int$/;"	c	class:LPDDR4
Refresh_1X	src/ramulator_sim/DDR4.h	/^        Refresh_1X,$/;"	m	class:DDR4::RefreshMode
Refresh_1X	src/ramulator_sim/DSARP.h	/^        Refresh_1X,$/;"	m	class:DSARP::RefreshMode
Refresh_1X	src/ramulator_sim/LPDDR4.h	/^        Refresh_1X,$/;"	m	class:LPDDR4::RefreshMode
Refresh_2X	src/ramulator_sim/DDR4.h	/^        Refresh_2X,$/;"	m	class:DDR4::RefreshMode
Refresh_2X	src/ramulator_sim/LPDDR4.h	/^        Refresh_2X,$/;"	m	class:LPDDR4::RefreshMode
Refresh_4X	src/ramulator_sim/DDR4.h	/^        Refresh_4X,$/;"	m	class:DDR4::RefreshMode
Refresh_4X	src/ramulator_sim/LPDDR4.h	/^        Refresh_4X,$/;"	m	class:LPDDR4::RefreshMode
RegFU	src/gpuwattch/core.cc	/^RegFU::RegFU(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_, const CoreDynParam & dyn_p_,double exClockRate,bool exist_)$/;"	f	class:RegFU
RegFU	src/gpuwattch/core.h	/^class RegFU :public Component {$/;"	c
Register	src/option_parser.cc	/^   void Register(const string optionName, const string optionDesc, T &optionVariable, const char *optionDefault)$/;"	f	class:OptionParser
RegisterRoutingFunctions	src/intersim2/networks/anynet.cpp	/^void AnyNet::RegisterRoutingFunctions() {$/;"	f	class:AnyNet
RegisterRoutingFunctions	src/intersim2/networks/cmesh.cpp	/^void CMesh::RegisterRoutingFunctions() {$/;"	f	class:CMesh
RegisterRoutingFunctions	src/intersim2/networks/dragonfly.cpp	/^void DragonFlyNew::RegisterRoutingFunctions(){$/;"	f	class:DragonFlyNew
RegisterRoutingFunctions	src/intersim2/networks/fattree.cpp	/^void FatTree::RegisterRoutingFunctions() {$/;"	f	class:FatTree
RegisterRoutingFunctions	src/intersim2/networks/flatfly_onchip.cpp	/^void FlatFlyOnChip::RegisterRoutingFunctions(){$/;"	f	class:FlatFlyOnChip
RegisterRoutingFunctions	src/intersim2/networks/fly.hpp	/^  static void RegisterRoutingFunctions(){};$/;"	f	class:KNFly
RegisterRoutingFunctions	src/intersim2/networks/kncube.cpp	/^void KNCube::RegisterRoutingFunctions() {$/;"	f	class:KNCube
RegisterRoutingFunctions	src/intersim2/networks/qtree.cpp	/^void QTree::RegisterRoutingFunctions(){$/;"	f	class:QTree
RegisterRoutingFunctions	src/intersim2/networks/tree4.cpp	/^void Tree4::RegisterRoutingFunctions(){$/;"	f	class:Tree4
Remote_Request_turn	src/gpgpu-sim/l2cache.h	/^        int Remote_Request_turn[4][4];$/;"	m	class:KAIN_GPU_chiplet
Remote_cycle	src/gpgpu-sim/l2cache.h	/^        long long Remote_cycle;$/;"	m	class:KAIN_GPU_chiplet
RemoveFlit	src/intersim/vc.cpp	/^Flit *VC::RemoveFlit( )$/;"	f	class:VC
RemoveFlit	src/intersim2/buffer.hpp	/^  inline Flit *RemoveFlit( int vc )$/;"	f	class:Buffer
RemoveFlit	src/intersim2/vc.cpp	/^Flit *VC::RemoveFlit( )$/;"	f	class:VC
RemoveRequest	src/intersim/allocator.cpp	/^void DenseAllocator::RemoveRequest( int in, int out, int label )$/;"	f	class:DenseAllocator
RemoveRequest	src/intersim/allocator.cpp	/^void SparseAllocator::RemoveRequest( int in, int out, int label )$/;"	f	class:SparseAllocator
RemoveRequest	src/intersim/arbiter.cpp	/^void Arbiter::RemoveRequest( int in, int label )$/;"	f	class:Arbiter
RemoveRequest	src/intersim2/allocators/allocator.cpp	/^void DenseAllocator::RemoveRequest( int in, int out, int label )$/;"	f	class:DenseAllocator
RemoveRequest	src/intersim2/allocators/allocator.cpp	/^void SparseAllocator::RemoveRequest( int in, int out, int label )$/;"	f	class:SparseAllocator
RemoveRequest	src/intersim2/arbiters/prio_arb.cpp	/^void PriorityArbiter::RemoveRequest( int in, int label )$/;"	f	class:PriorityArbiter
RemoveStatus	launcher/mk-sched/mk_scheduler.h	/^      enum RemoveStatus {$/;"	g	struct:DynamicScheduler::SM_info::remove_status_st
Renaming_type	src/gpuwattch/basic_components.h	/^enum Renaming_type {$/;"	g
Reply	src/gpgpu-sim/l2cache.h	/^        fifo_pipeline<mem_fetch> *Reply[32];$/;"	m	class:KAIN_GPU_chiplet
Reply_Near	src/gpgpu-sim/l2cache.h	/^        fifo_pipeline<mem_fetch> *Reply_Near[4];$/;"	m	class:KAIN_GPU_chiplet
Reply_Near_Src_From	src/gpgpu-sim/l2cache.h	/^        fifo_pipeline<mem_fetch> *Reply_Near_Src_From[4][4];$/;"	m	class:KAIN_GPU_chiplet
Reply_Remote	src/gpgpu-sim/l2cache.h	/^        fifo_pipeline<mem_fetch> *Reply_Remote[4];$/;"	m	class:KAIN_GPU_chiplet
Reply_Remote_Src_From	src/gpgpu-sim/l2cache.h	/^        fifo_pipeline<mem_fetch> *Reply_Remote_Src_From[4][4];$/;"	m	class:KAIN_GPU_chiplet
Reply_turn	src/gpgpu-sim/l2cache.h	/^        int Reply_turn[4];$/;"	m	class:KAIN_GPU_chiplet
ReqIter	src/ramulator_sim/Scheduler.h	/^    typedef list<Request>::iterator ReqIter;$/;"	t	class:Scheduler
Request	src/gpgpu-sim/l2cache.h	/^        fifo_pipeline<mem_fetch> *Request[32];$/;"	m	class:KAIN_GPU_chiplet
Request	src/ramulator_sim/Request.h	/^    Request()$/;"	f	class:Request
Request	src/ramulator_sim/Request.h	/^    Request(long addr, Type type, function<void(Request&)> callback, int coreid = 0)$/;"	f	class:Request
Request	src/ramulator_sim/Request.h	/^    Request(long addr, Type type, int coreid = 0)$/;"	f	class:Request
Request	src/ramulator_sim/Request.h	/^    Request(vector<int>& addr_vec, Type type, function<void(Request&)> callback, int coreid = 0)$/;"	f	class:Request
Request	src/ramulator_sim/Request.h	/^class Request$/;"	c
Request_Near	src/gpgpu-sim/l2cache.h	/^        fifo_pipeline<mem_fetch> *Request_Near[4];$/;"	m	class:KAIN_GPU_chiplet
Request_Near_Src_From	src/gpgpu-sim/l2cache.h	/^        fifo_pipeline<mem_fetch> *Request_Near_Src_From[4][4];\/\/8 is Src, 8 is from$/;"	m	class:KAIN_GPU_chiplet
Request_Remote	src/gpgpu-sim/l2cache.h	/^        fifo_pipeline<mem_fetch> *Request_Remote[4];$/;"	m	class:KAIN_GPU_chiplet
Request_Remote_Src_From	src/gpgpu-sim/l2cache.h	/^        fifo_pipeline<mem_fetch> *Request_Remote_Src_From[4][4];\/\/8 is Src, 8 is from$/;"	m	class:KAIN_GPU_chiplet
Request_turn	src/gpgpu-sim/l2cache.h	/^        int Request_turn[4];$/;"	m	class:KAIN_GPU_chiplet
ReservationStation	src/gpuwattch/basic_components.h	/^	ReservationStation$/;"	e	enum:Scheduler_type
Reset	src/intersim2/credit.cpp	/^void Credit::Reset()$/;"	f	class:Credit
Reset	src/intersim2/flit.cpp	/^void Flit::Reset() $/;"	f	class:Flit
ResetFlowStats	src/intersim2/routers/router.hpp	/^  inline void ResetFlowStats(int c) {$/;"	f	class:Router
ResetStallStats	src/intersim2/routers/router.hpp	/^  inline void ResetStallStats(int c) {$/;"	f	class:Router
ResetTrafficFunction	src/intersim/traffic.cpp	/^void ResetTrafficFunction( )$/;"	f
Result	src/ramulator_sim/StatType.h	/^typedef double Result;$/;"	t	namespace:Stats_Ram
RoBaRaCoCh	src/ramulator_sim/Memory.h	/^        RoBaRaCoCh,$/;"	m	class:Memory::Type
RoundRobinArbiter	src/intersim2/arbiters/roundrobin_arb.cpp	/^RoundRobinArbiter::RoundRobinArbiter( Module *parent, const string &name,$/;"	f	class:RoundRobinArbiter
RoundRobinArbiter	src/intersim2/arbiters/roundrobin_arb.hpp	/^class RoundRobinArbiter : public Arbiter {$/;"	c
Route	src/intersim/vc.cpp	/^void VC::Route( tRoutingFunction rf, const Router* router, const Flit* f, int in_channel )$/;"	f	class:VC
Route	src/intersim2/buffer.hpp	/^  inline void Route( int vc, tRoutingFunction rf, const Router* router, const Flit* f, int in_channel )$/;"	f	class:Buffer
Route	src/intersim2/vc.cpp	/^void VC::Route( tRoutingFunction rf, const Router* router, const Flit* f, int in_channel )$/;"	f	class:VC
Router	src/intersim/router.cpp	/^Router::Router( const Configuration& config,$/;"	f	class:Router
Router	src/intersim/router.hpp	/^class Router : public Module {$/;"	c
Router	src/intersim2/routers/router.cpp	/^Router::Router( const Configuration& config,$/;"	f	class:Router
Router	src/intersim2/routers/router.hpp	/^class Router : public TimedModule {$/;"	c
Router organizations	src/intersim/doc/manual.tex	/^\\end{opt_list}$/;"	u
Row	src/ramulator_sim/ALDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:ALDRAM::Level
Row	src/ramulator_sim/DDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:DDR3::Level
Row	src/ramulator_sim/DDR4.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:DDR4::Level
Row	src/ramulator_sim/DSARP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:DSARP::Level
Row	src/ramulator_sim/GDDR5.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:GDDR5::Level
Row	src/ramulator_sim/HBM.h	/^        Channel, Rank, BankGroup, Bank, Row, Column, MAX$/;"	m	class:HBM::Level
Row	src/ramulator_sim/LPDDR3.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:LPDDR3::Level
Row	src/ramulator_sim/LPDDR4.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:LPDDR4::Level
Row	src/ramulator_sim/SALP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:SALP::Level
Row	src/ramulator_sim/TLDRAM.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:TLDRAM::Level
Row	src/ramulator_sim/WideIO.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:WideIO::Level
Row	src/ramulator_sim/WideIO2.h	/^        Channel, Rank, Bank, Row, Column, MAX$/;"	m	class:WideIO2::Level
RowPolicy	src/ramulator_sim/Scheduler.h	/^    RowPolicy(Controller<T>* ctrl) : ctrl(ctrl) {}$/;"	f	class:RowPolicy
RowPolicy	src/ramulator_sim/Scheduler.h	/^class RowPolicy$/;"	c
RowTable	src/ramulator_sim/Scheduler.h	/^    RowTable(Controller<T>* ctrl) : ctrl(ctrl) {}$/;"	f	class:RowTable
RowTable	src/ramulator_sim/Scheduler.h	/^class RowTable$/;"	c
Run	src/intersim2/trafficmanager.cpp	/^bool TrafficManager::Run( )$/;"	f	class:TrafficManager
Rw	src/intersim2/power/power_module.hpp	/^  double Rw ;$/;"	m	class:Power_Module
S16_TYPE	build/src/cuda-sim/ptx.tab.c	/^    S16_TYPE = 299,$/;"	e	enum:yytokentype	file:
S16_TYPE	build/src/cuda-sim/ptx.tab.h	/^    S16_TYPE = 299,$/;"	e	enum:yytokentype
S32_TYPE	build/src/cuda-sim/ptx.tab.c	/^    S32_TYPE = 300,$/;"	e	enum:yytokentype	file:
S32_TYPE	build/src/cuda-sim/ptx.tab.h	/^    S32_TYPE = 300,$/;"	e	enum:yytokentype
S64_TYPE	build/src/cuda-sim/ptx.tab.c	/^    S64_TYPE = 301,$/;"	e	enum:yytokentype	file:
S64_TYPE	build/src/cuda-sim/ptx.tab.h	/^    S64_TYPE = 301,$/;"	e	enum:yytokentype
S8_TYPE	build/src/cuda-sim/ptx.tab.c	/^    S8_TYPE = 298,$/;"	e	enum:yytokentype	file:
S8_TYPE	build/src/cuda-sim/ptx.tab.h	/^    S8_TYPE = 298,$/;"	e	enum:yytokentype
SAD	src/cuda-sim/instructions.cc	3028;"	d	file:
SALP	src/ramulator_sim/SALP.cpp	/^SALP::SALP(Org org, Speed speed, Type type, int n_sa) :$/;"	f	class:SALP
SALP	src/ramulator_sim/SALP.cpp	/^SALP::SALP(const string& org_str, const string& speed_str, const string& type_str, int n_sa) :$/;"	f	class:SALP
SALP	src/ramulator_sim/SALP.h	/^class SALP$/;"	c
SALP_1	src/ramulator_sim/SALP.h	/^        SALP_1, SALP_2, MASA, MAX$/;"	m	class:SALP::Type
SALP_1066E	src/ramulator_sim/SALP.h	/^        SALP_1066E, SALP_1066F, SALP_1066G,$/;"	m	class:SALP::Speed
SALP_1066F	src/ramulator_sim/SALP.h	/^        SALP_1066E, SALP_1066F, SALP_1066G,$/;"	m	class:SALP::Speed
SALP_1066G	src/ramulator_sim/SALP.h	/^        SALP_1066E, SALP_1066F, SALP_1066G,$/;"	m	class:SALP::Speed
SALP_1333G	src/ramulator_sim/SALP.h	/^        SALP_1333G, SALP_1333H,$/;"	m	class:SALP::Speed
SALP_1333H	src/ramulator_sim/SALP.h	/^        SALP_1333G, SALP_1333H,$/;"	m	class:SALP::Speed
SALP_1600H	src/ramulator_sim/SALP.h	/^        SALP_1600H, SALP_1600J, SALP_1600K,$/;"	m	class:SALP::Speed
SALP_1600J	src/ramulator_sim/SALP.h	/^        SALP_1600H, SALP_1600J, SALP_1600K,$/;"	m	class:SALP::Speed
SALP_1600K	src/ramulator_sim/SALP.h	/^        SALP_1600H, SALP_1600J, SALP_1600K,$/;"	m	class:SALP::Speed
SALP_1866K	src/ramulator_sim/SALP.h	/^        SALP_1866K, SALP_1866L,$/;"	m	class:SALP::Speed
SALP_1866L	src/ramulator_sim/SALP.h	/^        SALP_1866K, SALP_1866L,$/;"	m	class:SALP::Speed
SALP_1Gb_x16	src/ramulator_sim/SALP.h	/^        SALP_1Gb_x4,   SALP_1Gb_x8,   SALP_1Gb_x16,$/;"	m	class:SALP::Org
SALP_1Gb_x4	src/ramulator_sim/SALP.h	/^        SALP_1Gb_x4,   SALP_1Gb_x8,   SALP_1Gb_x16,$/;"	m	class:SALP::Org
SALP_1Gb_x8	src/ramulator_sim/SALP.h	/^        SALP_1Gb_x4,   SALP_1Gb_x8,   SALP_1Gb_x16,$/;"	m	class:SALP::Org
SALP_2	src/ramulator_sim/SALP.h	/^        SALP_1, SALP_2, MASA, MAX$/;"	m	class:SALP::Type
SALP_2133L	src/ramulator_sim/SALP.h	/^        SALP_2133L, SALP_2133M,$/;"	m	class:SALP::Speed
SALP_2133M	src/ramulator_sim/SALP.h	/^        SALP_2133L, SALP_2133M,$/;"	m	class:SALP::Speed
SALP_2Gb_x16	src/ramulator_sim/SALP.h	/^        SALP_2Gb_x4,   SALP_2Gb_x8,   SALP_2Gb_x16,$/;"	m	class:SALP::Org
SALP_2Gb_x4	src/ramulator_sim/SALP.h	/^        SALP_2Gb_x4,   SALP_2Gb_x8,   SALP_2Gb_x16,$/;"	m	class:SALP::Org
SALP_2Gb_x8	src/ramulator_sim/SALP.h	/^        SALP_2Gb_x4,   SALP_2Gb_x8,   SALP_2Gb_x16,$/;"	m	class:SALP::Org
SALP_4Gb_x16	src/ramulator_sim/SALP.h	/^        SALP_4Gb_x4,   SALP_4Gb_x8,   SALP_4Gb_x16,$/;"	m	class:SALP::Org
SALP_4Gb_x4	src/ramulator_sim/SALP.h	/^        SALP_4Gb_x4,   SALP_4Gb_x8,   SALP_4Gb_x16,$/;"	m	class:SALP::Org
SALP_4Gb_x8	src/ramulator_sim/SALP.h	/^        SALP_4Gb_x4,   SALP_4Gb_x8,   SALP_4Gb_x16,$/;"	m	class:SALP::Org
SALP_512Mb_x16	src/ramulator_sim/SALP.h	/^        SALP_512Mb_x4, SALP_512Mb_x8, SALP_512Mb_x16,$/;"	m	class:SALP::Org
SALP_512Mb_x4	src/ramulator_sim/SALP.h	/^        SALP_512Mb_x4, SALP_512Mb_x8, SALP_512Mb_x16,$/;"	m	class:SALP::Org
SALP_512Mb_x8	src/ramulator_sim/SALP.h	/^        SALP_512Mb_x4, SALP_512Mb_x8, SALP_512Mb_x16,$/;"	m	class:SALP::Org
SALP_800D	src/ramulator_sim/SALP.h	/^        SALP_800D,  SALP_800E,$/;"	m	class:SALP::Speed
SALP_800E	src/ramulator_sim/SALP.h	/^        SALP_800D,  SALP_800E,$/;"	m	class:SALP::Speed
SALP_8Gb_x16	src/ramulator_sim/SALP.h	/^        SALP_8Gb_x4,   SALP_8Gb_x8,   SALP_8Gb_x16,$/;"	m	class:SALP::Org
SALP_8Gb_x4	src/ramulator_sim/SALP.h	/^        SALP_8Gb_x4,   SALP_8Gb_x8,   SALP_8Gb_x16,$/;"	m	class:SALP::Org
SALP_8Gb_x8	src/ramulator_sim/SALP.h	/^        SALP_8Gb_x4,   SALP_8Gb_x8,   SALP_8Gb_x16,$/;"	m	class:SALP::Org
SAMPLELOG	src/gpgpu-sim/gpu-sim.h	62;"	d
SAMPLERREF_TYPE	build/src/cuda-sim/ptx.tab.c	/^    SAMPLERREF_TYPE = 318,$/;"	e	enum:yytokentype	file:
SAMPLERREF_TYPE	build/src/cuda-sim/ptx.tab.h	/^    SAMPLERREF_TYPE = 318,$/;"	e	enum:yytokentype
SARP	src/ramulator_sim/DSARP.h	/^        REFAB, REFPB, DARP, SARP, DSARP, MAX$/;"	m	class:DSARP::Type
SASEL	src/ramulator_sim/SALP.h	/^        ACT, SASEL, PRE, PRER, \/\/ precharge bank\/bank\/rank(SALP-1), subarray\/bank\/rank(SALP-2, MASA)$/;"	m	class:SALP::Command
SAT_OPTION	build/src/cuda-sim/ptx.tab.c	/^    SAT_OPTION = 375,$/;"	e	enum:yytokentype	file:
SAT_OPTION	build/src/cuda-sim/ptx.tab.h	/^    SAT_OPTION = 375,$/;"	e	enum:yytokentype
SBT	src/gpuwattch/basic_components.h	/^	SBT,\/\/static bank tag$/;"	e	enum:Dir_type
SCHEDP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   SCHEDP,$/;"	e	enum:pwr_cmp_t	file:
SCHEDULER_PRIORITIZATION_GTLRR	src/gpgpu-sim/shader.h	/^    SCHEDULER_PRIORITIZATION_GTLRR, \/\/ Greedy Then Loose Round Robin$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_GTO	src/gpgpu-sim/shader.h	/^    SCHEDULER_PRIORITIZATION_GTO, \/\/ Greedy Then Oldest$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_GTY	src/gpgpu-sim/shader.h	/^    SCHEDULER_PRIORITIZATION_GTY, \/\/ Greedy Then Youngest$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_LRR	src/gpgpu-sim/shader.h	/^    SCHEDULER_PRIORITIZATION_LRR = 0, \/\/ Loose Round Robin$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_OLDEST	src/gpgpu-sim/shader.h	/^    SCHEDULER_PRIORITIZATION_OLDEST, \/\/ Oldest First$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_SRR	src/gpgpu-sim/shader.h	/^    SCHEDULER_PRIORITIZATION_SRR, \/\/ Strict Round Robin$/;"	e	enum:scheduler_prioritization_type
SCHEDULER_PRIORITIZATION_YOUNGEST	src/gpgpu-sim/shader.h	/^    SCHEDULER_PRIORITIZATION_YOUNGEST, \/\/ Youngest First$/;"	e	enum:scheduler_prioritization_type
SCHED_DPRINTF	src/gpgpu-sim/shader_trace.h	56;"	d
SCHED_DPRINTF	src/gpgpu-sim/shader_trace.h	71;"	d
SCHED_PRINT_STR	src/gpgpu-sim/shader_trace.h	38;"	d
SCHP	src/gpuwattch/cacti/mat.h	/^    int SCHP;$/;"	m	class:Mat
SCHP	src/gpuwattch/cacti/uca.h	/^    int   RWP, ERP, EWP,SCHP;$/;"	m	class:UCA
SCOREBOARD_H_	src/gpgpu-sim/scoreboard.h	35;"	d
SECTION_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    SECTION_DIRECTIVE = 283,$/;"	e	enum:yytokentype	file:
SECTION_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    SECTION_DIRECTIVE = 283,$/;"	e	enum:yytokentype
SELFREFRESH	src/ramulator_sim/Request.h	/^        SELFREFRESH,$/;"	m	class:Request::Type
SEMICOLON	build/src/cuda-sim/ptxinfo.tab.c	/^    SEMICOLON = 274,$/;"	e	enum:yytokentype	file:
SEMICOLON	build/src/cuda-sim/ptxinfo.tab.h	/^    SEMICOLON = 274,$/;"	e	enum:yytokentype
SEMI_COLON	build/src/cuda-sim/ptx.tab.c	/^    SEMI_COLON = 354,$/;"	e	enum:yytokentype	file:
SEMI_COLON	build/src/cuda-sim/ptx.tab.h	/^    SEMI_COLON = 354,$/;"	e	enum:yytokentype
SFUP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   SFUP,$/;"	e	enum:pwr_cmp_t	file:
SFU_ACC	src/gpuwattch/XML_Parse.h	/^   SFU_ACC,$/;"	e	enum:perf_count_t
SFU_BASE_POWER	src/gpuwattch/gpgpu_sim_wrapper.cc	31;"	d	file:
SFU_BASE_POWER	src/gpuwattch/logic.cc	40;"	d	file:
SFU_OP	src/abstract_hardware_model.h	/^   SFU_OP,$/;"	e	enum:uarch_op_t
SFU__OP	src/abstract_hardware_model.h	/^    SFU__OP,$/;"	e	enum:operation_pipeline_t
SF_OPTION	build/src/cuda-sim/ptx.tab.c	/^    SF_OPTION = 345,$/;"	e	enum:yytokentype	file:
SF_OPTION	build/src/cuda-sim/ptx.tab.h	/^    SF_OPTION = 345,$/;"	e	enum:yytokentype
SHADER_DPRINTF	src/gpgpu-sim/shader_trace.h	44;"	d
SHADER_DPRINTF	src/gpgpu-sim/shader_trace.h	70;"	d
SHADER_DTRACE	src/gpgpu-sim/shader_trace.h	39;"	d
SHADER_DTRACE	src/gpgpu-sim/shader_trace.h	69;"	d
SHADER_H	src/gpgpu-sim/shader.h	30;"	d
SHADER_PRINT_STR	src/gpgpu-sim/shader_trace.h	37;"	d
SHAREDCACHE_H_	src/gpuwattch/sharedcache.h	33;"	d
SHARED_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    SHARED_DIRECTIVE = 284,$/;"	e	enum:yytokentype	file:
SHARED_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    SHARED_DIRECTIVE = 284,$/;"	e	enum:yytokentype
SHARED_GENERIC_START	src/abstract_hardware_model.h	228;"	d
SHARED_MEM_SIZE_MAX	src/abstract_hardware_model.h	221;"	d
SHELL	src/gpuwattch/cacti/cacti.mk	/^SHELL = \/bin\/sh$/;"	m
SHELL	src/gpuwattch/mcpat.mk	/^SHELL = \/bin\/sh$/;"	m
SHELL	src/gpuwattch/mcpatXeonCore.mk	/^SHELL = \/bin\/sh$/;"	m
SHRDP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   SHRDP,$/;"	e	enum:pwr_cmp_t	file:
SHRD_ACC	src/gpuwattch/XML_Parse.h	/^   SHRD_ACC,$/;"	e	enum:perf_count_t
SIM_PRINT_STR	src/trace.h	61;"	d
SMEM	build/src/cuda-sim/ptxinfo.tab.c	/^    SMEM = 266,$/;"	e	enum:yytokentype	file:
SMEM	build/src/cuda-sim/ptxinfo.tab.h	/^    SMEM = 266,$/;"	e	enum:yytokentype
SMID_REG	src/cuda-sim/opcodes.h	/^   SMID_REG,$/;"	e	enum:special_regs
SM_alloc	launcher/mk-sched/fixed_scheduler.h	/^    SM_alloc(unsigned _alloc = 0)$/;"	f	struct:FixedScheduler::SM_alloc
SM_alloc	launcher/mk-sched/fixed_scheduler.h	/^  struct SM_alloc {$/;"	s	class:FixedScheduler
SM_info	launcher/mk-sched/mk_scheduler.h	/^    SM_info()$/;"	f	class:DynamicScheduler::SM_info
SM_info	launcher/mk-sched/mk_scheduler.h	/^  class SM_info {$/;"	c	class:DynamicScheduler
SM_infos	launcher/mk-sched/mk_scheduler.h	/^  std::map<kernel_info_t*, SM_info> SM_infos;$/;"	m	class:DynamicScheduler
SM_number	src/gpgpu-sim/gpu-sim.h	/^    unsigned SM_number;$/;"	m	struct:KAIN_Power_Gate_Number_Cycles
SOURCES	common/Makefile	/^SOURCES=$(wildcard *.cc)$/;"	m
SOURCES	launcher/Makefile	/^SOURCES=$(wildcard *.cc)$/;"	m
SOURCES	launcher/mk-sched/Makefile	/^SOURCES=$(wildcard *.cc)$/;"	m
SOURCES	launcher/stats/Makefile	/^SOURCES=$(wildcard *.cc)$/;"	m
SOURCES	src/Makefile	/^SOURCES=$(wildcard *.cc)$/;"	m
SPECIAL_REGISTER	build/src/cuda-sim/ptx.tab.c	/^    SPECIAL_REGISTER = 350,$/;"	e	enum:yytokentype	file:
SPECIAL_REGISTER	build/src/cuda-sim/ptx.tab.h	/^    SPECIAL_REGISTER = 350,$/;"	e	enum:yytokentype
SPP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   SPP,$/;"	e	enum:pwr_cmp_t	file:
SP_ACC	src/gpuwattch/XML_Parse.h	/^   SP_ACC,$/;"	e	enum:perf_count_t
SP_BASE_POWER	src/gpuwattch/gpgpu_sim_wrapper.cc	30;"	d	file:
SP_BASE_POWER	src/gpuwattch/logic.cc	39;"	d	file:
SP__OP	src/abstract_hardware_model.h	/^    SP__OP,$/;"	e	enum:operation_pipeline_t
SQEntries	src/gpuwattch/arch_const.h	/^const int SQEntries=32;$/;"	v
SRCS	src/gpgpu-sim/Makefile	/^SRCS = $(shell ls *.cc)$/;"	m
SRCS	src/gpuwattch/cacti/cacti.mk	/^SRCS  = area.cc bank.cc mat.cc main.cc Ucache.cc io.cc technology.cc basic_circuit.cc parameter.cc \\$/;"	m
SRCS	src/gpuwattch/mcpat.mk	/^SRCS  = \\$/;"	m
SRCS	src/gpuwattch/mcpatXeonCore.mk	/^SRCS  = \\$/;"	m
SRE	src/ramulator_sim/ALDRAM.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:ALDRAM::Command
SRE	src/ramulator_sim/DDR3.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:DDR3::Command
SRE	src/ramulator_sim/DDR4.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:DDR4::Command
SRE	src/ramulator_sim/DSARP.h	/^        REF, REFPB, PDE, PDX, SRE, SRX,$/;"	m	class:DSARP::Command
SRE	src/ramulator_sim/GDDR5.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:GDDR5::Command
SRE	src/ramulator_sim/HBM.h	/^        REF, REFSB, PDE, PDX,  SRE, SRX,$/;"	m	class:HBM::Command
SRE	src/ramulator_sim/SALP.h	/^        REF, PDE,   PDX, SRE, SRX,$/;"	m	class:SALP::Command
SRE	src/ramulator_sim/TLDRAM.h	/^        REF, PDE, PDX, SRE, SRX,$/;"	m	class:TLDRAM::Command
SREF	src/ramulator_sim/LPDDR3.h	/^        REF, REFPB, PD, PDX,  SREF, SREFX,$/;"	m	class:LPDDR3::Command
SREF	src/ramulator_sim/LPDDR4.h	/^        REF, REFPB, PDE, PDX, SREF, SREFX,$/;"	m	class:LPDDR4::Command
SREF	src/ramulator_sim/WideIO.h	/^        REF, PD,  PDX,  SREF, SREFX,$/;"	m	class:WideIO::Command
SREF	src/ramulator_sim/WideIO2.h	/^        REF, REFPB, PD,  PDX,  SREF, SREFX,$/;"	m	class:WideIO2::Command
SREFX	src/ramulator_sim/LPDDR3.h	/^        REF, REFPB, PD, PDX,  SREF, SREFX,$/;"	m	class:LPDDR3::Command
SREFX	src/ramulator_sim/LPDDR4.h	/^        REF, REFPB, PDE, PDX, SREF, SREFX,$/;"	m	class:LPDDR4::Command
SREFX	src/ramulator_sim/WideIO.h	/^        REF, PD,  PDX,  SREF, SREFX,$/;"	m	class:WideIO::Command
SREFX	src/ramulator_sim/WideIO2.h	/^        REF, REFPB, PD,  PDX,  SREF, SREFX,$/;"	m	class:WideIO2::Command
SREG_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    SREG_DIRECTIVE = 285,$/;"	e	enum:yytokentype	file:
SREG_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    SREG_DIRECTIVE = 285,$/;"	e	enum:yytokentype
SRX	src/ramulator_sim/ALDRAM.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:ALDRAM::Command
SRX	src/ramulator_sim/DDR3.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:DDR3::Command
SRX	src/ramulator_sim/DDR4.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:DDR4::Command
SRX	src/ramulator_sim/DSARP.h	/^        REF, REFPB, PDE, PDX, SRE, SRX,$/;"	m	class:DSARP::Command
SRX	src/ramulator_sim/GDDR5.h	/^        REF, PDE, PDX,  SRE, SRX,$/;"	m	class:GDDR5::Command
SRX	src/ramulator_sim/HBM.h	/^        REF, REFSB, PDE, PDX,  SRE, SRX,$/;"	m	class:HBM::Command
SRX	src/ramulator_sim/SALP.h	/^        REF, PDE,   PDX, SRE, SRX,$/;"	m	class:SALP::Command
SRX	src/ramulator_sim/TLDRAM.h	/^        REF, PDE, PDX, SRE, SRX,$/;"	m	class:TLDRAM::Command
SSITSize	src/gpuwattch/arch_const.h	/^const int SSITSize=1024;$/;"	v
ST	src/gpuwattch/basic_components.h	/^	ST,\/\/shadowed tag$/;"	e	enum:Dir_type
STACKED_DIE_LAYER_ALLOTED_AREA_mm2	src/gpuwattch/cacti/const.h	172;"	d
STACKED_DIE_LAYER_ASPECT_RATIO	src/gpuwattch/cacti/const.h	184;"	d
STACK_ENTRY_TYPE_CALL	src/abstract_hardware_model.h	/^        STACK_ENTRY_TYPE_CALL$/;"	e	enum:simt_stack::stack_entry_type
STACK_ENTRY_TYPE_NORMAL	src/abstract_hardware_model.h	/^        STACK_ENTRY_TYPE_NORMAL = 0,$/;"	e	enum:simt_stack::stack_entry_type
STALL_BUFFER_BUSY	src/intersim2/routers/router.cpp	/^int const Router::STALL_BUFFER_BUSY = -2;$/;"	m	class:Router	file:
STALL_BUFFER_BUSY	src/intersim2/routers/router.hpp	/^  static int const STALL_BUFFER_BUSY;$/;"	m	class:Router
STALL_BUFFER_CONFLICT	src/intersim2/routers/router.cpp	/^int const Router::STALL_BUFFER_CONFLICT = -3;$/;"	m	class:Router	file:
STALL_BUFFER_CONFLICT	src/intersim2/routers/router.hpp	/^  static int const STALL_BUFFER_CONFLICT;$/;"	m	class:Router
STALL_BUFFER_FULL	src/intersim2/routers/router.cpp	/^int const Router::STALL_BUFFER_FULL = -4;$/;"	m	class:Router	file:
STALL_BUFFER_FULL	src/intersim2/routers/router.hpp	/^  static int const STALL_BUFFER_FULL;$/;"	m	class:Router
STALL_BUFFER_RESERVED	src/intersim2/routers/router.cpp	/^int const Router::STALL_BUFFER_RESERVED = -5;$/;"	m	class:Router	file:
STALL_BUFFER_RESERVED	src/intersim2/routers/router.hpp	/^  static int const STALL_BUFFER_RESERVED;$/;"	m	class:Router
STALL_CROSSBAR_CONFLICT	src/intersim2/routers/router.cpp	/^int const Router::STALL_CROSSBAR_CONFLICT = -6;$/;"	m	class:Router	file:
STALL_CROSSBAR_CONFLICT	src/intersim2/routers/router.hpp	/^  static int const STALL_CROSSBAR_CONFLICT;$/;"	m	class:Router
STATIC_ALLOC_LIMIT	src/abstract_hardware_model.h	230;"	d
STATS_INCLUDED	src/gpgpu-sim/stats.h	29;"	d
STAT_TOOL_H	src/gpgpu-sim/stat-tool.h	29;"	d
STAT_WRAPER_H	src/intersim/statwraper.h	2;"	d
STAT_WRAPER_H	src/statwrapper.h	2;"	d
STOP_SIMULATION_CONDITION_END	launcher/launcher_option_parser.h	/^    STOP_SIMULATION_CONDITION_END$/;"	e	enum:LauncherOptionParser::StopSimulationCondition
STORE_OP	src/abstract_hardware_model.h	/^   STORE_OP,$/;"	e	enum:uarch_op_t
STR	src/intersim2/y.tab.c	/^    STR = 258,$/;"	e	enum:yytokentype	file:
STR	src/intersim2/y.tab.c	121;"	d	file:
STR	src/intersim2/y.tab.h	/^    STR = 258,$/;"	e	enum:yytokentype
STR	src/intersim2/y.tab.h	54;"	d
STREAM_MANAGER_H_INCLUDED	src/stream_manager.h	29;"	d
STRING	build/src/cuda-sim/ptx.tab.c	/^    STRING = 258,$/;"	e	enum:yytokentype	file:
STRING	build/src/cuda-sim/ptx.tab.h	/^    STRING = 258,$/;"	e	enum:yytokentype
STRSIZE	src/gpgpu-sim/shader.cc	120;"	d	file:
STRSIZE	src/gpgpu-sim/shader.cc	1749;"	d	file:
STRUCT_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    STRUCT_DIRECTIVE = 286,$/;"	e	enum:yytokentype	file:
STRUCT_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    STRUCT_DIRECTIVE = 286,$/;"	e	enum:yytokentype
STR_SIZE	src/cuda-sim/cuda-sim.cc	491;"	d	file:
STR_SIZE	src/cuda-sim/ptx_ir.cc	42;"	d	file:
STR_SIZE	src/gpgpu-sim/shader.cc	2216;"	d	file:
SUB_SWITCH_SZ	src/gpuwattch/cacti/highradix.h	/^    double SUB_SWITCH_SZ;$/;"	m	class:HighRadix
SURFREF_TYPE	build/src/cuda-sim/ptx.tab.c	/^    SURFREF_TYPE = 319,$/;"	e	enum:yytokentype	file:
SURFREF_TYPE	build/src/cuda-sim/ptx.tab.h	/^    SURFREF_TYPE = 319,$/;"	e	enum:yytokentype
SURF_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    SURF_DIRECTIVE = 287,$/;"	e	enum:yytokentype	file:
SURF_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    SURF_DIRECTIVE = 287,$/;"	e	enum:yytokentype
SYS_OPTION	build/src/cuda-sim/ptx.tab.c	/^    SYS_OPTION = 399,$/;"	e	enum:yytokentype	file:
SYS_OPTION	build/src/cuda-sim/ptx.tab.h	/^    SYS_OPTION = 399,$/;"	e	enum:yytokentype
S_MEM	src/gpgpu-sim/stats.h	/^   S_MEM,$/;"	e	enum:mem_stage_access_type
Scalar	src/ramulator_sim/StatType.h	/^  Scalar(): _value(0) {}$/;"	f	class:Stats_Ram::Scalar
Scalar	src/ramulator_sim/StatType.h	/^class Scalar: public ScalarBase<Scalar> {$/;"	c	namespace:Stats_Ram
ScalarBase	launcher/stats/stats.h	/^  ScalarBase()   {}$/;"	f	class:Stats::ScalarBase
ScalarBase	launcher/stats/stats.h	/^class ScalarBase : public StatBase {$/;"	c	namespace:Stats
ScalarBase	src/ramulator_sim/StatType.h	/^class ScalarBase: public Stat<ScalarType> {$/;"	c	namespace:Stats_Ram
ScalarStat	src/ramulator_sim/Statistics.h	/^class ScalarStat : public ScalarStatBase<Stats_Ram::Scalar> {$/;"	c
ScalarStatBase	src/ramulator_sim/Statistics.h	/^class ScalarStatBase : public StatBase<StatType> { \/\/ wrapper for Stats::ScalarBase$/;"	c
ScalarStorage	launcher/stats/stats.h	/^  ScalarStorage()  {}$/;"	f	class:Stats::ScalarStorage
ScalarStorage	launcher/stats/stats.h	/^class ScalarStorage {$/;"	c	namespace:Stats
ScalingFactor	src/gpuwattch/cacti/parameter.h	/^    ScalingFactor(): logic_scaling_co_eff(0), core_tx_density(0),$/;"	f	class:TechnologyParameter::ScalingFactor
ScalingFactor	src/gpuwattch/cacti/parameter.h	/^  class ScalingFactor$/;"	c	class:TechnologyParameter
Scheduler	src/ramulator_sim/Scheduler.h	/^    Scheduler(Controller<T>* ctrl) : ctrl(ctrl) {}$/;"	f	class:Scheduler
Scheduler	src/ramulator_sim/Scheduler.h	/^class Scheduler$/;"	c
SchedulerInfo	launcher/mk-sched/named_info.h	/^typedef NamedInfo<std::vector<std::string> > SchedulerInfo;$/;"	t
SchedulerU	src/gpuwattch/core.cc	/^SchedulerU::SchedulerU(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_, const CoreDynParam & dyn_p_, bool exist_)$/;"	f	class:SchedulerU
SchedulerU	src/gpuwattch/core.h	/^class SchedulerU :public Component {$/;"	c
SchedulerUpdateInfo	launcher/mk-sched/named_info.h	/^typedef NamedInfo<uint64_t> SchedulerUpdateInfo;$/;"	t
Scheduler_type	src/gpuwattch/basic_components.h	/^enum Scheduler_type {$/;"	g
Scoreboard	src/gpgpu-sim/scoreboard.cc	/^Scoreboard::Scoreboard( unsigned sid, unsigned n_warps )$/;"	f	class:Scoreboard
Scoreboard	src/gpgpu-sim/scoreboard.h	/^class Scoreboard {$/;"	c
Search_in_htree	src/gpuwattch/cacti/basic_circuit.h	/^    Search_in_htree,$/;"	e	enum:Htree_type
Search_out_htree	src/gpuwattch/cacti/basic_circuit.h	/^    Search_out_htree,$/;"	e	enum:Htree_type
SelAlloc	src/intersim/selalloc.cpp	/^SelAlloc::SelAlloc( const Configuration &config,$/;"	f	class:SelAlloc
SelAlloc	src/intersim/selalloc.hpp	/^class SelAlloc : public SparseAllocator {$/;"	c
SelAlloc	src/intersim2/allocators/selalloc.cpp	/^SelAlloc::SelAlloc( Module *parent, const string& name,$/;"	f	class:SelAlloc
SelAlloc	src/intersim2/allocators/selalloc.hpp	/^class SelAlloc : public SparseAllocator {$/;"	c
Selected	src/ramulator_sim/SALP.h	/^        Opened, Closed, Selected, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:SALP::State
SelfRefresh	src/ramulator_sim/ALDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:ALDRAM::State
SelfRefresh	src/ramulator_sim/DDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DDR3::State
SelfRefresh	src/ramulator_sim/DDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DDR4::State
SelfRefresh	src/ramulator_sim/DSARP.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:DSARP::State
SelfRefresh	src/ramulator_sim/GDDR5.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:GDDR5::State
SelfRefresh	src/ramulator_sim/HBM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:HBM::State
SelfRefresh	src/ramulator_sim/LPDDR3.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:LPDDR3::State
SelfRefresh	src/ramulator_sim/LPDDR4.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:LPDDR4::State
SelfRefresh	src/ramulator_sim/SALP.h	/^        Opened, Closed, Selected, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:SALP::State
SelfRefresh	src/ramulator_sim/TLDRAM.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:TLDRAM::State
SelfRefresh	src/ramulator_sim/WideIO.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:WideIO::State
SelfRefresh	src/ramulator_sim/WideIO2.h	/^        Opened, Closed, PowerUp, ActPowerDown, PrePowerDown, SelfRefresh, MAX$/;"	m	class:WideIO2::State
Semi_global	src/gpuwattch/cacti/cacti_interface.h	/^    Semi_global \/* mid-level wires with repeaters*\/,$/;"	e	enum:Wire_type
Send	src/intersim2/channel.hpp	/^void Channel<T>::Send(T * data) {$/;"	f	class:Channel
Send	src/intersim2/flitchannel.cpp	/^void FlitChannel::Send(Flit * f) {$/;"	f	class:FlitChannel
SendingFlit	src/intersim/buffer_state.cpp	/^void BufferState::SendingFlit( Flit *f )$/;"	f	class:BufferState
SendingFlit	src/intersim2/buffer_state.cpp	/^void BufferState::BufferPolicy::SendingFlit(Flit const * const f) {$/;"	f	class:BufferState::BufferPolicy
SendingFlit	src/intersim2/buffer_state.cpp	/^void BufferState::DynamicLimitedSharedBufferPolicy::SendingFlit(Flit const * const f)$/;"	f	class:BufferState::DynamicLimitedSharedBufferPolicy
SendingFlit	src/intersim2/buffer_state.cpp	/^void BufferState::FeedbackSharedBufferPolicy::SendingFlit(Flit const * const f)$/;"	f	class:BufferState::FeedbackSharedBufferPolicy
SendingFlit	src/intersim2/buffer_state.cpp	/^void BufferState::LimitedSharedBufferPolicy::SendingFlit(Flit const * const f)$/;"	f	class:BufferState::LimitedSharedBufferPolicy
SendingFlit	src/intersim2/buffer_state.cpp	/^void BufferState::PrivateBufferPolicy::SendingFlit(Flit const * const f)$/;"	f	class:BufferState::PrivateBufferPolicy
SendingFlit	src/intersim2/buffer_state.cpp	/^void BufferState::SendingFlit( Flit const * const f )$/;"	f	class:BufferState
SendingFlit	src/intersim2/buffer_state.cpp	/^void BufferState::SharedBufferPolicy::SendingFlit(Flit const * const f)$/;"	f	class:BufferState::SharedBufferPolicy
SendingFlit	src/intersim2/buffer_state.cpp	/^void BufferState::ShiftingDynamicLimitedSharedBufferPolicy::SendingFlit(Flit const * const f)$/;"	f	class:BufferState::ShiftingDynamicLimitedSharedBufferPolicy
SendingFlit	src/intersim2/buffer_state.cpp	/^void BufferState::SimpleFeedbackSharedBufferPolicy::SendingFlit(Flit const * const f)$/;"	f	class:BufferState::SimpleFeedbackSharedBufferPolicy
SeparableAllocator	src/intersim2/allocators/separable.cpp	/^SeparableAllocator::SeparableAllocator( Module* parent, const string& name,$/;"	f	class:SeparableAllocator
SeparableAllocator	src/intersim2/allocators/separable.hpp	/^class SeparableAllocator : public SparseAllocator {$/;"	c
SeparableInputFirstAllocator	src/intersim2/allocators/separable_input_first.cpp	/^SeparableInputFirstAllocator( Module* parent, const string& name, int inputs,$/;"	f	class:SeparableInputFirstAllocator
SeparableInputFirstAllocator	src/intersim2/allocators/separable_input_first.hpp	/^class SeparableInputFirstAllocator : public SeparableAllocator {$/;"	c
SeparableOutputFirstAllocator	src/intersim2/allocators/separable_output_first.cpp	/^SeparableOutputFirstAllocator( Module* parent, const string& name, int inputs,$/;"	f	class:SeparableOutputFirstAllocator
SeparableOutputFirstAllocator	src/intersim2/allocators/separable_output_first.hpp	/^class SeparableOutputFirstAllocator : public SeparableAllocator {$/;"	c
SetCredits	src/intersim/event_router.cpp	/^void EventNextVCState::SetCredits( int vc, int value )$/;"	f	class:EventNextVCState
SetCredits	src/intersim2/routers/event_router.cpp	/^void EventNextVCState::SetCredits( int vc, int value )$/;"	f	class:EventNextVCState
SetDrainState	src/intersim/trafficmanager.cpp	/^void TrafficManager::SetDrainState( )$/;"	f	class:TrafficManager
SetInput	src/intersim/event_router.cpp	/^void EventNextVCState::SetInput( int vc, int input )$/;"	f	class:EventNextVCState
SetInput	src/intersim2/routers/event_router.cpp	/^void EventNextVCState::SetInput( int vc, int input )$/;"	f	class:EventNextVCState
SetInputVC	src/intersim/event_router.cpp	/^void EventNextVCState::SetInputVC( int vc, int in_vc )$/;"	f	class:EventNextVCState
SetInputVC	src/intersim2/routers/event_router.cpp	/^void EventNextVCState::SetInputVC( int vc, int in_vc )$/;"	f	class:EventNextVCState
SetLatency	src/intersim2/channel.hpp	/^void Channel<T>::SetLatency(int cycles) {$/;"	f	class:Channel
SetMinLatency	src/intersim2/buffer_state.cpp	/^void BufferState::FeedbackSharedBufferPolicy::SetMinLatency(int min_latency)$/;"	f	class:BufferState::FeedbackSharedBufferPolicy
SetMinLatency	src/intersim2/buffer_state.hpp	/^    virtual void SetMinLatency(int min_latency) {}$/;"	f	class:BufferState::BufferPolicy
SetMinLatency	src/intersim2/buffer_state.hpp	/^  inline void SetMinLatency(int min_latency) {$/;"	f	class:BufferState
SetName	src/intersim/module.cpp	/^void Module::SetName( Module *parent, const string& name )$/;"	f	class:Module
SetOutput	src/intersim/vc.cpp	/^void VC::SetOutput( int port, int vc )$/;"	f	class:VC
SetOutput	src/intersim2/buffer.hpp	/^  inline void SetOutput( int vc, int out_port, int out_vc )$/;"	f	class:Buffer
SetOutput	src/intersim2/vc.cpp	/^void VC::SetOutput( int port, int vc )$/;"	f	class:VC
SetPresence	src/intersim/event_router.cpp	/^void EventNextVCState::SetPresence( int vc, int value )$/;"	f	class:EventNextVCState
SetPresence	src/intersim2/routers/event_router.cpp	/^void EventNextVCState::SetPresence( int vc, int value )$/;"	f	class:EventNextVCState
SetRouteSet	src/intersim2/buffer.hpp	/^  inline void SetRouteSet( int vc, OutputSet * output_set )$/;"	f	class:Buffer
SetRouteSet	src/intersim2/vc.cpp	/^void VC::SetRouteSet( OutputSet * output_set )$/;"	f	class:VC
SetSink	src/intersim2/flitchannel.cpp	/^void FlitChannel::SetSink(Router const * const router, int port) {$/;"	f	class:FlitChannel
SetSource	src/intersim2/flitchannel.cpp	/^void FlitChannel::SetSource(Router const * const router, int port) {$/;"	f	class:FlitChannel
SetState	src/intersim/event_router.cpp	/^void EventNextVCState::SetState( int vc, eNextVCState state )$/;"	f	class:EventNextVCState
SetState	src/intersim/vc.cpp	/^void VC::SetState( eVCState s )$/;"	f	class:VC
SetState	src/intersim2/buffer.hpp	/^  inline void SetState( int vc, VC::eVCState s )$/;"	f	class:Buffer
SetState	src/intersim2/routers/event_router.cpp	/^void EventNextVCState::SetState( int vc, eNextVCState state )$/;"	f	class:EventNextVCState
SetState	src/intersim2/vc.cpp	/^void VC::SetState( eVCState s )$/;"	f	class:VC
SetWatch	src/intersim/vc.cpp	/^void VC::SetWatch( bool watch )$/;"	f	class:VC
SetWatch	src/intersim2/buffer.hpp	/^  inline void SetWatch( int vc, bool watch = true )$/;"	f	class:Buffer
SetWatch	src/intersim2/vc.cpp	/^void VC::SetWatch( bool watch )$/;"	f	class:VC
SharedBufferPolicy	src/intersim2/buffer_state.cpp	/^BufferState::SharedBufferPolicy::SharedBufferPolicy(Configuration const & config, BufferState * parent, const string & name)$/;"	f	class:BufferState::SharedBufferPolicy
SharedBufferPolicy	src/intersim2/buffer_state.hpp	/^  class SharedBufferPolicy : public BufferPolicy {$/;"	c	class:BufferState
SharedCache	src/gpuwattch/sharedcache.cc	/^SharedCache::SharedCache(ParseXML* XML_interface, int ithCache_, InputParameter* interface_ip_, enum cache_level cacheL_)$/;"	f	class:SharedCache
SharedCache	src/gpuwattch/sharedcache.h	/^class SharedCache :public Component{$/;"	c
ShiftingDynamicLimitedSharedBufferPolicy	src/intersim2/buffer_state.cpp	/^BufferState::ShiftingDynamicLimitedSharedBufferPolicy::ShiftingDynamicLimitedSharedBufferPolicy(Configuration const & config, BufferState * parent, const string & name)$/;"	f	class:BufferState::ShiftingDynamicLimitedSharedBufferPolicy
ShiftingDynamicLimitedSharedBufferPolicy	src/intersim2/buffer_state.hpp	/^  class ShiftingDynamicLimitedSharedBufferPolicy : public DynamicLimitedSharedBufferPolicy {$/;"	c	class:BufferState
ShowOveralStat	src/intersim/trafficmanager.cpp	/^void TrafficManager::ShowOveralStat( )$/;"	f	class:TrafficManager
ShowStats	src/intersim/trafficmanager.cpp	/^void  TrafficManager::ShowStats() $/;"	f	class:TrafficManager
ShuffleTrafficPattern	src/intersim2/traffic.cpp	/^ShuffleTrafficPattern::ShuffleTrafficPattern(int nodes)$/;"	f	class:ShuffleTrafficPattern
ShuffleTrafficPattern	src/intersim2/traffic.hpp	/^class ShuffleTrafficPattern : public BitPermutationTrafficPattern {$/;"	c
SimpleFeedbackSharedBufferPolicy	src/intersim2/buffer_state.cpp	/^BufferState::SimpleFeedbackSharedBufferPolicy::SimpleFeedbackSharedBufferPolicy(Configuration const & config, BufferState * parent, const string & name)$/;"	f	class:BufferState::SimpleFeedbackSharedBufferPolicy
SimpleFeedbackSharedBufferPolicy	src/intersim2/buffer_state.hpp	/^  class SimpleFeedbackSharedBufferPolicy : public FeedbackSharedBufferPolicy {$/;"	c	class:BufferState
Simulate	src/intersim2/main.cpp	/^bool Simulate( BookSimConfig const & config )$/;"	f
SimulationInitializer	src/cuda-sim/cuda-sim.h	/^class SimulationInitializer {$/;"	c
Simulator	launcher/simulator.cc	/^Simulator::Simulator()$/;"	f	class:Simulator
Simulator	launcher/simulator.h	/^class Simulator {$/;"	c
SingleNet	src/intersim/singlenet.cpp	/^SingleNet::SingleNet( const Configuration &config ) :$/;"	f	class:SingleNet
SingleNet	src/intersim/singlenet.hpp	/^class SingleNet : public Network {$/;"	c
Size	src/intersim/outputset.cpp	/^int OutputSet::Size( ) const$/;"	f	class:OutputSet
Size	src/intersim2/interconnect_interface.hpp	/^    inline unsigned Size(void) const { return _buffer.size(); }$/;"	f	class:InterconnectInterface::_BoundaryBufferItem
SmartEvenScheduler	launcher/mk-sched/smart_even_scheduler.h	/^  SmartEvenScheduler(const std::string& _preempt, const std::string& _progress)$/;"	f	class:SmartEvenScheduler
SmartEvenScheduler	launcher/mk-sched/smart_even_scheduler.h	/^class SmartEvenScheduler : public DynamicScheduler {$/;"	c
SparseAllocator	src/intersim/allocator.cpp	/^SparseAllocator::SparseAllocator( const Configuration &config,$/;"	f	class:SparseAllocator
SparseAllocator	src/intersim/allocator.hpp	/^class SparseAllocator : public Allocator {$/;"	c
SparseAllocator	src/intersim2/allocators/allocator.cpp	/^SparseAllocator::SparseAllocator( Module *parent, const string& name,$/;"	f	class:SparseAllocator
SparseAllocator	src/intersim2/allocators/allocator.hpp	/^class SparseAllocator : public Allocator {$/;"	c
Speed	src/ramulator_sim/ALDRAM.h	/^    enum class Speed : int$/;"	c	class:ALDRAM
Speed	src/ramulator_sim/DDR3.h	/^    enum class Speed : int$/;"	c	class:DDR3
Speed	src/ramulator_sim/DDR4.h	/^    enum class Speed : int$/;"	c	class:DDR4
Speed	src/ramulator_sim/DSARP.h	/^    enum class Speed : int$/;"	c	class:DSARP
Speed	src/ramulator_sim/GDDR5.h	/^    enum class Speed : int$/;"	c	class:GDDR5
Speed	src/ramulator_sim/HBM.h	/^    enum class Speed : int$/;"	c	class:HBM
Speed	src/ramulator_sim/LPDDR3.h	/^    enum class Speed : int$/;"	c	class:LPDDR3
Speed	src/ramulator_sim/LPDDR4.h	/^    enum class Speed : int$/;"	c	class:LPDDR4
Speed	src/ramulator_sim/SALP.h	/^    enum class Speed : int$/;"	c	class:SALP
Speed	src/ramulator_sim/TLDRAM.h	/^    enum class Speed : int$/;"	c	class:TLDRAM
Speed	src/ramulator_sim/WideIO.h	/^    enum class Speed : int$/;"	c	class:WideIO
Speed	src/ramulator_sim/WideIO2.h	/^    enum class Speed : int$/;"	c	class:WideIO2
SpeedEntry	src/ramulator_sim/ALDRAM.h	/^    struct SpeedEntry {$/;"	s	class:ALDRAM
SpeedEntry	src/ramulator_sim/DDR3.h	/^    struct SpeedEntry {$/;"	s	class:DDR3
SpeedEntry	src/ramulator_sim/DDR4.h	/^    struct SpeedEntry {$/;"	s	class:DDR4
SpeedEntry	src/ramulator_sim/DSARP.h	/^    struct SpeedEntry {$/;"	s	class:DSARP
SpeedEntry	src/ramulator_sim/GDDR5.h	/^    struct SpeedEntry {$/;"	s	class:GDDR5
SpeedEntry	src/ramulator_sim/HBM.h	/^    struct SpeedEntry {$/;"	s	class:HBM
SpeedEntry	src/ramulator_sim/LPDDR3.h	/^    struct SpeedEntry {$/;"	s	class:LPDDR3
SpeedEntry	src/ramulator_sim/LPDDR4.h	/^    struct SpeedEntry {$/;"	s	class:LPDDR4
SpeedEntry	src/ramulator_sim/SALP.h	/^    struct SpeedEntry {$/;"	s	class:SALP
SpeedEntry	src/ramulator_sim/TLDRAM.h	/^    struct SpeedEntry {$/;"	s	class:TLDRAM
SpeedEntry	src/ramulator_sim/WideIO.h	/^    struct SpeedEntry {$/;"	s	class:WideIO
SpeedEntry	src/ramulator_sim/WideIO2.h	/^    struct SpeedEntry {$/;"	s	class:WideIO2
SpeedyController	src/ramulator_sim/SpeedyController.h	/^    SpeedyController(const Config& configs, DRAM<T>* channel) :$/;"	f	class:SpeedyController
SpeedyController	src/ramulator_sim/SpeedyController.h	/^class SpeedyController$/;"	c
SquaredSum	src/intersim2/stats.cpp	/^double Stats::SquaredSum( ) const$/;"	f	class:Stats
Stack	src/gpgpu-sim/stack.h	/^} Stack;$/;"	t	typeref:struct:__anon30
StandardDeviation	src/ramulator_sim/StatType.h	/^  StandardDeviation(): sum(Counter()), squares(Counter()),$/;"	f	class:Stats_Ram::StandardDeviation
StandardDeviation	src/ramulator_sim/StatType.h	/^class StandardDeviation: public Stat<StandardDeviation> {$/;"	c	namespace:Stats_Ram
StandardDeviationStat	src/ramulator_sim/Statistics.h	/^class StandardDeviationStat : public DistStatBase<Stats_Ram::StandardDeviation> {$/;"	c
Stat	src/ramulator_sim/StatType.h	/^  Stat() {$/;"	f	class:Stats_Ram::Stat
Stat	src/ramulator_sim/StatType.h	/^class Stat : public StatBase {$/;"	c	namespace:Stats_Ram
StatAddSample	src/intersim/statwraper.cpp	/^void StatAddSample (void * st, int val)$/;"	f
StatAddSample	src/statwrapper.cc	/^void StatAddSample (void * st, int val)$/;"	f
StatAverage	src/intersim/statwraper.cpp	/^double StatAverage(void * st) $/;"	f
StatAverage	src/statwrapper.cc	/^double StatAverage(void * st) $/;"	f
StatBase	launcher/stats/stats.h	/^  StatBase()  {}$/;"	f	class:Stats::StatBase
StatBase	launcher/stats/stats.h	/^class StatBase {$/;"	c	namespace:Stats
StatBase	src/ramulator_sim/StatType.h	/^class StatBase {$/;"	c	namespace:Stats_Ram
StatBase	src/ramulator_sim/Statistics.h	/^  StatBase() {}$/;"	f	class:StatBase
StatBase	src/ramulator_sim/Statistics.h	/^  StatBase(std::string _name) {$/;"	f	class:StatBase
StatBase	src/ramulator_sim/Statistics.h	/^  StatBase(std::string _name, std::string _desc) {$/;"	f	class:StatBase
StatBase	src/ramulator_sim/Statistics.h	/^class StatBase { \/\/ wrapper for Stats::DataWrap$/;"	c
StatBaseVec	src/ramulator_sim/Statistics.h	/^class StatBaseVec : public StatBase<StatType> { \/\/ wrapper for Stats::DataWrapVec$/;"	c
StatClear	src/intersim/statwraper.cpp	/^void StatClear(void * st)$/;"	f
StatClear	src/statwrapper.cc	/^void StatClear(void * st)$/;"	f
StatCreate	src/intersim/statwraper.cpp	/^Stats* StatCreate (const char * name, double bin_size, int num_bins) {$/;"	f
StatCreate	src/statwrapper.cc	/^Stats* StatCreate (const char * name, double bin_size, int num_bins) {$/;"	f
StatDisp	src/intersim/statwraper.cpp	/^void StatDisp (void * st)$/;"	f
StatDisp	src/statwrapper.cc	/^void StatDisp (void * st)$/;"	f
StatList	src/ramulator_sim/StatType.h	/^class StatList {$/;"	c	namespace:Stats_Ram
StatMax	src/intersim/statwraper.cpp	/^double StatMax(void * st) $/;"	f
StatMax	src/statwrapper.cc	/^double StatMax(void * st) $/;"	f
StatMin	src/intersim/statwraper.cpp	/^double StatMin(void * st) $/;"	f
StatMin	src/statwrapper.cc	/^double StatMin(void * st) $/;"	f
State	src/ramulator_sim/ALDRAM.h	/^    enum class State : int$/;"	c	class:ALDRAM
State	src/ramulator_sim/DDR3.h	/^    enum class State : int$/;"	c	class:DDR3
State	src/ramulator_sim/DDR4.h	/^    enum class State : int$/;"	c	class:DDR4
State	src/ramulator_sim/DSARP.h	/^    enum class State : int$/;"	c	class:DSARP
State	src/ramulator_sim/GDDR5.h	/^    enum class State : int$/;"	c	class:GDDR5
State	src/ramulator_sim/HBM.h	/^    enum class State : int$/;"	c	class:HBM
State	src/ramulator_sim/LPDDR3.h	/^    enum class State : int$/;"	c	class:LPDDR3
State	src/ramulator_sim/LPDDR4.h	/^    enum class State : int$/;"	c	class:LPDDR4
State	src/ramulator_sim/SALP.h	/^    enum class State : int$/;"	c	class:SALP
State	src/ramulator_sim/TLDRAM.h	/^    enum class State : int$/;"	c	class:TLDRAM
State	src/ramulator_sim/WideIO.h	/^    enum class State : int$/;"	c	class:WideIO
State	src/ramulator_sim/WideIO2.h	/^    enum class State : int$/;"	c	class:WideIO2
StaticScheduler	launcher/mk-sched/mk_scheduler.h	/^  StaticScheduler()  {}$/;"	f	class:StaticScheduler
StaticScheduler	launcher/mk-sched/mk_scheduler.h	/^class StaticScheduler : public MKScheduler {$/;"	c
Stats	launcher/stats/stats.h	/^namespace Stats {$/;"	n
Stats	src/intersim/stats.cpp	/^Stats::Stats( Module *parent, const string &name,$/;"	f	class:Stats
Stats	src/intersim/stats.hpp	/^class Stats : public Module {$/;"	c
Stats	src/intersim2/stats.cpp	/^Stats::Stats( Module *parent, const string &name,$/;"	f	class:Stats
Stats	src/intersim2/stats.hpp	/^class Stats : public Module {$/;"	c
Stats_Ram	src/ramulator_sim/StatType.cpp	/^namespace Stats_Ram {$/;"	n	file:
Stats_Ram	src/ramulator_sim/StatType.h	/^namespace Stats_Ram {$/;"	n
Status	src/gpuwattch/xmlParser.cc	/^typedef enum Status$/;"	g	file:
Status	src/gpuwattch/xmlParser.cc	/^} Status;$/;"	t	typeref:enum:Status	file:
StepTrafficFunction	src/intersim/traffic.cpp	/^void StepTrafficFunction( )$/;"	f
StopSimulationCondition	launcher/launcher_option_parser.h	/^  enum StopSimulationCondition {$/;"	g	class:LauncherOptionParser
Stream1_SM	launcher/launcher_option_parser.cc	/^bool Stream1_SM[384] = {false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false, false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false};$/;"	v
Stream2_SM	launcher/launcher_option_parser.cc	/^bool Stream2_SM[192] = {false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false};$/;"	v
Stream3_SM	launcher/launcher_option_parser.cc	/^bool Stream3_SM[192] = {false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false};$/;"	v
Stream4_SM	launcher/launcher_option_parser.cc	/^bool Stream4_SM[192] = {false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false,false};$/;"	v
SubArray	src/ramulator_sim/DSARP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:DSARP::Level
SubArray	src/ramulator_sim/SALP.h	/^        Channel, Rank, Bank, SubArray, Row, Column, MAX$/;"	m	class:SALP::Level
Subarray	src/gpuwattch/cacti/subarray.cc	/^Subarray::Subarray(const DynamicParameter & dp_, bool is_fa_):$/;"	f	class:Subarray
Subarray	src/gpuwattch/cacti/subarray.h	/^class Subarray : public Component$/;"	c
Sum	src/intersim2/stats.cpp	/^double Stats::Sum( ) const$/;"	f	class:Stats
Supersedes	src/intersim2/arbiters/roundrobin_arb.hpp	/^  static inline bool Supersedes(int input1, int pri1, int input2, int pri2, int offset, int size)$/;"	f	class:RoundRobinArbiter
SwitchMonitor	src/intersim2/power/switch_monitor.cpp	/^SwitchMonitor::SwitchMonitor( int inputs, int outputs, int classes )$/;"	f	class:SwitchMonitor
SwitchMonitor	src/intersim2/power/switch_monitor.hpp	/^class SwitchMonitor {$/;"	c
TAR	src/gpuwattch/cacti/makefile	/^TAR = cacti$/;"	m
TAR	src/gpuwattch/makefile	/^TAR = mcpat$/;"	m
TARGET	src/gpuwattch/cacti/cacti.mk	/^TARGET = cacti$/;"	m
TARGET	src/gpuwattch/mcpat.mk	/^TARGET = mcpat$/;"	m
TARGET	src/gpuwattch/mcpatXeonCore.mk	/^TARGET = mcpatXeonCore$/;"	m
TARGETS	Makefile	/^TARGETS=$(BIN_DIR)\/multikernel-sim$/;"	m
TARGETS	libcuda/Makefile	/^TARGETS=$(LIB_DIR)\/libcudart.so$/;"	m
TARGET_CYCLE_TIME_ns	src/gpuwattch/cacti/const.h	192;"	d
TARGET_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    TARGET_DIRECTIVE = 288,$/;"	e	enum:yytokentype	file:
TARGET_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    TARGET_DIRECTIVE = 288,$/;"	e	enum:yytokentype
TC	build/src/cuda-sim/lex.ptx_.c	1366;"	d	file:
TC	build/src/cuda-sim/lex.ptxinfo_.c	627;"	d	file:
TCP	src/gpuwattch/gpgpu_sim_wrapper.cc	/^   TCP,$/;"	e	enum:pwr_cmp_t	file:
TC_H	src/gpuwattch/XML_Parse.h	/^   TC_H,$/;"	e	enum:perf_count_t
TC_M	src/gpuwattch/XML_Parse.h	/^   TC_M,$/;"	e	enum:perf_count_t
TEX	src/abstract_hardware_model.h	/^    TEX$/;"	e	enum:mem_operation_t
TEXREF_TYPE	build/src/cuda-sim/ptx.tab.c	/^    TEXREF_TYPE = 317,$/;"	e	enum:yytokentype	file:
TEXREF_TYPE	build/src/cuda-sim/ptx.tab.h	/^    TEXREF_TYPE = 317,$/;"	e	enum:yytokentype
TEXTURE	src/gpgpu-sim/stat-tool.cc	/^   NORMAL, TEXTURE, CONSTANT, INSTRUCTION$/;"	e	enum:cache_access_logger_types	file:
TEX_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    TEX_DIRECTIVE = 289,$/;"	e	enum:yytokentype	file:
TEX_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    TEX_DIRECTIVE = 289,$/;"	e	enum:yytokentype
TEX_FIFO	src/gpgpu-sim/gpu-cache.h	/^    TEX_FIFO,$/;"	e	enum:mshr_config_t
TEX_MSHR_MERGE	src/gpgpu-sim/gpu-sim.h	54;"	d
TID_REG	src/cuda-sim/opcodes.h	/^   TID_REG,$/;"	e	enum:special_regs
TLB_HIT	src/gpgpu-sim/stats.h	/^	TLB_HIT = 0,$/;"	e	enum:tlb_request_status
TLB_PENDING	src/gpgpu-sim/stats.h	/^	TLB_PENDING$/;"	e	enum:tlb_request_status
TLB_READY	src/gpgpu-sim/stats.h	/^	TLB_READY,$/;"	e	enum:tlb_request_status
TLB_STALL	src/gpgpu-sim/stats.h	/^   TLB_STALL,$/;"	e	enum:mem_stage_stall_type
TLDRAM	src/ramulator_sim/TLDRAM.cpp	/^TLDRAM::TLDRAM(Org org, Speed speed, int segment_ratio) :$/;"	f	class:TLDRAM
TLDRAM	src/ramulator_sim/TLDRAM.cpp	/^TLDRAM::TLDRAM(const string& org_str, const string& speed_str, int segment_ratio) :$/;"	f	class:TLDRAM
TLDRAM	src/ramulator_sim/TLDRAM.h	/^class TLDRAM$/;"	c
TLDRAM_1066E	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_1066E, TLDRAM_1066F, TLDRAM_1066G,$/;"	m	class:TLDRAM::Speed
TLDRAM_1066F	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_1066E, TLDRAM_1066F, TLDRAM_1066G,$/;"	m	class:TLDRAM::Speed
TLDRAM_1066G	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_1066E, TLDRAM_1066F, TLDRAM_1066G,$/;"	m	class:TLDRAM::Speed
TLDRAM_1333G	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_1333G, TLDRAM_1333H,$/;"	m	class:TLDRAM::Speed
TLDRAM_1333H	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_1333G, TLDRAM_1333H,$/;"	m	class:TLDRAM::Speed
TLDRAM_1600H	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_1600H, TLDRAM_1600J, TLDRAM_1600K,$/;"	m	class:TLDRAM::Speed
TLDRAM_1600J	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_1600H, TLDRAM_1600J, TLDRAM_1600K,$/;"	m	class:TLDRAM::Speed
TLDRAM_1600K	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_1600H, TLDRAM_1600J, TLDRAM_1600K,$/;"	m	class:TLDRAM::Speed
TLDRAM_1866K	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_1866K, TLDRAM_1866L,$/;"	m	class:TLDRAM::Speed
TLDRAM_1866L	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_1866K, TLDRAM_1866L,$/;"	m	class:TLDRAM::Speed
TLDRAM_1Gb_x16	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_1Gb_x4,   TLDRAM_1Gb_x8,   TLDRAM_1Gb_x16,$/;"	m	class:TLDRAM::Org
TLDRAM_1Gb_x4	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_1Gb_x4,   TLDRAM_1Gb_x8,   TLDRAM_1Gb_x16,$/;"	m	class:TLDRAM::Org
TLDRAM_1Gb_x8	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_1Gb_x4,   TLDRAM_1Gb_x8,   TLDRAM_1Gb_x16,$/;"	m	class:TLDRAM::Org
TLDRAM_2133L	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_2133L, TLDRAM_2133M,$/;"	m	class:TLDRAM::Speed
TLDRAM_2133M	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_2133L, TLDRAM_2133M,$/;"	m	class:TLDRAM::Speed
TLDRAM_2Gb_x16	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_2Gb_x4,   TLDRAM_2Gb_x8,   TLDRAM_2Gb_x16,$/;"	m	class:TLDRAM::Org
TLDRAM_2Gb_x4	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_2Gb_x4,   TLDRAM_2Gb_x8,   TLDRAM_2Gb_x16,$/;"	m	class:TLDRAM::Org
TLDRAM_2Gb_x8	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_2Gb_x4,   TLDRAM_2Gb_x8,   TLDRAM_2Gb_x16,$/;"	m	class:TLDRAM::Org
TLDRAM_4Gb_x16	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_4Gb_x4,   TLDRAM_4Gb_x8,   TLDRAM_4Gb_x16,$/;"	m	class:TLDRAM::Org
TLDRAM_4Gb_x4	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_4Gb_x4,   TLDRAM_4Gb_x8,   TLDRAM_4Gb_x16,$/;"	m	class:TLDRAM::Org
TLDRAM_4Gb_x8	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_4Gb_x4,   TLDRAM_4Gb_x8,   TLDRAM_4Gb_x16,$/;"	m	class:TLDRAM::Org
TLDRAM_512Mb_x16	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_512Mb_x4, TLDRAM_512Mb_x8, TLDRAM_512Mb_x16,$/;"	m	class:TLDRAM::Org
TLDRAM_512Mb_x4	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_512Mb_x4, TLDRAM_512Mb_x8, TLDRAM_512Mb_x16,$/;"	m	class:TLDRAM::Org
TLDRAM_512Mb_x8	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_512Mb_x4, TLDRAM_512Mb_x8, TLDRAM_512Mb_x16,$/;"	m	class:TLDRAM::Org
TLDRAM_800D	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_800D,  TLDRAM_800E,$/;"	m	class:TLDRAM::Speed
TLDRAM_800E	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_800D,  TLDRAM_800E,$/;"	m	class:TLDRAM::Speed
TLDRAM_8Gb_x16	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_8Gb_x4,   TLDRAM_8Gb_x8,   TLDRAM_8Gb_x16,$/;"	m	class:TLDRAM::Org
TLDRAM_8Gb_x4	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_8Gb_x4,   TLDRAM_8Gb_x8,   TLDRAM_8Gb_x16,$/;"	m	class:TLDRAM::Org
TLDRAM_8Gb_x8	src/ramulator_sim/TLDRAM.h	/^        TLDRAM_8Gb_x4,   TLDRAM_8Gb_x8,   TLDRAM_8Gb_x16,$/;"	m	class:TLDRAM::Org
TOTAL_LOCAL_MEM	src/abstract_hardware_model.h	227;"	d
TOTAL_LOCAL_MEM_PER_SM	src/abstract_hardware_model.h	225;"	d
TOTAL_SHARED_MEM	src/abstract_hardware_model.h	226;"	d
TOT_INST	src/gpuwattch/XML_Parse.h	/^   TOT_INST=0,$/;"	e	enum:perf_count_t
TO_OPTION	build/src/cuda-sim/ptx.tab.c	/^    TO_OPTION = 402,$/;"	e	enum:yytokentype	file:
TO_OPTION	build/src/cuda-sim/ptx.tab.h	/^    TO_OPTION = 402,$/;"	e	enum:yytokentype
TRUE	src/gpuwattch/xmlParser.h	183;"	d
TS_TUP	src/trace.cc	35;"	d	file:
TS_TUP	src/trace.cc	39;"	d	file:
TS_TUP	src/trace.h	40;"	d
TS_TUP	src/trace.h	44;"	d
TS_TUP_BEGIN	src/trace.cc	34;"	d	file:
TS_TUP_BEGIN	src/trace.cc	38;"	d	file:
TS_TUP_BEGIN	src/trace.h	39;"	d
TS_TUP_BEGIN	src/trace.h	43;"	d
TS_TUP_END	src/trace.cc	36;"	d	file:
TS_TUP_END	src/trace.cc	40;"	d	file:
TS_TUP_END	src/trace.h	41;"	d
TS_TUP_END	src/trace.h	45;"	d
TT	src/intersim/rng.cpp	51;"	d	file:
TT	src/intersim/rng_double.cpp	50;"	d	file:
TT	src/intersim2/rng-double.c	49;"	d	file:
TT	src/intersim2/rng.c	50;"	d	file:
T_MEM	src/gpgpu-sim/stats.h	/^   T_MEM,$/;"	e	enum:mem_stage_access_type
TakeBuffer	src/intersim/buffer_state.cpp	/^void BufferState::TakeBuffer( int vc )$/;"	f	class:BufferState
TakeBuffer	src/intersim2/buffer_state.cpp	/^void BufferState::BufferPolicy::TakeBuffer(int vc) {$/;"	f	class:BufferState::BufferPolicy
TakeBuffer	src/intersim2/buffer_state.cpp	/^void BufferState::DynamicLimitedSharedBufferPolicy::TakeBuffer(int vc)$/;"	f	class:BufferState::DynamicLimitedSharedBufferPolicy
TakeBuffer	src/intersim2/buffer_state.cpp	/^void BufferState::LimitedSharedBufferPolicy::TakeBuffer(int vc)$/;"	f	class:BufferState::LimitedSharedBufferPolicy
TakeBuffer	src/intersim2/buffer_state.cpp	/^void BufferState::ShiftingDynamicLimitedSharedBufferPolicy::TakeBuffer(int vc)$/;"	f	class:BufferState::ShiftingDynamicLimitedSharedBufferPolicy
TakeBuffer	src/intersim2/buffer_state.cpp	/^void BufferState::TakeBuffer( int vc, int tag )$/;"	f	class:BufferState
Taper64TrafficPattern	src/intersim2/traffic.cpp	/^Taper64TrafficPattern::Taper64TrafficPattern(int nodes)$/;"	f	class:Taper64TrafficPattern
Taper64TrafficPattern	src/intersim2/traffic.hpp	/^class Taper64TrafficPattern : public RandomTrafficPattern {$/;"	c
TechnologyParameter	src/gpuwattch/cacti/parameter.h	/^class TechnologyParameter$/;"	c
Temp	src/ramulator_sim/ALDRAM.h	/^    enum class Temp : int$/;"	c	class:ALDRAM
The event-driven router	src/intersim/doc/manual.tex	/^\\end{opt_list}$/;"	b
The input-queued router	src/intersim/doc/manual.tex	/^\\end{opt_list}$/;"	b
Tick	src/ramulator_sim/StatType.h	/^typedef unsigned long long Tick;$/;"	t	namespace:Stats_Ram
TimedModule	src/intersim2/timed_module.hpp	/^  TimedModule(Module * parent, string const & name) : Module(parent, name) {}$/;"	f	class:TimedModule
TimedModule	src/intersim2/timed_module.hpp	/^class TimedModule : public Module {$/;"	c
Timeout	src/ramulator_sim/Scheduler.h	/^        Closed, Opened, Timeout, MAX$/;"	m	class:RowPolicy::Type
TimingEntry	src/ramulator_sim/ALDRAM.h	/^    struct TimingEntry$/;"	s	class:ALDRAM
TimingEntry	src/ramulator_sim/DDR3.h	/^    struct TimingEntry$/;"	s	class:DDR3
TimingEntry	src/ramulator_sim/DDR4.h	/^    struct TimingEntry$/;"	s	class:DDR4
TimingEntry	src/ramulator_sim/DSARP.h	/^    struct TimingEntry$/;"	s	class:DSARP
TimingEntry	src/ramulator_sim/GDDR5.h	/^    struct TimingEntry$/;"	s	class:GDDR5
TimingEntry	src/ramulator_sim/HBM.h	/^    struct TimingEntry$/;"	s	class:HBM
TimingEntry	src/ramulator_sim/LPDDR3.h	/^    struct TimingEntry$/;"	s	class:LPDDR3
TimingEntry	src/ramulator_sim/LPDDR4.h	/^    struct TimingEntry$/;"	s	class:LPDDR4
TimingEntry	src/ramulator_sim/SALP.h	/^    struct TimingEntry$/;"	s	class:SALP
TimingEntry	src/ramulator_sim/TLDRAM.h	/^    struct TimingEntry$/;"	s	class:TLDRAM
TimingEntry	src/ramulator_sim/WideIO.h	/^    struct TimingEntry$/;"	s	class:WideIO
TimingEntry	src/ramulator_sim/WideIO2.h	/^    struct TimingEntry$/;"	s	class:WideIO2
Tmp_ids	src/cuda-sim/ptx_ir.h	/^   std::set<int> Tmp_ids;$/;"	m	struct:basic_block_t
ToXMLStringTool	src/gpuwattch/xmlParser.h	/^    ToXMLStringTool(): buf(NULL),buflen(0){}$/;"	f	struct:ToXMLStringTool
ToXMLStringTool	src/gpuwattch/xmlParser.h	/^typedef struct XMLDLLENTRY ToXMLStringTool$/;"	s
ToXMLStringTool	src/gpuwattch/xmlParser.h	/^} ToXMLStringTool;$/;"	t	typeref:struct:ToXMLStringTool
TopPacket	src/intersim2/interconnect_interface.cpp	/^void* InterconnectInterface::_BoundaryBufferItem::TopPacket() const$/;"	f	class:InterconnectInterface::_BoundaryBufferItem
TornadoTrafficPattern	src/intersim2/traffic.cpp	/^TornadoTrafficPattern::TornadoTrafficPattern(int nodes, int k, int n, int xr)$/;"	f	class:TornadoTrafficPattern
TornadoTrafficPattern	src/intersim2/traffic.hpp	/^class TornadoTrafficPattern : public DigitPermutationTrafficPattern {$/;"	c
Trace	src/trace.cc	/^namespace Trace {$/;"	n	file:
Trace	src/trace.h	/^namespace Trace {$/;"	n
Traffic	src/intersim/doc/manual.tex	/^\\texttt{alloc\\_iters} parameter.$/;"	u
TrafficManager	src/intersim/trafficmanager.cpp	/^TrafficManager::TrafficManager( const Configuration &config, Network *net , int u_id)$/;"	f	class:TrafficManager
TrafficManager	src/intersim/trafficmanager.hpp	/^class TrafficManager : public Module {$/;"	c
TrafficManager	src/intersim2/trafficmanager.cpp	/^TrafficManager::TrafficManager( const Configuration &config, const vector<Network *> & net )$/;"	f	class:TrafficManager
TrafficManager	src/intersim2/trafficmanager.hpp	/^class TrafficManager : public Module {$/;"	c
TrafficPattern	src/intersim2/traffic.cpp	/^TrafficPattern::TrafficPattern(int nodes)$/;"	f	class:TrafficPattern
TrafficPattern	src/intersim2/traffic.hpp	/^class TrafficPattern {$/;"	c
Transfer2BoundaryBuffer	src/intersim2/interconnect_interface.cpp	/^void InterconnectInterface::Transfer2BoundaryBuffer(int subnet, int output)$/;"	f	class:InterconnectInterface
Translation	src/ramulator_sim/Memory.h	/^    enum class Translation {$/;"	c	class:Memory
Transmission	src/gpuwattch/cacti/cacti_interface.h	/^    Transmission \/* tranmission lines with high area overhead *\/,$/;"	e	enum:Wire_type
TransposeTrafficPattern	src/intersim2/traffic.cpp	/^TransposeTrafficPattern::TransposeTrafficPattern(int nodes)$/;"	f	class:TransposeTrafficPattern
TransposeTrafficPattern	src/intersim2/traffic.hpp	/^class TransposeTrafficPattern : public BitPermutationTrafficPattern {$/;"	c
Tree4	src/intersim2/networks/tree4.cpp	/^Tree4::Tree4( const Configuration& config, const string & name )$/;"	f	class:Tree4
Tree4	src/intersim2/networks/tree4.hpp	/^class Tree4 : public Network {$/;"	c
TreeArbiter	src/intersim2/arbiters/tree_arb.cpp	/^TreeArbiter::TreeArbiter( Module *parent, const string &name,$/;"	f	class:TreeArbiter
TreeArbiter	src/intersim2/arbiters/tree_arb.hpp	/^class TreeArbiter : public Arbiter {$/;"	c
TriS1	src/gpuwattch/cacti/arbiter.h	/^    double TriS1, TriS2;$/;"	m	class:MCPAT_Arbiter
TriS1	src/gpuwattch/cacti/crossbar.h	/^    double TriS1, TriS2;$/;"	m	class:Crossbar
TriS1	src/gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router
TriS2	src/gpuwattch/cacti/arbiter.h	/^    double TriS1, TriS2;$/;"	m	class:MCPAT_Arbiter
TriS2	src/gpuwattch/cacti/crossbar.h	/^    double TriS1, TriS2;$/;"	m	class:Crossbar
TriS2	src/gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router
Tx	src/cuda-sim/ptx_ir.h	/^   unsigned int Tx,Ty; \/\/tiling factor dimensions of layout of texels per 64B cache block$/;"	m	struct:textureInfo
Tx_numbits	src/cuda-sim/ptx_ir.h	/^   unsigned int Tx_numbits,Ty_numbits; \/\/log2(T)$/;"	m	struct:textureInfo
Ty	src/cuda-sim/ptx_ir.h	/^   unsigned int Tx,Ty; \/\/tiling factor dimensions of layout of texels per 64B cache block$/;"	m	struct:textureInfo
Ty_numbits	src/cuda-sim/ptx_ir.h	/^   unsigned int Tx_numbits,Ty_numbits; \/\/log2(T)$/;"	m	struct:textureInfo
Type	src/ramulator_sim/DSARP.h	/^    enum class Type : int$/;"	c	class:DSARP
Type	src/ramulator_sim/Memory.h	/^    enum class Type {$/;"	c	class:Memory
Type	src/ramulator_sim/Request.h	/^    enum class Type$/;"	c	class:Request
Type	src/ramulator_sim/SALP.h	/^    enum class Type : int$/;"	c	class:SALP
Type	src/ramulator_sim/Scheduler.h	/^    enum class Type {$/;"	c	class:RowPolicy
Type	src/ramulator_sim/Scheduler.h	/^    enum class Type {$/;"	c	class:Scheduler
U16_TYPE	build/src/cuda-sim/ptx.tab.c	/^    U16_TYPE = 303,$/;"	e	enum:yytokentype	file:
U16_TYPE	build/src/cuda-sim/ptx.tab.h	/^    U16_TYPE = 303,$/;"	e	enum:yytokentype
U32_TYPE	build/src/cuda-sim/ptx.tab.c	/^    U32_TYPE = 304,$/;"	e	enum:yytokentype	file:
U32_TYPE	build/src/cuda-sim/ptx.tab.h	/^    U32_TYPE = 304,$/;"	e	enum:yytokentype
U64_TYPE	build/src/cuda-sim/ptx.tab.c	/^    U64_TYPE = 305,$/;"	e	enum:yytokentype	file:
U64_TYPE	build/src/cuda-sim/ptx.tab.h	/^    U64_TYPE = 305,$/;"	e	enum:yytokentype
U8_TYPE	build/src/cuda-sim/ptx.tab.c	/^    U8_TYPE = 302,$/;"	e	enum:yytokentype	file:
U8_TYPE	build/src/cuda-sim/ptx.tab.h	/^    U8_TYPE = 302,$/;"	e	enum:yytokentype
UCA	src/gpuwattch/cacti/uca.cc	/^UCA::UCA(const DynamicParameter & dyn_p)$/;"	f	class:UCA
UCA	src/gpuwattch/cacti/uca.h	/^class UCA : public Component$/;"	c
UINT16_MAX	build/src/cuda-sim/lex.ptx_.c	100;"	d	file:
UINT16_MAX	build/src/cuda-sim/lex.ptxinfo_.c	100;"	d	file:
UINT16_MAX	src/intersim2/lex.yy.c	80;"	d	file:
UINT32_MAX	build/src/cuda-sim/lex.ptx_.c	103;"	d	file:
UINT32_MAX	build/src/cuda-sim/lex.ptxinfo_.c	103;"	d	file:
UINT32_MAX	src/intersim2/lex.yy.c	83;"	d	file:
UINT8_MAX	build/src/cuda-sim/lex.ptx_.c	97;"	d	file:
UINT8_MAX	build/src/cuda-sim/lex.ptxinfo_.c	97;"	d	file:
UINT8_MAX	src/intersim2/lex.yy.c	77;"	d	file:
UNION_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    UNION_DIRECTIVE = 290,$/;"	e	enum:yytokentype	file:
UNION_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    UNION_DIRECTIVE = 290,$/;"	e	enum:yytokentype
UNI_LEAK_STACK_FACTOR	src/gpuwattch/cacti/basic_circuit.h	42;"	d
UNI_OPTION	build/src/cuda-sim/ptx.tab.c	/^    UNI_OPTION = 371,$/;"	e	enum:yytokentype	file:
UNI_OPTION	build/src/cuda-sim/ptx.tab.h	/^    UNI_OPTION = 371,$/;"	e	enum:yytokentype
UNKOWN_OP	src/abstract_hardware_model.h	/^    UNKOWN_OP,$/;"	e	enum:operation_pipeline_t
UN_OP	src/abstract_hardware_model.h	/^	UN_OP=-1,$/;"	e	enum:uarch_operand_type_t
USED	build/src/cuda-sim/ptxinfo.tab.c	/^    USED = 262,$/;"	e	enum:yytokentype	file:
USED	build/src/cuda-sim/ptxinfo.tab.h	/^    USED = 262,$/;"	e	enum:yytokentype
Uncore_device	src/gpuwattch/basic_components.h	/^	Uncore_device,$/;"	e	enum:Device_ty
UndiffCore	src/gpuwattch/logic.cc	/^UndiffCore::UndiffCore(ParseXML* XML_interface, int ithCore_, InputParameter* interface_ip_, const CoreDynParam & dyn_p_, bool exist_,  bool embedded_)$/;"	f	class:UndiffCore
UndiffCore	src/gpuwattch/logic.h	/^class UndiffCore :public Component{$/;"	c
UniformBackgroundTrafficPattern	src/intersim2/traffic.cpp	/^UniformBackgroundTrafficPattern::UniformBackgroundTrafficPattern(int nodes, vector<int> excluded_nodes)$/;"	f	class:UniformBackgroundTrafficPattern
UniformBackgroundTrafficPattern	src/intersim2/traffic.hpp	/^class UniformBackgroundTrafficPattern : public RandomTrafficPattern {$/;"	c
UniformRandomTrafficPattern	src/intersim2/traffic.cpp	/^UniformRandomTrafficPattern::UniformRandomTrafficPattern(int nodes)$/;"	f	class:UniformRandomTrafficPattern
UniformRandomTrafficPattern	src/intersim2/traffic.hpp	/^class UniformRandomTrafficPattern : public RandomTrafficPattern {$/;"	c
Update	src/intersim2/arbiters/prio_arb.cpp	/^void PriorityArbiter::Update( )$/;"	f	class:PriorityArbiter
UpdatePriority	src/intersim2/vc.cpp	/^void VC::UpdatePriority()$/;"	f	class:VC
UpdateState	src/intersim2/arbiters/matrix_arb.cpp	/^void MatrixArbiter::UpdateState() {$/;"	f	class:MatrixArbiter
UpdateState	src/intersim2/arbiters/roundrobin_arb.cpp	/^void RoundRobinArbiter::UpdateState() {$/;"	f	class:RoundRobinArbiter
UpdateState	src/intersim2/arbiters/tree_arb.cpp	/^void TreeArbiter::UpdateState() {$/;"	f	class:TreeArbiter
UpdateStats	src/intersim2/trafficmanager.cpp	/^void TrafficManager::UpdateStats() {$/;"	f	class:TrafficManager
UsedBy	src/intersim2/buffer_state.hpp	/^  inline int UsedBy(int vc = 0) const {$/;"	f	class:BufferState
UsedCredits	src/intersim2/routers/chaos_router.hpp	/^  virtual vector<int> UsedCredits() const { return vector<int>(); }$/;"	f	class:ChaosRouter
UsedCredits	src/intersim2/routers/event_router.hpp	/^  virtual vector<int> UsedCredits() const { return vector<int>(); }$/;"	f	class:EventRouter
UsedCredits	src/intersim2/routers/iq_router.cpp	/^vector<int> IQRouter::UsedCredits() const$/;"	f	class:IQRouter
V2_TYPE	build/src/cuda-sim/ptx.tab.c	/^    V2_TYPE = 320,$/;"	e	enum:yytokentype	file:
V2_TYPE	build/src/cuda-sim/ptx.tab.h	/^    V2_TYPE = 320,$/;"	e	enum:yytokentype
V3_TYPE	build/src/cuda-sim/ptx.tab.c	/^    V3_TYPE = 321,$/;"	e	enum:yytokentype	file:
V3_TYPE	build/src/cuda-sim/ptx.tab.h	/^    V3_TYPE = 321,$/;"	e	enum:yytokentype
V4_TYPE	build/src/cuda-sim/ptx.tab.c	/^    V4_TYPE = 322,$/;"	e	enum:yytokentype	file:
V4_TYPE	build/src/cuda-sim/ptx.tab.h	/^    V4_TYPE = 322,$/;"	e	enum:yytokentype
VALID	src/gpgpu-sim/gpu-cache.h	/^    VALID,$/;"	e	enum:cache_block_state
VAULT	src/gpgpu-sim/addrdec.h	/^      VAULT = 1,$/;"	e	enum:linear_to_raw_address_translation::__anon29
VBITSENSEMIN	src/gpuwattch/cacti/const.h	160;"	d
VC	src/intersim/vc.cpp	/^VC::VC( const Configuration& config, int outputs, $/;"	f	class:VC
VC	src/intersim/vc.hpp	/^    VC() : Module() {}$/;"	f	class:VC
VC	src/intersim/vc.hpp	/^class VC : public Module {$/;"	c
VC	src/intersim2/vc.cpp	/^VC::VC( const Configuration& config, int outputs, $/;"	f	class:VC
VC	src/intersim2/vc.hpp	/^class VC : public Module {$/;"	c
VCSTATE	src/intersim2/vc.cpp	/^const char * const VC::VCSTATE[] = {"idle",$/;"	m	class:VC	file:
VCSTATE	src/intersim2/vc.hpp	/^  static const char * const VCSTATE[];$/;"	m	class:VC
VC_COUNT	src/gpuwattch/cacti/highradix.h	/^    double VC_COUNT;$/;"	m	class:HighRadix
VCounter	src/ramulator_sim/StatType.h	/^typedef std::vector<Counter> VCounter;$/;"	t	namespace:Stats_Ram
VDD_STORAGE_LOSS_FRACTION_WORST	src/gpuwattch/cacti/const.h	/^const double VDD_STORAGE_LOSS_FRACTION_WORST = 0.125;$/;"	v
VERSION_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    VERSION_DIRECTIVE = 291,$/;"	e	enum:yytokentype	file:
VERSION_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    VERSION_DIRECTIVE = 291,$/;"	e	enum:yytokentype
VERSION_H_	src/gpuwattch/version.h	33;"	d
VER_MAJOR	src/gpuwattch/version.h	35;"	d
VER_MINOR	src/gpuwattch/version.h	36;"	d
VER_UPDATE	src/gpuwattch/version.h	38;"	d
VISIBLE_DIRECTIVE	build/src/cuda-sim/ptx.tab.c	/^    VISIBLE_DIRECTIVE = 293,$/;"	e	enum:yytokentype	file:
VISIBLE_DIRECTIVE	build/src/cuda-sim/ptx.tab.h	/^    VISIBLE_DIRECTIVE = 293,$/;"	e	enum:yytokentype
VISUALIZER_H_INCLUDED	src/gpgpu-sim/visualizer.h	29;"	d
VOL_SWING	src/gpuwattch/cacti/wire.cc	509;"	d	file:
VPATH	src/gpuwattch/mcpat.mk	/^VPATH = cacti$/;"	m
VPATH	src/gpuwattch/mcpatXeonCore.mk	/^VPATH = cacti$/;"	m
VResult	src/ramulator_sim/StatType.h	/^typedef std::vector<Result> VResult;$/;"	t	namespace:Stats_Ram
VSINV	src/gpuwattch/cacti/const.h	85;"	d
VTHCOMPINV	src/gpuwattch/cacti/const.h	86;"	d
VTHEVALINV	src/gpuwattch/cacti/const.h	88;"	d
VTHFA1	src/gpuwattch/cacti/const.h	79;"	d
VTHFA2	src/gpuwattch/cacti/const.h	80;"	d
VTHFA3	src/gpuwattch/cacti/const.h	81;"	d
VTHFA4	src/gpuwattch/cacti/const.h	82;"	d
VTHFA5	src/gpuwattch/cacti/const.h	83;"	d
VTHFA6	src/gpuwattch/cacti/const.h	84;"	d
VTHMUXNAND	src/gpuwattch/cacti/const.h	87;"	d
VTHSENSEEXTDRV	src/gpuwattch/cacti/const.h	89;"	d
V_b_sense	src/gpuwattch/cacti/parameter.h	/^    double V_b_sense;$/;"	m	class:DynamicParameter
Variance	src/intersim2/stats.cpp	/^double Stats::Variance( ) const$/;"	f	class:Stats
Vbitpre	src/gpuwattch/cacti/parameter.h	/^    double Vbitpre;$/;"	m	class:TechnologyParameter::MemoryType
Vdd	src/gpuwattch/cacti/arbiter.h	/^    double min_w_pmos, Vdd;$/;"	m	class:MCPAT_Arbiter
Vdd	src/gpuwattch/cacti/crossbar.h	/^    double min_w_pmos, Vdd;$/;"	m	class:Crossbar
Vdd	src/gpuwattch/cacti/parameter.h	/^    double Vdd;$/;"	m	class:TechnologyParameter::DeviceType
Vdd	src/gpuwattch/cacti/router.h	/^    double Vdd;$/;"	m	class:MCPAT_Router
Vdd	src/intersim2/power/power_module.hpp	/^  double Vdd  ;$/;"	m	class:Power_Module
Vector	src/ramulator_sim/StatType.h	/^class Vector: public VectorBase<Vector, Scalar> {$/;"	c	namespace:Stats_Ram
VectorBase	src/ramulator_sim/StatType.h	/^class VectorBase: public Stat<Derived> {$/;"	c	namespace:Stats_Ram
VectorStat	src/ramulator_sim/Statistics.h	/^class VectorStat : public VectorStatBase<Stats_Ram::Vector, Stats_Ram::Scalar> {$/;"	c
VectorStatBase	src/ramulator_sim/Statistics.h	/^class VectorStatBase : public StatBaseVec<StatType> { \/\/ wrapper for Stats::VectorBase$/;"	c
Vth	src/gpuwattch/cacti/parameter.h	/^    double Vth;$/;"	m	class:TechnologyParameter::DeviceType
WARNING	build/src/cuda-sim/ptxinfo.tab.c	/^    WARNING = 277,$/;"	e	enum:yytokentype	file:
WARNING	build/src/cuda-sim/ptxinfo.tab.h	/^    WARNING = 277,$/;"	e	enum:yytokentype
WARPID_REG	src/cuda-sim/opcodes.h	/^   WARPID_REG,$/;"	e	enum:special_regs
WARPSZ_REG	src/cuda-sim/opcodes.h	/^   WARPSZ_REG$/;"	e	enum:special_regs
WARP_CONTEXT_H_	common/warp_context.h	2;"	d
WARP_PER_CTA_MAX	src/gpgpu-sim/shader.h	/^const unsigned WARP_PER_CTA_MAX = 384;$/;"	v
WB_CACHE_RSRV_FAIL	src/gpgpu-sim/stats.h	/^   WB_CACHE_RSRV_FAIL,$/;"	e	enum:mem_stage_stall_type
WB_ICNT_RC_FAIL	src/gpgpu-sim/stats.h	/^   WB_ICNT_RC_FAIL,$/;"	e	enum:mem_stage_stall_type
WB_OPTION	build/src/cuda-sim/ptx.tab.c	/^    WB_OPTION = 408,$/;"	e	enum:yytokentype	file:
WB_OPTION	build/src/cuda-sim/ptx.tab.h	/^    WB_OPTION = 408,$/;"	e	enum:yytokentype
WIDE_OPTION	build/src/cuda-sim/ptx.tab.c	/^    WIDE_OPTION = 349,$/;"	e	enum:yytokentype	file:
WIDE_OPTION	build/src/cuda-sim/ptx.tab.h	/^    WIDE_OPTION = 349,$/;"	e	enum:yytokentype
WIN32_LEAN_AND_MEAN	src/gpuwattch/xmlParser.cc	92;"	d	file:
WIRE_TYPES	src/gpuwattch/cacti/const.h	72;"	d
WL	src/gpgpu-sim/gpu-sim.h	/^   unsigned WL;     \/\/WRITE latency$/;"	m	struct:memory_config
WNANDn	src/gpuwattch/logic.h	/^	double WNANDn ;$/;"	m	class:Pipeline
WNANDp	src/gpuwattch/logic.h	/^	double WNANDp;$/;"	m	class:Pipeline
WNORn	src/gpuwattch/logic.h	/^	double WNORn, WNORp, Wevalinvp, Wevalinvn, Wcompn, Wcompp, Wcomppreequ;$/;"	m	class:dep_resource_conflict_check
WNORp	src/gpuwattch/logic.h	/^	double WNORn, WNORp, Wevalinvp, Wevalinvn, Wcompn, Wcompp, Wcomppreequ;$/;"	m	class:dep_resource_conflict_check
WORD_SIZE	src/abstract_hardware_model.h	/^    static const address_type WORD_SIZE=4;$/;"	m	struct:core_config
WR	src/ramulator_sim/ALDRAM.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:ALDRAM::Command
WR	src/ramulator_sim/DDR3.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:DDR3::Command
WR	src/ramulator_sim/DDR4.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:DDR4::Command
WR	src/ramulator_sim/DSARP.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:DSARP::Command
WR	src/ramulator_sim/GDDR5.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:GDDR5::Command
WR	src/ramulator_sim/HBM.h	/^        RD,  WR,    RDA, WRA,$/;"	m	class:HBM::Command
WR	src/ramulator_sim/LPDDR3.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:LPDDR3::Command
WR	src/ramulator_sim/LPDDR4.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:LPDDR4::Command
WR	src/ramulator_sim/SALP.h	/^        RD,  WR,    RDA, WRA, \/\/ auto-precharge: bank(SALP-1), subarray(SALP-2, MASA)$/;"	m	class:SALP::Command
WR	src/ramulator_sim/TLDRAM.h	/^        RD, WR,$/;"	m	class:TLDRAM::Command
WR	src/ramulator_sim/WideIO.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:WideIO::Command
WR	src/ramulator_sim/WideIO2.h	/^        RD,  WR,    RDA,  WRA,$/;"	m	class:WideIO2::Command
WRA	src/ramulator_sim/ALDRAM.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:ALDRAM::Command
WRA	src/ramulator_sim/DDR3.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:DDR3::Command
WRA	src/ramulator_sim/DDR4.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:DDR4::Command
WRA	src/ramulator_sim/DSARP.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:DSARP::Command
WRA	src/ramulator_sim/GDDR5.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:GDDR5::Command
WRA	src/ramulator_sim/HBM.h	/^        RD,  WR,    RDA, WRA,$/;"	m	class:HBM::Command
WRA	src/ramulator_sim/LPDDR3.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:LPDDR3::Command
WRA	src/ramulator_sim/LPDDR4.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:LPDDR4::Command
WRA	src/ramulator_sim/SALP.h	/^        RD,  WR,    RDA, WRA, \/\/ auto-precharge: bank(SALP-1), subarray(SALP-2, MASA)$/;"	m	class:SALP::Command
WRA	src/ramulator_sim/WideIO.h	/^        RD,  WR,  RDA,  WRA,$/;"	m	class:WideIO::Command
WRA	src/ramulator_sim/WideIO2.h	/^        RD,  WR,    RDA,  WRA,$/;"	m	class:WideIO2::Command
WRITE	src/ramulator_sim/Request.h	/^        WRITE,$/;"	m	class:Request::Type
WRITE_ACK	src/gpgpu-sim/mem_fetch.h	/^   WRITE_ACK$/;"	e	enum:mf_type
WRITE_ALLOC	src/gpgpu-sim/shader.h	/^      WRITE_ALLOC,$/;"	e	enum:opndcoll_rfu_t::alloc_t
WRITE_ALLOCATE	src/gpgpu-sim/gpu-cache.h	/^	WRITE_ALLOCATE$/;"	e	enum:write_allocate_policy_t
WRITE_BACK	src/gpgpu-sim/gpu-cache.h	/^    WRITE_BACK,$/;"	e	enum:write_policy_t
WRITE_BACK_REQUEST_SENT	src/gpgpu-sim/gpu-cache.h	/^    WRITE_BACK_REQUEST_SENT,$/;"	e	enum:cache_event
WRITE_EVICT	src/gpgpu-sim/gpu-cache.h	/^    WRITE_EVICT,$/;"	e	enum:write_policy_t
WRITE_MASK_SIZE	src/gpgpu-sim/shader.h	92;"	d
WRITE_PACKET_SIZE	src/gpgpu-sim/shader.h	90;"	d
WRITE_REPLY	src/intersim2/flit.hpp	/^		  WRITE_REPLY   = 3,$/;"	e	enum:Flit::FlitType
WRITE_REQUEST	src/gpgpu-sim/mem_fetch.h	/^   WRITE_REQUEST,$/;"	e	enum:mf_type
WRITE_REQUEST	src/intersim2/flit.hpp	/^		  WRITE_REQUEST = 2,$/;"	e	enum:Flit::FlitType
WRITE_REQUEST_SENT	src/gpgpu-sim/gpu-cache.h	/^    WRITE_REQUEST_SENT$/;"	e	enum:cache_event
WRITE_THROUGH	src/gpgpu-sim/gpu-cache.h	/^    WRITE_THROUGH,$/;"	e	enum:write_policy_t
WT_OPTION	build/src/cuda-sim/ptx.tab.c	/^    WT_OPTION = 409$/;"	e	enum:yytokentype	file:
WT_OPTION	build/src/cuda-sim/ptx.tab.h	/^    WT_OPTION = 409$/;"	e	enum:yytokentype
W_DFQD1	src/intersim2/power/power_module.hpp	/^  double W_DFQD1;$/;"	m	class:Power_Module
W_INVD2	src/intersim2/power/power_module.hpp	/^  double W_INVD2;$/;"	m	class:Power_Module
W_ND2D1	src/intersim2/power/power_module.hpp	/^  double W_ND2D1;$/;"	m	class:Power_Module
W_SRAM	src/intersim2/power/power_module.hpp	/^  double W_SRAM;$/;"	m	class:Power_Module
Wavefront	src/intersim/wavefront.cpp	/^Wavefront::Wavefront( const Configuration &config,$/;"	f	class:Wavefront
Wavefront	src/intersim/wavefront.hpp	/^class Wavefront : public DenseAllocator {$/;"	c
Wavefront	src/intersim2/allocators/wavefront.cpp	/^Wavefront::Wavefront( Module *parent, const string& name,$/;"	f	class:Wavefront
Wavefront	src/intersim2/allocators/wavefront.hpp	/^class Wavefront : public DenseAllocator {$/;"	c
Waveguide	src/gpuwattch/cacti/highradix.h	/^class Waveguide : public Component$/;"	c
Wcompn	src/gpuwattch/logic.h	/^	double WNORn, WNORp, Wevalinvp, Wevalinvn, Wcompn, Wcompp, Wcomppreequ;$/;"	m	class:dep_resource_conflict_check
Wcompp	src/gpuwattch/logic.h	/^	double WNORn, WNORp, Wevalinvp, Wevalinvn, Wcompn, Wcompp, Wcomppreequ;$/;"	m	class:dep_resource_conflict_check
Wcomppreequ	src/gpuwattch/logic.h	/^	double WNORn, WNORp, Wevalinvp, Wevalinvn, Wcompn, Wcompp, Wcomppreequ;$/;"	m	class:dep_resource_conflict_check
WdecNANDn	src/gpuwattch/logic.h	/^	double WdecNANDn;$/;"	m	class:DFFCell
WdecNANDp	src/gpuwattch/logic.h	/^	double WdecNANDp;$/;"	m	class:DFFCell
Wevalinvn	src/gpuwattch/logic.h	/^	double WNORn, WNORp, Wevalinvp, Wevalinvn, Wcompn, Wcompp, Wcomppreequ;$/;"	m	class:dep_resource_conflict_check
Wevalinvp	src/gpuwattch/logic.h	/^	double WNORn, WNORp, Wevalinvp, Wevalinvn, Wcompn, Wcompp, Wcomppreequ;$/;"	m	class:dep_resource_conflict_check
WideIO	src/ramulator_sim/WideIO.cpp	/^WideIO::WideIO(Org org, Speed speed) :$/;"	f	class:WideIO
WideIO	src/ramulator_sim/WideIO.cpp	/^WideIO::WideIO(const string& org_str, const string& speed_str) :$/;"	f	class:WideIO
WideIO	src/ramulator_sim/WideIO.h	/^class WideIO$/;"	c
WideIO2	src/ramulator_sim/WideIO2.cpp	/^WideIO2::WideIO2(Org org, Speed speed, int channels) :$/;"	f	class:WideIO2
WideIO2	src/ramulator_sim/WideIO2.cpp	/^WideIO2::WideIO2(const string& org_str, const string& speed_str, int channels) :$/;"	f	class:WideIO2
WideIO2	src/ramulator_sim/WideIO2.h	/^class WideIO2$/;"	c
WideIO2_1066	src/ramulator_sim/WideIO2.h	/^        WideIO2_1066,$/;"	m	class:WideIO2::Speed
WideIO2_800	src/ramulator_sim/WideIO2.h	/^        WideIO2_800,$/;"	m	class:WideIO2::Speed
WideIO2_8Gb	src/ramulator_sim/WideIO2.h	/^        WideIO2_8Gb,$/;"	m	class:WideIO2::Org
WideIO_1Gb	src/ramulator_sim/WideIO.h	/^        WideIO_1Gb,$/;"	m	class:WideIO::Org
WideIO_200	src/ramulator_sim/WideIO.h	/^        WideIO_200,$/;"	m	class:WideIO::Speed
WideIO_266	src/ramulator_sim/WideIO.h	/^        WideIO_266,$/;"	m	class:WideIO::Speed
WideIO_2Gb	src/ramulator_sim/WideIO.h	/^        WideIO_2Gb,$/;"	m	class:WideIO::Org
WideIO_4Gb	src/ramulator_sim/WideIO.h	/^        WideIO_4Gb,$/;"	m	class:WideIO::Org
WideIO_8Gb	src/ramulator_sim/WideIO.h	/^        WideIO_8Gb,$/;"	m	class:WideIO::Org
Wire	src/gpuwattch/cacti/wire.cc	/^Wire::Wire($/;"	f	class:Wire
Wire	src/gpuwattch/cacti/wire.cc	/^Wire::Wire(double w_s, double s_s, enum Wire_placement wp, double resis, TechnologyParameter::DeviceType *dt)$/;"	f	class:Wire
Wire	src/gpuwattch/cacti/wire.h	/^class Wire : public Component$/;"	c
Wire_placement	src/gpuwattch/cacti/basic_circuit.h	/^enum Wire_placement {$/;"	g
Wire_type	src/gpuwattch/cacti/cacti_interface.h	/^enum Wire_type$/;"	g
WmuxdrvNANDn	src/gpuwattch/cacti/const.h	/^const double WmuxdrvNANDn = 0;$/;"	v
WmuxdrvNANDp	src/gpuwattch/cacti/const.h	/^const double WmuxdrvNANDp = 0;$/;"	v
Woutdrivern	src/gpuwattch/arch_const.h	/^const double Woutdrivern	=60*0.09;\/\/(48.0 * LSCALE)$/;"	v
Woutdriverp	src/gpuwattch/arch_const.h	/^const double Woutdriverp	=100 * 0.09;\/\/(80.0 * LSCALE)$/;"	v
Woutdrvnandn	src/gpuwattch/arch_const.h	/^const double Woutdrvnandn	=30 *0.09;\/\/(24.0 * LSCALE)$/;"	v
Woutdrvnandp	src/gpuwattch/arch_const.h	/^const double Woutdrvnandp	=12.5 *0.09;\/\/(10.0 * LSCALE)$/;"	v
Woutdrvnorn	src/gpuwattch/arch_const.h	/^const double Woutdrvnorn	=7.5*0.09;\/\/(6.0 * LSCALE)$/;"	v
Woutdrvnorp	src/gpuwattch/arch_const.h	/^const double Woutdrvnorp  =50 * 0.09;\/\/	(40.0 * LSCALE)$/;"	v
Write	src/intersim/pipefifo.hpp	/^template<class T> void PipelineFIFO<T>::Write( T* val, int lane )$/;"	f	class:PipelineFIFO
Write	src/intersim2/pipefifo.hpp	/^template<class T> void PipelineFIFO<T>::Write( T* val, int lane )$/;"	f	class:PipelineFIFO
WriteAll	src/intersim/pipefifo.hpp	/^template<class T> void PipelineFIFO<T>::WriteAll( T* val )$/;"	f	class:PipelineFIFO
WriteAll	src/intersim2/pipefifo.hpp	/^template<class T> void PipelineFIFO<T>::WriteAll( T* val )$/;"	f	class:PipelineFIFO
WriteCredit	src/intersim/network.cpp	/^void Network::WriteCredit( Credit *c, int dest )$/;"	f	class:Network
WriteCredit	src/intersim2/networks/network.cpp	/^void Network::WriteCredit( Credit *c, int dest )$/;"	f	class:Network
WriteFile	src/intersim2/config_utils.cpp	/^void Configuration::WriteFile(string const & filename) {$/;"	f	class:Configuration
WriteFlit	src/intersim/network.cpp	/^void Network::WriteFlit( Flit *f, int source )$/;"	f	class:Network
WriteFlit	src/intersim2/networks/network.cpp	/^void Network::WriteFlit( Flit *f, int source )$/;"	f	class:Network
WriteMatlabFile	src/intersim2/config_utils.cpp	/^void Configuration::WriteMatlabFile(ostream * config_out) const {$/;"	f	class:Configuration
WriteOutBuffer	src/intersim2/interconnect_interface.cpp	/^void InterconnectInterface::WriteOutBuffer(int subnet, int output_icntID, Flit*  flit )$/;"	f	class:InterconnectInterface
WriteOutputs	src/intersim/event_router.cpp	/^void EventRouter::WriteOutputs( )$/;"	f	class:EventRouter
WriteOutputs	src/intersim/iq_router.cpp	/^void IQRouter::WriteOutputs( )$/;"	f	class:IQRouter
WriteOutputs	src/intersim/network.cpp	/^void Network::WriteOutputs( )$/;"	f	class:Network
WriteOutputs	src/intersim2/channel.hpp	/^void Channel<T>::WriteOutputs() {$/;"	f	class:Channel
WriteOutputs	src/intersim2/flitchannel.cpp	/^void FlitChannel::WriteOutputs() {$/;"	f	class:FlitChannel
WriteOutputs	src/intersim2/networks/network.cpp	/^void Network::WriteOutputs( )$/;"	f	class:Network
WriteOutputs	src/intersim2/routers/chaos_router.cpp	/^void ChaosRouter::WriteOutputs( )$/;"	f	class:ChaosRouter
WriteOutputs	src/intersim2/routers/event_router.cpp	/^void EventRouter::WriteOutputs( )$/;"	f	class:EventRouter
WriteOutputs	src/intersim2/routers/iq_router.cpp	/^void IQRouter::WriteOutputs( )$/;"	f	class:IQRouter
WriteStats	src/intersim2/batchtrafficmanager.cpp	/^void BatchTrafficManager::WriteStats(ostream & os) const$/;"	f	class:BatchTrafficManager
WriteStats	src/intersim2/trafficmanager.cpp	/^void TrafficManager::WriteStats(ostream & os) const {$/;"	f	class:TrafficManager
Write_back	src/gpuwattch/basic_components.h	/^	Write_back$/;"	e	enum:Cache_policy
Write_through	src/gpuwattch/basic_components.h	/^	Write_through,$/;"	e	enum:Cache_policy
XML	src/gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:BranchPredictor
XML	src/gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:Core
XML	src/gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:EXECU
XML	src/gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:InstFetchU
XML	src/gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:LoadStoreU
XML	src/gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:MemManU
XML	src/gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:RENAMINGU
XML	src/gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:RegFU
XML	src/gpuwattch/core.h	/^	ParseXML *XML;$/;"	m	class:SchedulerU
XML	src/gpuwattch/iocontrollers.h	/^	ParseXML *XML;$/;"	m	class:FlashController
XML	src/gpuwattch/iocontrollers.h	/^	ParseXML *XML;$/;"	m	class:NIUController
XML	src/gpuwattch/iocontrollers.h	/^	ParseXML *XML;$/;"	m	class:PCIeController
XML	src/gpuwattch/logic.h	/^	ParseXML *XML;$/;"	m	class:FunctionalUnit
XML	src/gpuwattch/logic.h	/^	ParseXML *XML;$/;"	m	class:UndiffCore
XML	src/gpuwattch/memoryctrl.h	/^	ParseXML *XML;$/;"	m	class:DRAM
XML	src/gpuwattch/memoryctrl.h	/^	ParseXML *XML;$/;"	m	class:MCFrontEnd
XML	src/gpuwattch/memoryctrl.h	/^	ParseXML *XML;$/;"	m	class:MemoryController
XML	src/gpuwattch/noc.h	/^	ParseXML *XML;$/;"	m	class:NoC
XML	src/gpuwattch/processor.h	/^	ParseXML *XML;$/;"	m	class:Processor
XML	src/gpuwattch/sharedcache.h	/^    ParseXML * XML;$/;"	m	class:CCdir
XML	src/gpuwattch/sharedcache.h	/^    ParseXML * XML;$/;"	m	class:SharedCache
XML	src/gpuwattch/xmlParser.cc	/^typedef struct XML$/;"	s	file:
XML	src/gpuwattch/xmlParser.cc	/^} XML;$/;"	t	typeref:struct:XML	file:
XMLAttribute	src/gpuwattch/xmlParser.h	/^typedef struct XMLAttribute {$/;"	s
XMLAttribute	src/gpuwattch/xmlParser.h	/^} XMLAttribute;$/;"	t	typeref:struct:XMLAttribute
XMLCHAR	src/gpuwattch/xmlParser.h	172;"	d
XMLCHAR	src/gpuwattch/xmlParser.h	177;"	d
XMLCSTR	src/gpuwattch/xmlParser.h	170;"	d
XMLCSTR	src/gpuwattch/xmlParser.h	175;"	d
XMLCharEncoding	src/gpuwattch/xmlParser.h	/^    typedef enum XMLCharEncoding$/;"	g	struct:XMLNode
XMLCharEncoding	src/gpuwattch/xmlParser.h	/^    } XMLCharEncoding;$/;"	t	struct:XMLNode	typeref:enum:XMLNode::XMLCharEncoding
XMLCharacterEntity	src/gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR s; int l; XMLCHAR c;} XMLCharacterEntity;$/;"	t	typeref:struct:__anon7	file:
XMLClear	src/gpuwattch/xmlParser.h	/^typedef struct XMLClear {$/;"	s
XMLClear	src/gpuwattch/xmlParser.h	/^} XMLClear;$/;"	t	typeref:struct:XMLClear
XMLClearTags	src/gpuwattch/xmlParser.cc	/^static ALLXMLClearTag XMLClearTags[] =$/;"	v	file:
XMLDLLENTRY	src/gpuwattch/xmlParser.h	137;"	d
XMLDLLENTRY	src/gpuwattch/xmlParser.h	141;"	d
XMLDLLENTRY	src/gpuwattch/xmlParser.h	143;"	d
XMLDLLENTRY	src/gpuwattch/xmlParser.h	146;"	d
XMLDLLENTRY	src/gpuwattch/xmlParser.h	160;"	d
XMLDLLENTRY	src/gpuwattch/xmlParser.h	762;"	d
XMLElementPosition	src/gpuwattch/xmlParser.h	/^typedef int XMLElementPosition;$/;"	t
XMLElementType	src/gpuwattch/xmlParser.h	/^typedef enum XMLElementType$/;"	g
XMLElementType	src/gpuwattch/xmlParser.h	/^} XMLElementType;$/;"	t	typeref:enum:XMLElementType
XMLEntities	src/gpuwattch/xmlParser.cc	/^static XMLCharacterEntity XMLEntities[] =$/;"	v	file:
XMLError	src/gpuwattch/xmlParser.h	/^typedef enum XMLError$/;"	g
XMLError	src/gpuwattch/xmlParser.h	/^} XMLError;$/;"	t	typeref:enum:XMLError
XMLNode	src/gpuwattch/xmlParser.cc	/^XMLNode::XMLNode(XMLNodeData *pParent, XMLSTR lpszName, char isDeclaration)$/;"	f	class:XMLNode
XMLNode	src/gpuwattch/xmlParser.cc	/^XMLNode::XMLNode(const XMLNode &A)$/;"	f	class:XMLNode
XMLNode	src/gpuwattch/xmlParser.cc	/^XMLNode::XMLNode(struct XMLNodeDataTag *p){ d=p; (p->ref_count)++; }$/;"	f	class:XMLNode
XMLNode	src/gpuwattch/xmlParser.h	/^    XMLNode(): d(NULL){};$/;"	f	struct:XMLNode
XMLNode	src/gpuwattch/xmlParser.h	/^typedef struct XMLDLLENTRY XMLNode$/;"	s
XMLNode	src/gpuwattch/xmlParser.h	/^} XMLNode;$/;"	t	typeref:struct:XMLNode
XMLNodeContents	src/gpuwattch/xmlParser.h	/^typedef struct XMLNodeContents$/;"	s
XMLNodeContents	src/gpuwattch/xmlParser.h	/^} XMLNodeContents;$/;"	t	typeref:struct:XMLNodeContents
XMLNodeData	src/gpuwattch/xmlParser.h	/^      } XMLNodeData;$/;"	t	struct:XMLNode	typeref:struct:XMLNode::XMLNodeDataTag
XMLNodeDataTag	src/gpuwattch/xmlParser.h	/^      typedef struct XMLNodeDataTag \/\/ to allow shallow copy and "intelligent\/smart" pointers (automatic delete):$/;"	s	struct:XMLNode
XMLParserBase64Tool	src/gpuwattch/xmlParser.h	/^    XMLParserBase64Tool(): buf(NULL),buflen(0){}$/;"	f	struct:XMLParserBase64Tool
XMLParserBase64Tool	src/gpuwattch/xmlParser.h	/^typedef struct XMLDLLENTRY XMLParserBase64Tool$/;"	s
XMLParserBase64Tool	src/gpuwattch/xmlParser.h	/^}XMLParserBase64Tool;$/;"	t	typeref:struct:XMLParserBase64Tool
XMLResults	src/gpuwattch/xmlParser.h	/^typedef struct XMLResults$/;"	s
XMLResults	src/gpuwattch/xmlParser.h	/^} XMLResults;$/;"	t	typeref:struct:XMLResults
XMLSTR	src/gpuwattch/xmlParser.h	171;"	d
XMLSTR	src/gpuwattch/xmlParser.h	176;"	d
XMLTokenType	src/gpuwattch/xmlParser.cc	/^} XMLTokenType;$/;"	t	typeref:enum:XMLTokenTypeTag	file:
XMLTokenTypeTag	src/gpuwattch/xmlParser.cc	/^typedef enum XMLTokenTypeTag$/;"	g	file:
XML_ByteTable	src/gpuwattch/xmlParser.cc	/^static const char *XML_ByteTable=(const char *)XML_utf8ByteTable; \/\/ the default is "characterEncoding=XMLNode::encoding_UTF8"$/;"	v	file:
XML_PARSE_H_	src/gpuwattch/XML_Parse.h	40;"	d
XML_gb2312ByteTable	src/gpuwattch/xmlParser.cc	/^static const char XML_gb2312ByteTable[256] =$/;"	v	file:
XML_gbk_big5_ByteTable	src/gpuwattch/xmlParser.cc	/^static const char XML_gbk_big5_ByteTable[256] =$/;"	v	file:
XML_interface	src/gpuwattch/logic.h	/^	const ParseXML *XML_interface;$/;"	m	class:selection_logic
XML_isSPACECHAR	src/gpuwattch/xmlParser.cc	2721;"	d	file:
XML_isSPACECHAR	src/gpuwattch/xmlParser.cc	839;"	d	file:
XML_legacyByteTable	src/gpuwattch/xmlParser.cc	/^static const char XML_legacyByteTable[256] =$/;"	v	file:
XML_sjisByteTable	src/gpuwattch/xmlParser.cc	/^static const char XML_sjisByteTable[256] =$/;"	v	file:
XML_utf8ByteTable	src/gpuwattch/xmlParser.cc	/^static const char XML_utf8ByteTable[256] =$/;"	v	file:
YACC	src/intersim2/Makefile	/^YACC = bison -y$/;"	m
YACC_OBJS	src/intersim2/Makefile	/^YACC_OBJS = ${OBJDIR}\/y.tab.o$/;"	m
YYABORT	build/src/cuda-sim/ptx.tab.c	1095;"	d	file:
YYABORT	build/src/cuda-sim/ptxinfo.tab.c	602;"	d	file:
YYABORT	src/intersim2/y.tab.c	553;"	d	file:
YYACCEPT	build/src/cuda-sim/ptx.tab.c	1094;"	d	file:
YYACCEPT	build/src/cuda-sim/ptxinfo.tab.c	601;"	d	file:
YYACCEPT	src/intersim2/y.tab.c	552;"	d	file:
YYBACKUP	build/src/cuda-sim/ptx.tab.c	1101;"	d	file:
YYBACKUP	build/src/cuda-sim/ptxinfo.tab.c	608;"	d	file:
YYBACKUP	src/intersim2/y.tab.c	559;"	d	file:
YYBISON	build/src/cuda-sim/ptx.tab.c	44;"	d	file:
YYBISON	build/src/cuda-sim/ptxinfo.tab.c	44;"	d	file:
YYBISON	src/intersim2/y.tab.c	44;"	d	file:
YYBISON_VERSION	build/src/cuda-sim/ptx.tab.c	47;"	d	file:
YYBISON_VERSION	build/src/cuda-sim/ptxinfo.tab.c	47;"	d	file:
YYBISON_VERSION	src/intersim2/y.tab.c	47;"	d	file:
YYCASE_	build/src/cuda-sim/ptx.tab.c	1442;"	d	file:
YYCASE_	build/src/cuda-sim/ptx.tab.c	1452;"	d	file:
YYCASE_	build/src/cuda-sim/ptxinfo.tab.c	949;"	d	file:
YYCASE_	build/src/cuda-sim/ptxinfo.tab.c	959;"	d	file:
YYCASE_	src/intersim2/y.tab.c	900;"	d	file:
YYCASE_	src/intersim2/y.tab.c	910;"	d	file:
YYCOPY	build/src/cuda-sim/ptx.tab.c	526;"	d	file:
YYCOPY	build/src/cuda-sim/ptx.tab.c	529;"	d	file:
YYCOPY	build/src/cuda-sim/ptxinfo.tab.c	397;"	d	file:
YYCOPY	build/src/cuda-sim/ptxinfo.tab.c	400;"	d	file:
YYCOPY	src/intersim2/y.tab.c	375;"	d	file:
YYCOPY	src/intersim2/y.tab.c	378;"	d	file:
YYCOPY_NEEDED	build/src/cuda-sim/ptx.tab.c	501;"	d	file:
YYCOPY_NEEDED	build/src/cuda-sim/ptxinfo.tab.c	372;"	d	file:
YYCOPY_NEEDED	src/intersim2/y.tab.c	350;"	d	file:
YYDEBUG	build/src/cuda-sim/ptx.tab.c	98;"	d	file:
YYDEBUG	build/src/cuda-sim/ptx.tab.h	37;"	d
YYDEBUG	build/src/cuda-sim/ptxinfo.tab.c	98;"	d	file:
YYDEBUG	build/src/cuda-sim/ptxinfo.tab.h	37;"	d
YYDEBUG	src/intersim2/y.tab.c	104;"	d	file:
YYDEBUG	src/intersim2/y.tab.h	37;"	d
YYDPRINTF	build/src/cuda-sim/ptx.tab.c	1132;"	d	file:
YYDPRINTF	build/src/cuda-sim/ptx.tab.c	1247;"	d	file:
YYDPRINTF	build/src/cuda-sim/ptxinfo.tab.c	639;"	d	file:
YYDPRINTF	build/src/cuda-sim/ptxinfo.tab.c	754;"	d	file:
YYDPRINTF	src/intersim2/y.tab.c	590;"	d	file:
YYDPRINTF	src/intersim2/y.tab.c	705;"	d	file:
YYEMPTY	build/src/cuda-sim/ptx.tab.c	1091;"	d	file:
YYEMPTY	build/src/cuda-sim/ptxinfo.tab.c	598;"	d	file:
YYEMPTY	src/intersim2/y.tab.c	549;"	d	file:
YYEOF	build/src/cuda-sim/ptx.tab.c	1092;"	d	file:
YYEOF	build/src/cuda-sim/ptxinfo.tab.c	599;"	d	file:
YYEOF	src/intersim2/y.tab.c	550;"	d	file:
YYERRCODE	build/src/cuda-sim/ptx.tab.c	1120;"	d	file:
YYERRCODE	build/src/cuda-sim/ptxinfo.tab.c	627;"	d	file:
YYERRCODE	src/intersim2/y.tab.c	578;"	d	file:
YYERROR	build/src/cuda-sim/ptx.tab.c	1096;"	d	file:
YYERROR	build/src/cuda-sim/ptxinfo.tab.c	603;"	d	file:
YYERROR	src/intersim2/y.tab.c	554;"	d	file:
YYERROR_VERBOSE	build/src/cuda-sim/ptx.tab.c	86;"	d	file:
YYERROR_VERBOSE	build/src/cuda-sim/ptx.tab.c	87;"	d	file:
YYERROR_VERBOSE	build/src/cuda-sim/ptx.tab.c	89;"	d	file:
YYERROR_VERBOSE	build/src/cuda-sim/ptxinfo.tab.c	86;"	d	file:
YYERROR_VERBOSE	build/src/cuda-sim/ptxinfo.tab.c	87;"	d	file:
YYERROR_VERBOSE	build/src/cuda-sim/ptxinfo.tab.c	89;"	d	file:
YYERROR_VERBOSE	src/intersim2/y.tab.c	92;"	d	file:
YYERROR_VERBOSE	src/intersim2/y.tab.c	93;"	d	file:
YYERROR_VERBOSE	src/intersim2/y.tab.c	95;"	d	file:
YYFINAL	build/src/cuda-sim/ptx.tab.c	542;"	d	file:
YYFINAL	build/src/cuda-sim/ptxinfo.tab.c	413;"	d	file:
YYFINAL	src/intersim2/y.tab.c	391;"	d	file:
YYFPRINTF	build/src/cuda-sim/ptx.tab.c	1129;"	d	file:
YYFPRINTF	build/src/cuda-sim/ptxinfo.tab.c	636;"	d	file:
YYFPRINTF	src/intersim2/y.tab.c	587;"	d	file:
YYFREE	build/src/cuda-sim/ptx.tab.c	472;"	d	file:
YYFREE	build/src/cuda-sim/ptxinfo.tab.c	343;"	d	file:
YYFREE	src/intersim2/y.tab.c	321;"	d	file:
YYINITDEPTH	build/src/cuda-sim/ptx.tab.c	1256;"	d	file:
YYINITDEPTH	build/src/cuda-sim/ptxinfo.tab.c	763;"	d	file:
YYINITDEPTH	src/intersim2/y.tab.c	714;"	d	file:
YYLAST	build/src/cuda-sim/ptx.tab.c	544;"	d	file:
YYLAST	build/src/cuda-sim/ptxinfo.tab.c	415;"	d	file:
YYLAST	src/intersim2/y.tab.c	393;"	d	file:
YYMALLOC	build/src/cuda-sim/ptx.tab.c	466;"	d	file:
YYMALLOC	build/src/cuda-sim/ptxinfo.tab.c	337;"	d	file:
YYMALLOC	src/intersim2/y.tab.c	315;"	d	file:
YYMAXDEPTH	build/src/cuda-sim/ptx.tab.c	1267;"	d	file:
YYMAXDEPTH	build/src/cuda-sim/ptxinfo.tab.c	774;"	d	file:
YYMAXDEPTH	src/intersim2/y.tab.c	725;"	d	file:
YYMAXUTOK	build/src/cuda-sim/ptx.tab.c	558;"	d	file:
YYMAXUTOK	build/src/cuda-sim/ptxinfo.tab.c	429;"	d	file:
YYMAXUTOK	src/intersim2/y.tab.c	407;"	d	file:
YYNNTS	build/src/cuda-sim/ptx.tab.c	549;"	d	file:
YYNNTS	build/src/cuda-sim/ptxinfo.tab.c	420;"	d	file:
YYNNTS	src/intersim2/y.tab.c	398;"	d	file:
YYNRULES	build/src/cuda-sim/ptx.tab.c	551;"	d	file:
YYNRULES	build/src/cuda-sim/ptxinfo.tab.c	422;"	d	file:
YYNRULES	src/intersim2/y.tab.c	400;"	d	file:
YYNSTATES	build/src/cuda-sim/ptx.tab.c	553;"	d	file:
YYNSTATES	build/src/cuda-sim/ptxinfo.tab.c	424;"	d	file:
YYNSTATES	src/intersim2/y.tab.c	402;"	d	file:
YYNTOKENS	build/src/cuda-sim/ptx.tab.c	547;"	d	file:
YYNTOKENS	build/src/cuda-sim/ptxinfo.tab.c	418;"	d	file:
YYNTOKENS	src/intersim2/y.tab.c	396;"	d	file:
YYPACT_NINF	build/src/cuda-sim/ptx.tab.c	726;"	d	file:
YYPACT_NINF	build/src/cuda-sim/ptxinfo.tab.c	502;"	d	file:
YYPACT_NINF	src/intersim2/y.tab.c	472;"	d	file:
YYPOPSTACK	build/src/cuda-sim/ptx.tab.c	1567;"	d	file:
YYPOPSTACK	build/src/cuda-sim/ptxinfo.tab.c	1074;"	d	file:
YYPOPSTACK	src/intersim2/y.tab.c	1025;"	d	file:
YYPULL	build/src/cuda-sim/ptx.tab.c	59;"	d	file:
YYPULL	build/src/cuda-sim/ptxinfo.tab.c	59;"	d	file:
YYPULL	src/intersim2/y.tab.c	59;"	d	file:
YYPURE	build/src/cuda-sim/ptx.tab.c	53;"	d	file:
YYPURE	build/src/cuda-sim/ptxinfo.tab.c	53;"	d	file:
YYPURE	src/intersim2/y.tab.c	53;"	d	file:
YYPUSH	build/src/cuda-sim/ptx.tab.c	56;"	d	file:
YYPUSH	build/src/cuda-sim/ptxinfo.tab.c	56;"	d	file:
YYPUSH	src/intersim2/y.tab.c	56;"	d	file:
YYRECOVERING	build/src/cuda-sim/ptx.tab.c	1099;"	d	file:
YYRECOVERING	build/src/cuda-sim/ptxinfo.tab.c	606;"	d	file:
YYRECOVERING	src/intersim2/y.tab.c	557;"	d	file:
YYSIZE_MAXIMUM	build/src/cuda-sim/ptx.tab.c	345;"	d	file:
YYSIZE_MAXIMUM	build/src/cuda-sim/ptxinfo.tab.c	216;"	d	file:
YYSIZE_MAXIMUM	src/intersim2/y.tab.c	194;"	d	file:
YYSIZE_T	build/src/cuda-sim/ptx.tab.c	334;"	d	file:
YYSIZE_T	build/src/cuda-sim/ptx.tab.c	336;"	d	file:
YYSIZE_T	build/src/cuda-sim/ptx.tab.c	339;"	d	file:
YYSIZE_T	build/src/cuda-sim/ptx.tab.c	341;"	d	file:
YYSIZE_T	build/src/cuda-sim/ptxinfo.tab.c	205;"	d	file:
YYSIZE_T	build/src/cuda-sim/ptxinfo.tab.c	207;"	d	file:
YYSIZE_T	build/src/cuda-sim/ptxinfo.tab.c	210;"	d	file:
YYSIZE_T	build/src/cuda-sim/ptxinfo.tab.c	212;"	d	file:
YYSIZE_T	src/intersim2/y.tab.c	183;"	d	file:
YYSIZE_T	src/intersim2/y.tab.c	185;"	d	file:
YYSIZE_T	src/intersim2/y.tab.c	188;"	d	file:
YYSIZE_T	src/intersim2/y.tab.c	190;"	d	file:
YYSKELETON_NAME	build/src/cuda-sim/ptx.tab.c	50;"	d	file:
YYSKELETON_NAME	build/src/cuda-sim/ptxinfo.tab.c	50;"	d	file:
YYSKELETON_NAME	src/intersim2/y.tab.c	50;"	d	file:
YYSTACK_ALLOC	build/src/cuda-sim/ptx.tab.c	420;"	d	file:
YYSTACK_ALLOC	build/src/cuda-sim/ptx.tab.c	424;"	d	file:
YYSTACK_ALLOC	build/src/cuda-sim/ptx.tab.c	429;"	d	file:
YYSTACK_ALLOC	build/src/cuda-sim/ptx.tab.c	452;"	d	file:
YYSTACK_ALLOC	build/src/cuda-sim/ptxinfo.tab.c	291;"	d	file:
YYSTACK_ALLOC	build/src/cuda-sim/ptxinfo.tab.c	295;"	d	file:
YYSTACK_ALLOC	build/src/cuda-sim/ptxinfo.tab.c	300;"	d	file:
YYSTACK_ALLOC	build/src/cuda-sim/ptxinfo.tab.c	323;"	d	file:
YYSTACK_ALLOC	src/intersim2/y.tab.c	269;"	d	file:
YYSTACK_ALLOC	src/intersim2/y.tab.c	273;"	d	file:
YYSTACK_ALLOC	src/intersim2/y.tab.c	278;"	d	file:
YYSTACK_ALLOC	src/intersim2/y.tab.c	301;"	d	file:
YYSTACK_ALLOC_MAXIMUM	build/src/cuda-sim/ptx.tab.c	449;"	d	file:
YYSTACK_ALLOC_MAXIMUM	build/src/cuda-sim/ptx.tab.c	455;"	d	file:
YYSTACK_ALLOC_MAXIMUM	build/src/cuda-sim/ptxinfo.tab.c	320;"	d	file:
YYSTACK_ALLOC_MAXIMUM	build/src/cuda-sim/ptxinfo.tab.c	326;"	d	file:
YYSTACK_ALLOC_MAXIMUM	src/intersim2/y.tab.c	298;"	d	file:
YYSTACK_ALLOC_MAXIMUM	src/intersim2/y.tab.c	304;"	d	file:
YYSTACK_BYTES	build/src/cuda-sim/ptx.tab.c	497;"	d	file:
YYSTACK_BYTES	build/src/cuda-sim/ptxinfo.tab.c	368;"	d	file:
YYSTACK_BYTES	src/intersim2/y.tab.c	346;"	d	file:
YYSTACK_FREE	build/src/cuda-sim/ptx.tab.c	443;"	d	file:
YYSTACK_FREE	build/src/cuda-sim/ptx.tab.c	453;"	d	file:
YYSTACK_FREE	build/src/cuda-sim/ptxinfo.tab.c	314;"	d	file:
YYSTACK_FREE	build/src/cuda-sim/ptxinfo.tab.c	324;"	d	file:
YYSTACK_FREE	src/intersim2/y.tab.c	292;"	d	file:
YYSTACK_FREE	src/intersim2/y.tab.c	302;"	d	file:
YYSTACK_GAP_MAXIMUM	build/src/cuda-sim/ptx.tab.c	493;"	d	file:
YYSTACK_GAP_MAXIMUM	build/src/cuda-sim/ptxinfo.tab.c	364;"	d	file:
YYSTACK_GAP_MAXIMUM	src/intersim2/y.tab.c	342;"	d	file:
YYSTACK_RELOCATE	build/src/cuda-sim/ptx.tab.c	508;"	d	file:
YYSTACK_RELOCATE	build/src/cuda-sim/ptxinfo.tab.c	379;"	d	file:
YYSTACK_RELOCATE	src/intersim2/y.tab.c	357;"	d	file:
YYSTATE	build/src/cuda-sim/lex.ptx_.c	152;"	d	file:
YYSTATE	build/src/cuda-sim/lex.ptxinfo_.c	152;"	d	file:
YYSTATE	src/intersim2/lex.yy.c	132;"	d	file:
YYSTYPE	build/src/cuda-sim/ptx.tab.c	/^typedef union YYSTYPE YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	build/src/cuda-sim/ptx.tab.c	/^union YYSTYPE$/;"	u	file:
YYSTYPE	build/src/cuda-sim/ptx.tab.h	/^typedef union YYSTYPE YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE	build/src/cuda-sim/ptx.tab.h	/^union YYSTYPE$/;"	u
YYSTYPE	build/src/cuda-sim/ptxinfo.tab.c	/^typedef union YYSTYPE YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	build/src/cuda-sim/ptxinfo.tab.c	/^union YYSTYPE$/;"	u	file:
YYSTYPE	build/src/cuda-sim/ptxinfo.tab.h	/^typedef union YYSTYPE YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE	build/src/cuda-sim/ptxinfo.tab.h	/^union YYSTYPE$/;"	u
YYSTYPE	src/intersim2/y.tab.c	/^typedef union YYSTYPE YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	src/intersim2/y.tab.c	/^union YYSTYPE$/;"	u	file:
YYSTYPE	src/intersim2/y.tab.h	/^typedef union YYSTYPE YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE	src/intersim2/y.tab.h	/^union YYSTYPE$/;"	u
YYSTYPE_IS_DECLARED	build/src/cuda-sim/ptx.tab.c	280;"	d	file:
YYSTYPE_IS_DECLARED	build/src/cuda-sim/ptx.tab.h	219;"	d
YYSTYPE_IS_DECLARED	build/src/cuda-sim/ptxinfo.tab.c	146;"	d	file:
YYSTYPE_IS_DECLARED	build/src/cuda-sim/ptxinfo.tab.h	85;"	d
YYSTYPE_IS_DECLARED	src/intersim2/y.tab.c	139;"	d	file:
YYSTYPE_IS_DECLARED	src/intersim2/y.tab.h	72;"	d
YYSTYPE_IS_TRIVIAL	build/src/cuda-sim/ptx.tab.c	279;"	d	file:
YYSTYPE_IS_TRIVIAL	build/src/cuda-sim/ptx.tab.h	218;"	d
YYSTYPE_IS_TRIVIAL	build/src/cuda-sim/ptxinfo.tab.c	145;"	d	file:
YYSTYPE_IS_TRIVIAL	build/src/cuda-sim/ptxinfo.tab.h	84;"	d
YYSTYPE_IS_TRIVIAL	src/intersim2/y.tab.c	138;"	d	file:
YYSTYPE_IS_TRIVIAL	src/intersim2/y.tab.h	71;"	d
YYTABLES_NAME	build/src/cuda-sim/lex.ptx_.c	4092;"	d	file:
YYTABLES_NAME	build/src/cuda-sim/lex.ptxinfo_.c	2053;"	d	file:
YYTABLES_NAME	src/intersim2/lex.yy.c	1821;"	d	file:
YYTABLE_NINF	build/src/cuda-sim/ptx.tab.c	731;"	d	file:
YYTABLE_NINF	build/src/cuda-sim/ptxinfo.tab.c	507;"	d	file:
YYTABLE_NINF	src/intersim2/y.tab.c	477;"	d	file:
YYTERROR	build/src/cuda-sim/ptx.tab.c	1119;"	d	file:
YYTERROR	build/src/cuda-sim/ptxinfo.tab.c	626;"	d	file:
YYTERROR	src/intersim2/y.tab.c	577;"	d	file:
YYTOKENTYPE	build/src/cuda-sim/ptx.tab.c	106;"	d	file:
YYTOKENTYPE	build/src/cuda-sim/ptx.tab.h	45;"	d
YYTOKENTYPE	build/src/cuda-sim/ptxinfo.tab.c	106;"	d	file:
YYTOKENTYPE	build/src/cuda-sim/ptxinfo.tab.h	45;"	d
YYTOKENTYPE	src/intersim2/y.tab.c	112;"	d	file:
YYTOKENTYPE	src/intersim2/y.tab.h	45;"	d
YYTRANSLATE	build/src/cuda-sim/ptx.tab.c	560;"	d	file:
YYTRANSLATE	build/src/cuda-sim/ptxinfo.tab.c	431;"	d	file:
YYTRANSLATE	src/intersim2/y.tab.c	409;"	d	file:
YYUNDEFTOK	build/src/cuda-sim/ptx.tab.c	557;"	d	file:
YYUNDEFTOK	build/src/cuda-sim/ptxinfo.tab.c	428;"	d	file:
YYUNDEFTOK	src/intersim2/y.tab.c	406;"	d	file:
YYUSE	build/src/cuda-sim/ptx.tab.c	388;"	d	file:
YYUSE	build/src/cuda-sim/ptx.tab.c	390;"	d	file:
YYUSE	build/src/cuda-sim/ptxinfo.tab.c	259;"	d	file:
YYUSE	build/src/cuda-sim/ptxinfo.tab.c	261;"	d	file:
YYUSE	src/intersim2/y.tab.c	237;"	d	file:
YYUSE	src/intersim2/y.tab.c	239;"	d	file:
YY_	build/src/cuda-sim/ptx.tab.c	351;"	d	file:
YY_	build/src/cuda-sim/ptx.tab.c	355;"	d	file:
YY_	build/src/cuda-sim/ptxinfo.tab.c	222;"	d	file:
YY_	build/src/cuda-sim/ptxinfo.tab.c	226;"	d	file:
YY_	src/intersim2/y.tab.c	200;"	d	file:
YY_	src/intersim2/y.tab.c	204;"	d	file:
YY_ATTRIBUTE	build/src/cuda-sim/ptx.tab.c	363;"	d	file:
YY_ATTRIBUTE	build/src/cuda-sim/ptx.tab.c	365;"	d	file:
YY_ATTRIBUTE	build/src/cuda-sim/ptxinfo.tab.c	234;"	d	file:
YY_ATTRIBUTE	build/src/cuda-sim/ptxinfo.tab.c	236;"	d	file:
YY_ATTRIBUTE	src/intersim2/y.tab.c	212;"	d	file:
YY_ATTRIBUTE	src/intersim2/y.tab.c	214;"	d	file:
YY_ATTRIBUTE_PURE	build/src/cuda-sim/ptx.tab.c	370;"	d	file:
YY_ATTRIBUTE_PURE	build/src/cuda-sim/ptxinfo.tab.c	241;"	d	file:
YY_ATTRIBUTE_PURE	src/intersim2/y.tab.c	219;"	d	file:
YY_ATTRIBUTE_UNUSED	build/src/cuda-sim/ptx.tab.c	374;"	d	file:
YY_ATTRIBUTE_UNUSED	build/src/cuda-sim/ptxinfo.tab.c	245;"	d	file:
YY_ATTRIBUTE_UNUSED	src/intersim2/y.tab.c	223;"	d	file:
YY_AT_BOL	build/src/cuda-sim/lex.ptx_.c	372;"	d	file:
YY_AT_BOL	build/src/cuda-sim/lex.ptxinfo_.c	372;"	d	file:
YY_AT_BOL	src/intersim2/lex.yy.c	339;"	d	file:
YY_BREAK	build/src/cuda-sim/lex.ptx_.c	1552;"	d	file:
YY_BREAK	build/src/cuda-sim/lex.ptxinfo_.c	804;"	d	file:
YY_BREAK	src/intersim2/lex.yy.c	671;"	d	file:
YY_BUFFER_EOF_PENDING	build/src/cuda-sim/lex.ptx_.c	288;"	d	file:
YY_BUFFER_EOF_PENDING	build/src/cuda-sim/lex.ptxinfo_.c	288;"	d	file:
YY_BUFFER_EOF_PENDING	src/intersim2/lex.yy.c	255;"	d	file:
YY_BUFFER_NEW	build/src/cuda-sim/lex.ptx_.c	276;"	d	file:
YY_BUFFER_NEW	build/src/cuda-sim/lex.ptxinfo_.c	276;"	d	file:
YY_BUFFER_NEW	src/intersim2/lex.yy.c	243;"	d	file:
YY_BUFFER_NORMAL	build/src/cuda-sim/lex.ptx_.c	277;"	d	file:
YY_BUFFER_NORMAL	build/src/cuda-sim/lex.ptxinfo_.c	277;"	d	file:
YY_BUFFER_NORMAL	src/intersim2/lex.yy.c	244;"	d	file:
YY_BUFFER_STATE	build/src/cuda-sim/lex.ptx_.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUFFER_STATE	build/src/cuda-sim/lex.ptxinfo_.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUFFER_STATE	src/intersim2/lex.yy.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUF_SIZE	build/src/cuda-sim/lex.ptx_.c	169;"	d	file:
YY_BUF_SIZE	build/src/cuda-sim/lex.ptx_.c	171;"	d	file:
YY_BUF_SIZE	build/src/cuda-sim/lex.ptxinfo_.c	169;"	d	file:
YY_BUF_SIZE	build/src/cuda-sim/lex.ptxinfo_.c	171;"	d	file:
YY_BUF_SIZE	src/intersim2/lex.yy.c	149;"	d	file:
YY_BUF_SIZE	src/intersim2/lex.yy.c	151;"	d	file:
YY_CHAR	build/src/cuda-sim/lex.ptx_.c	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CHAR	build/src/cuda-sim/lex.ptxinfo_.c	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CHAR	src/intersim2/lex.yy.c	/^typedef unsigned char YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	build/src/cuda-sim/lex.ptx_.c	304;"	d	file:
YY_CURRENT_BUFFER	build/src/cuda-sim/lex.ptxinfo_.c	304;"	d	file:
YY_CURRENT_BUFFER	src/intersim2/lex.yy.c	271;"	d	file:
YY_CURRENT_BUFFER_LVALUE	build/src/cuda-sim/lex.ptx_.c	311;"	d	file:
YY_CURRENT_BUFFER_LVALUE	build/src/cuda-sim/lex.ptxinfo_.c	311;"	d	file:
YY_CURRENT_BUFFER_LVALUE	src/intersim2/lex.yy.c	278;"	d	file:
YY_DECL	build/src/cuda-sim/lex.ptx_.c	1540;"	d	file:
YY_DECL	build/src/cuda-sim/lex.ptxinfo_.c	792;"	d	file:
YY_DECL	src/intersim2/lex.yy.c	659;"	d	file:
YY_DECL_IS_OURS	build/src/cuda-sim/lex.ptx_.c	1536;"	d	file:
YY_DECL_IS_OURS	build/src/cuda-sim/lex.ptxinfo_.c	788;"	d	file:
YY_DECL_IS_OURS	src/intersim2/lex.yy.c	655;"	d	file:
YY_DO_BEFORE_ACTION	build/src/cuda-sim/lex.ptx_.c	400;"	d	file:
YY_DO_BEFORE_ACTION	build/src/cuda-sim/lex.ptxinfo_.c	400;"	d	file:
YY_DO_BEFORE_ACTION	src/intersim2/lex.yy.c	364;"	d	file:
YY_END_OF_BUFFER	build/src/cuda-sim/lex.ptx_.c	408;"	d	file:
YY_END_OF_BUFFER	build/src/cuda-sim/lex.ptxinfo_.c	408;"	d	file:
YY_END_OF_BUFFER	src/intersim2/lex.yy.c	372;"	d	file:
YY_END_OF_BUFFER_CHAR	build/src/cuda-sim/lex.ptx_.c	160;"	d	file:
YY_END_OF_BUFFER_CHAR	build/src/cuda-sim/lex.ptxinfo_.c	160;"	d	file:
YY_END_OF_BUFFER_CHAR	src/intersim2/lex.yy.c	140;"	d	file:
YY_EXIT_FAILURE	build/src/cuda-sim/lex.ptx_.c	3887;"	d	file:
YY_EXIT_FAILURE	build/src/cuda-sim/lex.ptxinfo_.c	1848;"	d	file:
YY_EXIT_FAILURE	src/intersim2/lex.yy.c	1619;"	d	file:
YY_EXTRA_TYPE	build/src/cuda-sim/lex.ptx_.c	1394;"	d	file:
YY_EXTRA_TYPE	build/src/cuda-sim/lex.ptxinfo_.c	644;"	d	file:
YY_EXTRA_TYPE	src/intersim2/lex.yy.c	511;"	d	file:
YY_FATAL_ERROR	build/src/cuda-sim/lex.ptx_.c	1527;"	d	file:
YY_FATAL_ERROR	build/src/cuda-sim/lex.ptxinfo_.c	779;"	d	file:
YY_FATAL_ERROR	src/intersim2/lex.yy.c	646;"	d	file:
YY_FLEX_MAJOR_VERSION	build/src/cuda-sim/lex.ptx_.c	29;"	d	file:
YY_FLEX_MAJOR_VERSION	build/src/cuda-sim/lex.ptxinfo_.c	29;"	d	file:
YY_FLEX_MAJOR_VERSION	src/intersim2/lex.yy.c	9;"	d	file:
YY_FLEX_MINOR_VERSION	build/src/cuda-sim/lex.ptx_.c	30;"	d	file:
YY_FLEX_MINOR_VERSION	build/src/cuda-sim/lex.ptxinfo_.c	30;"	d	file:
YY_FLEX_MINOR_VERSION	src/intersim2/lex.yy.c	10;"	d	file:
YY_FLEX_SUBMINOR_VERSION	build/src/cuda-sim/lex.ptx_.c	31;"	d	file:
YY_FLEX_SUBMINOR_VERSION	build/src/cuda-sim/lex.ptxinfo_.c	31;"	d	file:
YY_FLEX_SUBMINOR_VERSION	src/intersim2/lex.yy.c	11;"	d	file:
YY_FLUSH_BUFFER	build/src/cuda-sim/lex.ptx_.c	340;"	d	file:
YY_FLUSH_BUFFER	build/src/cuda-sim/lex.ptxinfo_.c	340;"	d	file:
YY_FLUSH_BUFFER	src/intersim2/lex.yy.c	307;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	build/src/cuda-sim/ptx.tab.c	395;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	build/src/cuda-sim/ptx.tab.c	405;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	build/src/cuda-sim/ptxinfo.tab.c	266;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	build/src/cuda-sim/ptxinfo.tab.c	276;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	src/intersim2/y.tab.c	244;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	src/intersim2/y.tab.c	254;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	build/src/cuda-sim/ptx.tab.c	399;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	build/src/cuda-sim/ptx.tab.c	406;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	build/src/cuda-sim/ptxinfo.tab.c	270;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	build/src/cuda-sim/ptxinfo.tab.c	277;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	src/intersim2/y.tab.c	248;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	src/intersim2/y.tab.c	255;"	d	file:
YY_INITIAL_VALUE	build/src/cuda-sim/ptx.tab.c	402;"	d	file:
YY_INITIAL_VALUE	build/src/cuda-sim/ptx.tab.c	409;"	d	file:
YY_INITIAL_VALUE	build/src/cuda-sim/ptxinfo.tab.c	273;"	d	file:
YY_INITIAL_VALUE	build/src/cuda-sim/ptxinfo.tab.c	280;"	d	file:
YY_INITIAL_VALUE	src/intersim2/y.tab.c	251;"	d	file:
YY_INITIAL_VALUE	src/intersim2/y.tab.c	258;"	d	file:
YY_INPUT	build/src/cuda-sim/lex.ptx_.c	1480;"	d	file:
YY_INPUT	build/src/cuda-sim/lex.ptxinfo_.c	732;"	d	file:
YY_INPUT	src/intersim2/lex.yy.c	495;"	d	file:
YY_INPUT	src/intersim2/lex.yy.c	496;"	d	file:
YY_INPUT	src/intersim2/lex.yy.c	599;"	d	file:
YY_INT_ALIGNED	build/src/cuda-sim/lex.ptx_.c	5;"	d	file:
YY_INT_ALIGNED	build/src/cuda-sim/lex.ptxinfo_.c	5;"	d	file:
YY_INT_ALIGNED	src/intersim2/lex.yy.c	4;"	d	file:
YY_LESS_LINENO	build/src/cuda-sim/lex.ptx_.c	199;"	d	file:
YY_LESS_LINENO	build/src/cuda-sim/lex.ptxinfo_.c	199;"	d	file:
YY_LESS_LINENO	src/intersim2/lex.yy.c	172;"	d	file:
YY_LOCATION_PRINT	build/src/cuda-sim/ptx.tab.c	1140;"	d	file:
YY_LOCATION_PRINT	build/src/cuda-sim/ptxinfo.tab.c	647;"	d	file:
YY_LOCATION_PRINT	src/intersim2/y.tab.c	598;"	d	file:
YY_MORE_ADJ	build/src/cuda-sim/lex.ptx_.c	1327;"	d	file:
YY_MORE_ADJ	build/src/cuda-sim/lex.ptxinfo_.c	588;"	d	file:
YY_MORE_ADJ	src/intersim2/lex.yy.c	481;"	d	file:
YY_NEW_FILE	build/src/cuda-sim/lex.ptx_.c	158;"	d	file:
YY_NEW_FILE	build/src/cuda-sim/lex.ptxinfo_.c	158;"	d	file:
YY_NEW_FILE	src/intersim2/lex.yy.c	138;"	d	file:
YY_NULL	build/src/cuda-sim/lex.ptx_.c	132;"	d	file:
YY_NULL	build/src/cuda-sim/lex.ptxinfo_.c	132;"	d	file:
YY_NULL	src/intersim2/lex.yy.c	112;"	d	file:
YY_NULLPTR	build/src/cuda-sim/ptx.tab.c	78;"	d	file:
YY_NULLPTR	build/src/cuda-sim/ptx.tab.c	80;"	d	file:
YY_NULLPTR	build/src/cuda-sim/ptxinfo.tab.c	78;"	d	file:
YY_NULLPTR	build/src/cuda-sim/ptxinfo.tab.c	80;"	d	file:
YY_NULLPTR	src/intersim2/y.tab.c	84;"	d	file:
YY_NULLPTR	src/intersim2/y.tab.c	86;"	d	file:
YY_NUM_RULES	build/src/cuda-sim/lex.ptx_.c	407;"	d	file:
YY_NUM_RULES	build/src/cuda-sim/lex.ptxinfo_.c	407;"	d	file:
YY_NUM_RULES	src/intersim2/lex.yy.c	371;"	d	file:
YY_PTXINFO_BUILD_SRC_CUDA_SIM_PTXINFO_TAB_H_INCLUDED	build/src/cuda-sim/ptxinfo.tab.c	95;"	d	file:
YY_PTXINFO_BUILD_SRC_CUDA_SIM_PTXINFO_TAB_H_INCLUDED	build/src/cuda-sim/ptxinfo.tab.h	34;"	d
YY_PTX_BUILD_SRC_CUDA_SIM_PTX_TAB_H_INCLUDED	build/src/cuda-sim/ptx.tab.c	95;"	d	file:
YY_PTX_BUILD_SRC_CUDA_SIM_PTX_TAB_H_INCLUDED	build/src/cuda-sim/ptx.tab.h	34;"	d
YY_READ_BUF_SIZE	build/src/cuda-sim/lex.ptx_.c	1462;"	d	file:
YY_READ_BUF_SIZE	build/src/cuda-sim/lex.ptx_.c	1464;"	d	file:
YY_READ_BUF_SIZE	build/src/cuda-sim/lex.ptxinfo_.c	714;"	d	file:
YY_READ_BUF_SIZE	build/src/cuda-sim/lex.ptxinfo_.c	716;"	d	file:
YY_READ_BUF_SIZE	src/intersim2/lex.yy.c	581;"	d	file:
YY_READ_BUF_SIZE	src/intersim2/lex.yy.c	583;"	d	file:
YY_REDUCE_PRINT	build/src/cuda-sim/ptx.tab.c	1237;"	d	file:
YY_REDUCE_PRINT	build/src/cuda-sim/ptx.tab.c	1250;"	d	file:
YY_REDUCE_PRINT	build/src/cuda-sim/ptxinfo.tab.c	744;"	d	file:
YY_REDUCE_PRINT	build/src/cuda-sim/ptxinfo.tab.c	757;"	d	file:
YY_REDUCE_PRINT	src/intersim2/y.tab.c	695;"	d	file:
YY_REDUCE_PRINT	src/intersim2/y.tab.c	708;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	build/src/cuda-sim/lex.ptx_.c	1328;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	build/src/cuda-sim/lex.ptxinfo_.c	589;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	src/intersim2/lex.yy.c	482;"	d	file:
YY_RULE_SETUP	build/src/cuda-sim/lex.ptx_.c	1555;"	d	file:
YY_RULE_SETUP	build/src/cuda-sim/lex.ptxinfo_.c	807;"	d	file:
YY_RULE_SETUP	src/intersim2/lex.yy.c	674;"	d	file:
YY_SC_TO_UI	build/src/cuda-sim/lex.ptx_.c	139;"	d	file:
YY_SC_TO_UI	build/src/cuda-sim/lex.ptxinfo_.c	139;"	d	file:
YY_SC_TO_UI	src/intersim2/lex.yy.c	119;"	d	file:
YY_SKIP_YYWRAP	build/src/cuda-sim/lex.ptx_.c	377;"	d	file:
YY_SKIP_YYWRAP	build/src/cuda-sim/lex.ptxinfo_.c	377;"	d	file:
YY_STACK_PRINT	build/src/cuda-sim/ptx.tab.c	1206;"	d	file:
YY_STACK_PRINT	build/src/cuda-sim/ptx.tab.c	1249;"	d	file:
YY_STACK_PRINT	build/src/cuda-sim/ptxinfo.tab.c	713;"	d	file:
YY_STACK_PRINT	build/src/cuda-sim/ptxinfo.tab.c	756;"	d	file:
YY_STACK_PRINT	src/intersim2/y.tab.c	664;"	d	file:
YY_STACK_PRINT	src/intersim2/y.tab.c	707;"	d	file:
YY_START	build/src/cuda-sim/lex.ptx_.c	151;"	d	file:
YY_START	build/src/cuda-sim/lex.ptxinfo_.c	151;"	d	file:
YY_START	src/intersim2/lex.yy.c	131;"	d	file:
YY_START_STACK_INCR	build/src/cuda-sim/lex.ptx_.c	1522;"	d	file:
YY_START_STACK_INCR	build/src/cuda-sim/lex.ptxinfo_.c	774;"	d	file:
YY_START_STACK_INCR	src/intersim2/lex.yy.c	641;"	d	file:
YY_STATE_BUF_SIZE	build/src/cuda-sim/lex.ptx_.c	177;"	d	file:
YY_STATE_BUF_SIZE	build/src/cuda-sim/lex.ptxinfo_.c	177;"	d	file:
YY_STATE_BUF_SIZE	src/intersim2/lex.yy.c	157;"	d	file:
YY_STATE_EOF	build/src/cuda-sim/lex.ptx_.c	155;"	d	file:
YY_STATE_EOF	build/src/cuda-sim/lex.ptxinfo_.c	155;"	d	file:
YY_STATE_EOF	src/intersim2/lex.yy.c	135;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	build/src/cuda-sim/lex.ptx_.c	229;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	build/src/cuda-sim/lex.ptxinfo_.c	229;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	src/intersim2/lex.yy.c	196;"	d	file:
YY_SYMBOL_PRINT	build/src/cuda-sim/ptx.tab.c	1144;"	d	file:
YY_SYMBOL_PRINT	build/src/cuda-sim/ptx.tab.c	1248;"	d	file:
YY_SYMBOL_PRINT	build/src/cuda-sim/ptxinfo.tab.c	651;"	d	file:
YY_SYMBOL_PRINT	build/src/cuda-sim/ptxinfo.tab.c	755;"	d	file:
YY_SYMBOL_PRINT	src/intersim2/y.tab.c	602;"	d	file:
YY_SYMBOL_PRINT	src/intersim2/y.tab.c	706;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	build/src/cuda-sim/lex.ptx_.c	180;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	build/src/cuda-sim/lex.ptxinfo_.c	180;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	src/intersim2/lex.yy.c	160;"	d	file:
YY_TYPEDEF_YY_SIZE_T	build/src/cuda-sim/lex.ptx_.c	224;"	d	file:
YY_TYPEDEF_YY_SIZE_T	build/src/cuda-sim/lex.ptxinfo_.c	224;"	d	file:
YY_TYPEDEF_YY_SIZE_T	src/intersim2/lex.yy.c	191;"	d	file:
YY_USER_ACTION	build/src/cuda-sim/lex.ptx_.c	1547;"	d	file:
YY_USER_ACTION	build/src/cuda-sim/lex.ptxinfo_.c	799;"	d	file:
YY_USER_ACTION	src/intersim2/lex.yy.c	666;"	d	file:
YY_USE_CONST	build/src/cuda-sim/lex.ptx_.c	113;"	d	file:
YY_USE_CONST	build/src/cuda-sim/lex.ptx_.c	120;"	d	file:
YY_USE_CONST	build/src/cuda-sim/lex.ptxinfo_.c	113;"	d	file:
YY_USE_CONST	build/src/cuda-sim/lex.ptxinfo_.c	120;"	d	file:
YY_USE_CONST	src/intersim2/lex.yy.c	100;"	d	file:
YY_USE_CONST	src/intersim2/lex.yy.c	93;"	d	file:
YY_YY_Y_TAB_H_INCLUDED	src/intersim2/y.tab.c	101;"	d	file:
YY_YY_Y_TAB_H_INCLUDED	src/intersim2/y.tab.h	34;"	d
_ALLOCATOR_HPP_	src/intersim/allocator.hpp	2;"	d
_ALLOCATOR_HPP_	src/intersim2/allocators/allocator.hpp	29;"	d
_ANYNET_HPP_	src/intersim2/networks/anynet.hpp	29;"	d
_ARBITER_HPP_	src/intersim/arbiter.hpp	2;"	d
_ARBITER_HPP_	src/intersim2/arbiters/arbiter.hpp	35;"	d
_AddChild	src/intersim/module.cpp	/^void Module::_AddChild( Module *child )$/;"	f	class:Module
_AddChild	src/intersim2/module.cpp	/^void Module::_AddChild( Module *child )$/;"	f	class:Module
_AddVCRequests	src/intersim/iq_router.cpp	/^void IQRouter::_AddVCRequests( VC* cur_vc, int input_index, bool watch )$/;"	f	class:IQRouter
_Alloc	src/intersim/network.cpp	/^void Network::_Alloc( )$/;"	f	class:Network
_Alloc	src/intersim2/networks/network.cpp	/^void Network::_Alloc( )$/;"	f	class:Network
_ArrivalArb	src/intersim/event_router.cpp	/^void EventRouter::_ArrivalArb( int output )$/;"	f	class:EventRouter
_ArrivalArb	src/intersim2/routers/event_router.cpp	/^void EventRouter::_ArrivalArb( int output )$/;"	f	class:EventRouter
_ArrivalRequests	src/intersim/event_router.cpp	/^void EventRouter::_ArrivalRequests( int input ) $/;"	f	class:EventRouter
_ArrivalRequests	src/intersim2/routers/event_router.cpp	/^void EventRouter::_ArrivalRequests( int input ) $/;"	f	class:EventRouter
_BATCHTRAFFICMANAGER_HPP_	src/intersim2/batchtrafficmanager.hpp	29;"	d
_BOOKSIM_CONFIG_HPP_	src/intersim/booksim_config.hpp	2;"	d
_BOOKSIM_CONFIG_HPP_	src/intersim2/booksim_config.hpp	29;"	d
_BOOKSIM_HPP_	src/intersim/booksim.hpp	2;"	d
_BOOKSIM_HPP_	src/intersim2/booksim.hpp	29;"	d
_BUFFER_HPP_	src/intersim2/buffer.hpp	29;"	d
_BUFFER_MONITOR_HPP_	src/intersim2/power/buffer_monitor.hpp	29;"	d
_BUFFER_STATE_HPP_	src/intersim/buffer_state.hpp	2;"	d
_BUFFER_STATE_HPP_	src/intersim2/buffer_state.hpp	29;"	d
_BoundaryBufferItem	src/intersim2/interconnect_interface.hpp	/^    _BoundaryBufferItem():_packet_n(0) {}$/;"	f	class:InterconnectInterface::_BoundaryBufferItem
_BoundaryBufferItem	src/intersim2/interconnect_interface.hpp	/^  class _BoundaryBufferItem {$/;"	c	class:InterconnectInterface
_BuildNet	src/intersim/fly.cpp	/^void KNFly::_BuildNet( const Configuration &config )$/;"	f	class:KNFly
_BuildNet	src/intersim/kncube.cpp	/^void KNCube::_BuildNet( const Configuration &config )$/;"	f	class:KNCube
_BuildNet	src/intersim/singlenet.cpp	/^void SingleNet::_BuildNet( const Configuration &config )$/;"	f	class:SingleNet
_BuildNet	src/intersim2/networks/anynet.cpp	/^void AnyNet::_BuildNet( const Configuration &config ){$/;"	f	class:AnyNet
_BuildNet	src/intersim2/networks/cmesh.cpp	/^void CMesh::_BuildNet( const Configuration& config ) {$/;"	f	class:CMesh
_BuildNet	src/intersim2/networks/dragonfly.cpp	/^void DragonFlyNew::_BuildNet( const Configuration &config )$/;"	f	class:DragonFlyNew
_BuildNet	src/intersim2/networks/fattree.cpp	/^void FatTree::_BuildNet( const Configuration& config )$/;"	f	class:FatTree
_BuildNet	src/intersim2/networks/flatfly_onchip.cpp	/^void FlatFlyOnChip::_BuildNet( const Configuration &config )$/;"	f	class:FlatFlyOnChip
_BuildNet	src/intersim2/networks/fly.cpp	/^void KNFly::_BuildNet( const Configuration &config )$/;"	f	class:KNFly
_BuildNet	src/intersim2/networks/kncube.cpp	/^void KNCube::_BuildNet( const Configuration &config )$/;"	f	class:KNCube
_BuildNet	src/intersim2/networks/qtree.cpp	/^void QTree::_BuildNet( const Configuration& config )$/;"	f	class:QTree
_BuildNet	src/intersim2/networks/tree4.cpp	/^void Tree4::_BuildNet( const Configuration& config )$/;"	f	class:Tree4
_CHANNEL_HPP	src/intersim2/channel.hpp	38;"	d
_CHAOS_ROUTER_HPP_	src/intersim2/routers/chaos_router.hpp	29;"	d
_CMESH_HPP_	src/intersim2/networks/cmesh.hpp	42;"	d
_CONFIG_UTILS_HPP_	src/intersim/config_utils.hpp	2;"	d
_CONFIG_UTILS_HPP_	src/intersim2/config_utils.hpp	29;"	d
_CREDIT_HPP_	src/intersim/credit.hpp	2;"	d
_CREDIT_HPP_	src/intersim2/credit.hpp	29;"	d
_CRT_SECURE_NO_DEPRECATE	src/gpuwattch/xmlParser.cc	84;"	d	file:
_CXML	src/gpuwattch/xmlParser.h	169;"	d
_CXML	src/gpuwattch/xmlParser.h	174;"	d
_ClassInject	src/intersim/trafficmanager.cpp	/^void TrafficManager::_ClassInject( )$/;"	f	class:TrafficManager
_ClearMatching	src/intersim/allocator.cpp	/^void Allocator::_ClearMatching( )$/;"	f	class:Allocator
_ClearStats	src/intersim/trafficmanager.cpp	/^void TrafficManager::_ClearStats( )$/;"	f	class:TrafficManager
_ClearStats	src/intersim2/batchtrafficmanager.cpp	/^void BatchTrafficManager::_ClearStats( )$/;"	f	class:BatchTrafficManager
_ClearStats	src/intersim2/trafficmanager.cpp	/^void TrafficManager::_ClearStats( )$/;"	f	class:TrafficManager
_ComputeAccepted	src/intersim/trafficmanager.cpp	/^int TrafficManager::_ComputeAccepted( double *avg, double *min ) const $/;"	f	class:TrafficManager
_ComputeLimit	src/intersim2/buffer_state.cpp	/^int BufferState::FeedbackSharedBufferPolicy::_ComputeLimit(int rtt) const$/;"	f	class:BufferState::FeedbackSharedBufferPolicy
_ComputeMaxSlots	src/intersim2/buffer_state.cpp	/^int BufferState::FeedbackSharedBufferPolicy::_ComputeMaxSlots(int vc) const$/;"	f	class:BufferState::FeedbackSharedBufferPolicy
_ComputeRTT	src/intersim2/buffer_state.cpp	/^int BufferState::FeedbackSharedBufferPolicy::_ComputeRTT(int vc, int last_rtt) const$/;"	f	class:BufferState::FeedbackSharedBufferPolicy
_ComputeSize	src/intersim/fly.cpp	/^void KNFly::_ComputeSize( const Configuration &config )$/;"	f	class:KNFly
_ComputeSize	src/intersim/kncube.cpp	/^void KNCube::_ComputeSize( const Configuration &config )$/;"	f	class:KNCube
_ComputeSize	src/intersim/singlenet.cpp	/^void SingleNet::_ComputeSize( const Configuration &config )$/;"	f	class:SingleNet
_ComputeSize	src/intersim2/networks/anynet.cpp	/^void AnyNet::_ComputeSize( const Configuration &config ){$/;"	f	class:AnyNet
_ComputeSize	src/intersim2/networks/cmesh.cpp	/^void CMesh::_ComputeSize( const Configuration &config ) {$/;"	f	class:CMesh
_ComputeSize	src/intersim2/networks/dragonfly.cpp	/^void DragonFlyNew::_ComputeSize( const Configuration &config )$/;"	f	class:DragonFlyNew
_ComputeSize	src/intersim2/networks/fattree.cpp	/^void FatTree::_ComputeSize( const Configuration& config )$/;"	f	class:FatTree
_ComputeSize	src/intersim2/networks/flatfly_onchip.cpp	/^void FlatFlyOnChip::_ComputeSize( const Configuration &config )$/;"	f	class:FlatFlyOnChip
_ComputeSize	src/intersim2/networks/fly.cpp	/^void KNFly::_ComputeSize( const Configuration &config )$/;"	f	class:KNFly
_ComputeSize	src/intersim2/networks/kncube.cpp	/^void KNCube::_ComputeSize( const Configuration &config )$/;"	f	class:KNCube
_ComputeSize	src/intersim2/networks/qtree.cpp	/^void QTree::_ComputeSize( const Configuration& config )$/;"	f	class:QTree
_ComputeSize	src/intersim2/networks/tree4.cpp	/^void Tree4::_ComputeSize( const Configuration& config )$/;"	f	class:Tree4
_ComputeStats	src/intersim2/trafficmanager.cpp	/^void TrafficManager::_ComputeStats( const vector<int> & stats, int *sum, int *min, int *max, int *min_pos, int *max_pos ) const$/;"	f	class:TrafficManager
_CreateBuffer	src/intersim2/interconnect_interface.cpp	/^void InterconnectInterface::_CreateBuffer()$/;"	f	class:InterconnectInterface
_CreateNodeMap	src/intersim2/interconnect_interface.cpp	/^void InterconnectInterface::_CreateNodeMap(unsigned n_shader, unsigned n_mem, unsigned n_node, int use_map)$/;"	f	class:InterconnectInterface
_DEBUG_CHIMERA	common/kernel_info_t.cc	9;"	d	file:
_DEBUG_PAUSE	common/kernel_info_t.cc	8;"	d	file:
_DEBUG_REMOVING	launcher/mk-sched/mk_scheduler.cc	11;"	d	file:
_DisplayMap	src/intersim2/interconnect_interface.cpp	/^void InterconnectInterface::_DisplayMap(int dim,int count)$/;"	f	class:InterconnectInterface
_DisplayRemaining	src/intersim/trafficmanager.cpp	/^void TrafficManager::_DisplayRemaining( ) const $/;"	f	class:TrafficManager
_DisplayRemaining	src/intersim2/trafficmanager.cpp	/^void TrafficManager::_DisplayRemaining( ostream & os ) const$/;"	f	class:TrafficManager
_DragonFly_HPP_	src/intersim2/networks/dragonfly.hpp	29;"	d
_EVENT_ROUTER_HPP_	src/intersim/event_router.hpp	2;"	d
_EVENT_ROUTER_HPP_	src/intersim2/routers/event_router.hpp	29;"	d
_EjectionBufferItem	src/intersim2/interconnect_interface.hpp	/^  typedef queue<Flit*> _EjectionBufferItem;$/;"	t	class:InterconnectInterface
_FLIT_HPP_	src/intersim/flit.hpp	2;"	d
_FLIT_HPP_	src/intersim2/flit.hpp	29;"	d
_FLY_HPP_	src/intersim/fly.hpp	2;"	d
_FLY_HPP_	src/intersim2/networks/fly.hpp	29;"	d
_FatTree_HPP_	src/intersim2/networks/fattree.hpp	42;"	d
_FindAvailMultiQueue	src/intersim2/routers/chaos_router.cpp	/^int ChaosRouter::_FindAvailMultiQueue( ) const$/;"	f	class:ChaosRouter
_FirstStep	src/intersim/trafficmanager.cpp	/^void TrafficManager::_FirstStep( )$/;"	f	class:TrafficManager
_FlatFlyOnChip_HPP_	src/intersim2/networks/flatfly_onchip.hpp	29;"	d
_GLOBALS_HPP_	src/intersim2/globals.hpp	29;"	d
_GPUTRAFFICMANAGER_HPP_	src/intersim2/gputrafficmanager.hpp	29;"	d
_GeneratePacket	src/intersim/trafficmanager.cpp	/^void TrafficManager::_GeneratePacket( int source, int psize \/*# of flits*\/ , $/;"	f	class:TrafficManager
_GeneratePacket	src/intersim2/gputrafficmanager.cpp	/^void GPUTrafficManager::_GeneratePacket(int source, int stype, int cl, int time, int subnet, int packet_size, const Flit::FlitType& packet_type, void* const data, int dest)$/;"	f	class:GPUTrafficManager
_GeneratePacket	src/intersim2/trafficmanager.cpp	/^void TrafficManager::_GeneratePacket( int source, int stype,$/;"	f	class:TrafficManager
_GetAveragePacketSize	src/intersim2/trafficmanager.cpp	/^double TrafficManager::_GetAveragePacketSize(int cl) const$/;"	f	class:TrafficManager
_GetNextPacketSize	src/intersim2/trafficmanager.cpp	/^int TrafficManager::_GetNextPacketSize(int cl) const$/;"	f	class:TrafficManager
_INJECTION_HPP_	src/intersim/injection.hpp	2;"	d
_INJECTION_HPP_	src/intersim2/injection.hpp	29;"	d
_INTERCONNECT_INTERFACE_HPP_	src/intersim2/interconnect_interface.hpp	29;"	d
_INTERSIM_CONFIG_HPP_	src/intersim2/intersim_config.hpp	29;"	d
_IQ_ROUTER_HPP_	src/intersim/iq_router.hpp	2;"	d
_IQ_ROUTER_HPP_	src/intersim2/routers/iq_router.hpp	29;"	d
_ISLIP_HPP_	src/intersim/islip.hpp	2;"	d
_ISLIP_HPP_	src/intersim2/allocators/islip.hpp	29;"	d
_InChannel	src/intersim/fly.cpp	/^int KNFly::_InChannel( int stage, int addr, int port ) const$/;"	f	class:KNFly
_InChannel	src/intersim2/networks/fly.cpp	/^int KNFly::_InChannel( int stage, int addr, int port ) const$/;"	f	class:KNFly
_IncomingFlits	src/intersim/event_router.cpp	/^void EventRouter::_IncomingFlits( )$/;"	f	class:EventRouter
_IncomingFlits	src/intersim2/routers/event_router.cpp	/^void EventRouter::_IncomingFlits( )$/;"	f	class:EventRouter
_Init	src/intersim/buffer_state.cpp	/^void BufferState::_Init( const Configuration& config )$/;"	f	class:BufferState
_Init	src/intersim/event_router.cpp	/^void EventNextVCState::_Init( const Configuration& config )$/;"	f	class:EventNextVCState
_Init	src/intersim/vc.cpp	/^void VC::_Init( const Configuration& config, int outputs )$/;"	f	class:VC
_Inject	src/intersim2/trafficmanager.cpp	/^void TrafficManager::_Inject(){$/;"	f	class:TrafficManager
_InputForOutput	src/intersim2/routers/chaos_router.cpp	/^int ChaosRouter::_InputForOutput( int output ) const$/;"	f	class:ChaosRouter
_InputIndex	src/intersim2/networks/qtree.cpp	/^int QTree::_InputIndex( int height, int pos, int port )$/;"	f	class:QTree
_InputQueuing	src/intersim/iq_router.cpp	/^void IQRouter::_InputQueuing( )$/;"	f	class:IQRouter
_InputQueuing	src/intersim2/routers/iq_router.cpp	/^void IQRouter::_InputQueuing( )$/;"	f	class:IQRouter
_InputReady	src/intersim2/routers/chaos_router.cpp	/^bool ChaosRouter::_InputReady( int input ) const$/;"	f	class:ChaosRouter
_InternalStep	src/intersim2/routers/chaos_router.cpp	/^void ChaosRouter::_InternalStep( )$/;"	f	class:ChaosRouter
_InternalStep	src/intersim2/routers/event_router.cpp	/^void EventRouter::_InternalStep( )$/;"	f	class:EventRouter
_InternalStep	src/intersim2/routers/iq_router.cpp	/^void IQRouter::_InternalStep( )$/;"	f	class:IQRouter
_IsEjectionChan	src/intersim2/routers/chaos_router.cpp	/^bool ChaosRouter::_IsEjectionChan( int chan ) const$/;"	f	class:ChaosRouter
_IsInjectionChan	src/intersim2/routers/chaos_router.cpp	/^bool ChaosRouter::_IsInjectionChan( int chan ) const$/;"	f	class:ChaosRouter
_IssuePacket	src/intersim/trafficmanager.cpp	/^int TrafficManager::_IssuePacket( int source, int cl ) const$/;"	f	class:TrafficManager
_IssuePacket	src/intersim2/batchtrafficmanager.cpp	/^int BatchTrafficManager::_IssuePacket( int source, int cl )$/;"	f	class:BatchTrafficManager
_IssuePacket	src/intersim2/gputrafficmanager.cpp	/^int  GPUTrafficManager::_IssuePacket( int source, int cl )$/;"	f	class:GPUTrafficManager
_IssuePacket	src/intersim2/trafficmanager.cpp	/^int TrafficManager::_IssuePacket( int source, int cl )$/;"	f	class:TrafficManager
_KNCUBE_HPP_	src/intersim/kncube.hpp	2;"	d
_KNCUBE_HPP_	src/intersim2/networks/kncube.hpp	29;"	d
_LOA_HPP_	src/intersim/loa.hpp	2;"	d
_LOA_HPP_	src/intersim2/allocators/loa.hpp	29;"	d
_LeftChannel	src/intersim/kncube.cpp	/^int KNCube::_LeftChannel( int node, int dim )$/;"	f	class:KNCube
_LeftChannel	src/intersim2/networks/kncube.cpp	/^int KNCube::_LeftChannel( int node, int dim )$/;"	f	class:KNCube
_LeftNode	src/intersim/kncube.cpp	/^int KNCube::_LeftNode( int node, int dim )$/;"	f	class:KNCube
_LeftNode	src/intersim2/networks/kncube.cpp	/^int KNCube::_LeftNode( int node, int dim )$/;"	f	class:KNCube
_LoadWatchList	src/intersim2/trafficmanager.cpp	/^void TrafficManager::_LoadWatchList(const string & filename){$/;"	f	class:TrafficManager
_MATRIX_ARB_HPP_	src/intersim2/arbiters/matrix_arb.hpp	35;"	d
_MAXSIZE_HPP_	src/intersim/maxsize.hpp	2;"	d
_MAXSIZE_HPP_	src/intersim2/allocators/maxsize.hpp	29;"	d
_MISC_UTILS_HPP_	src/intersim/misc_utils.hpp	2;"	d
_MISC_UTILS_HPP_	src/intersim2/misc_utils.hpp	29;"	d
_MODULE_HPP_	src/intersim/module.hpp	2;"	d
_MODULE_HPP_	src/intersim2/module.hpp	29;"	d
_MY_STACK_	src/gpgpu-sim/stack.h	29;"	d
_MultiQueueForOutput	src/intersim2/routers/chaos_router.cpp	/^int ChaosRouter::_MultiQueueForOutput( int output ) const$/;"	f	class:ChaosRouter
_MultiQueueFull	src/intersim2/routers/chaos_router.cpp	/^bool ChaosRouter::_MultiQueueFull( int mq ) const$/;"	f	class:ChaosRouter
_NETWORK_HPP_	src/intersim/network.hpp	2;"	d
_NETWORK_HPP_	src/intersim2/networks/network.hpp	29;"	d
_NewCredit	src/intersim/router.cpp	/^Credit *Router::_NewCredit( int vcs )$/;"	f	class:Router
_NewFlit	src/intersim/trafficmanager.cpp	/^Flit *TrafficManager::_NewFlit( )$/;"	f	class:TrafficManager
_NextInterestingChannel	src/intersim2/routers/chaos_router.cpp	/^void ChaosRouter::_NextInterestingChannel( ) $/;"	f	class:ChaosRouter
_Noreturn	build/src/cuda-sim/ptx.tab.c	380;"	d	file:
_Noreturn	build/src/cuda-sim/ptx.tab.c	382;"	d	file:
_Noreturn	build/src/cuda-sim/ptxinfo.tab.c	251;"	d	file:
_Noreturn	build/src/cuda-sim/ptxinfo.tab.c	253;"	d	file:
_Noreturn	src/intersim2/y.tab.c	229;"	d	file:
_Noreturn	src/intersim2/y.tab.c	231;"	d	file:
_OUTPUTSET_HPP_	src/intersim/outputset.hpp	2;"	d
_OUTPUTSET_HPP_	src/intersim2/outputset.hpp	29;"	d
_OutChannel	src/intersim/fly.cpp	/^int KNFly::_OutChannel( int stage, int addr, int port ) const$/;"	f	class:KNFly
_OutChannel	src/intersim2/networks/fly.cpp	/^int KNFly::_OutChannel( int stage, int addr, int port ) const$/;"	f	class:KNFly
_OutputAdvance	src/intersim2/routers/chaos_router.cpp	/^void ChaosRouter::_OutputAdvance( )$/;"	f	class:ChaosRouter
_OutputAvail	src/intersim2/routers/chaos_router.cpp	/^bool ChaosRouter::_OutputAvail( int out ) const$/;"	f	class:ChaosRouter
_OutputFull	src/intersim2/routers/chaos_router.cpp	/^bool ChaosRouter::_OutputFull( int out ) const$/;"	f	class:ChaosRouter
_OutputIndex	src/intersim2/networks/qtree.cpp	/^int QTree::_OutputIndex( int height, int pos, int port )$/;"	f	class:QTree
_OutputQueuing	src/intersim/event_router.cpp	/^void EventRouter::_OutputQueuing( )$/;"	f	class:EventRouter
_OutputQueuing	src/intersim/iq_router.cpp	/^void IQRouter::_OutputQueuing( )$/;"	f	class:IQRouter
_OutputQueuing	src/intersim2/routers/event_router.cpp	/^void EventRouter::_OutputQueuing( )$/;"	f	class:EventRouter
_OutputQueuing	src/intersim2/routers/iq_router.cpp	/^void IQRouter::_OutputQueuing( )$/;"	f	class:IQRouter
_OverallStatsCSV	src/intersim2/batchtrafficmanager.cpp	/^string BatchTrafficManager::_OverallStatsCSV(int c) const$/;"	f	class:BatchTrafficManager
_OverallStatsCSV	src/intersim2/trafficmanager.cpp	/^string TrafficManager::_OverallStatsCSV(int c) const$/;"	f	class:TrafficManager
_PACKET_REPLY_INFO_HPP_	src/intersim2/packet_reply_info.hpp	29;"	d
_PIM_HPP_	src/intersim/pim.hpp	2;"	d
_PIM_HPP_	src/intersim2/allocators/pim.hpp	29;"	d
_PIM_iter	src/intersim/pim.hpp	/^   int _PIM_iter;$/;"	m	class:PIM
_PIM_iter	src/intersim2/allocators/pim.hpp	/^  int _PIM_iter;$/;"	m	class:PIM
_PIPEFIFO_HPP_	src/intersim/pipefifo.hpp	2;"	d
_PIPEFIFO_HPP_	src/intersim2/pipefifo.hpp	29;"	d
_POWER_CONFIG_HPP_	src/intersim2/booksim_config.hpp	43;"	d
_POWER_MODULE_HPP_	src/intersim2/power/power_module.hpp	29;"	d
_PRIO_ARB_HPP_	src/intersim2/arbiters/prio_arb.hpp	29;"	d
_PacketsOutstanding	src/intersim/trafficmanager.cpp	/^bool TrafficManager::_PacketsOutstanding( ) const$/;"	f	class:TrafficManager
_PacketsOutstanding	src/intersim2/trafficmanager.cpp	/^bool TrafficManager::_PacketsOutstanding( ) const$/;"	f	class:TrafficManager
_ProcessWaiting	src/intersim/event_router.cpp	/^void EventRouter::_ProcessWaiting( int output, int out_vc )$/;"	f	class:EventRouter
_ProcessWaiting	src/intersim2/routers/event_router.cpp	/^void EventRouter::_ProcessWaiting( int output, int out_vc )$/;"	f	class:EventRouter
_QTREE_HPP_	src/intersim2/networks/qtree.hpp	43;"	d
_RANDOM_UTILS_HPP_	src/intersim/random_utils.hpp	2;"	d
_RANDOM_UTILS_HPP_	src/intersim2/random_utils.hpp	29;"	d
_RNG_HPP_	src/intersim/rng.hpp	2;"	d
_ROUNDROBIN_HPP_	src/intersim2/arbiters/roundrobin_arb.hpp	35;"	d
_ROUTEFUNC_HPP_	src/intersim/routefunc.hpp	2;"	d
_ROUTEFUNC_HPP_	src/intersim2/routefunc.hpp	29;"	d
_ROUTER_HPP_	src/intersim/router.hpp	2;"	d
_ROUTER_HPP_	src/intersim2/routers/router.hpp	29;"	d
_ReadROB	src/intersim/trafficmanager.cpp	/^Flit *TrafficManager::_ReadROB( int dest )$/;"	f	class:TrafficManager
_ReceiveCredits	src/intersim/event_router.cpp	/^void EventRouter::_ReceiveCredits( )$/;"	f	class:EventRouter
_ReceiveCredits	src/intersim/iq_router.cpp	/^void IQRouter::_ReceiveCredits( )$/;"	f	class:IQRouter
_ReceiveCredits	src/intersim2/routers/event_router.cpp	/^void EventRouter::_ReceiveCredits( )$/;"	f	class:EventRouter
_ReceiveCredits	src/intersim2/routers/iq_router.cpp	/^bool IQRouter::_ReceiveCredits( )$/;"	f	class:IQRouter
_ReceiveFlits	src/intersim/event_router.cpp	/^void EventRouter::_ReceiveFlits( )$/;"	f	class:EventRouter
_ReceiveFlits	src/intersim/iq_router.cpp	/^void IQRouter::_ReceiveFlits( )$/;"	f	class:IQRouter
_ReceiveFlits	src/intersim2/routers/event_router.cpp	/^void EventRouter::_ReceiveFlits( )$/;"	f	class:EventRouter
_ReceiveFlits	src/intersim2/routers/iq_router.cpp	/^bool IQRouter::_ReceiveFlits( )$/;"	f	class:IQRouter
_RetireCredit	src/intersim/router.cpp	/^void Router::_RetireCredit( Credit *c )$/;"	f	class:Router
_RetireFlit	src/intersim/trafficmanager.cpp	/^void TrafficManager::_RetireFlit( Flit *f, int dest )$/;"	f	class:TrafficManager
_RetireFlit	src/intersim2/batchtrafficmanager.cpp	/^void BatchTrafficManager::_RetireFlit( Flit *f, int dest )$/;"	f	class:BatchTrafficManager
_RetireFlit	src/intersim2/gputrafficmanager.cpp	/^void GPUTrafficManager::_RetireFlit( Flit *f, int dest )$/;"	f	class:GPUTrafficManager
_RetireFlit	src/intersim2/trafficmanager.cpp	/^void TrafficManager::_RetireFlit( Flit *f, int dest )$/;"	f	class:TrafficManager
_RightChannel	src/intersim/kncube.cpp	/^int KNCube::_RightChannel( int node, int dim )$/;"	f	class:KNCube
_RightChannel	src/intersim2/networks/kncube.cpp	/^int KNCube::_RightChannel( int node, int dim )$/;"	f	class:KNCube
_RightNode	src/intersim/kncube.cpp	/^int KNCube::_RightNode( int node, int dim )$/;"	f	class:KNCube
_RightNode	src/intersim2/networks/kncube.cpp	/^int KNCube::_RightNode( int node, int dim )$/;"	f	class:KNCube
_Route	src/intersim/iq_router.cpp	/^void IQRouter::_Route( )$/;"	f	class:IQRouter
_RouteEvaluate	src/intersim2/routers/iq_router.cpp	/^void IQRouter::_RouteEvaluate( )$/;"	f	class:IQRouter
_RouteUpdate	src/intersim2/routers/iq_router.cpp	/^void IQRouter::_RouteUpdate( )$/;"	f	class:IQRouter
_Router	src/intersim2/networks/fattree.cpp	/^Router*& FatTree::_Router( int depth, int pos ) $/;"	f	class:FatTree
_Router	src/intersim2/networks/tree4.cpp	/^Router*& Tree4::_Router( int height, int pos )$/;"	f	class:Tree4
_RouterIndex	src/intersim2/networks/qtree.cpp	/^int QTree::_RouterIndex( int height, int pos ) $/;"	f	class:QTree
_SELALLOC_HPP_	src/intersim/selalloc.hpp	2;"	d
_SELALLOC_HPP_	src/intersim2/allocators/selalloc.hpp	29;"	d
_SEPARABLE_HPP_	src/intersim2/allocators/separable.hpp	35;"	d
_SEPARABLE_INPUT_FIRST_HPP_	src/intersim2/allocators/separable_input_first.hpp	35;"	d
_SEPARABLE_OUTPUT_FIRST_HPP_	src/intersim2/allocators/separable_output_first.hpp	35;"	d
_SINGLENET_HPP_	src/intersim/singlenet.hpp	2;"	d
_STATS_HPP_	src/intersim/stats.hpp	2;"	d
_STATS_HPP_	src/intersim2/stats.hpp	29;"	d
_SWAlloc	src/intersim/iq_router.cpp	/^void IQRouter::_SWAlloc( )$/;"	f	class:IQRouter
_SWAllocAddReq	src/intersim2/routers/iq_router.cpp	/^bool IQRouter::_SWAllocAddReq(int input, int vc, int output)$/;"	f	class:IQRouter
_SWAllocEvaluate	src/intersim2/routers/iq_router.cpp	/^void IQRouter::_SWAllocEvaluate( )$/;"	f	class:IQRouter
_SWAllocUpdate	src/intersim2/routers/iq_router.cpp	/^void IQRouter::_SWAllocUpdate( )$/;"	f	class:IQRouter
_SWHoldEvaluate	src/intersim2/routers/iq_router.cpp	/^void IQRouter::_SWHoldEvaluate( )$/;"	f	class:IQRouter
_SWHoldUpdate	src/intersim2/routers/iq_router.cpp	/^void IQRouter::_SWHoldUpdate( )$/;"	f	class:IQRouter
_SWITCH_MONITOR_HPP_	src/intersim2/power/switch_monitor.hpp	29;"	d
_SendCredits	src/intersim/event_router.cpp	/^void EventRouter::_SendCredits( )$/;"	f	class:EventRouter
_SendCredits	src/intersim/iq_router.cpp	/^void IQRouter::_SendCredits( )$/;"	f	class:IQRouter
_SendCredits	src/intersim2/routers/chaos_router.cpp	/^void ChaosRouter::_SendCredits( )$/;"	f	class:ChaosRouter
_SendCredits	src/intersim2/routers/event_router.cpp	/^void EventRouter::_SendCredits( )$/;"	f	class:EventRouter
_SendCredits	src/intersim2/routers/iq_router.cpp	/^void IQRouter::_SendCredits( )$/;"	f	class:IQRouter
_SendFlits	src/intersim/event_router.cpp	/^void EventRouter::_SendFlits( )$/;"	f	class:EventRouter
_SendFlits	src/intersim/iq_router.cpp	/^void IQRouter::_SendFlits( )$/;"	f	class:IQRouter
_SendFlits	src/intersim2/routers/chaos_router.cpp	/^void ChaosRouter::_SendFlits( )$/;"	f	class:ChaosRouter
_SendFlits	src/intersim2/routers/event_router.cpp	/^void EventRouter::_SendFlits( )$/;"	f	class:EventRouter
_SendFlits	src/intersim2/routers/iq_router.cpp	/^void IQRouter::_SendFlits( )$/;"	f	class:IQRouter
_SendTransport	src/intersim/event_router.cpp	/^void EventRouter::_SendTransport( int input, int output, tArrivalEvent *aevt )$/;"	f	class:EventRouter
_SendTransport	src/intersim2/routers/event_router.cpp	/^void EventRouter::_SendTransport( int input, int output, tArrivalEvent *aevt )$/;"	f	class:EventRouter
_ShortestAugmenting	src/intersim/maxsize.cpp	/^bool MaxSizeMatch::_ShortestAugmenting( )$/;"	f	class:MaxSizeMatch
_ShortestAugmenting	src/intersim2/allocators/maxsize.cpp	/^bool MaxSizeMatch::_ShortestAugmenting( )$/;"	f	class:MaxSizeMatch
_SingleSim	src/intersim/trafficmanager.cpp	/^bool TrafficManager::_SingleSim( )$/;"	f	class:TrafficManager
_SingleSim	src/intersim2/batchtrafficmanager.cpp	/^bool BatchTrafficManager::_SingleSim( )$/;"	f	class:BatchTrafficManager
_SingleSim	src/intersim2/trafficmanager.cpp	/^bool TrafficManager::_SingleSim( )$/;"	f	class:TrafficManager
_Step	src/intersim/trafficmanager.cpp	/^void TrafficManager::_Step( )$/;"	f	class:TrafficManager
_Step	src/intersim2/gputrafficmanager.cpp	/^void GPUTrafficManager::_Step()$/;"	f	class:GPUTrafficManager
_Step	src/intersim2/trafficmanager.cpp	/^void TrafficManager::_Step( )$/;"	f	class:TrafficManager
_SwitchEvaluate	src/intersim2/routers/iq_router.cpp	/^void IQRouter::_SwitchEvaluate( )$/;"	f	class:IQRouter
_SwitchUpdate	src/intersim2/routers/iq_router.cpp	/^void IQRouter::_SwitchUpdate( )$/;"	f	class:IQRouter
_TIMED_MODULE_HPP_	src/intersim2/timed_module.hpp	29;"	d
_TRAFFICMANAGER_HPP_	src/intersim/trafficmanager.hpp	2;"	d
_TRAFFICMANAGER_HPP_	src/intersim2/trafficmanager.hpp	29;"	d
_TRAFFIC_HPP_	src/intersim/traffic.hpp	2;"	d
_TRAFFIC_HPP_	src/intersim2/traffic.hpp	29;"	d
_TREE4_HPP_	src/intersim2/networks/tree4.hpp	43;"	d
_TREE_ARB_HPP_	src/intersim2/arbiters/tree_arb.hpp	35;"	d
_TransportArb	src/intersim/event_router.cpp	/^void EventRouter::_TransportArb( int input ) $/;"	f	class:EventRouter
_TransportArb	src/intersim2/routers/event_router.cpp	/^void EventRouter::_TransportArb( int input ) $/;"	f	class:EventRouter
_TransportRequests	src/intersim/event_router.cpp	/^void EventRouter::_TransportRequests( int output )$/;"	f	class:EventRouter
_TransportRequests	src/intersim2/routers/event_router.cpp	/^void EventRouter::_TransportRequests( int output )$/;"	f	class:EventRouter
_UpdateNOQ	src/intersim2/routers/iq_router.cpp	/^void IQRouter::_UpdateNOQ(int input, int vc, Flit const * f) {$/;"	f	class:IQRouter
_UpdateOverallStats	src/intersim2/batchtrafficmanager.cpp	/^void BatchTrafficManager::_UpdateOverallStats() {$/;"	f	class:BatchTrafficManager
_UpdateOverallStats	src/intersim2/trafficmanager.cpp	/^void TrafficManager::_UpdateOverallStats() {$/;"	f	class:TrafficManager
_VCAlloc	src/intersim/iq_router.cpp	/^void IQRouter::_VCAlloc( )$/;"	f	class:IQRouter
_VCAllocEvaluate	src/intersim2/routers/iq_router.cpp	/^void IQRouter::_VCAllocEvaluate( )$/;"	f	class:IQRouter
_VCAllocUpdate	src/intersim2/routers/iq_router.cpp	/^void IQRouter::_VCAllocUpdate( )$/;"	f	class:IQRouter
_VC_HPP_	src/intersim/vc.hpp	2;"	d
_VC_HPP_	src/intersim2/vc.hpp	29;"	d
_VOQInject	src/intersim/trafficmanager.cpp	/^void TrafficManager::_VOQInject( )$/;"	f	class:TrafficManager
_WAVEFRONT_HPP_	src/intersim/wavefront.hpp	2;"	d
_WAVEFRONT_HPP_	src/intersim2/allocators/wavefront.hpp	29;"	d
_WireLatency	src/intersim2/networks/tree4.cpp	/^int Tree4::_WireLatency( int height1, int pos1, int height2, int pos2 )$/;"	f	class:Tree4
_XMLWIDECHAR	src/gpuwattch/xmlParser.h	128;"	d
_XMLWIDECHAR	src/gpuwattch/xmlParser.h	154;"	d
_XMLWINDOWS	src/gpuwattch/xmlParser.h	133;"	d
_XMLWINDOWS	src/gpuwattch/xmlParser.h	153;"	d
__ALDRAM_H	src/ramulator_sim/ALDRAM.h	2;"	d
__ARBITER__	src/gpuwattch/cacti/arbiter.h	33;"	d
__AREA_H__	src/gpuwattch/cacti/area.h	35;"	d
__BANK_H__	src/gpuwattch/cacti/bank.h	35;"	d
__BASIC_CIRCUIT_H__	src/gpuwattch/cacti/basic_circuit.h	35;"	d
__CACHE_H	src/ramulator_sim/Cache.h	2;"	d
__CACTI_INTERFACE_H__	src/gpuwattch/cacti/cacti_interface.h	35;"	d
__CHILD_PROCESS_H__	launcher/child_process.h	2;"	d
__COMMUNICATE_H__	launcher/communicate.h	2;"	d
__COMPONENT_H__	src/gpuwattch/cacti/component.h	35;"	d
__CONFIG_H	src/ramulator_sim/Config.h	2;"	d
__CONST_H__	src/gpuwattch/cacti/const.h	33;"	d
__CONTROLLER_H	src/ramulator_sim/Controller.h	2;"	d
__CROSSBAR__	src/gpuwattch/cacti/crossbar.h	34;"	d
__CUDA_ARRAY_H__	common/cuda_array.h	2;"	d
__CUDA_INTERNAL_COMPILATION__	src/cuda-sim/cuda-math.h	103;"	d
__CUDA_INTERNAL_COMPILATION__	src/cuda-sim/cuda-math.h	105;"	d
__CUDA_RUNTIME_API_H__	launcher/simulator.h	8;"	d
__CUDA_RUNTIME_API_H__	libcuda/cuda_runtime_api.cc	124;"	d	file:
__DDR3_H	src/ramulator_sim/DDR3.h	2;"	d
__DDR4_H	src/ramulator_sim/DDR4.h	2;"	d
__DECODER_H__	src/gpuwattch/cacti/decoder.h	34;"	d
__DIM3_DEFINED__	common/kernel_config.h	11;"	d
__DIM3_DEFINED__	common/kernel_info_t.h	19;"	d
__DRAM_H	src/ramulator_sim/DRAM.h	2;"	d
__EVEN_SCHEDULER_H__	launcher/mk-sched/even_scheduler.h	2;"	d
__FIXED_SCHEDULER_H__	launcher/mk-sched/fixed_scheduler.h	2;"	d
__GDDR5_H	src/ramulator_sim/GDDR5.h	2;"	d
__GPGPU_PTX_SIM_ARG_H__	common/gpgpu_ptx_sim_arg.h	2;"	d
__GPU_WRAPPER_H	src/ramulator_sim/gpu_wrapper.h	2;"	d
__HARD_CONSTS_H__	common/hard_consts.h	2;"	d
__HBM_H	src/ramulator_sim/HBM.h	2;"	d
__HIGHRADIX__	src/gpuwattch/cacti/highradix.h	43;"	d
__HTREE2_H__	src/gpuwattch/cacti/htree2.h	34;"	d
__INCLUDE_XML_NODE__	src/gpuwattch/xmlParser.h	118;"	d
__INTERCONNECT_H__	src/gpuwattch/interconnect.h	34;"	d
__IO_H__	src/gpuwattch/cacti/io.h	34;"	d
__KERNEL_CONFIG_H__	common/kernel_config.h	2;"	d
__LAUNCHER_OPTION_PARSER_H__	launcher/launcher_option_parser.h	2;"	d
__LPDDR3_H	src/ramulator_sim/LPDDR3.h	2;"	d
__LPDDR4_H	src/ramulator_sim/LPDDR4.h	2;"	d
__MAT_H__	src/gpuwattch/cacti/mat.h	35;"	d
__MEMORY_FACTORY_H	src/ramulator_sim/MemoryFactory.h	2;"	d
__MEMORY_H	src/ramulator_sim/Memory.h	2;"	d
__MK_SCHEDULER_H__	launcher/mk-sched/mk_scheduler.h	2;"	d
__NAMED_INFO_H__	launcher/mk-sched/named_info.h	2;"	d
__NUCA_H__	src/gpuwattch/cacti/nuca.h	34;"	d
__PARAMETER_H__	src/gpuwattch/cacti/parameter.h	35;"	d
__REFRESH_H_	src/ramulator_sim/Refresh.h	17;"	d
__REQUEST_H	src/ramulator_sim/Request.h	2;"	d
__ROUTER_H__	src/gpuwattch/cacti/router.h	35;"	d
__SALP_H	src/ramulator_sim/SALP.h	2;"	d
__SCHEDULER_H	src/ramulator_sim/Scheduler.h	2;"	d
__SHADER_TRACE_H__	src/gpgpu-sim/shader_trace.h	30;"	d
__SHD_WARP_T_H__	common/shd_warp_t.h	2;"	d
__SIMULATOR_H__	launcher/simulator.h	2;"	d
__SMART_EVEN_SCHEDULER_H__	launcher/mk-sched/smart_even_scheduler.h	2;"	d
__SPEEDYCONTROLLER_H	src/ramulator_sim/SpeedyController.h	2;"	d
__STATISTICS_H	src/ramulator_sim/Statistics.h	2;"	d
__STATS_H__	launcher/stats/stats.h	2;"	d
__STATTYPE_H	src/ramulator_sim/StatType.h	2;"	d
__STDC_LIMIT_MACROS	build/src/cuda-sim/lex.ptx_.c	59;"	d	file:
__STDC_LIMIT_MACROS	build/src/cuda-sim/lex.ptxinfo_.c	59;"	d	file:
__STDC_LIMIT_MACROS	src/intersim2/lex.yy.c	39;"	d	file:
__SUBARRAY_H__	src/gpuwattch/cacti/subarray.h	35;"	d
__TLDRAM_H	src/ramulator_sim/TLDRAM.h	2;"	d
__TRACE_H__	src/trace.h	32;"	d
__UCACHE_H__	src/gpuwattch/cacti/Ucache.h	34;"	d
__UCA_H__	src/gpuwattch/cacti/uca.h	35;"	d
__WARP_CONSTS_H__	common/warp_consts.h	2;"	d
__WIDEIO2_H	src/ramulator_sim/WideIO2.h	2;"	d
__WIDEIO_H	src/ramulator_sim/WideIO.h	2;"	d
__WIRE_H__	src/gpuwattch/cacti/wire.h	35;"	d
__attribute__	src/cuda-sim/cuda-math.h	106;"	d
__attribute__	src/cuda-sim/cuda-math.h	74;"	d
__cudaMutexOperation	libcuda/cuda_runtime_api.cc	/^void CUDARTAPI __cudaMutexOperation(int lock)$/;"	f
__cudaMutexOperation	libcuda/cuda_runtime_api.cc	/^void CUDARTAPI __cudaMutexOperation(int lock)$/;"	f	namespace:cuda_math
__cudaRegisterFatBinary	launcher/simulator.cc	/^Simulator::__cudaRegisterFatBinary(unsigned long long fat_cubin_handle, const char* ptx)$/;"	f	class:Simulator
__cudaRegisterFatBinary	libcuda/cuda_runtime_api.cc	/^void** CUDARTAPI __cudaRegisterFatBinary( void *fatCubin )$/;"	f
__cudaRegisterFunction	launcher/simulator.cc	/^Simulator::__cudaRegisterFunction(unsigned fat_cubin_handle,$/;"	f	class:Simulator
__cudaRegisterFunction	libcuda/cuda_runtime_api.cc	/^void CUDARTAPI __cudaRegisterFunction($/;"	f
__cudaRegisterShared	libcuda/cuda_runtime_api.cc	/^void __cudaRegisterShared($/;"	f
__cudaRegisterSharedVar	libcuda/cuda_runtime_api.cc	/^void CUDARTAPI __cudaRegisterSharedVar($/;"	f
__cudaRegisterTexture	launcher/simulator.cc	/^Simulator::__cudaRegisterTexture(const struct textureReference *hostVar, const char* deviceName, int dim, int norm, int ext)$/;"	f	class:Simulator
__cudaRegisterTexture	libcuda/cuda_runtime_api.cc	/^void __cudaRegisterTexture($/;"	f
__cudaRegisterVar	libcuda/cuda_runtime_api.cc	/^extern void __cudaRegisterVar($/;"	f
__cudaSynchronizeThreads	libcuda/cuda_runtime_api.cc	/^int CUDARTAPI __cudaSynchronizeThreads(void**, void*)$/;"	f
__cudaSynchronizeThreads	libcuda/cuda_runtime_api.cc	/^int CUDARTAPI __cudaSynchronizeThreads(void**, void*)$/;"	f	namespace:cuda_math
__cudaTextureFetch	libcuda/cuda_runtime_api.cc	/^void  CUDARTAPI __cudaTextureFetch(const void *tex, void *index, int integer, void *val) $/;"	f
__cudaTextureFetch	libcuda/cuda_runtime_api.cc	/^void  CUDARTAPI __cudaTextureFetch(const void *tex, void *index, int integer, void *val) $/;"	f	namespace:cuda_math
__cudaUnregisterFatBinary	libcuda/cuda_runtime_api.cc	/^void __cudaUnregisterFatBinary(void **fatCubinHandle)$/;"	f
__dv	libcuda/cuda_runtime_api.cc	172;"	d	file:
__dv	libcuda/cuda_runtime_api.cc	175;"	d	file:
__ll2float_rd	src/cuda-sim/cuda-math.h	/^float __ll2float_rd(long long int a) {$/;"	f	namespace:cuda_math
__ll2float_ru	src/cuda-sim/cuda-math.h	/^float __ll2float_ru(long long int a) {$/;"	f	namespace:cuda_math
__ll2float_rz	src/cuda-sim/cuda-math.h	/^float __ll2float_rz(long long int a) {$/;"	f	namespace:cuda_math
__my_func__	launcher/simulator.cc	16;"	d	file:
__my_func__	launcher/simulator.cc	19;"	d	file:
__my_func__	launcher/simulator.cc	21;"	d	file:
__my_func__	libcuda/cuda_runtime_api.cc	187;"	d	file:
__my_func__	libcuda/cuda_runtime_api.cc	190;"	d	file:
__my_func__	libcuda/cuda_runtime_api.cc	193;"	d	file:
__my_func__	libcuda/cuda_runtime_api.cc	195;"	d	file:
_a	src/intersim2/networks/dragonfly.hpp	/^  int _p, _a, _g;$/;"	m	class:DragonFlyNew
_acc_stopping_threshold	src/intersim2/trafficmanager.hpp	/^  vector<double> _acc_stopping_threshold;$/;"	m	class:TrafficManager
_acc_warmup_threshold	src/intersim2/trafficmanager.hpp	/^  vector<double> _acc_warmup_threshold;$/;"	m	class:TrafficManager
_accepted_flits	src/intersim2/trafficmanager.hpp	/^  vector<vector<int> > _accepted_flits;$/;"	m	class:TrafficManager
_accepted_packets	src/intersim/trafficmanager.hpp	/^   Stats **_accepted_packets;$/;"	m	class:TrafficManager
_accepted_packets	src/intersim2/trafficmanager.hpp	/^  vector<vector<int> > _accepted_packets;$/;"	m	class:TrafficManager
_active	src/intersim2/flitchannel.hpp	/^  vector<int> _active;$/;"	m	class:FlitChannel
_active	src/intersim2/routers/event_router.hpp	/^  vector<vector<bool> > _active;$/;"	m	class:EventRouter
_active	src/intersim2/routers/iq_router.hpp	/^  bool _active;$/;"	m	class:IQRouter
_active_cycles	src/intersim/vc.hpp	/^   int _active_cycles;$/;"	m	class:VC
_active_list	src/intersim/trafficmanager.hpp	/^   list<int>    *_active_list;$/;"	m	class:TrafficManager
_active_packets	src/intersim2/routers/router.hpp	/^  vector<vector<int> > _active_packets;$/;"	m	class:Router
_active_packets_out	src/intersim2/trafficmanager.hpp	/^  ostream * _active_packets_out;$/;"	m	class:TrafficManager
_active_vc	src/intersim/trafficmanager.hpp	/^   bool         **_active_vc;$/;"	m	class:TrafficManager
_active_vcs	src/intersim2/buffer_state.hpp	/^    int _active_vcs;$/;"	m	class:BufferState::LimitedSharedBufferPolicy
_aging_scale	src/intersim2/buffer_state.hpp	/^    int _aging_scale;$/;"	m	class:BufferState::FeedbackSharedBufferPolicy
_all	src/intersim2/credit.cpp	/^stack<Credit *> Credit::_all;$/;"	m	class:Credit	file:
_all	src/intersim2/credit.hpp	/^  static stack<Credit *> _all;$/;"	m	class:Credit
_all	src/intersim2/flit.cpp	/^stack<Flit *> Flit::_all;$/;"	m	class:Flit	file:
_all	src/intersim2/flit.hpp	/^  static stack<Flit *> _all;$/;"	m	class:Flit
_all	src/intersim2/packet_reply_info.cpp	/^stack<PacketReplyInfo*> PacketReplyInfo::_all;$/;"	m	class:PacketReplyInfo	file:
_all	src/intersim2/packet_reply_info.hpp	/^  static stack<PacketReplyInfo*> _all;$/;"	m	class:PacketReplyInfo
_alpha	src/intersim2/injection.hpp	/^  double _alpha;$/;"	m	class:OnOffInjectionProcess
_aptrs	src/intersim/islip.hpp	/^   int *_aptrs;$/;"	m	class:iSLIP_Sparse
_aptrs	src/intersim/selalloc.hpp	/^   int *_aptrs;$/;"	m	class:SelAlloc
_aptrs	src/intersim2/allocators/islip.hpp	/^  vector<int> _aptrs;$/;"	m	class:iSLIP_Sparse
_aptrs	src/intersim2/allocators/selalloc.hpp	/^  vector<int> _aptrs;$/;"	m	class:SelAlloc
_arrival_arbiter	src/intersim/event_router.hpp	/^   PriorityArbiter             **_arrival_arbiter;$/;"	m	class:EventRouter
_arrival_arbiter	src/intersim2/routers/event_router.hpp	/^  vector<PriorityArbiter*> _arrival_arbiter;$/;"	m	class:EventRouter
_arrival_pipe	src/intersim/event_router.hpp	/^   PipelineFIFO<tArrivalEvent> *_arrival_pipe;$/;"	m	class:EventRouter
_arrival_pipe	src/intersim2/routers/event_router.hpp	/^  PipelineFIFO<tArrivalEvent> *_arrival_pipe;$/;"	m	class:EventRouter
_arrival_queue	src/intersim/event_router.hpp	/^   queue<tArrivalEvent *>      *_arrival_queue;$/;"	m	class:EventRouter
_arrival_queue	src/intersim2/routers/event_router.hpp	/^  vector<queue<tArrivalEvent *> > _arrival_queue;$/;"	m	class:EventRouter
_batch_count	src/intersim2/batchtrafficmanager.hpp	/^  int _batch_count;$/;"	m	class:BatchTrafficManager
_batch_size	src/intersim2/batchtrafficmanager.hpp	/^  int _batch_size;$/;"	m	class:BatchTrafficManager
_batch_time	src/intersim2/batchtrafficmanager.hpp	/^  Stats * _batch_time;$/;"	m	class:BatchTrafficManager
_best_input	src/intersim2/arbiters/arbiter.hpp	/^  int _best_input;$/;"	m	class:Arbiter
_beta	src/intersim2/injection.hpp	/^  double _beta;$/;"	m	class:OnOffInjectionProcess
_bin_size	src/intersim/stats.hpp	/^   double _bin_size;$/;"	m	class:Stats
_bin_size	src/intersim2/stats.hpp	/^  double _bin_size;$/;"	m	class:Stats
_boundary_buffer	src/intersim2/interconnect_interface.hpp	/^  vector<vector<vector<_BoundaryBufferItem> > > _boundary_buffer;$/;"	m	class:InterconnectInterface
_boundary_buffer_capacity	src/intersim2/interconnect_interface.hpp	/^  unsigned int _boundary_buffer_capacity;$/;"	m	class:InterconnectInterface
_buf	src/intersim2/routers/event_router.hpp	/^  vector<Buffer *> _buf;$/;"	m	class:EventRouter
_buf	src/intersim2/routers/iq_router.hpp	/^  vector<Buffer *> _buf;$/;"	m	class:IQRouter
_buf_size	src/intersim/buffer_state.hpp	/^   int  _buf_size;$/;"	m	class:BufferState
_buf_size	src/intersim/event_router.hpp	/^   int _buf_size;$/;"	m	class:EventNextVCState
_buf_size	src/intersim2/buffer_state.hpp	/^    int _buf_size;$/;"	m	class:BufferState::SharedBufferPolicy
_buf_size	src/intersim2/routers/event_router.hpp	/^  int _buf_size;$/;"	m	class:EventNextVCState
_buf_states	src/intersim/trafficmanager.hpp	/^   BufferState **_buf_states;$/;"	m	class:TrafficManager
_buf_states	src/intersim2/trafficmanager.hpp	/^  vector<vector<BufferState *> > _buf_states;$/;"	m	class:TrafficManager
_buffer	src/intersim/vc.hpp	/^   queue<Flit *> _buffer;$/;"	m	class:VC
_buffer	src/intersim2/interconnect_interface.hpp	/^    queue<void *> _buffer;$/;"	m	class:InterconnectInterface::_BoundaryBufferItem
_buffer	src/intersim2/vc.hpp	/^  deque<Flit *> _buffer;$/;"	m	class:VC
_bufferMonitor	src/intersim2/routers/iq_router.hpp	/^  BufferMonitor * _bufferMonitor ;$/;"	m	class:IQRouter
_buffer_busy_stalls	src/intersim2/routers/router.hpp	/^  vector<int> _buffer_busy_stalls;$/;"	m	class:Router
_buffer_busy_stalls	src/intersim2/trafficmanager.hpp	/^  vector<vector<int> > _buffer_busy_stalls;$/;"	m	class:TrafficManager
_buffer_conflict_stalls	src/intersim2/routers/router.hpp	/^  vector<int> _buffer_conflict_stalls;$/;"	m	class:Router
_buffer_conflict_stalls	src/intersim2/trafficmanager.hpp	/^  vector<vector<int> > _buffer_conflict_stalls;$/;"	m	class:TrafficManager
_buffer_full_stalls	src/intersim2/routers/router.hpp	/^  vector<int> _buffer_full_stalls;$/;"	m	class:Router
_buffer_full_stalls	src/intersim2/trafficmanager.hpp	/^  vector<vector<int> > _buffer_full_stalls;$/;"	m	class:TrafficManager
_buffer_policy	src/intersim2/buffer_state.hpp	/^  BufferPolicy * _buffer_policy;$/;"	m	class:BufferState
_buffer_reserved_stalls	src/intersim2/routers/router.hpp	/^  vector<int> _buffer_reserved_stalls;$/;"	m	class:Router
_buffer_reserved_stalls	src/intersim2/trafficmanager.hpp	/^  vector<vector<int> > _buffer_reserved_stalls;$/;"	m	class:TrafficManager
_buffer_size	src/intersim2/routers/chaos_router.hpp	/^  int _buffer_size;$/;"	m	class:ChaosRouter
_buffer_state	src/intersim2/buffer_state.hpp	/^    BufferState const * const _buffer_state;$/;"	m	class:BufferState::BufferPolicy
_c	src/intersim2/networks/cmesh.hpp	/^  int _c ;$/;"	m	class:CMesh
_c	src/intersim2/networks/flatfly_onchip.hpp	/^  int _c;$/;"	m	class:FlatFlyOnChip
_cX	src/intersim2/networks/cmesh.cpp	/^int CMesh::_cX = 0 ;$/;"	m	class:CMesh	file:
_cX	src/intersim2/networks/cmesh.hpp	/^  static int _cX ;$/;"	m	class:CMesh
_cY	src/intersim2/networks/cmesh.cpp	/^int CMesh::_cY = 0 ;$/;"	m	class:CMesh	file:
_cY	src/intersim2/networks/cmesh.hpp	/^  static int _cY ;$/;"	m	class:CMesh
_chan	src/intersim/network.hpp	/^   Flit   **_chan;$/;"	m	class:Network
_chan	src/intersim2/networks/network.hpp	/^  vector<FlitChannel *> _chan;$/;"	m	class:Network
_chan_cred	src/intersim/network.hpp	/^   Credit **_chan_cred;$/;"	m	class:Network
_chan_cred	src/intersim2/networks/network.hpp	/^  vector<CreditChannel *> _chan_cred;$/;"	m	class:Network
_chan_use	src/intersim/network.hpp	/^   int *_chan_use;$/;"	m	class:Network
_chan_use_cycles	src/intersim/network.hpp	/^   int _chan_use_cycles;$/;"	m	class:Network
_channelWidth	src/intersim2/networks/tree4.hpp	/^  int _channelWidth;$/;"	m	class:Tree4
_channel_faults	src/intersim/router.hpp	/^   vector<bool>      *_channel_faults;$/;"	m	class:Router
_channel_faults	src/intersim2/routers/router.hpp	/^  vector<bool>            _channel_faults;$/;"	m	class:Router
_channels	src/intersim/network.hpp	/^   int _channels;$/;"	m	class:Network
_channels	src/intersim2/networks/network.hpp	/^  int _channels;$/;"	m	class:Network
_children	src/intersim/module.hpp	/^   vector<Module *> _children;$/;"	m	class:Module
_children	src/intersim2/module.hpp	/^  vector<Module *> _children;$/;"	m	class:Module
_class_occupancy	src/intersim2/buffer.hpp	/^  vector<int> _class_occupancy;$/;"	m	class:Buffer
_class_occupancy	src/intersim2/buffer_state.hpp	/^  vector<int> _class_occupancy;$/;"	m	class:BufferState
_class_priority	src/intersim2/trafficmanager.hpp	/^  vector<int> _class_priority;$/;"	m	class:TrafficManager
_classes	src/intersim/trafficmanager.hpp	/^   int       _classes;$/;"	m	class:TrafficManager
_classes	src/intersim2/buffer_state.hpp	/^  int _classes;$/;"	m	class:BufferState
_classes	src/intersim2/flitchannel.hpp	/^  int _classes;$/;"	m	class:FlitChannel
_classes	src/intersim2/networks/network.hpp	/^  int _classes;$/;"	m	class:Network
_classes	src/intersim2/power/buffer_monitor.hpp	/^  int  _classes ;$/;"	m	class:BufferMonitor
_classes	src/intersim2/power/switch_monitor.hpp	/^  int  _classes ;$/;"	m	class:SwitchMonitor
_classes	src/intersim2/routers/router.hpp	/^  int _classes;$/;"	m	class:Router
_classes	src/intersim2/trafficmanager.hpp	/^  int    _classes;$/;"	m	class:TrafficManager
_config_file	src/intersim/config_utils.hpp	/^   FILE *_config_file;$/;"	m	class:Configuration
_config_file	src/intersim2/config_utils.hpp	/^  FILE * _config_file;$/;"	m	class:Configuration
_config_string	src/intersim2/config_utils.hpp	/^  string _config_string;$/;"	m	class:Configuration
_counts	src/intersim/loa.hpp	/^   int *_counts;$/;"	m	class:LOA
_counts	src/intersim2/allocators/loa.hpp	/^  vector<int> _counts;$/;"	m	class:LOA
_credit_buffer	src/intersim2/routers/iq_router.hpp	/^  vector<queue<Credit *> > _credit_buffer;$/;"	m	class:IQRouter
_credit_delay	src/intersim/router.hpp	/^   int _credit_delay;$/;"	m	class:Router
_credit_delay	src/intersim2/routers/router.hpp	/^  int _credit_delay;$/;"	m	class:Router
_credit_pipe	src/intersim/event_router.hpp	/^   PipelineFIFO<Credit> *_credit_pipe;$/;"	m	class:EventRouter
_credit_pipe	src/intersim/iq_router.hpp	/^   PipelineFIFO<Credit> *_credit_pipe;$/;"	m	class:IQRouter
_credit_pipe	src/intersim2/routers/event_router.hpp	/^  PipelineFIFO<Credit> *_credit_pipe;$/;"	m	class:EventRouter
_credit_queue	src/intersim2/routers/chaos_router.hpp	/^  vector<queue<Credit *> > _credit_queue;$/;"	m	class:ChaosRouter
_credits	src/intersim/event_router.hpp	/^   int *_credits;$/;"	m	class:EventNextVCState
_credits	src/intersim2/routers/event_router.hpp	/^  vector<int> _credits;$/;"	m	class:EventNextVCState
_crossbar_conflict_stalls	src/intersim2/routers/router.hpp	/^  vector<int> _crossbar_conflict_stalls;$/;"	m	class:Router
_crossbar_conflict_stalls	src/intersim2/trafficmanager.hpp	/^  vector<vector<int> > _crossbar_conflict_stalls;$/;"	m	class:TrafficManager
_crossbar_delay	src/intersim2/routers/router.hpp	/^  int _crossbar_delay;$/;"	m	class:Router
_crossbar_flits	src/intersim2/routers/iq_router.hpp	/^  deque<pair<int, pair<Flit *, pair<int, int> > > > _crossbar_flits;$/;"	m	class:IQRouter
_crossbar_pipe	src/intersim/event_router.hpp	/^   PipelineFIFO<Flit>   *_crossbar_pipe;$/;"	m	class:EventRouter
_crossbar_pipe	src/intersim/iq_router.hpp	/^   PipelineFIFO<Flit>   *_crossbar_pipe;$/;"	m	class:IQRouter
_crossbar_pipe	src/intersim2/routers/chaos_router.hpp	/^  PipelineFIFO<Flit>   *_crossbar_pipe;$/;"	m	class:ChaosRouter
_crossbar_pipe	src/intersim2/routers/event_router.hpp	/^  PipelineFIFO<Flit>   *_crossbar_pipe;$/;"	m	class:EventRouter
_cuda_device_id	launcher/simulator.h	/^    _cuda_device_id(gpgpu_sim* gpu) {m_id = 0; m_next = NULL; m_gpgpu=gpu;}$/;"	f	struct:Simulator::_cuda_device_id
_cuda_device_id	launcher/simulator.h	/^  struct _cuda_device_id {$/;"	s	class:Simulator
_cur_channel	src/intersim2/routers/chaos_router.hpp	/^  int _cur_channel;$/;"	m	class:ChaosRouter
_cur_id	src/intersim/trafficmanager.hpp	/^   int _cur_id;$/;"	m	class:TrafficManager
_cur_id	src/intersim2/trafficmanager.hpp	/^  int _cur_id;$/;"	m	class:TrafficManager
_cur_occupied	src/intersim/buffer_state.hpp	/^   int  *_cur_occupied;$/;"	m	class:BufferState
_cur_pid	src/intersim2/trafficmanager.hpp	/^  int _cur_pid;$/;"	m	class:TrafficManager
_cycles	src/intersim2/power/buffer_monitor.hpp	/^  int  _cycles ;$/;"	m	class:BufferMonitor
_cycles	src/intersim2/power/switch_monitor.hpp	/^  int  _cycles ;$/;"	m	class:SwitchMonitor
_data	src/intersim/pipefifo.hpp	/^   T ***_data;$/;"	m	class:PipelineFIFO
_data	src/intersim2/pipefifo.hpp	/^  vector<vector<T*> > _data;$/;"	m	class:PipelineFIFO
_deadlock_timer	src/intersim2/trafficmanager.hpp	/^  int _deadlock_timer;$/;"	m	class:TrafficManager
_deadlock_warn_timeout	src/intersim2/trafficmanager.hpp	/^  int _deadlock_warn_timeout;$/;"	m	class:TrafficManager
_delay	src/intersim2/channel.hpp	/^  int _delay;$/;"	m	class:Channel
_depth	src/intersim/pipefifo.hpp	/^   int _depth;$/;"	m	class:PipelineFIFO
_depth	src/intersim2/pipefifo.hpp	/^  int _depth;$/;"	m	class:PipelineFIFO
_desc	src/ramulator_sim/StatType.h	/^  std::string _desc;$/;"	m	class:Stats_Ram::Stat
_dest	src/intersim2/traffic.hpp	/^  vector<int> _dest;$/;"	m	class:RandomPermutationTrafficPattern
_dests	src/intersim/network.hpp	/^   int _dests;$/;"	m	class:Network
_dests	src/intersim/trafficmanager.hpp	/^   int _dests;$/;"	m	class:TrafficManager
_dirty	src/intersim2/allocators/allocator.hpp	/^  bool _dirty;$/;"	m	class:Allocator
_drain_time	src/intersim/trafficmanager.hpp	/^   int   _drain_time;$/;"	m	class:TrafficManager
_drain_time	src/intersim2/trafficmanager.hpp	/^  int   _drain_time;$/;"	m	class:TrafficManager
_eject	src/intersim/network.hpp	/^   Flit   **_eject;$/;"	m	class:Network
_eject	src/intersim2/networks/network.hpp	/^  vector<FlitChannel *> _eject;$/;"	m	class:Network
_eject_cred	src/intersim/network.hpp	/^   Credit **_eject_cred;$/;"	m	class:Network
_eject_cred	src/intersim2/networks/network.hpp	/^  vector<CreditChannel *> _eject_cred;$/;"	m	class:Network
_ejected_flit_queue	src/intersim2/interconnect_interface.hpp	/^  vector<vector<queue<Flit* > > > _ejected_flit_queue;$/;"	m	class:InterconnectInterface
_ejected_flits	src/intersim2/trafficmanager.hpp	/^  vector<vector<int> > _ejected_flits;$/;"	m	class:TrafficManager
_ejected_flits_out	src/intersim2/trafficmanager.hpp	/^  ostream * _ejected_flits_out;$/;"	m	class:TrafficManager
_ejection_buffer	src/intersim2/interconnect_interface.hpp	/^  vector<vector<vector<_EjectionBufferItem> > > _ejection_buffer;$/;"	m	class:InterconnectInterface
_ejection_buffer_capacity	src/intersim2/interconnect_interface.hpp	/^  unsigned int _ejection_buffer_capacity;$/;"	m	class:InterconnectInterface
_empty_network	src/intersim/trafficmanager.hpp	/^   bool          _empty_network;$/;"	m	class:TrafficManager
_empty_network	src/intersim2/trafficmanager.hpp	/^  bool _empty_network;$/;"	m	class:TrafficManager
_event	src/intersim2/power/switch_monitor.hpp	/^  vector<int> _event ;$/;"	m	class:SwitchMonitor
_excluded	src/intersim2/traffic.hpp	/^  set<int> _excluded;$/;"	m	class:UniformBackgroundTrafficPattern
_expected_pid	src/intersim2/vc.hpp	/^  int _expected_pid;$/;"	m	class:VC
_express_channels	src/intersim2/networks/cmesh.hpp	/^  bool _express_channels;$/;"	m	class:CMesh
_flags	src/ramulator_sim/StatType.h	/^  Flags _flags = display;$/;"	m	class:Stats_Ram::Stat
_flat_stats	src/intersim2/trafficmanager.hpp	/^  vector<Stats *> _flat_stats;     $/;"	m	class:TrafficManager
_flit_sent_time	src/intersim2/buffer_state.hpp	/^    vector<queue<int> > _flit_sent_time;$/;"	m	class:BufferState::FeedbackSharedBufferPolicy
_flit_size	src/intersim/interconnect_interface.cpp	/^int _flit_size ;$/;"	v
_flit_size	src/intersim2/interconnect_interface.hpp	/^  unsigned _flit_size;$/;"	m	class:InterconnectInterface
_flit_timing	src/intersim/trafficmanager.hpp	/^   bool  _flit_timing;$/;"	m	class:TrafficManager
_flits_to_watch	src/intersim2/trafficmanager.hpp	/^  set<int> _flits_to_watch;$/;"	m	class:TrafficManager
_float_map	src/intersim/config_utils.hpp	/^   map<string,double>       _float_map;$/;"	m	class:Configuration
_float_map	src/intersim2/config_utils.hpp	/^  map<string,double> _float_map;$/;"	m	class:Configuration
_frag_stats	src/intersim2/trafficmanager.hpp	/^  vector<Stats *> _frag_stats;$/;"	m	class:TrafficManager
_free	src/intersim2/credit.cpp	/^stack<Credit *> Credit::_free;$/;"	m	class:Credit	file:
_free	src/intersim2/credit.hpp	/^  static stack<Credit *> _free;$/;"	m	class:Credit
_free	src/intersim2/flit.cpp	/^stack<Flit *> Flit::_free;$/;"	m	class:Flit	file:
_free	src/intersim2/flit.hpp	/^  static stack<Flit *> _free;$/;"	m	class:Flit
_free	src/intersim2/packet_reply_info.cpp	/^stack<PacketReplyInfo*> PacketReplyInfo::_free;$/;"	m	class:PacketReplyInfo	file:
_free	src/intersim2/packet_reply_info.hpp	/^  static stack<PacketReplyInfo*> _free;$/;"	m	class:PacketReplyInfo
_free_credits_out	src/intersim2/trafficmanager.hpp	/^  ostream * _free_credits_out;$/;"	m	class:TrafficManager
_free_flits	src/intersim/trafficmanager.hpp	/^   list<Flit *> _free_flits;$/;"	m	class:TrafficManager
_from	src/intersim/maxsize.hpp	/^   int *_from;   \/\/ array to hold breadth-first tree$/;"	m	class:MaxSizeMatch
_from	src/intersim2/allocators/maxsize.hpp	/^  vector<int> _from;   \/\/ array to hold breadth-first tree$/;"	m	class:MaxSizeMatch
_fullname	src/intersim/module.hpp	/^   string _fullname;$/;"	m	class:Module
_fullname	src/intersim2/module.hpp	/^  string _fullname;$/;"	m	class:Module
_g	src/intersim2/networks/dragonfly.hpp	/^  int _p, _a, _g;$/;"	m	class:DragonFlyNew
_global_arbiter	src/intersim2/arbiters/tree_arb.hpp	/^  Arbiter * _global_arbiter;$/;"	m	class:TreeArbiter
_gptr	src/intersim/loa.hpp	/^   int *_gptr;$/;"	m	class:LOA
_gptr	src/intersim2/allocators/loa.hpp	/^  vector<int> _gptr;$/;"	m	class:LOA
_gptrs	src/intersim/islip.hpp	/^   int *_gptrs;$/;"	m	class:iSLIP_Sparse
_gptrs	src/intersim/selalloc.hpp	/^   int *_gptrs;$/;"	m	class:SelAlloc
_gptrs	src/intersim2/allocators/islip.hpp	/^  vector<int> _gptrs;$/;"	m	class:iSLIP_Sparse
_gptrs	src/intersim2/allocators/selalloc.hpp	/^  vector<int> _gptrs;$/;"	m	class:SelAlloc
_grants	src/intersim/islip.hpp	/^   int *_grants;$/;"	m	class:iSLIP_Sparse
_grants	src/intersim/pim.hpp	/^   int *_grants;$/;"	m	class:PIM
_grants	src/intersim/selalloc.hpp	/^   int *_grants;$/;"	m	class:SelAlloc
_group_arbiters	src/intersim2/arbiters/tree_arb.hpp	/^  vector<Arbiter *> _group_arbiters;$/;"	m	class:TreeArbiter
_group_reqs	src/intersim2/arbiters/tree_arb.hpp	/^  vector<int> _group_reqs;$/;"	m	class:TreeArbiter
_group_size	src/intersim2/arbiters/tree_arb.hpp	/^  int  _group_size ;$/;"	m	class:TreeArbiter
_grp_num_nodes	src/intersim2/networks/dragonfly.hpp	/^  int _grp_num_nodes;$/;"	m	class:DragonFlyNew
_grp_num_routers	src/intersim2/networks/dragonfly.hpp	/^  int _grp_num_routers;$/;"	m	class:DragonFlyNew
_highest_pri	src/intersim2/arbiters/arbiter.hpp	/^  int _highest_pri;$/;"	m	class:Arbiter
_hist	src/intersim/stats.hpp	/^   int *_hist;$/;"	m	class:Stats
_hist	src/intersim2/stats.hpp	/^  vector<int> _hist;$/;"	m	class:Stats
_hold_switch_for_packet	src/intersim/iq_router.hpp	/^   int _hold_switch_for_packet;$/;"	m	class:IQRouter
_hold_switch_for_packet	src/intersim2/routers/iq_router.hpp	/^  bool _hold_switch_for_packet;$/;"	m	class:IQRouter
_hold_switch_for_packet	src/intersim2/trafficmanager.hpp	/^  bool _hold_switch_for_packet;$/;"	m	class:TrafficManager
_hop_stats	src/intersim/trafficmanager.hpp	/^   Stats *_hop_stats;$/;"	m	class:TrafficManager
_hop_stats	src/intersim2/trafficmanager.hpp	/^  vector<Stats *> _hop_stats;$/;"	m	class:TrafficManager
_hotspots	src/intersim2/traffic.hpp	/^  vector<int> _hotspots;$/;"	m	class:HotSpotTrafficPattern
_iSLIP_iter	src/intersim/islip.hpp	/^   int _iSLIP_iter;$/;"	m	class:iSLIP_Sparse
_iSLIP_iter	src/intersim2/allocators/islip.hpp	/^  int _iSLIP_iter;$/;"	m	class:iSLIP_Sparse
_icnt_config	src/intersim2/interconnect_interface.hpp	/^  IntersimConfig* _icnt_config;$/;"	m	class:InterconnectInterface
_id	src/intersim/router.hpp	/^   int _id;$/;"	m	class:Router
_id	src/intersim2/routers/router.hpp	/^  int _id;$/;"	m	class:Router
_idle	src/intersim2/flitchannel.hpp	/^  int _idle;$/;"	m	class:FlitChannel
_idle_cycles	src/intersim/vc.hpp	/^   int _idle_cycles;$/;"	m	class:VC
_in_cred_buffer	src/intersim/event_router.hpp	/^   queue<Credit *> *_in_cred_buffer;$/;"	m	class:EventRouter
_in_cred_buffer	src/intersim/iq_router.hpp	/^   queue<Credit *> *_in_cred_buffer;$/;"	m	class:IQRouter
_in_cred_buffer	src/intersim2/routers/event_router.hpp	/^  vector<queue<Credit *> > _in_cred_buffer;$/;"	m	class:EventRouter
_in_flight	src/intersim/trafficmanager.hpp	/^   map<int,bool> _in_flight;$/;"	m	class:TrafficManager
_in_occ	src/intersim/allocator.hpp	/^   list<int> *_in_occ;$/;"	m	class:SparseAllocator
_in_occ	src/intersim2/allocators/allocator.hpp	/^  set<int> _in_occ;$/;"	m	class:SparseAllocator
_in_queue_flits	src/intersim2/routers/iq_router.hpp	/^  map<int, Flit *> _in_queue_flits;$/;"	m	class:IQRouter
_in_req	src/intersim/allocator.hpp	/^   list<sRequest> *_in_req;$/;"	m	class:SparseAllocator
_in_req	src/intersim2/allocators/allocator.hpp	/^  vector<map<int, sRequest> > _in_req;$/;"	m	class:SparseAllocator
_in_use	src/intersim/buffer_state.hpp	/^   bool *_in_use;$/;"	m	class:BufferState
_in_use_by	src/intersim2/buffer_state.hpp	/^  vector<int> _in_use_by;$/;"	m	class:BufferState
_include_queuing	src/intersim/trafficmanager.hpp	/^   int   _include_queuing;$/;"	m	class:TrafficManager
_include_queuing	src/intersim2/trafficmanager.hpp	/^  int   _include_queuing;$/;"	m	class:TrafficManager
_initial	src/intersim2/injection.hpp	/^  vector<int> _initial;$/;"	m	class:OnOffInjectionProcess
_inject	src/intersim/network.hpp	/^   Flit   **_inject;$/;"	m	class:Network
_inject	src/intersim2/networks/network.hpp	/^  vector<FlitChannel *> _inject;$/;"	m	class:Network
_inject_cred	src/intersim/network.hpp	/^   Credit **_inject_cred;$/;"	m	class:Network
_inject_cred	src/intersim2/networks/network.hpp	/^  vector<CreditChannel *> _inject_cred;$/;"	m	class:Network
_inject_sqn	src/intersim/trafficmanager.hpp	/^   int                    **_inject_sqn;$/;"	m	class:TrafficManager
_injected_flits	src/intersim2/trafficmanager.hpp	/^  vector<vector<int> > _injected_flits;$/;"	m	class:TrafficManager
_injected_flits_out	src/intersim2/trafficmanager.hpp	/^  ostream * _injected_flits_out;$/;"	m	class:TrafficManager
_injection_process	src/intersim/trafficmanager.hpp	/^   tInjectionProcess _injection_process;$/;"	m	class:TrafficManager
_injection_process	src/intersim2/trafficmanager.hpp	/^  vector<InjectionProcess *> _injection_process;$/;"	m	class:TrafficManager
_inmatch	src/gpgpu-sim/shader.h	/^      int *_inmatch;$/;"	m	class:opndcoll_rfu_t::arbiter_t
_inmatch	src/intersim/allocator.hpp	/^   int *_inmatch;$/;"	m	class:Allocator
_inmatch	src/intersim2/allocators/allocator.hpp	/^  vector<int> _inmatch;$/;"	m	class:Allocator
_input	src/intersim/event_router.hpp	/^   int *_input;$/;"	m	class:EventNextVCState
_input	src/intersim2/channel.hpp	/^  T * _input;$/;"	m	class:Channel
_input	src/intersim2/routers/event_router.hpp	/^  vector<int> _input;$/;"	m	class:EventNextVCState
_inputChannelMap	src/intersim2/networks/fattree.hpp	/^  int* _inputChannelMap;$/;"	m	class:FatTree
_inputVC	src/intersim/event_router.hpp	/^   int *_inputVC;$/;"	m	class:EventNextVCState
_inputVC	src/intersim2/routers/event_router.hpp	/^  vector<int> _inputVC;$/;"	m	class:EventNextVCState
_input_arb	src/intersim2/allocators/separable.hpp	/^  vector<Arbiter*> _input_arb ;$/;"	m	class:SeparableAllocator
_input_buffer	src/intersim/event_router.hpp	/^   queue<Flit *> *_input_buffer;$/;"	m	class:EventRouter
_input_buffer	src/intersim/iq_router.hpp	/^   queue<Flit *> *_input_buffer;$/;"	m	class:IQRouter
_input_buffer	src/intersim2/routers/event_router.hpp	/^  vector<queue<Flit *> > _input_buffer;$/;"	m	class:EventRouter
_input_buffer_capacity	src/intersim2/interconnect_interface.hpp	/^  unsigned int _input_buffer_capacity;$/;"	m	class:InterconnectInterface
_input_channels	src/intersim/router.hpp	/^   vector<Flit **>   *_input_channels;$/;"	m	class:Router
_input_channels	src/intersim2/routers/router.hpp	/^  vector<FlitChannel *>   _input_channels;$/;"	m	class:Router
_input_credits	src/intersim/router.hpp	/^   vector<Credit **> *_input_credits;$/;"	m	class:Router
_input_credits	src/intersim2/routers/router.hpp	/^  vector<CreditChannel *> _input_credits;$/;"	m	class:Router
_input_frame	src/intersim2/routers/chaos_router.hpp	/^  vector<queue<Flit *> > _input_frame;$/;"	m	class:ChaosRouter
_input_mq_match	src/intersim2/routers/chaos_router.hpp	/^  vector<int> _input_mq_match;$/;"	m	class:ChaosRouter
_input_output_match	src/intersim2/routers/chaos_router.hpp	/^  vector<int> _input_output_match;$/;"	m	class:ChaosRouter
_input_queue	src/intersim2/gputrafficmanager.hpp	/^  vector<vector<vector<list<Flit *> > > > _input_queue;$/;"	m	class:GPUTrafficManager
_input_route	src/intersim2/routers/chaos_router.hpp	/^  vector<OutputSet*> _input_route;$/;"	m	class:ChaosRouter
_input_speedup	src/intersim/router.hpp	/^   int _input_speedup;$/;"	m	class:Router
_input_speedup	src/intersim2/routers/router.hpp	/^  int _input_speedup;$/;"	m	class:Router
_input_state	src/intersim2/routers/chaos_router.hpp	/^  vector<eQState> _input_state;$/;"	m	class:ChaosRouter
_inputs	src/intersim/allocator.hpp	/^   const int _inputs;$/;"	m	class:Allocator
_inputs	src/intersim/arbiter.hpp	/^   const int _inputs;$/;"	m	class:Arbiter
_inputs	src/intersim/router.hpp	/^   int _inputs;$/;"	m	class:Router
_inputs	src/intersim2/allocators/allocator.hpp	/^  const int _inputs;$/;"	m	class:Allocator
_inputs	src/intersim2/arbiters/prio_arb.hpp	/^  const int _inputs;$/;"	m	class:PriorityArbiter
_inputs	src/intersim2/power/buffer_monitor.hpp	/^  int  _inputs ;$/;"	m	class:BufferMonitor
_inputs	src/intersim2/power/switch_monitor.hpp	/^  int  _inputs ;$/;"	m	class:SwitchMonitor
_inputs	src/intersim2/routers/router.hpp	/^  int _inputs;$/;"	m	class:Router
_int_map	src/intersim/config_utils.hpp	/^   map<string,unsigned int> _int_map;$/;"	m	class:Configuration
_int_map	src/intersim2/config_utils.hpp	/^  map<string,int>    _int_map;$/;"	m	class:Configuration
_internal_speedup	src/intersim/trafficmanager.hpp	/^   float _internal_speedup;$/;"	m	class:TrafficManager
_internal_speedup	src/intersim2/routers/router.hpp	/^  double _internal_speedup;$/;"	m	class:Router
_iq_time	src/intersim/iq_router.hpp	/^   int _iq_time;$/;"	m	class:IQRouter
_iter	src/intersim/selalloc.hpp	/^   int _iter;$/;"	m	class:SelAlloc
_iter	src/intersim2/allocators/selalloc.hpp	/^  int _iter;$/;"	m	class:SelAlloc
_k	src/intersim/fly.hpp	/^   int _k;$/;"	m	class:KNFly
_k	src/intersim/kncube.hpp	/^   int _k;$/;"	m	class:KNCube
_k	src/intersim2/networks/cmesh.hpp	/^  int _k ;$/;"	m	class:CMesh
_k	src/intersim2/networks/dragonfly.hpp	/^  int _k;$/;"	m	class:DragonFlyNew
_k	src/intersim2/networks/fattree.hpp	/^  int _k;$/;"	m	class:FatTree
_k	src/intersim2/networks/flatfly_onchip.hpp	/^  int _k;$/;"	m	class:FlatFlyOnChip
_k	src/intersim2/networks/fly.hpp	/^  int _k;$/;"	m	class:KNFly
_k	src/intersim2/networks/kncube.hpp	/^  int _k;$/;"	m	class:KNCube
_k	src/intersim2/networks/qtree.hpp	/^  int _k;$/;"	m	class:QTree
_k	src/intersim2/networks/tree4.hpp	/^  int _k;$/;"	m	class:Tree4
_k	src/intersim2/traffic.hpp	/^  int _k;$/;"	m	class:DigitPermutationTrafficPattern
_lanes	src/intersim/pipefifo.hpp	/^   int _lanes;$/;"	m	class:PipelineFIFO
_lanes	src/intersim2/pipefifo.hpp	/^  int _lanes;$/;"	m	class:PipelineFIFO
_last_avail	src/intersim/buffer_state.hpp	/^   int  _last_avail;$/;"	m	class:BufferState
_last_class	src/intersim2/trafficmanager.hpp	/^  vector<vector<int> > _last_class;$/;"	m	class:TrafficManager
_last_id	src/intersim2/batchtrafficmanager.hpp	/^  int _last_id;$/;"	m	class:BatchTrafficManager
_last_id	src/intersim2/buffer_state.hpp	/^  vector<int> _last_id;$/;"	m	class:BufferState
_last_id	src/intersim2/vc.hpp	/^  int _last_id;$/;"	m	class:VC
_last_in	src/intersim2/allocators/wavefront.hpp	/^  int _last_in;$/;"	m	class:Wavefront
_last_out	src/intersim2/allocators/wavefront.hpp	/^  int _last_out;$/;"	m	class:Wavefront
_last_pid	src/intersim2/batchtrafficmanager.hpp	/^  int _last_pid;$/;"	m	class:BatchTrafficManager
_last_pid	src/intersim2/buffer_state.hpp	/^  vector<int> _last_pid;$/;"	m	class:BufferState
_last_pid	src/intersim2/vc.hpp	/^  int _last_pid;$/;"	m	class:VC
_last_req	src/intersim2/arbiters/matrix_arb.hpp	/^  int  _last_req ;$/;"	m	class:MatrixArbiter
_last_vc	src/intersim2/trafficmanager.hpp	/^  vector<vector<vector<int> > > _last_vc;$/;"	m	class:TrafficManager
_latencyMap	src/intersim2/networks/fattree.hpp	/^  int* _latencyMap;$/;"	m	class:FatTree
_latency_stats	src/intersim/trafficmanager.hpp	/^   Stats **_latency_stats;     $/;"	m	class:TrafficManager
_latency_thres	src/intersim/trafficmanager.hpp	/^   double _latency_thres;$/;"	m	class:TrafficManager
_latency_thres	src/intersim2/trafficmanager.hpp	/^  vector<double> _latency_thres;$/;"	m	class:TrafficManager
_latest_packet	src/intersim/trafficmanager.hpp	/^   int   **_latest_packet;$/;"	m	class:TrafficManager
_load	src/intersim/trafficmanager.hpp	/^   float _load;$/;"	m	class:TrafficManager
_load	src/intersim2/trafficmanager.hpp	/^  vector<double> _load;$/;"	m	class:TrafficManager
_log2	src/gpuwattch/cacti/basic_circuit.cc	/^uint32_t _log2(uint64_t num)$/;"	f
_lookahead_routing	src/intersim2/trafficmanager.hpp	/^  bool _lookahead_routing;$/;"	m	class:TrafficManager
_lookahead_routing	src/intersim2/vc.hpp	/^  bool _lookahead_routing;$/;"	m	class:VC
_m	src/intersim2/networks/dragonfly.hpp	/^  int _m;$/;"	m	class:DragonFlyNew
_m	src/intersim2/networks/flatfly_onchip.hpp	/^  int _m;$/;"	m	class:FlatFlyOnChip
_mapSize	src/intersim2/networks/fattree.hpp	/^  int  _mapSize;$/;"	m	class:FatTree
_match	src/intersim/arbiter.hpp	/^   int _match;$/;"	m	class:Arbiter
_match	src/intersim2/arbiters/prio_arb.hpp	/^  int _match;$/;"	m	class:PriorityArbiter
_matrix	src/intersim2/arbiters/matrix_arb.hpp	/^  vector<vector<int> > _matrix ;$/;"	m	class:MatrixArbiter
_max	src/intersim/stats.hpp	/^   double _max;$/;"	m	class:Stats
_max	src/intersim2/stats.hpp	/^  double _max;$/;"	m	class:Stats
_max_credits_out	src/intersim2/trafficmanager.hpp	/^  ostream * _max_credits_out;$/;"	m	class:TrafficManager
_max_held_slots	src/intersim2/buffer_state.hpp	/^    int _max_held_slots;$/;"	m	class:BufferState::LimitedSharedBufferPolicy
_max_outstanding	src/intersim2/batchtrafficmanager.hpp	/^  int _max_outstanding;$/;"	m	class:BatchTrafficManager
_max_samples	src/intersim/trafficmanager.hpp	/^   int   _max_samples;$/;"	m	class:TrafficManager
_max_samples	src/intersim2/trafficmanager.hpp	/^  int   _max_samples;$/;"	m	class:TrafficManager
_max_val	src/intersim2/traffic.hpp	/^  int _max_val;$/;"	m	class:HotSpotTrafficPattern
_measure_latency	src/intersim2/trafficmanager.hpp	/^  bool _measure_latency;$/;"	m	class:TrafficManager
_measure_stats	src/intersim2/trafficmanager.hpp	/^  vector<int> _measure_stats;$/;"	m	class:TrafficManager
_measured_in_flight	src/intersim/trafficmanager.hpp	/^   int           _measured_in_flight;$/;"	m	class:TrafficManager
_measured_in_flight_flits	src/intersim2/trafficmanager.hpp	/^  vector<map<int, Flit *> > _measured_in_flight_flits;$/;"	m	class:TrafficManager
_memo_NodeShiftX	src/intersim2/networks/cmesh.cpp	/^int CMesh::_memo_NodeShiftX = 0 ;$/;"	m	class:CMesh	file:
_memo_NodeShiftX	src/intersim2/networks/cmesh.hpp	/^  static int _memo_NodeShiftX ;$/;"	m	class:CMesh
_memo_NodeShiftY	src/intersim2/networks/cmesh.cpp	/^int CMesh::_memo_NodeShiftY = 0 ;$/;"	m	class:CMesh	file:
_memo_NodeShiftY	src/intersim2/networks/cmesh.hpp	/^  static int _memo_NodeShiftY ;$/;"	m	class:CMesh
_memo_PortShiftY	src/intersim2/networks/cmesh.cpp	/^int CMesh::_memo_PortShiftY = 0 ;$/;"	m	class:CMesh	file:
_memo_PortShiftY	src/intersim2/networks/cmesh.hpp	/^  static int _memo_PortShiftY ;$/;"	m	class:CMesh
_memory_op_t	src/abstract_hardware_model.h	/^enum _memory_op_t {$/;"	g
_memory_space_t	src/abstract_hardware_model.h	/^enum _memory_space_t {$/;"	g
_mesh	src/intersim/kncube.hpp	/^   bool _mesh;$/;"	m	class:KNCube
_mesh	src/intersim2/networks/kncube.hpp	/^  bool _mesh;$/;"	m	class:KNCube
_min	src/intersim/stats.hpp	/^   double _min;$/;"	m	class:Stats
_min	src/intersim2/stats.hpp	/^  double _min;$/;"	m	class:Stats
_min_latency	src/intersim2/buffer_state.hpp	/^    int _min_latency;$/;"	m	class:BufferState::FeedbackSharedBufferPolicy
_mq_age	src/intersim2/routers/chaos_router.hpp	/^  vector<int> _mq_age;$/;"	m	class:ChaosRouter
_mq_matched	src/intersim2/routers/chaos_router.hpp	/^  vector<bool> _mq_matched;$/;"	m	class:ChaosRouter
_mq_route	src/intersim2/routers/chaos_router.hpp	/^  vector<OutputSet*> _mq_route;$/;"	m	class:ChaosRouter
_multi_match	src/intersim2/routers/chaos_router.hpp	/^  vector<int> _multi_match;$/;"	m	class:ChaosRouter
_multi_queue	src/intersim2/routers/chaos_router.hpp	/^  vector<queue<Flit *> > _multi_queue;$/;"	m	class:ChaosRouter
_multi_queue_size	src/intersim2/routers/chaos_router.hpp	/^  int _multi_queue_size;$/;"	m	class:ChaosRouter
_multi_state	src/intersim2/routers/chaos_router.hpp	/^  vector<eQState> _multi_state;$/;"	m	class:ChaosRouter
_n	src/intersim/fly.hpp	/^   int _n;$/;"	m	class:KNFly
_n	src/intersim/kncube.hpp	/^   int _n;$/;"	m	class:KNCube
_n	src/intersim2/networks/cmesh.hpp	/^  int _n ;$/;"	m	class:CMesh
_n	src/intersim2/networks/dragonfly.hpp	/^  int _n;$/;"	m	class:DragonFlyNew
_n	src/intersim2/networks/fattree.hpp	/^  int _n;$/;"	m	class:FatTree
_n	src/intersim2/networks/flatfly_onchip.hpp	/^  int _n;$/;"	m	class:FlatFlyOnChip
_n	src/intersim2/networks/fly.hpp	/^  int _n;$/;"	m	class:KNFly
_n	src/intersim2/networks/kncube.hpp	/^  int _n;$/;"	m	class:KNCube
_n	src/intersim2/networks/qtree.hpp	/^  int _n;$/;"	m	class:QTree
_n	src/intersim2/networks/tree4.hpp	/^  int _n;$/;"	m	class:Tree4
_n	src/intersim2/traffic.hpp	/^  int _n;$/;"	m	class:DigitPermutationTrafficPattern
_n_mem	src/intersim/interconnect_interface.cpp	/^static unsigned int _n_mem = 0;$/;"	v	file:
_n_mem	src/intersim2/interconnect_interface.hpp	/^  unsigned _n_shader, _n_mem;$/;"	m	class:InterconnectInterface
_n_shader	src/intersim/interconnect_interface.cpp	/^static unsigned int _n_shader = 0;$/;"	v	file:
_n_shader	src/intersim2/interconnect_interface.hpp	/^  unsigned _n_shader, _n_mem;$/;"	m	class:InterconnectInterface
_name	src/intersim/module.hpp	/^   string _name;$/;"	m	class:Module
_name	src/intersim2/module.hpp	/^  string _name;$/;"	m	class:Module
_name	src/ramulator_sim/StatType.h	/^  std::string _name;$/;"	m	class:Stats_Ram::Stat
_net	src/intersim/trafficmanager.hpp	/^   Network *_net;$/;"	m	class:TrafficManager
_net	src/intersim2/interconnect_interface.hpp	/^  vector<Network *> _net;$/;"	m	class:InterconnectInterface
_net	src/intersim2/trafficmanager.hpp	/^  vector<Network *> _net;$/;"	m	class:TrafficManager
_net_size	src/intersim2/networks/dragonfly.hpp	/^  int _net_size;$/;"	m	class:DragonFlyNew
_net_size	src/intersim2/networks/flatfly_onchip.hpp	/^  int _net_size;$/;"	m	class:FlatFlyOnChip
_next_buf	src/intersim2/routers/iq_router.hpp	/^  vector<BufferState *> _next_buf;$/;"	m	class:IQRouter
_next_queue_cnt	src/intersim2/routers/chaos_router.hpp	/^  vector<int> _next_queue_cnt;$/;"	m	class:ChaosRouter
_next_vcs	src/intersim/iq_router.hpp	/^   BufferState *_next_vcs;$/;"	m	class:IQRouter
_nlat_stats	src/intersim2/trafficmanager.hpp	/^  vector<Stats *> _nlat_stats;     $/;"	m	class:TrafficManager
_node_map	src/intersim2/interconnect_interface.hpp	/^  map<unsigned, unsigned> _node_map;$/;"	m	class:InterconnectInterface
_nodes	src/intersim2/injection.hpp	/^  int _nodes;$/;"	m	class:InjectionProcess
_nodes	src/intersim2/networks/network.hpp	/^  int _nodes;$/;"	m	class:Network
_nodes	src/intersim2/traffic.hpp	/^  int _nodes;$/;"	m	class:TrafficPattern
_nodes	src/intersim2/trafficmanager.hpp	/^  int _nodes;$/;"	m	class:TrafficManager
_noq	src/intersim2/routers/iq_router.hpp	/^  bool _noq;$/;"	m	class:IQRouter
_noq	src/intersim2/trafficmanager.hpp	/^  bool _noq;$/;"	m	class:TrafficManager
_noq_next_output_port	src/intersim2/routers/iq_router.hpp	/^  vector<vector<int> > _noq_next_output_port;$/;"	m	class:IQRouter
_noq_next_vc_end	src/intersim2/routers/iq_router.hpp	/^  vector<vector<int> > _noq_next_vc_end;$/;"	m	class:IQRouter
_noq_next_vc_start	src/intersim2/routers/iq_router.hpp	/^  vector<vector<int> > _noq_next_vc_start;$/;"	m	class:IQRouter
_ns	src/intersim/maxsize.hpp	/^   int *_ns;     \/\/ next stack$/;"	m	class:MaxSizeMatch
_ns	src/intersim2/allocators/maxsize.hpp	/^  int *_ns;     \/\/ next stack$/;"	m	class:MaxSizeMatch
_num_bins	src/intersim/stats.hpp	/^   int    _num_bins;$/;"	m	class:Stats
_num_bins	src/intersim2/stats.hpp	/^  int    _num_bins;$/;"	m	class:Stats
_num_of_switch	src/intersim2/networks/dragonfly.hpp	/^  int _num_of_switch;$/;"	m	class:DragonFlyNew
_num_of_switch	src/intersim2/networks/flatfly_onchip.hpp	/^  int _num_of_switch;$/;"	m	class:FlatFlyOnChip
_num_outputs	src/intersim/outputset.hpp	/^   int _num_outputs;$/;"	m	class:OutputSet
_num_reqs	src/intersim2/arbiters/arbiter.hpp	/^  int  _num_reqs ;$/;"	m	class:Arbiter
_num_requests	src/intersim2/allocators/wavefront.hpp	/^  int _num_requests;$/;"	m	class:Wavefront
_num_samples	src/intersim/stats.hpp	/^   int    _num_samples;$/;"	m	class:Stats
_num_samples	src/intersim2/stats.hpp	/^  int    _num_samples;$/;"	m	class:Stats
_numinput	src/intersim2/networks/dragonfly.hpp	/^  int _numinput;$/;"	m	class:DragonFlyNew
_numinput	src/intersim2/networks/flatfly_onchip.hpp	/^  int _numinput;$/;"	m	class:FlatFlyOnChip
_occupancy	src/intersim2/buffer.hpp	/^  int _occupancy;$/;"	m	class:Buffer
_occupancy	src/intersim2/buffer_state.hpp	/^  int  _occupancy;$/;"	m	class:BufferState
_occupancy_limit	src/intersim2/buffer_state.hpp	/^    vector<int> _occupancy_limit;$/;"	m	class:BufferState::FeedbackSharedBufferPolicy
_occupied_cnt	src/intersim/vc.hpp	/^   int _occupied_cnt;$/;"	m	class:VC
_offset	src/intersim2/buffer_state.hpp	/^    int _offset;$/;"	m	class:BufferState::FeedbackSharedBufferPolicy
_out_cred_buffer	src/intersim/event_router.hpp	/^   queue<Credit *> *_out_cred_buffer;$/;"	m	class:EventRouter
_out_cred_buffer	src/intersim/iq_router.hpp	/^   queue<Credit *> *_out_cred_buffer;$/;"	m	class:IQRouter
_out_cred_buffer	src/intersim2/routers/event_router.hpp	/^  vector<queue<Credit *> > _out_cred_buffer;$/;"	m	class:EventRouter
_out_occ	src/intersim/allocator.hpp	/^   list<int> *_out_occ;$/;"	m	class:SparseAllocator
_out_occ	src/intersim2/allocators/allocator.hpp	/^  set<int> _out_occ;$/;"	m	class:SparseAllocator
_out_port	src/intersim/vc.hpp	/^   int _out_port, _out_vc;$/;"	m	class:VC
_out_port	src/intersim2/vc.hpp	/^  int _out_port, _out_vc;$/;"	m	class:VC
_out_queue_credits	src/intersim2/routers/iq_router.hpp	/^  map<int, Credit *> _out_queue_credits;$/;"	m	class:IQRouter
_out_req	src/intersim/allocator.hpp	/^   list<sRequest> *_out_req;$/;"	m	class:SparseAllocator
_out_req	src/intersim2/allocators/allocator.hpp	/^  vector<map<int, sRequest> > _out_req;$/;"	m	class:SparseAllocator
_out_vc	src/intersim/vc.hpp	/^   int _out_port, _out_vc;$/;"	m	class:VC
_out_vc	src/intersim2/vc.hpp	/^  int _out_port, _out_vc;$/;"	m	class:VC
_outmask	src/intersim/allocator.hpp	/^   int *_outmask;$/;"	m	class:Allocator
_outmask	src/intersim2/allocators/selalloc.hpp	/^  vector<int> _outmask;$/;"	m	class:SelAlloc
_outmatch	src/gpgpu-sim/shader.h	/^      int *_outmatch;$/;"	m	class:opndcoll_rfu_t::arbiter_t
_outmatch	src/intersim/allocator.hpp	/^   int *_outmatch;$/;"	m	class:Allocator
_outmatch	src/intersim2/allocators/allocator.hpp	/^  vector<int> _outmatch;$/;"	m	class:Allocator
_output	src/intersim2/channel.hpp	/^  T * _output;$/;"	m	class:Channel
_outputChannelMap	src/intersim2/networks/fattree.hpp	/^  int* _outputChannelMap; $/;"	m	class:FatTree
_output_arb	src/intersim2/allocators/separable.hpp	/^  vector<Arbiter*> _output_arb ;$/;"	m	class:SeparableAllocator
_output_buffer	src/intersim/event_router.hpp	/^   queue<Flit *> *_output_buffer;$/;"	m	class:EventRouter
_output_buffer	src/intersim/iq_router.hpp	/^   queue<pair<Flit *,int> > *_output_buffer;$/;"	m	class:IQRouter
_output_buffer	src/intersim2/routers/event_router.hpp	/^  vector<queue<Flit *> > _output_buffer;$/;"	m	class:EventRouter
_output_buffer	src/intersim2/routers/iq_router.hpp	/^  vector<queue<Flit *> > _output_buffer;$/;"	m	class:IQRouter
_output_buffer_size	src/intersim2/routers/iq_router.hpp	/^  int _output_buffer_size;$/;"	m	class:IQRouter
_output_channels	src/intersim/router.hpp	/^   vector<Flit **>   *_output_channels;$/;"	m	class:Router
_output_channels	src/intersim2/routers/router.hpp	/^  vector<FlitChannel *>   _output_channels;$/;"	m	class:Router
_output_credits	src/intersim/router.hpp	/^   vector<Credit **> *_output_credits;$/;"	m	class:Router
_output_credits	src/intersim2/routers/router.hpp	/^  vector<CreditChannel *> _output_credits;$/;"	m	class:Router
_output_extra_latency	src/intersim/iq_router.hpp	/^   int _output_extra_latency;$/;"	m	class:IQRouter
_output_frame	src/intersim2/routers/chaos_router.hpp	/^  vector<queue<Flit *> > _output_frame;$/;"	m	class:ChaosRouter
_output_matched	src/intersim2/routers/chaos_router.hpp	/^  vector<bool> _output_matched;$/;"	m	class:ChaosRouter
_output_speedup	src/intersim/router.hpp	/^   int _output_speedup;$/;"	m	class:Router
_output_speedup	src/intersim2/routers/router.hpp	/^  int _output_speedup;$/;"	m	class:Router
_output_state	src/intersim/event_router.hpp	/^   EventNextVCState *_output_state;$/;"	m	class:EventRouter
_output_state	src/intersim2/routers/event_router.hpp	/^  vector<EventNextVCState *> _output_state;$/;"	m	class:EventRouter
_outputs	src/intersim/allocator.hpp	/^   const int _outputs;$/;"	m	class:Allocator
_outputs	src/intersim/outputset.hpp	/^   list<sSetElement> *_outputs;$/;"	m	class:OutputSet
_outputs	src/intersim/router.hpp	/^   int _outputs;$/;"	m	class:Router
_outputs	src/intersim2/allocators/allocator.hpp	/^  const int _outputs;$/;"	m	class:Allocator
_outputs	src/intersim2/outputset.hpp	/^  set<sSetElement> _outputs;$/;"	m	class:OutputSet
_outputs	src/intersim2/power/switch_monitor.hpp	/^  int  _outputs ;$/;"	m	class:SwitchMonitor
_outputs	src/intersim2/routers/router.hpp	/^  int _outputs;$/;"	m	class:Router
_outstanding_classes	src/intersim2/buffer_state.hpp	/^  vector<queue<int> > _outstanding_classes;$/;"	m	class:BufferState
_outstanding_classes	src/intersim2/routers/iq_router.hpp	/^  vector<vector<queue<int> > > _outstanding_classes;$/;"	m	class:IQRouter
_outstanding_classes	src/intersim2/trafficmanager.hpp	/^  vector<vector<vector<queue<int> > > > _outstanding_classes;$/;"	m	class:TrafficManager
_outstanding_credits	src/intersim2/routers/router.hpp	/^  vector<vector<int> > _outstanding_credits;$/;"	m	class:Router
_outstanding_credits	src/intersim2/trafficmanager.hpp	/^  vector<vector<vector<int> > > _outstanding_credits;$/;"	m	class:TrafficManager
_outstanding_credits_out	src/intersim2/trafficmanager.hpp	/^  ostream * _outstanding_credits_out;$/;"	m	class:TrafficManager
_overall_accepted	src/intersim/trafficmanager.hpp	/^   Stats *_overall_accepted;$/;"	m	class:TrafficManager
_overall_accepted_min	src/intersim/trafficmanager.hpp	/^   Stats *_overall_accepted_min;$/;"	m	class:TrafficManager
_overall_avg_accepted	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_avg_accepted;$/;"	m	class:TrafficManager
_overall_avg_accepted_packets	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_avg_accepted_packets;$/;"	m	class:TrafficManager
_overall_avg_batch_time	src/intersim2/batchtrafficmanager.hpp	/^  double _overall_avg_batch_time;$/;"	m	class:BatchTrafficManager
_overall_avg_flat	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_avg_flat;  $/;"	m	class:TrafficManager
_overall_avg_frag	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_avg_frag;$/;"	m	class:TrafficManager
_overall_avg_nlat	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_avg_nlat;  $/;"	m	class:TrafficManager
_overall_avg_plat	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_avg_plat;  $/;"	m	class:TrafficManager
_overall_avg_sent	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_avg_sent;$/;"	m	class:TrafficManager
_overall_avg_sent_packets	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_avg_sent_packets;$/;"	m	class:TrafficManager
_overall_buffer_busy_stalls	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_buffer_busy_stalls;$/;"	m	class:TrafficManager
_overall_buffer_conflict_stalls	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_buffer_conflict_stalls;$/;"	m	class:TrafficManager
_overall_buffer_full_stalls	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_buffer_full_stalls;$/;"	m	class:TrafficManager
_overall_buffer_reserved_stalls	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_buffer_reserved_stalls;$/;"	m	class:TrafficManager
_overall_crossbar_conflict_stalls	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_crossbar_conflict_stalls;$/;"	m	class:TrafficManager
_overall_hop_stats	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_hop_stats;$/;"	m	class:TrafficManager
_overall_latency	src/intersim/trafficmanager.hpp	/^   Stats **_overall_latency;$/;"	m	class:TrafficManager
_overall_max_accepted	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_max_accepted;$/;"	m	class:TrafficManager
_overall_max_accepted_packets	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_max_accepted_packets;$/;"	m	class:TrafficManager
_overall_max_batch_time	src/intersim2/batchtrafficmanager.hpp	/^  double _overall_max_batch_time;$/;"	m	class:BatchTrafficManager
_overall_max_flat	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_max_flat;  $/;"	m	class:TrafficManager
_overall_max_frag	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_max_frag;$/;"	m	class:TrafficManager
_overall_max_nlat	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_max_nlat;  $/;"	m	class:TrafficManager
_overall_max_plat	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_max_plat;  $/;"	m	class:TrafficManager
_overall_max_sent	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_max_sent;$/;"	m	class:TrafficManager
_overall_max_sent_packets	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_max_sent_packets;$/;"	m	class:TrafficManager
_overall_min_accepted	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_min_accepted;$/;"	m	class:TrafficManager
_overall_min_accepted_packets	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_min_accepted_packets;$/;"	m	class:TrafficManager
_overall_min_batch_time	src/intersim2/batchtrafficmanager.hpp	/^  double _overall_min_batch_time;$/;"	m	class:BatchTrafficManager
_overall_min_flat	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_min_flat;  $/;"	m	class:TrafficManager
_overall_min_frag	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_min_frag;$/;"	m	class:TrafficManager
_overall_min_nlat	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_min_nlat;  $/;"	m	class:TrafficManager
_overall_min_plat	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_min_plat;  $/;"	m	class:TrafficManager
_overall_min_sent	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_min_sent;$/;"	m	class:TrafficManager
_overall_min_sent_packets	src/intersim2/trafficmanager.hpp	/^  vector<double> _overall_min_sent_packets;$/;"	m	class:TrafficManager
_p	src/intersim2/networks/dragonfly.hpp	/^  int _p, _a, _g;$/;"	m	class:DragonFlyNew
_packet_n	src/intersim2/interconnect_interface.hpp	/^    int _packet_n;$/;"	m	class:InterconnectInterface::_BoundaryBufferItem
_packet_seq_no	src/intersim2/trafficmanager.hpp	/^  vector<int> _packet_seq_no;$/;"	m	class:TrafficManager
_packet_size	src/intersim/trafficmanager.hpp	/^   int   _packet_size;$/;"	m	class:TrafficManager
_packet_size	src/intersim2/trafficmanager.hpp	/^  vector<vector<int> > _packet_size;$/;"	m	class:TrafficManager
_packet_size_max_val	src/intersim2/trafficmanager.hpp	/^  vector<int> _packet_size_max_val;$/;"	m	class:TrafficManager
_packet_size_rate	src/intersim2/trafficmanager.hpp	/^  vector<vector<int> > _packet_size_rate;$/;"	m	class:TrafficManager
_packets_to_watch	src/intersim2/trafficmanager.hpp	/^  set<int> _packets_to_watch;$/;"	m	class:TrafficManager
_pair_flat	src/intersim2/trafficmanager.hpp	/^  vector<vector<Stats *> > _pair_flat;$/;"	m	class:TrafficManager
_pair_latency	src/intersim/trafficmanager.hpp	/^   Stats **_pair_latency;$/;"	m	class:TrafficManager
_pair_nlat	src/intersim2/trafficmanager.hpp	/^  vector<vector<Stats *> > _pair_nlat;$/;"	m	class:TrafficManager
_pair_plat	src/intersim2/trafficmanager.hpp	/^  vector<vector<Stats *> > _pair_plat;$/;"	m	class:TrafficManager
_pair_stats	src/intersim2/trafficmanager.hpp	/^  bool _pair_stats;$/;"	m	class:TrafficManager
_partial_internal_cycles	src/intersim/trafficmanager.hpp	/^   float _partial_internal_cycles;$/;"	m	class:TrafficManager
_partial_internal_cycles	src/intersim2/routers/router.hpp	/^  double _partial_internal_cycles;$/;"	m	class:Router
_partial_packets	src/intersim/trafficmanager.hpp	/^   list<Flit *> **_partial_packets;$/;"	m	class:TrafficManager
_partial_packets	src/intersim2/trafficmanager.hpp	/^  vector<vector<list<Flit *> > > _partial_packets;$/;"	m	class:TrafficManager
_pending_credits	src/intersim2/buffer_state.hpp	/^    vector<int> _pending_credits;$/;"	m	class:BufferState::SimpleFeedbackSharedBufferPolicy
_pipe_len	src/intersim/pipefifo.hpp	/^   int _pipe_len;$/;"	m	class:PipelineFIFO
_pipe_len	src/intersim2/pipefifo.hpp	/^  int _pipe_len;$/;"	m	class:PipelineFIFO
_pipe_ptr	src/intersim/pipefifo.hpp	/^   int _pipe_ptr;$/;"	m	class:PipelineFIFO
_pipe_ptr	src/intersim2/pipefifo.hpp	/^  int _pipe_ptr;$/;"	m	class:PipelineFIFO
_plat_stats	src/intersim2/trafficmanager.hpp	/^  vector<Stats *> _plat_stats;     $/;"	m	class:TrafficManager
_pointer	src/intersim2/arbiters/roundrobin_arb.hpp	/^  int  _pointer ;$/;"	m	class:RoundRobinArbiter
_precision	src/ramulator_sim/StatType.h	/^  int _precision = 1;$/;"	m	class:Stats_Ram::Stat
_presence	src/intersim/event_router.hpp	/^   int *_presence;$/;"	m	class:EventNextVCState
_presence	src/intersim2/routers/event_router.hpp	/^  vector<int> _presence;$/;"	m	class:EventNextVCState
_pri	src/intersim/vc.hpp	/^   int _pri;$/;"	m	class:VC
_pri	src/intersim/wavefront.hpp	/^   int _pri;$/;"	m	class:Wavefront
_pri	src/intersim2/allocators/wavefront.hpp	/^  int _pri;$/;"	m	class:Wavefront
_pri	src/intersim2/vc.hpp	/^  int _pri;$/;"	m	class:VC
_pri_type	src/intersim/trafficmanager.hpp	/^   ePriority _pri_type;$/;"	m	class:TrafficManager
_pri_type	src/intersim2/trafficmanager.hpp	/^  ePriority _pri_type;$/;"	m	class:TrafficManager
_pri_type	src/intersim2/vc.hpp	/^  ePrioType _pri_type;$/;"	m	class:VC
_print_csv_results	src/intersim2/trafficmanager.hpp	/^  bool _print_csv_results;$/;"	m	class:TrafficManager
_prio	src/intersim2/allocators/maxsize.hpp	/^  int _prio;    \/\/ priority pointer to ensure fairness$/;"	m	class:MaxSizeMatch
_priorities	src/intersim2/allocators/wavefront.hpp	/^  set<pair<int, int> > _priorities;$/;"	m	class:Wavefront
_priority_donation	src/intersim2/vc.hpp	/^  int _priority_donation;$/;"	m	class:VC
_private_buf_occupancy	src/intersim2/buffer_state.hpp	/^    vector<int> _private_buf_occupancy;$/;"	m	class:BufferState::SharedBufferPolicy
_private_buf_size	src/intersim2/buffer_state.hpp	/^    vector<int> _private_buf_size;$/;"	m	class:BufferState::SharedBufferPolicy
_private_buf_vc_map	src/intersim2/buffer_state.hpp	/^    vector<int> _private_buf_vc_map;$/;"	m	class:BufferState::SharedBufferPolicy
_proc_credits	src/intersim2/routers/iq_router.hpp	/^  deque<pair<int, pair<Credit *, int> > > _proc_credits;$/;"	m	class:IQRouter
_qdrained	src/intersim/trafficmanager.hpp	/^   bool         **_qdrained;$/;"	m	class:TrafficManager
_qdrained	src/intersim2/trafficmanager.hpp	/^  vector<vector<bool> > _qdrained;$/;"	m	class:TrafficManager
_qtime	src/intersim/trafficmanager.hpp	/^   int          **_qtime;$/;"	m	class:TrafficManager
_qtime	src/intersim2/trafficmanager.hpp	/^  vector<vector<int> > _qtime;$/;"	m	class:TrafficManager
_r	src/intersim2/networks/dragonfly.hpp	/^  int _r;$/;"	m	class:DragonFlyNew
_r	src/intersim2/networks/flatfly_onchip.hpp	/^  int _r;$/;"	m	class:FlatFlyOnChip
_r1	src/intersim2/injection.hpp	/^  double _r1;$/;"	m	class:OnOffInjectionProcess
_radix	src/intersim2/networks/dragonfly.hpp	/^  int _radix;$/;"	m	class:DragonFlyNew
_radix	src/intersim2/networks/flatfly_onchip.hpp	/^  int _radix;$/;"	m	class:FlatFlyOnChip
_rate	src/intersim2/injection.hpp	/^  double _rate;$/;"	m	class:InjectionProcess
_rates	src/intersim2/traffic.hpp	/^  vector<int> _rates;$/;"	m	class:HotSpotTrafficPattern
_read_reply_size	src/intersim2/trafficmanager.hpp	/^  vector<int> _read_reply_size;$/;"	m	class:TrafficManager
_read_request_size	src/intersim2/trafficmanager.hpp	/^  vector<int> _read_request_size;$/;"	m	class:TrafficManager
_read_stall	src/intersim2/routers/chaos_router.hpp	/^  int _read_stall;$/;"	m	class:ChaosRouter
_reads	src/intersim2/power/buffer_monitor.hpp	/^  vector<int> _reads ;$/;"	m	class:BufferMonitor
_received_flits	src/intersim2/routers/router.hpp	/^  vector<vector<int> > _received_flits;$/;"	m	class:Router
_received_flits_out	src/intersim2/trafficmanager.hpp	/^  ostream * _received_flits_out;$/;"	m	class:TrafficManager
_reorder	src/intersim/trafficmanager.hpp	/^   bool _reorder;$/;"	m	class:TrafficManager
_repliesPending	src/intersim2/trafficmanager.hpp	/^  vector<list<PacketReplyInfo*> > _repliesPending;$/;"	m	class:TrafficManager
_req	src/intersim/loa.hpp	/^   int *_req;$/;"	m	class:LOA
_req	src/intersim2/allocators/loa.hpp	/^  vector<int> _req;$/;"	m	class:LOA
_request	src/gpgpu-sim/shader.h	/^      int **_request;$/;"	m	class:opndcoll_rfu_t::arbiter_t
_request	src/intersim/allocator.hpp	/^   sRequest **_request;$/;"	m	class:DenseAllocator
_request	src/intersim2/allocators/allocator.hpp	/^  vector<vector<sRequest> > _request;$/;"	m	class:DenseAllocator
_request	src/intersim2/arbiters/arbiter.hpp	/^  vector<entry_t> _request ;$/;"	m	class:Arbiter
_requests	src/intersim/arbiter.hpp	/^   list<sRequest> _requests;$/;"	m	class:Arbiter
_requests	src/intersim2/arbiters/prio_arb.hpp	/^  list<sRequest> _requests;$/;"	m	class:PriorityArbiter
_requestsOutstanding	src/intersim2/trafficmanager.hpp	/^  vector<int> _requestsOutstanding;$/;"	m	class:TrafficManager
_reserved_slots	src/intersim2/buffer_state.hpp	/^    vector<int> _reserved_slots;$/;"	m	class:BufferState::SharedBufferPolicy
_reset	src/intersim/stats.hpp	/^   bool _reset;$/;"	m	class:Stats
_reset_time	src/intersim2/trafficmanager.hpp	/^  int   _reset_time;$/;"	m	class:TrafficManager
_retired_packets	src/intersim2/trafficmanager.hpp	/^  vector<map<int, Flit *> > _retired_packets;$/;"	m	class:TrafficManager
_reverse_node_map	src/intersim2/interconnect_interface.hpp	/^  map<unsigned, unsigned> _reverse_node_map;$/;"	m	class:InterconnectInterface
_rf	src/intersim/event_router.hpp	/^   tRoutingFunction   _rf;$/;"	m	class:EventRouter
_rf	src/intersim/iq_router.hpp	/^   tRoutingFunction   _rf;$/;"	m	class:IQRouter
_rf	src/intersim2/routers/chaos_router.hpp	/^  tRoutingFunction   _rf;$/;"	m	class:ChaosRouter
_rf	src/intersim2/routers/event_router.hpp	/^  tRoutingFunction   _rf;$/;"	m	class:EventRouter
_rf	src/intersim2/routers/iq_router.hpp	/^  tRoutingFunction   _rf;$/;"	m	class:IQRouter
_rf	src/intersim2/trafficmanager.hpp	/^  tRoutingFunction _rf;$/;"	m	class:TrafficManager
_rob	src/intersim/trafficmanager.hpp	/^   priority_queue<Flit *, vector<Flit *>, flitp_compare> **_rob;$/;"	m	class:TrafficManager
_rob_latency	src/intersim/trafficmanager.hpp	/^   Stats *_rob_latency;$/;"	m	class:TrafficManager
_rob_pri	src/intersim/trafficmanager.hpp	/^   int                     *_rob_pri;$/;"	m	class:TrafficManager
_rob_size	src/intersim/trafficmanager.hpp	/^   Stats *_rob_size;$/;"	m	class:TrafficManager
_rob_sqn	src/intersim/trafficmanager.hpp	/^   int                    **_rob_sqn;$/;"	m	class:TrafficManager
_rob_sqn_max	src/intersim/trafficmanager.hpp	/^   int                    **_rob_sqn_max;$/;"	m	class:TrafficManager
_round_robin_turn	src/intersim2/interconnect_interface.hpp	/^  vector<vector<int> > _round_robin_turn; \/\/keep track of _boundary_buffer last used in icnt_pop$/;"	m	class:InterconnectInterface
_round_trip_time	src/intersim2/buffer_state.hpp	/^    vector<int> _round_trip_time;$/;"	m	class:BufferState::FeedbackSharedBufferPolicy
_route_set	src/intersim/vc.hpp	/^   OutputSet *_route_set;$/;"	m	class:VC
_route_set	src/intersim2/vc.hpp	/^  OutputSet *_route_set;$/;"	m	class:VC
_route_vcs	src/intersim2/routers/iq_router.hpp	/^  deque<pair<int, pair<int, int> > > _route_vcs;$/;"	m	class:IQRouter
_router	src/intersim2/trafficmanager.hpp	/^  vector<vector<Router *> > _router;$/;"	m	class:TrafficManager
_routerSink	src/intersim2/flitchannel.hpp	/^  Router const * _routerSink;$/;"	m	class:FlitChannel
_routerSinkPort	src/intersim2/flitchannel.hpp	/^  int _routerSinkPort;$/;"	m	class:FlitChannel
_routerSource	src/intersim2/flitchannel.hpp	/^  Router const * _routerSource;$/;"	m	class:FlitChannel
_routerSourcePort	src/intersim2/flitchannel.hpp	/^  int _routerSourcePort;$/;"	m	class:FlitChannel
_routers	src/intersim/network.hpp	/^   Router **_routers;$/;"	m	class:Network
_routers	src/intersim2/networks/network.hpp	/^  vector<Router *> _routers;$/;"	m	class:Network
_routers	src/intersim2/trafficmanager.hpp	/^  int _routers;$/;"	m	class:TrafficManager
_routing_delay	src/intersim/router.hpp	/^   int _routing_delay;$/;"	m	class:Router
_routing_delay	src/intersim2/routers/iq_router.hpp	/^  int _routing_delay;$/;"	m	class:IQRouter
_routing_function	src/intersim/trafficmanager.hpp	/^   tRoutingFunction  _routing_function;$/;"	m	class:TrafficManager
_rptr	src/intersim/loa.hpp	/^   int *_rptr;$/;"	m	class:LOA
_rptr	src/intersim2/allocators/loa.hpp	/^  vector<int> _rptr;$/;"	m	class:LOA
_rr_ptr	src/intersim/arbiter.hpp	/^   int _rr_ptr;$/;"	m	class:PriorityArbiter
_rr_ptr	src/intersim2/arbiters/prio_arb.hpp	/^  int _rr_ptr;$/;"	m	class:PriorityArbiter
_s	src/intersim/maxsize.hpp	/^   int *_s;      \/\/ stack of leaf nodes in tree$/;"	m	class:MaxSizeMatch
_s	src/intersim2/allocators/maxsize.hpp	/^  int *_s;      \/\/ stack of leaf nodes in tree$/;"	m	class:MaxSizeMatch
_sample_period	src/intersim/trafficmanager.hpp	/^   int   _sample_period;$/;"	m	class:TrafficManager
_sample_period	src/intersim2/trafficmanager.hpp	/^  int   _sample_period;$/;"	m	class:TrafficManager
_sample_squared_sum	src/intersim2/stats.hpp	/^  double _sample_squared_sum;$/;"	m	class:Stats
_sample_sum	src/intersim/stats.hpp	/^   double _sample_sum;$/;"	m	class:Stats
_sample_sum	src/intersim2/stats.hpp	/^  double _sample_sum;$/;"	m	class:Stats
_selected	src/intersim2/arbiters/arbiter.hpp	/^  int  _selected ;$/;"	m	class:Arbiter
_sent_flits	src/intersim2/routers/router.hpp	/^  vector<vector<int> > _sent_flits;$/;"	m	class:Router
_sent_flits	src/intersim2/trafficmanager.hpp	/^  vector<vector<int> > _sent_flits;$/;"	m	class:TrafficManager
_sent_flits_out	src/intersim2/trafficmanager.hpp	/^  ostream * _sent_flits_out;$/;"	m	class:TrafficManager
_sent_packets	src/intersim2/trafficmanager.hpp	/^  vector<vector<int> > _sent_packets;$/;"	m	class:TrafficManager
_sent_packets_out	src/intersim2/batchtrafficmanager.hpp	/^  ostream * _sent_packets_out;$/;"	m	class:BatchTrafficManager
_shared_buf_occupancy	src/intersim2/buffer_state.hpp	/^    int _shared_buf_occupancy;$/;"	m	class:BufferState::SharedBufferPolicy
_shared_buf_size	src/intersim2/buffer_state.hpp	/^    int _shared_buf_size;$/;"	m	class:BufferState::SharedBufferPolicy
_shift	src/intersim2/traffic.hpp	/^  int _shift;$/;"	m	class:TransposeTrafficPattern
_sim_mode	src/intersim/trafficmanager.hpp	/^   eSimMode _sim_mode;$/;"	m	class:TrafficManager
_sim_state	src/intersim/trafficmanager.hpp	/^   eSimState _sim_state;$/;"	m	class:TrafficManager
_sim_state	src/intersim2/trafficmanager.hpp	/^  eSimState _sim_state;$/;"	m	class:TrafficManager
_size	src/intersim/network.hpp	/^   int _size;$/;"	m	class:Network
_size	src/intersim/vc.hpp	/^   int _size;$/;"	m	class:VC
_size	src/intersim2/arbiters/arbiter.hpp	/^  int  _size ;$/;"	m	class:Arbiter
_size	src/intersim2/buffer.hpp	/^  int _size;$/;"	m	class:Buffer
_size	src/intersim2/buffer_state.hpp	/^  int  _size;$/;"	m	class:BufferState
_size	src/intersim2/networks/network.hpp	/^  int _size;$/;"	m	class:Network
_size	src/ramulator_sim/StatType.h	/^  size_type _size = 0;$/;"	m	class:Stats_Ram::VectorBase
_skip_diags	src/intersim2/allocators/wavefront.hpp	/^  bool _skip_diags;$/;"	m	class:Wavefront
_slowest_flit	src/intersim2/trafficmanager.hpp	/^  vector<int> _slowest_flit;$/;"	m	class:TrafficManager
_slowest_packet	src/intersim2/trafficmanager.hpp	/^  vector<int> _slowest_packet;$/;"	m	class:TrafficManager
_sources	src/intersim/network.hpp	/^   int _sources;$/;"	m	class:Network
_sources	src/intersim/trafficmanager.hpp	/^   int _sources;$/;"	m	class:TrafficManager
_spec_check_cred	src/intersim2/routers/iq_router.hpp	/^  bool _spec_check_cred;$/;"	m	class:IQRouter
_spec_check_elig	src/intersim2/routers/iq_router.hpp	/^  bool _spec_check_elig;$/;"	m	class:IQRouter
_spec_mask_by_reqs	src/intersim2/routers/iq_router.hpp	/^  bool _spec_mask_by_reqs;$/;"	m	class:IQRouter
_spec_sw_allocator	src/intersim2/routers/iq_router.hpp	/^  Allocator *_spec_sw_allocator;$/;"	m	class:IQRouter
_speculative	src/intersim2/routers/iq_router.hpp	/^  bool _speculative;$/;"	m	class:IQRouter
_split_packets	src/intersim/trafficmanager.hpp	/^   int          _split_packets; $/;"	m	class:TrafficManager
_square	src/intersim/wavefront.hpp	/^   int _square;$/;"	m	class:Wavefront
_square	src/intersim2/allocators/wavefront.hpp	/^  int _square;$/;"	m	class:Wavefront
_st_final_delay	src/intersim/router.hpp	/^   int _st_final_delay;$/;"	m	class:Router
_st_prepare_delay	src/intersim/router.hpp	/^   int _st_prepare_delay;$/;"	m	class:Router
_stageout	src/intersim2/networks/dragonfly.hpp	/^  int _stageout;$/;"	m	class:DragonFlyNew
_stageout	src/intersim2/networks/flatfly_onchip.hpp	/^  int _stageout;$/;"	m	class:FlatFlyOnChip
_stages	src/intersim2/networks/dragonfly.hpp	/^  int _stages;$/;"	m	class:DragonFlyNew
_stages	src/intersim2/networks/flatfly_onchip.hpp	/^  int _stages;$/;"	m	class:FlatFlyOnChip
_stat_idx	src/gpgpu-sim/power_stat.h	/^typedef enum _stat_idx{$/;"	g
_state	src/intersim/event_router.hpp	/^   eNextVCState *_state;$/;"	m	class:EventNextVCState
_state	src/intersim/vc.hpp	/^   eVCState _state;$/;"	m	class:VC
_state	src/intersim2/injection.hpp	/^  vector<int> _state;$/;"	m	class:OnOffInjectionProcess
_state	src/intersim2/routers/event_router.hpp	/^  vector<eNextVCState> _state;$/;"	m	class:EventNextVCState
_state	src/intersim2/vc.hpp	/^  eVCState _state;$/;"	m	class:VC
_state_time	src/intersim/vc.hpp	/^   int      _state_time;$/;"	m	class:VC
_stats	src/intersim2/trafficmanager.hpp	/^  map<string, Stats *> _stats;$/;"	m	class:TrafficManager
_stats_out	src/intersim2/trafficmanager.hpp	/^  ostream * _stats_out;$/;"	m	class:TrafficManager
_stopping_threshold	src/intersim2/trafficmanager.hpp	/^  vector<double> _stopping_threshold;$/;"	m	class:TrafficManager
_stored_flits	src/intersim2/routers/router.hpp	/^  vector<vector<int> > _stored_flits;$/;"	m	class:Router
_stored_flits_out	src/intersim2/trafficmanager.hpp	/^  ostream * _stored_flits_out;$/;"	m	class:TrafficManager
_str_map	src/intersim/config_utils.hpp	/^   map<string,char *>       _str_map;$/;"	m	class:Configuration
_str_map	src/intersim2/config_utils.hpp	/^  map<string,string> _str_map;$/;"	m	class:Configuration
_strnicmp	src/gpuwattch/xmlParser.cc	/^    static inline int _strnicmp(const char *c1,const char *c2, int l) { return strncasecmp(c1,c2,l);}$/;"	f	file:
_subnet	src/intersim2/trafficmanager.hpp	/^  vector<int> _subnet;$/;"	m	class:TrafficManager
_subnets	src/intersim2/interconnect_interface.hpp	/^  int _subnets;$/;"	m	class:InterconnectInterface
_subnets	src/intersim2/trafficmanager.hpp	/^  int _subnets;$/;"	m	class:TrafficManager
_sw_alloc_delay	src/intersim/router.hpp	/^   int _sw_alloc_delay;$/;"	m	class:Router
_sw_alloc_delay	src/intersim2/routers/iq_router.hpp	/^  int _sw_alloc_delay;$/;"	m	class:IQRouter
_sw_alloc_vcs	src/intersim2/routers/iq_router.hpp	/^  deque<pair<int, pair<pair<int, int>, int> > > _sw_alloc_vcs;$/;"	m	class:IQRouter
_sw_allocator	src/intersim/iq_router.hpp	/^   Allocator *_sw_allocator;$/;"	m	class:IQRouter
_sw_allocator	src/intersim2/routers/iq_router.hpp	/^  Allocator *_sw_allocator;$/;"	m	class:IQRouter
_sw_hold_vcs	src/intersim2/routers/iq_router.hpp	/^  deque<pair<int, pair<pair<int, int>, int> > > _sw_hold_vcs;$/;"	m	class:IQRouter
_sw_rr_offset	src/intersim/iq_router.hpp	/^   int *_sw_rr_offset;$/;"	m	class:IQRouter
_sw_rr_offset	src/intersim2/routers/iq_router.hpp	/^  vector<int> _sw_rr_offset;$/;"	m	class:IQRouter
_switchMonitor	src/intersim2/routers/iq_router.hpp	/^  SwitchMonitor * _switchMonitor ;$/;"	m	class:IQRouter
_switch_hold_in	src/intersim/iq_router.hpp	/^   int *_switch_hold_in;$/;"	m	class:IQRouter
_switch_hold_in	src/intersim2/routers/iq_router.hpp	/^  vector<int> _switch_hold_in;$/;"	m	class:IQRouter
_switch_hold_out	src/intersim/iq_router.hpp	/^   int *_switch_hold_out;$/;"	m	class:IQRouter
_switch_hold_out	src/intersim2/routers/iq_router.hpp	/^  vector<int> _switch_hold_out;$/;"	m	class:IQRouter
_switch_hold_vc	src/intersim/iq_router.hpp	/^   int *_switch_hold_vc;$/;"	m	class:IQRouter
_switch_hold_vc	src/intersim2/routers/iq_router.hpp	/^  vector<int> _switch_hold_vc;$/;"	m	class:IQRouter
_tail_flag	src/intersim2/interconnect_interface.hpp	/^    queue<bool> _tail_flag;$/;"	m	class:InterconnectInterface::_BoundaryBufferItem
_tail_sent	src/intersim/buffer_state.hpp	/^   bool *_tail_sent;$/;"	m	class:BufferState
_tail_sent	src/intersim2/buffer_state.hpp	/^  vector<bool> _tail_sent;$/;"	m	class:BufferState
_time	src/intersim/trafficmanager.hpp	/^   int _time;$/;"	m	class:TrafficManager
_time	src/intersim2/trafficmanager.hpp	/^  int _time;$/;"	m	class:TrafficManager
_timed_modules	src/intersim2/networks/network.hpp	/^  deque<TimedModule *> _timed_modules;$/;"	m	class:Network
_total_cycles	src/intersim/vc.hpp	/^   int _total_cycles;$/;"	m	class:VC
_total_in_flight	src/intersim/trafficmanager.hpp	/^   int           _total_in_flight;$/;"	m	class:TrafficManager
_total_in_flight_flits	src/intersim2/trafficmanager.hpp	/^  vector<map<int, Flit *> > _total_in_flight_flits;$/;"	m	class:TrafficManager
_total_mapped_size	src/intersim2/buffer_state.hpp	/^    int _total_mapped_size;$/;"	m	class:BufferState::FeedbackSharedBufferPolicy
_total_sims	src/intersim/trafficmanager.hpp	/^   int   _total_sims;$/;"	m	class:TrafficManager
_total_sims	src/intersim2/trafficmanager.hpp	/^  int   _total_sims;$/;"	m	class:TrafficManager
_traffic	src/intersim2/trafficmanager.hpp	/^  vector<string> _traffic;$/;"	m	class:TrafficManager
_traffic_function	src/intersim/trafficmanager.hpp	/^   tTrafficFunction  _traffic_function;$/;"	m	class:TrafficManager
_traffic_manager	src/intersim2/interconnect_interface.hpp	/^  GPUTrafficManager* _traffic_manager;$/;"	m	class:InterconnectInterface
_traffic_pattern	src/intersim2/trafficmanager.hpp	/^  vector<TrafficPattern *> _traffic_pattern;$/;"	m	class:TrafficManager
_transport_arbiter	src/intersim/event_router.hpp	/^   PriorityArbiter          **_transport_arbiter;$/;"	m	class:EventRouter
_transport_arbiter	src/intersim2/routers/event_router.hpp	/^  vector<PriorityArbiter*> _transport_arbiter;$/;"	m	class:EventRouter
_transport_free	src/intersim/event_router.hpp	/^   bool *_transport_free;$/;"	m	class:EventRouter
_transport_free	src/intersim2/routers/event_router.hpp	/^  vector<bool> _transport_free;$/;"	m	class:EventRouter
_transport_match	src/intersim/event_router.hpp	/^   int  *_transport_match;$/;"	m	class:EventRouter
_transport_match	src/intersim2/routers/event_router.hpp	/^  vector<int> _transport_match;$/;"	m	class:EventRouter
_transport_queue	src/intersim/event_router.hpp	/^   queue<tTransportEvent *> *_transport_queue;$/;"	m	class:EventRouter
_transport_queue	src/intersim2/routers/event_router.hpp	/^  vector<queue<tTransportEvent *> > _transport_queue;$/;"	m	class:EventRouter
_use_lagging	src/intersim/trafficmanager.hpp	/^   bool         _use_lagging;$/;"	m	class:TrafficManager
_use_read_write	src/intersim2/trafficmanager.hpp	/^  vector<int> _use_read_write;$/;"	m	class:TrafficManager
_used_credits_out	src/intersim2/trafficmanager.hpp	/^  ostream * _used_credits_out;$/;"	m	class:TrafficManager
_used_flits	src/intersim/trafficmanager.hpp	/^   list<Flit *> _used_flits;$/;"	m	class:TrafficManager
_value	src/ramulator_sim/StatType.h	/^  Counter _value;$/;"	m	class:Stats_Ram::ConstValue
_value	src/ramulator_sim/StatType.h	/^  Counter _value;$/;"	m	class:Stats_Ram::Scalar
_vc	src/intersim/event_router.hpp	/^   VC  **_vc;$/;"	m	class:EventRouter
_vc	src/intersim/iq_router.hpp	/^   VC          **_vc;$/;"	m	class:IQRouter
_vc	src/intersim2/buffer.hpp	/^  vector<VC*> _vc;$/;"	m	class:Buffer
_vc_alloc_cycles	src/intersim/vc.hpp	/^   int _vc_alloc_cycles;$/;"	m	class:VC
_vc_alloc_delay	src/intersim/router.hpp	/^   int _vc_alloc_delay;$/;"	m	class:Router
_vc_alloc_delay	src/intersim2/routers/iq_router.hpp	/^  int _vc_alloc_delay;$/;"	m	class:IQRouter
_vc_alloc_vcs	src/intersim2/routers/iq_router.hpp	/^  deque<pair<int, pair<pair<int, int>, int> > > _vc_alloc_vcs;  $/;"	m	class:IQRouter
_vc_allocator	src/intersim/iq_router.hpp	/^   Allocator *_vc_allocator;$/;"	m	class:IQRouter
_vc_allocator	src/intersim2/routers/iq_router.hpp	/^  Allocator *_vc_allocator;$/;"	m	class:IQRouter
_vc_buf_size	src/intersim2/buffer_state.hpp	/^    int _vc_buf_size;$/;"	m	class:BufferState::PrivateBufferPolicy
_vc_busy_when_full	src/intersim2/routers/iq_router.hpp	/^  bool _vc_busy_when_full;$/;"	m	class:IQRouter
_vc_occupancy	src/intersim2/buffer_state.hpp	/^  vector<int> _vc_occupancy;$/;"	m	class:BufferState
_vc_prioritize_empty	src/intersim2/routers/iq_router.hpp	/^  bool _vc_prioritize_empty;$/;"	m	class:IQRouter
_vc_rr_offset	src/intersim2/routers/iq_router.hpp	/^  vector<int> _vc_rr_offset;$/;"	m	class:IQRouter
_vc_shuffle_requests	src/intersim2/routers/iq_router.hpp	/^  bool _vc_shuffle_requests;$/;"	m	class:IQRouter
_vc_size	src/intersim/event_router.hpp	/^   int _vc_size;$/;"	m	class:EventRouter
_vc_size	src/intersim/iq_router.hpp	/^   int _vc_size;$/;"	m	class:IQRouter
_vcs	src/intersim/buffer_state.hpp	/^   int  _vcs;$/;"	m	class:BufferState
_vcs	src/intersim/event_router.hpp	/^   int _vcs;$/;"	m	class:EventNextVCState
_vcs	src/intersim/event_router.hpp	/^   int _vcs;$/;"	m	class:EventRouter
_vcs	src/intersim/iq_router.hpp	/^   int _vcs;$/;"	m	class:IQRouter
_vcs	src/intersim2/buffer_state.hpp	/^    int _vcs;$/;"	m	class:BufferState::FeedbackSharedBufferPolicy
_vcs	src/intersim2/buffer_state.hpp	/^    int _vcs;$/;"	m	class:BufferState::LimitedSharedBufferPolicy
_vcs	src/intersim2/buffer_state.hpp	/^  int  _vcs;$/;"	m	class:BufferState
_vcs	src/intersim2/interconnect_interface.hpp	/^  int _vcs;$/;"	m	class:InterconnectInterface
_vcs	src/intersim2/routers/event_router.hpp	/^  int _vcs;$/;"	m	class:EventNextVCState
_vcs	src/intersim2/routers/event_router.hpp	/^  int _vcs;$/;"	m	class:EventRouter
_vcs	src/intersim2/routers/iq_router.hpp	/^  int _vcs;$/;"	m	class:IQRouter
_vcs	src/intersim2/trafficmanager.hpp	/^  int _vcs;$/;"	m	class:TrafficManager
_vct	src/intersim/event_router.hpp	/^   int _vct;$/;"	m	class:EventRouter
_vct	src/intersim2/routers/event_router.hpp	/^  int _vct;$/;"	m	class:EventRouter
_voq	src/intersim/trafficmanager.hpp	/^   list<Flit *> **_voq;$/;"	m	class:TrafficManager
_voqing	src/intersim/trafficmanager.hpp	/^   int          _voqing;$/;"	m	class:TrafficManager
_wait_for_tail_credit	src/intersim/buffer_state.hpp	/^   int  _wait_for_tail_credit;$/;"	m	class:BufferState
_wait_for_tail_credit	src/intersim2/buffer_state.hpp	/^  bool _wait_for_tail_credit;$/;"	m	class:BufferState
_wait_queue	src/intersim2/channel.hpp	/^  queue<pair<int, T *> > _wait_queue;$/;"	m	class:Channel
_waiting	src/intersim/event_router.hpp	/^   list<tWaiting *> *_waiting;$/;"	m	class:EventNextVCState
_waiting	src/intersim2/routers/event_router.hpp	/^  vector<list<tWaiting *> > _waiting;$/;"	m	class:EventNextVCState
_warmup_periods	src/intersim/trafficmanager.hpp	/^   int   _warmup_periods;$/;"	m	class:TrafficManager
_warmup_periods	src/intersim2/trafficmanager.hpp	/^  int   _warmup_periods;$/;"	m	class:TrafficManager
_warmup_threshold	src/intersim2/trafficmanager.hpp	/^  vector<double> _warmup_threshold;$/;"	m	class:TrafficManager
_warmup_time	src/intersim/trafficmanager.hpp	/^   int   _warmup_time;$/;"	m	class:TrafficManager
_watched	src/intersim/vc.hpp	/^   bool _watched;$/;"	m	class:VC
_watched	src/intersim2/vc.hpp	/^  bool _watched;$/;"	m	class:VC
_write_fraction	src/intersim2/trafficmanager.hpp	/^  vector<double> _write_fraction;$/;"	m	class:TrafficManager
_write_reply_size	src/intersim2/trafficmanager.hpp	/^  vector<int> _write_reply_size;$/;"	m	class:TrafficManager
_write_request_size	src/intersim2/trafficmanager.hpp	/^  vector<int> _write_request_size;$/;"	m	class:TrafficManager
_writes	src/intersim2/power/buffer_monitor.hpp	/^  vector<int> _writes ;$/;"	m	class:BufferMonitor
_xcount	src/intersim2/networks/cmesh.hpp	/^  int _xcount;$/;"	m	class:CMesh
_xcount	src/intersim2/networks/flatfly_onchip.cpp	/^static int _xcount;$/;"	v	file:
_xr	src/intersim2/traffic.hpp	/^  int _xr;$/;"	m	class:DigitPermutationTrafficPattern
_xrouter	src/intersim2/networks/cmesh.hpp	/^  int _xrouter;$/;"	m	class:CMesh
_xrouter	src/intersim2/networks/flatfly_onchip.cpp	/^static int _xrouter;$/;"	v	file:
_ycount	src/intersim2/networks/cmesh.hpp	/^  int _ycount;$/;"	m	class:CMesh
_ycount	src/intersim2/networks/flatfly_onchip.cpp	/^static int _ycount;$/;"	v	file:
_yrouter	src/intersim2/networks/cmesh.hpp	/^  int _yrouter;$/;"	m	class:CMesh
_yrouter	src/intersim2/networks/flatfly_onchip.cpp	/^static int _yrouter;$/;"	v	file:
a	src/cuda-sim/instructions.cc	/^   int a;$/;"	m	union:intfloat	file:
abs_impl	src/cuda-sim/instructions.cc	/^void abs_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
accept_fetch_response	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::accept_fetch_response( mem_fetch *mf )$/;"	f	class:shader_core_ctx
accept_ldst_unit_response	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::accept_ldst_unit_response(mem_fetch * mf) $/;"	f	class:shader_core_ctx
access	src/gpgpu-sim/gpu-cache.cc	/^data_cache::access( new_addr_type addr,$/;"	f	class:data_cache
access	src/gpgpu-sim/gpu-cache.cc	/^enum cache_request_status tag_array::access( new_addr_type addr, unsigned time, unsigned &idx, bool &wb, cache_block_t &evicted, mem_fetch * mf) $/;"	f	class:tag_array
access	src/gpgpu-sim/gpu-cache.cc	/^enum cache_request_status tag_array::access( new_addr_type addr, unsigned time, unsigned &idx,mem_fetch * mf)$/;"	f	class:tag_array
access	src/gpgpu-sim/gpu-cache.cc	/^enum cache_request_status tex_cache::access( new_addr_type addr, mem_fetch *mf,$/;"	f	class:tex_cache
access	src/gpgpu-sim/gpu-cache.cc	/^l1_cache::access( new_addr_type addr,$/;"	f	class:l1_cache
access	src/gpgpu-sim/gpu-cache.cc	/^l2_cache::access( new_addr_type addr,$/;"	f	class:l2_cache
access	src/gpgpu-sim/gpu-cache.cc	/^read_only_cache::access( new_addr_type addr,$/;"	f	class:read_only_cache
access	src/gpuwattch/basic_components.h	/^    double access;$/;"	m	class:statsComponents
access_mode	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int access_mode;$/;"	m	class:InputParameter
access_ready	src/gpgpu-sim/gpu-cache.h	/^    bool access_ready() const {return !m_current_response.empty();}$/;"	f	class:mshr_table
access_ready	src/gpgpu-sim/gpu-cache.h	/^    bool access_ready() const {return m_mshrs.access_ready();}$/;"	f	class:baseline_cache
access_ready	src/gpgpu-sim/gpu-cache.h	/^    bool access_ready() const{return !m_result_fifo.empty();}$/;"	f	class:tex_cache
access_time	src/gpuwattch/cacti/Ucache.h	/^  double access_time;$/;"	m	struct:solution
access_time	src/gpuwattch/cacti/cacti_interface.h	/^    double access_time;$/;"	m	class:uca_org_t
access_time	src/gpuwattch/cacti/cacti_interface.h	/^  double access_time;$/;"	m	class:mem_array
access_time	src/gpuwattch/cacti/cacti_interface.h	/^  double access_time;$/;"	m	struct:__anon5
access_time	src/gpuwattch/cacti/uca.h	/^    double access_time;$/;"	m	class:UCA
accesses	src/gpgpu-sim/gpu-cache.h	/^    unsigned accesses;$/;"	m	struct:cache_sub_stats
accessq_back	src/abstract_hardware_model.h	/^    const mem_access_t &accessq_back() { return m_accessq.back(); }$/;"	f	class:warp_inst_t
accessq_count	src/abstract_hardware_model.h	/^    unsigned accessq_count() const { return m_accessq.size(); }$/;"	f	class:warp_inst_t
accessq_empty	src/abstract_hardware_model.h	/^    bool accessq_empty() const { return m_accessq.empty(); }$/;"	f	class:warp_inst_t
accessq_pop_back	src/abstract_hardware_model.h	/^    void accessq_pop_back() { m_accessq.pop_back(); }$/;"	f	class:warp_inst_t
accumulate_L2cache_stats	src/gpgpu-sim/l2cache.cc	/^void memory_sub_partition::accumulate_L2cache_stats(class cache_stats &l2_stats) const {$/;"	f	class:memory_sub_partition
act_coeff	src/gpuwattch/basic_components.h	/^    double act_coeff;$/;"	m	class:DRAMParam
activate_energy	src/gpuwattch/cacti/cacti_interface.h	/^  double activate_energy, read_energy, write_energy, precharge_energy,$/;"	m	class:mem_array
activate_energy	src/gpuwattch/cacti/cacti_interface.h	/^  double activate_energy;$/;"	m	struct:__anon5
activate_energy	src/gpuwattch/cacti/uca.h	/^    double activate_energy;$/;"	m	class:UCA
active	src/abstract_hardware_model.h	/^        active_mask_t active; \/\/ threads in this transaction$/;"	m	struct:warp_inst_t::transaction_info
active	src/abstract_hardware_model.h	/^    bool active( unsigned thread ) const { return m_warp_active_mask.test(thread); }$/;"	f	class:warp_inst_t
active	src/gpgpu-sim/gpu-sim.cc	/^bool gpgpu_sim::active()$/;"	f	class:gpgpu_sim
active	src/intersim/vc.hpp	/^      idle, routing, vc_alloc, active$/;"	e	enum:VC::eVCState
active	src/intersim2/vc.hpp	/^  enum eVCState { state_min = 0, idle = state_min, routing, vc_alloc, active, $/;"	e	enum:VC::eVCState
active_count	src/abstract_hardware_model.h	/^    unsigned active_count() const { return m_warp_active_mask.count(); }$/;"	f	class:warp_inst_t
active_cycles	src/ramulator_sim/DRAM.h	/^    ScalarStat active_cycles;$/;"	m	class:DRAM
active_device	launcher/simulator.h	/^  int                                         active_device;$/;"	m	class:Simulator
active_lanes_in_pipeline	src/gpgpu-sim/shader.cc	/^void ldst_unit::active_lanes_in_pipeline(){$/;"	f	class:ldst_unit
active_lanes_in_pipeline	src/gpgpu-sim/shader.cc	/^void sfu::active_lanes_in_pipeline(){$/;"	f	class:sfu
active_lanes_in_pipeline	src/gpgpu-sim/shader.cc	/^void sp_unit::active_lanes_in_pipeline(){$/;"	f	class:sp_unit
active_mask_t	src/abstract_hardware_model.h	/^typedef std::bitset<MAX_WARP_SIZE> active_mask_t;$/;"	t
active_refresh_overlap_cycles	src/ramulator_sim/DRAM.h	/^    ScalarStat active_refresh_overlap_cycles;$/;"	m	class:DRAM
active_sms	src/gpgpu-sim/gpu-sim.h	/^   float * active_sms;$/;"	m	class:gpgpu_sim
active_threads	common/kernel_info_t.h	/^   std::list<class ptx_thread_info *> &active_threads() { return m_active_threads; }$/;"	f	class:kernel_info_t
activity	src/gpuwattch/arch_const.h	/^const int activity=0;$/;"	v
activity_coeff	src/gpuwattch/basic_components.h	/^    double activity_coeff;$/;"	m	class:DRAMParam
actual_operating_clock	src/gpuwattch/basic_components.h	/^	int actual_operating_clock;$/;"	m	class:DRAMParam
actual_vdd	src/gpuwattch/basic_components.h	/^	double actual_vdd;$/;"	m	class:DRAMParam
adaptive_xy_yx_mesh	src/intersim2/routefunc.cpp	/^void adaptive_xy_yx_mesh( const Router *r, const Flit *f, $/;"	f
adaptive_xyyx_flatfly	src/intersim2/networks/flatfly_onchip.cpp	/^void adaptive_xyyx_flatfly( const Router *r, const Flit *f, int in_channel, $/;"	f
add	launcher/mk-sched/named_info.cc	/^NamedInfo<T>::add(std::string str, T value)$/;"	f	class:NamedInfo
add	src/gpgpu-sim/gpu-cache.cc	/^void mshr_table::add( new_addr_type block_addr, mem_fetch *mf ){$/;"	f	class:mshr_table
add	src/ramulator_sim/Config.h	/^  void add (const std::string& name, const std::string& value) {$/;"	f	class:Config
add	src/ramulator_sim/StatType.cpp	/^Histogram::add(Histogram &hs)$/;"	f	class:Stats_Ram::Histogram
add	src/ramulator_sim/StatType.h	/^  void add(AverageDeviation& ad) {$/;"	f	class:Stats_Ram::AverageDeviation
add	src/ramulator_sim/StatType.h	/^  void add(Distribution &d) {$/;"	f	class:Stats_Ram::Distribution
add	src/ramulator_sim/StatType.h	/^  void add(StandardDeviation& sd) {$/;"	f	class:Stats_Ram::StandardDeviation
add	src/ramulator_sim/StatType.h	/^  void add(StatBase* stat) {$/;"	f	class:Stats_Ram::StatList
add	src/ramulator_sim/Statistics.h	/^  void add(DistStatBase & d) { StatBase<StatType>::stat.add(d.StatBase<StatType>::stat); }$/;"	f	class:DistStatBase
add2bin	src/gpgpu-sim/histogram.cc	/^void binned_histogram::add2bin (int sample) {$/;"	f	class:binned_histogram
add2bin	src/gpgpu-sim/histogram.cc	/^void linear_histogram::add2bin (int sample) {$/;"	f	class:linear_histogram
add2bin	src/gpgpu-sim/histogram.cc	/^void pow2_histogram::add2bin (int sample) {$/;"	f	class:pow2_histogram
addAttribute	src/gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::addAttribute(XMLCSTR lpszName, XMLCSTR lpszValue)$/;"	f	class:XMLNode
addAttribute_WOSD	src/gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::addAttribute_WOSD(XMLSTR lpszName, XMLSTR lpszValuev)$/;"	f	class:XMLNode
addAttribute_priv	src/gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::addAttribute_priv(int memoryIncrease,XMLSTR lpszName, XMLSTR lpszValuev)$/;"	f	class:XMLNode
addChild	src/gpuwattch/xmlParser.cc	/^XMLNode       XMLNode::addChild(XMLCSTR lpszName, char isDeclaration, XMLElementPosition pos)$/;"	f	class:XMLNode
addChild	src/gpuwattch/xmlParser.cc	/^XMLNode XMLNode::addChild(XMLNode childNode, int pos)$/;"	f	class:XMLNode
addChild_WOSD	src/gpuwattch/xmlParser.cc	/^XMLNode       XMLNode::addChild_WOSD(XMLSTR lpszName, char isDeclaration, XMLElementPosition pos)$/;"	f	class:XMLNode
addChild_priv	src/gpuwattch/xmlParser.cc	/^XMLNode XMLNode::addChild_priv(int memoryIncrease, XMLSTR lpszName, char isDeclaration, int pos)$/;"	f	class:XMLNode
addClear	src/gpuwattch/xmlParser.cc	/^XMLClear     *XMLNode::addClear(XMLCSTR lpszValue, XMLCSTR lpszOpen, XMLCSTR lpszClose, XMLElementPosition pos)$/;"	f	class:XMLNode
addClear_WOSD	src/gpuwattch/xmlParser.cc	/^XMLClear     *XMLNode::addClear_WOSD(XMLSTR lpszValue, XMLCSTR lpszOpen, XMLCSTR lpszClose, XMLElementPosition pos)$/;"	f	class:XMLNode
addClear_priv	src/gpuwattch/xmlParser.cc	/^XMLClear *XMLNode::addClear_priv(int memoryIncrease, XMLSTR lpszValue, XMLCSTR lpszOpen, XMLCSTR lpszClose, int pos)$/;"	f	class:XMLNode
addCuobjdumpSection	libcuda/cuda_runtime_api.cc	/^void addCuobjdumpSection(int sectiontype){$/;"	f
addText	src/gpuwattch/xmlParser.cc	/^XMLCSTR       XMLNode::addText(XMLCSTR lpszValue, XMLElementPosition pos)$/;"	f	class:XMLNode
addText_WOSD	src/gpuwattch/xmlParser.cc	/^XMLCSTR       XMLNode::addText_WOSD(XMLSTR lpszValue, XMLElementPosition pos)$/;"	f	class:XMLNode
addText_priv	src/gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::addText_priv(int memoryIncrease, XMLSTR lpszValue, int pos)$/;"	f	class:XMLNode
addTextureReference	launcher/child_process.cc	/^ChildProcess::addTextureReference(const void* hostVar, struct textureReference* texRef)$/;"	f	class:ChildProcess
addToOrder	src/gpuwattch/xmlParser.cc	/^void *XMLNode::addToOrder(int memoryIncrease,int *_pos, int nc, void *p, int size, XMLElementType xtype)$/;"	f	class:XMLNode
addVarName	launcher/child_process.cc	/^ChildProcess::addVarName(const void* hostVar, char* realName)$/;"	f	class:ChildProcess
add_1vector_operand	src/cuda-sim/ptx_parser.cc	/^void add_1vector_operand( const char *d1 ) $/;"	f
add_2vector_operand	src/cuda-sim/ptx_parser.cc	/^void add_2vector_operand( const char *d1, const char *d2 ) $/;"	f
add_3vector_operand	src/cuda-sim/ptx_parser.cc	/^void add_3vector_operand( const char *d1, const char *d2, const char *d3 ) $/;"	f
add_4vector_operand	src/cuda-sim/ptx_parser.cc	/^void add_4vector_operand( const char *d1, const char *d2, const char *d3, const char *d4 ) $/;"	f
add_address_operand	src/cuda-sim/ptx_parser.cc	/^void add_address_operand( const char *identifier, int offset ) $/;"	f
add_address_operand2	src/cuda-sim/ptx_parser.cc	/^void add_address_operand2( int offset )$/;"	f
add_alignment_spec	src/cuda-sim/ptx_parser.cc	/^void add_alignment_spec( int spec )$/;"	f
add_arg	src/cuda-sim/ptx_ir.h	/^   void add_arg( const symbol *arg )$/;"	f	class:function_info
add_array_initializer	src/cuda-sim/ptx_parser.cc	/^void add_array_initializer()$/;"	f
add_binary	launcher/simulator.h	/^    void add_binary( symbol_table *symtab, unsigned fat_cubin_handle ) {$/;"	f	struct:Simulator::CUctx_st
add_bits	src/gpuwattch/cacti/htree2.h	/^    int add_bits, data_in_bits,search_data_in_bits,data_out_bits,  search_data_out_bits;$/;"	m	class:Htree2
add_builtin_operand	src/cuda-sim/ptx_parser.cc	/^void add_builtin_operand( int builtin, int dim_modifier ) $/;"	f
add_callback	src/abstract_hardware_model.h	/^    void add_callback( unsigned lane_id, $/;"	f	class:warp_inst_t
add_constptr	src/cuda-sim/ptx_parser.cc	/^void add_constptr(const char* identifier1, const char* identifier2, int offset)$/;"	f
add_count	src/cuda-sim/ptx-stats.cc	/^    void add_count(const ptx_instruction * pInsn, int count = 1)$/;"	f	class:ptx_inflight_memory_insn_tracker
add_cta_with_preemption	common/preempt_overhead.h	/^  void add_cta_with_preemption(const cta_preempt_overhead& cta_overhead)$/;"	f	class:shader_preempt_overhead
add_cu_set	src/gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::add_cu_set(unsigned set_id, unsigned num_cu, unsigned num_dispatch){$/;"	f	class:opndcoll_rfu_t
add_data	src/cuda-sim/ptx_ir.h	/^   void add_data( param_t v ) { $/;"	f	class:param_info
add_directive	src/cuda-sim/ptx_parser.cc	/^void add_directive() $/;"	f
add_double_operand	src/cuda-sim/ptx_parser.cc	/^void add_double_operand( const char *d1, const char *d2 )$/;"	f
add_ecc_b_	src/gpuwattch/cacti/cacti_interface.h	/^    bool     add_ecc_b_;$/;"	m	class:InputParameter
add_extern_spec	src/cuda-sim/ptx_parser.cc	/^void add_extern_spec() $/;"	f
add_file	src/cuda-sim/ptx_parser.cc	/^void add_file( unsigned num, const char *filename )$/;"	f
add_function	src/cuda-sim/ptx_ir.cc	/^void symbol_table::add_function( function_info *func, const char *filename, unsigned linenumber )$/;"	f	class:symbol_table
add_function_arg	src/cuda-sim/ptx_parser.cc	/^void add_function_arg()$/;"	f
add_function_decl	src/cuda-sim/ptx_ir.cc	/^bool symbol_table::add_function_decl( const char *name, int entry_point, function_info **func_info, symbol_table **sym_table )$/;"	f	class:symbol_table
add_function_name	src/cuda-sim/ptx_parser.cc	/^void add_function_name( const char *name ) $/;"	f
add_identifier	src/cuda-sim/ptx_parser.cc	/^void add_identifier( const char *identifier, int array_dim, unsigned array_ident ) $/;"	f
add_impl	src/cuda-sim/instructions.cc	/^void add_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
add_initializer	src/cuda-sim/ptx_ir.cc	/^void symbol::add_initializer( const std::list<operand_info> &init )$/;"	f	class:symbol
add_inst	src/cuda-sim/ptx_ir.h	/^   void add_inst( const std::list<ptx_instruction*> &instructions )$/;"	f	class:function_info
add_instruction	src/cuda-sim/ptx_parser.cc	/^void add_instruction() $/;"	f
add_kernel	launcher/child_process.cc	/^ChildProcess::add_kernel(const char* hostFun, const kernel_config& config)$/;"	f	class:ChildProcess
add_kernel	launcher/mk-sched/even_scheduler.cc	/^EvenScheduler::add_kernel(kernel_info_t* kernel, unsigned max_cta_per_shader)$/;"	f	class:EvenScheduler
add_kernel	launcher/mk-sched/fixed_scheduler.cc	/^FixedScheduler::add_kernel(kernel_info_t* kernel, unsigned max_cta_per_shader)$/;"	f	class:FixedScheduler
add_kernel	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::add_kernel(kernel_info_t* kernel, unsigned max_cta_per_shader)$/;"	f	class:DynamicScheduler
add_kernel	launcher/mk-sched/mk_scheduler.h	/^  virtual void add_kernel(kernel_info_t* kernel, unsigned max_cta_per_shader) { kernels.push_back(kernel); }$/;"	f	class:MKScheduler
add_kernel	launcher/mk-sched/smart_even_scheduler.cc	/^SmartEvenScheduler::add_kernel(kernel_info_t* kernel, unsigned max_cta_per_shader)$/;"	f	class:SmartEvenScheduler
add_label	src/cuda-sim/ptx_parser.cc	/^void add_label( const char *identifier ) $/;"	f
add_literal_double	src/cuda-sim/ptx_parser.cc	/^void add_literal_double( double value ) $/;"	f
add_literal_float	src/cuda-sim/ptx_parser.cc	/^void add_literal_float( float value ) $/;"	f
add_literal_int	src/cuda-sim/ptx_parser.cc	/^void add_literal_int( int value ) $/;"	f
add_memory_operand	src/cuda-sim/ptx_parser.cc	/^void add_memory_operand() $/;"	f
add_neg_pred_operand	src/cuda-sim/ptx_parser.cc	/^void add_neg_pred_operand( const char *identifier ) $/;"	f
add_offset	src/cuda-sim/ptx_ir.h	/^   void add_offset( unsigned offset ) { m_offset = offset; }$/;"	f	class:param_info
add_opcode	src/cuda-sim/ptx_parser.cc	/^void add_opcode( int opcode ) $/;"	f
add_option	src/cuda-sim/ptx_parser.cc	/^void add_option( int option ) $/;"	f
add_param	src/cuda-sim/ptx_ir.h	/^   void add_param( const char *name, struct param_t value )$/;"	f	class:function_info
add_param_data	src/cuda-sim/cuda-sim.cc	/^void function_info::add_param_data( unsigned argn, struct gpgpu_ptx_sim_arg *args )$/;"	f	class:function_info
add_param_name_type_size	src/cuda-sim/cuda-sim.cc	/^void function_info::add_param_name_type_size( unsigned index, std::string name, int type, size_t size, bool ptr, memory_space_t space )$/;"	f	class:function_info
add_port	src/gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::add_port(port_vector_t & input, port_vector_t & output, uint_vector_t cu_sets)$/;"	f	class:opndcoll_rfu_t
add_pragma	src/cuda-sim/ptx_parser.cc	/^void add_pragma( const char *str )$/;"	f
add_pred	src/cuda-sim/ptx_parser.cc	/^void add_pred( const char *identifier, int neg, int predModifier ) $/;"	f
add_ptr_spec	src/cuda-sim/ptx_parser.cc	/^void add_ptr_spec( enum _memory_space_t spec ) $/;"	f
add_ptxinfo	launcher/simulator.h	/^    void add_ptxinfo( const char *deviceFun, const struct gpgpu_ptx_sim_kernel_info &info ) {$/;"	f	struct:Simulator::CUctx_st
add_read_requests	src/gpgpu-sim/shader.h	/^      void add_read_requests( collector_unit_t *cu ) $/;"	f	class:opndcoll_rfu_t::arbiter_t
add_return_var	src/cuda-sim/ptx_ir.h	/^   void add_return_var( const symbol *rv )$/;"	f	class:function_info
add_scalar_operand	src/cuda-sim/ptx_parser.cc	/^void add_scalar_operand( const char *identifier ) $/;"	f
add_scalar_type_spec	src/cuda-sim/ptx_parser.cc	/^void add_scalar_type_spec( int type_spec ) $/;"	f
add_shader	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::SM_info::add_shader(unsigned linear_shader_id)$/;"	f	class:DynamicScheduler::SM_info
add_snap_shot_trigger	src/gpgpu-sim/stat-tool.cc	/^void add_snap_shot_trigger (snap_shot_trigger* ss_trigger)$/;"	f
add_space_spec	src/cuda-sim/ptx_parser.cc	/^void add_space_spec( enum _memory_space_t spec, int value ) $/;"	f
add_spill_log	src/gpgpu-sim/stat-tool.cc	/^void add_spill_log (spill_log_interface* spill_log)$/;"	f
add_stream	src/stream_manager.cc	/^void stream_manager::add_stream( struct CUstream_st *stream )$/;"	f	class:stream_manager
add_supervised_warp_id	src/gpgpu-sim/shader.h	/^	void add_supervised_warp_id(int i) {$/;"	f	class:two_level_active_scheduler
add_supervised_warp_id	src/gpgpu-sim/shader.h	/^    virtual void add_supervised_warp_id(int i) {$/;"	f	class:scheduler_unit
add_thread	src/cuda-sim/ptx_sim.cc	/^void ptx_cta_info::add_thread( ptx_thread_info *thd )$/;"	f	class:ptx_cta_info
add_type	src/cuda-sim/ptx_ir.cc	/^type_info *symbol_table::add_type( function_info *func )$/;"	f	class:symbol_table
add_type	src/cuda-sim/ptx_ir.cc	/^type_info *symbol_table::add_type( memory_space_t space_spec, int scalar_type_spec, int vector_spec, int alignment_spec, int extern_spec )$/;"	f	class:symbol_table
add_variable	src/cuda-sim/ptx_ir.cc	/^symbol *symbol_table::add_variable( const char *identifier, const type_info *type, unsigned size, const char *filename, unsigned line )$/;"	f	class:symbol_table
add_variables	src/cuda-sim/ptx_parser.cc	/^void add_variables() $/;"	f
add_vector_spec	src/cuda-sim/ptx_parser.cc	/^void add_vector_spec(int spec ) $/;"	f
add_version_info	src/cuda-sim/ptx_parser.cc	/^void add_version_info( float ver, unsigned ext )$/;"	f
addc_impl	src/cuda-sim/instructions.cc	/^void addc_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
addp_impl	src/cuda-sim/instructions.cc	/^void addp_impl( const ptx_instruction *pI, ptx_thread_info *thread )$/;"	f
addr	src/ramulator_sim/Cache.h	/^    long addr;$/;"	m	struct:Cache::Line
addr	src/ramulator_sim/Request.h	/^    long addr;$/;"	m	class:Request
addr_bits	src/ramulator_sim/Memory.h	/^    vector<int> addr_bits;$/;"	m	class:Memory
addr_t	common/types.h	/^typedef unsigned long addr_t;$/;"	t
addr_vec	src/ramulator_sim/Request.h	/^    vector<int> addr_vec;$/;"	m	class:Request
addr_vector_t	src/abstract_hardware_model.h	/^typedef std::vector<address_type> addr_vector_t;$/;"	t
addrdec_getmasklimit	src/gpgpu-sim/addrdec.cc	/^static void addrdec_getmasklimit(new_addr_type mask, unsigned char *high, unsigned char *low) $/;"	f	file:
addrdec_la2pa_option	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::addrdec_la2pa_option(const char *option)$/;"	f	class:linear_to_raw_address_translation
addrdec_la2pa_tlx	src/gpgpu-sim/addrdec.cc	/^new_addr_type linear_to_raw_address_translation::addrdec_la2pa_tlx(new_addr_type raw_addr) const$/;"	f	class:linear_to_raw_address_translation
addrdec_mask	src/gpgpu-sim/addrdec.h	/^   new_addr_type addrdec_mask[N_ADDRDEC];$/;"	m	class:linear_to_raw_address_translation
addrdec_mkhigh	src/gpgpu-sim/addrdec.h	/^   unsigned char addrdec_mkhigh[N_ADDRDEC];$/;"	m	class:linear_to_raw_address_translation
addrdec_mklow	src/gpgpu-sim/addrdec.h	/^   unsigned char addrdec_mklow[N_ADDRDEC];$/;"	m	class:linear_to_raw_address_translation
addrdec_option	src/gpgpu-sim/addrdec.h	/^   const char *addrdec_option;$/;"	m	class:linear_to_raw_address_translation
addrdec_packbits	src/gpgpu-sim/addrdec.cc	/^static new_addr_type addrdec_packbits( new_addr_type mask, new_addr_type val, unsigned char high, unsigned char low) $/;"	f	file:
addrdec_parseoption	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::addrdec_parseoption(const char *option)$/;"	f	class:linear_to_raw_address_translation
addrdec_part_random_tlx	src/gpgpu-sim/addrdec.cc	/^new_addr_type linear_to_raw_address_translation::addrdec_part_random_tlx(new_addr_type raw_addr) const$/;"	f	class:linear_to_raw_address_translation
addrdec_random_tlx	src/gpgpu-sim/addrdec.cc	/^new_addr_type linear_to_raw_address_translation::addrdec_random_tlx(new_addr_type raw_addr) const$/;"	f	class:linear_to_raw_address_translation
addrdec_remap_mtx_tlx	src/gpgpu-sim/addrdec.cc	/^new_addr_type linear_to_raw_address_translation::addrdec_remap_mtx_tlx(new_addr_type raw_addr) const$/;"	f	class:linear_to_raw_address_translation
addrdec_setoption	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::addrdec_setoption(option_parser_t opp)$/;"	f	class:linear_to_raw_address_translation
addrdec_t	src/gpgpu-sim/addrdec.h	/^struct addrdec_t {$/;"	s
addrdec_tlx	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::addrdec_tlx(new_addr_type p_addr, addrdec_t *tlx,mem_fetch * mf, unsigned tpc) const$/;"	f	class:linear_to_raw_address_translation
addressBusWidth	src/gpuwattch/basic_components.h	/^    int	   llcBlockSize, dataBusWidth, addressBusWidth;$/;"	m	class:MCParam
addressMode	src/abstract_hardware_model.h	/^   enum cudaTextureAddressMode   addressMode[3];$/;"	m	struct:textureReference	typeref:enum:textureReference::cudaTextureAddressMode
address_expression	src/cuda-sim/ptx.y	/^address_expression: IDENTIFIER { add_address_operand($1,0); }$/;"	l
address_t	src/cuda-sim/ptx_ir.h	/^   reg_t, vector_t, builtin_t, address_t, memory_t, float_op_t, double_op_t, int_t, $/;"	e	enum:operand_type
address_type	common/types.h	/^typedef unsigned long address_type;$/;"	t
addressable_spec	src/cuda-sim/ptx.y	/^addressable_spec: CONST_DIRECTIVE {  add_space_spec(const_space,$1); }$/;"	l
addressbus_width	src/gpuwattch/XML_Parse.h	/^	int addressbus_width;$/;"	m	struct:__anon23
addsample	src/gpgpu-sim/stat-tool.h	/^   void addsample(int pos) {$/;"	f	class:linear_histogram_snapshot
adjust_area	src/gpuwattch/cacti/cacti_interface.cc	/^void uca_org_t::adjust_area()$/;"	f	class:uca_org_t
adjust_expected_SMs	launcher/mk-sched/even_scheduler.cc	/^EvenScheduler::adjust_expected_SMs()$/;"	f	class:EvenScheduler
adjust_upper_bounds	launcher/mk-sched/smart_even_scheduler.cc	/^SmartEvenScheduler::adjust_upper_bounds()$/;"	f	class:SmartEvenScheduler
advance_interconnect	src/intersim/interconnect_interface.cpp	/^void advance_interconnect () $/;"	f
age_based	src/intersim/trafficmanager.hpp	/^      class_based, age_based, none$/;"	e	enum:TrafficManager::ePriority
age_based	src/intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_based, hop_count_based, sequence_based, none };$/;"	e	enum:TrafficManager::ePriority
aldram_timing	src/ramulator_sim/ALDRAM.cpp	/^void ALDRAM::aldram_timing(Temp current_temperature)$/;"	f	class:ALDRAM
align	src/ramulator_sim/Cache.h	/^  long align(long addr) {$/;"	f	class:Cache
align_spec	src/cuda-sim/ptx.y	/^align_spec: ALIGN_DIRECTIVE INT_OPERAND { add_alignment_spec($2); }$/;"	l
all_banks_height	src/gpuwattch/cacti/cacti_interface.h	/^  double all_banks_height,$/;"	m	class:mem_array
all_banks_height	src/gpuwattch/cacti/cacti_interface.h	/^  double all_banks_height;$/;"	m	struct:__anon5
all_banks_width	src/gpuwattch/cacti/cacti_interface.h	/^         all_banks_width,$/;"	m	class:mem_array
all_banks_width	src/gpuwattch/cacti/cacti_interface.h	/^  double all_banks_width;$/;"	m	struct:__anon5
all_sets_locked	src/ramulator_sim/Cache.h	/^  bool all_sets_locked(const std::list<Line>& lines) {$/;"	f	class:Cache
alloc	launcher/mk-sched/fixed_scheduler.h	/^    unsigned alloc;$/;"	m	struct:FixedScheduler::SM_alloc
alloc	src/gpgpu-sim/l2cache.cc	/^mem_fetch * partition_mf_allocator::alloc(new_addr_type addr, mem_access_type type, unsigned size, bool wr ) const $/;"	f	class:partition_mf_allocator
alloc	src/gpgpu-sim/l2cache.h	/^    virtual mem_fetch * alloc(const class warp_inst_t &inst, const mem_access_t &access) const $/;"	f	class:partition_mf_allocator
alloc	src/gpgpu-sim/shader.h	/^    mem_fetch *alloc( const warp_inst_t &inst, const mem_access_t &access ) const$/;"	f	class:shader_core_mem_fetch_allocator
alloc	src/gpgpu-sim/shader.h	/^    mem_fetch *alloc( new_addr_type addr, mem_access_type type, unsigned size, bool wr ) const $/;"	f	class:shader_core_mem_fetch_allocator
alloc	src/gpuwattch/xmlParser.cc	/^void XMLParserBase64Tool::alloc(int newsize)$/;"	f	class:XMLParserBase64Tool
alloc_global	src/cuda-sim/ptx_ir.h	/^   void  alloc_global( unsigned num_bytes ) { m_global_next += num_bytes;}$/;"	f	class:symbol_table
alloc_local	src/cuda-sim/ptx_ir.h	/^   void  alloc_local( unsigned num_bytes ) { m_local_next += num_bytes;}$/;"	f	class:symbol_table
alloc_read	src/gpgpu-sim/shader.h	/^      void alloc_read( const op_t &op )  { assert(is_free()); m_allocation=READ_ALLOC; m_op=op; }$/;"	f	class:opndcoll_rfu_t::allocation_t
alloc_shared	src/cuda-sim/ptx_ir.h	/^   void  alloc_shared( unsigned num_bytes ) { m_shared_next += num_bytes;}$/;"	f	class:symbol_table
alloc_t	src/gpgpu-sim/shader.h	/^   enum alloc_t {$/;"	g	class:opndcoll_rfu_t
alloc_tex	src/cuda-sim/ptx_ir.h	/^   void  alloc_tex( unsigned num_bytes ) { m_tex_next += num_bytes;}$/;"	f	class:symbol_table
alloc_write	src/gpgpu-sim/shader.h	/^      void alloc_write( const op_t &op ) { assert(is_free()); m_allocation=WRITE_ALLOC; m_op=op; }$/;"	f	class:opndcoll_rfu_t::allocation_t
alloca	build/src/cuda-sim/ptx.tab.c	427;"	d	file:
alloca	build/src/cuda-sim/ptxinfo.tab.c	298;"	d	file:
alloca	src/intersim2/y.tab.c	276;"	d	file:
allocate	src/gpgpu-sim/gpu-cache.h	/^    void allocate( new_addr_type tag, new_addr_type block_addr, unsigned time )$/;"	f	struct:cache_block_t
allocate	src/gpgpu-sim/shader.cc	/^bool opndcoll_rfu_t::collector_unit_t::allocate( register_set* pipeline_reg_set, register_set* output_reg_set ) $/;"	f	class:opndcoll_rfu_t::collector_unit_t
allocate_bank_for_write	src/gpgpu-sim/shader.h	/^      void allocate_bank_for_write( unsigned bank, const op_t &op )$/;"	f	class:opndcoll_rfu_t::arbiter_t
allocate_barrier	src/gpgpu-sim/shader.cc	/^void barrier_set_t::allocate_barrier( unsigned cta_id, warp_set_t warps )$/;"	f	class:barrier_set_t
allocate_cu	src/gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::allocate_cu( unsigned port_num )$/;"	f	class:opndcoll_rfu_t
allocate_for_read	src/gpgpu-sim/shader.h	/^      void allocate_for_read( unsigned bank, const op_t &op )$/;"	f	class:opndcoll_rfu_t::arbiter_t
allocate_line	src/ramulator_sim/Cache.cpp	/^std::list<Cache::Line>::iterator Cache::allocate_line($/;"	f	class:Cache
allocate_reads	src/gpgpu-sim/shader.cc	/^std::list<opndcoll_rfu_t::op_t> opndcoll_rfu_t::arbiter_t::allocate_reads() $/;"	f	class:opndcoll_rfu_t::arbiter_t
allocate_reads	src/gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::allocate_reads()$/;"	f	class:opndcoll_rfu_t
allocated	launcher/mk-sched/fixed_scheduler.h	/^  std::map<kernel_info_t*, SM_alloc> allocated;$/;"	m	class:FixedScheduler
allocation_policy_t	src/gpgpu-sim/gpu-cache.h	/^enum allocation_policy_t {$/;"	g
allocation_t	src/gpgpu-sim/shader.h	/^      allocation_t() { m_allocation = NO_ALLOC; }$/;"	f	class:opndcoll_rfu_t::allocation_t
allocation_t	src/gpgpu-sim/shader.h	/^   class allocation_t {$/;"	c	class:opndcoll_rfu_t
and_impl	src/cuda-sim/instructions.cc	/^void and_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
andn_impl	src/cuda-sim/instructions.cc	/^void andn_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
ar1	src/abstract_hardware_model.h	/^    int ar1, ar2;$/;"	m	class:inst_t
ar2	src/abstract_hardware_model.h	/^    int ar1, ar2;$/;"	m	class:inst_t
arb_grant	src/gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::arb_grant() {$/;"	f	class:MCPAT_Arbiter
arb_int	src/gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::arb_int() {$/;"	f	class:MCPAT_Arbiter
arb_pri	src/gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::arb_pri() {$/;"	f	class:MCPAT_Arbiter
arb_req	src/gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::arb_req() {$/;"	f	class:MCPAT_Arbiter
arb_tot	src/gpuwattch/cacti/highradix.h	/^    Component wire_tot, buff_tot, crossbar_tot, arb_tot;$/;"	m	class:HighRadix
arbiter	src/gpuwattch/cacti/router.h	/^    Component arbiter, crossbar, buffer;$/;"	m	class:MCPAT_Router
arbiter_rfu	src/gpuwattch/core.h	/^   MCPAT_Arbiter * arbiter_rfu;$/;"	m	class:RegFU
arbiter_t	src/gpgpu-sim/shader.h	/^      arbiter_t()$/;"	f	class:opndcoll_rfu_t::arbiter_t
arbiter_t	src/gpgpu-sim/shader.h	/^   class arbiter_t {$/;"	c	class:opndcoll_rfu_t
arbiter_type	src/gpuwattch/XML_Parse.h	/^	int arbiter_type;$/;"	m	struct:__anon21
arbitration_metadata	src/gpgpu-sim/l2cache.cc	/^memory_partition_unit::arbitration_metadata::arbitration_metadata(const struct memory_config *config) $/;"	f	class:memory_partition_unit::arbitration_metadata
arbitration_metadata	src/gpgpu-sim/l2cache.h	/^   class arbitration_metadata$/;"	c	class:memory_partition_unit
arch	libcuda/cuda_runtime_api.cc	/^    unsigned arch;$/;"	m	class:cuobjdumpSection	file:
arch	src/gpuwattch/XML_Parse.h	/^	int arch;$/;"	m	struct:__anon26
arch_freg_width	src/gpuwattch/basic_components.h	/^    int  arch_ireg_width, arch_freg_width, phy_ireg_width, phy_freg_width;$/;"	m	class:CoreDynParam
arch_ireg_width	src/gpuwattch/basic_components.h	/^    int  arch_ireg_width, arch_freg_width, phy_ireg_width, phy_freg_width;$/;"	m	class:CoreDynParam
arch_reg	src/abstract_hardware_model.h	/^    } arch_reg;$/;"	m	class:inst_t	typeref:struct:inst_t::__anon28
arch_reg_num	src/cuda-sim/ptx_ir.h	/^   int arch_reg_num() const { return m_value.m_symbolic->arch_reg_num(); }$/;"	f	class:operand_info
arch_reg_num	src/cuda-sim/ptx_ir.h	/^   int arch_reg_num(unsigned n) const { return (m_value.m_vector_symbolic[n])? m_value.m_vector_symbolic[n]->arch_reg_num() : -1; }$/;"	f	class:operand_info
arch_reg_num	src/cuda-sim/ptx_ir.h	/^   unsigned arch_reg_num() const$/;"	f	class:symbol
archi_F_sz_nm	src/gpuwattch/arch_const.h	/^const double 		archi_F_sz_nm	=	90.0;$/;"	v
archi_Regs_FRF_size	src/gpuwattch/XML_Parse.h	/^	int archi_Regs_FRF_size;$/;"	m	struct:__anon15
archi_Regs_IRF_size	src/gpuwattch/XML_Parse.h	/^	int archi_Regs_IRF_size;$/;"	m	struct:__anon15
archi_float_regfile_reads	src/gpuwattch/XML_Parse.h	/^	double archi_float_regfile_reads;$/;"	m	struct:__anon15
archi_float_regfile_writes	src/gpuwattch/XML_Parse.h	/^	double archi_float_regfile_writes;$/;"	m	struct:__anon15
archi_int_regfile_reads	src/gpuwattch/XML_Parse.h	/^	double archi_int_regfile_reads;$/;"	m	struct:__anon15
archi_int_regfile_writes	src/gpuwattch/XML_Parse.h	/^	double archi_int_regfile_writes;$/;"	m	struct:__anon15
architecture	src/gpuwattch/XML_Parse.h	/^	int architecture;$/;"	m	struct:__anon26
area	src/gpuwattch/cacti/Ucache.h	/^  double area;$/;"	m	struct:solution
area	src/gpuwattch/cacti/area.h	/^  double area;$/;"	m	class:Area
area	src/gpuwattch/cacti/cacti_interface.h	/^    double area;$/;"	m	class:uca_org_t
area	src/gpuwattch/cacti/cacti_interface.h	/^  double area;$/;"	m	class:mem_array
area	src/gpuwattch/cacti/cacti_interface.h	/^  double area;$/;"	m	struct:__anon5
area	src/gpuwattch/cacti/component.h	/^    Area area;$/;"	m	class:Component
areaChannel	src/intersim2/power/power_module.cpp	/^double Power_Module:: areaChannel (double K, double N, double M){$/;"	f	class:Power_Module
areaCrossbar	src/intersim2/power/power_module.cpp	/^double Power_Module:: areaCrossbar(double Inputs, double Outputs) {$/;"	f	class:Power_Module
areaInputModule	src/intersim2/power/power_module.cpp	/^double Power_Module:: areaInputModule(double Words) {$/;"	f	class:Power_Module
areaOutputModule	src/intersim2/power/power_module.cpp	/^double Power_Module:: areaOutputModule(double Outputs) {$/;"	f	class:Power_Module
area_all_dataramcells	src/gpuwattch/cacti/uca.h	/^    double area_all_dataramcells;$/;"	m	class:UCA
area_dev	src/gpuwattch/cacti/cacti_interface.h	/^        cycle_time_dev, area_dev;$/;"	m	class:InputParameter
area_dev_nuca	src/gpuwattch/cacti/cacti_interface.h	/^        cycle_time_dev_nuca, area_dev_nuca;$/;"	m	class:InputParameter
area_efficiency	src/gpuwattch/cacti/cacti_interface.h	/^         area_efficiency;$/;"	m	class:mem_array
area_efficiency	src/gpuwattch/cacti/cacti_interface.h	/^    double area_efficiency;$/;"	m	class:uca_org_t
area_efficiency	src/gpuwattch/cacti/cacti_interface.h	/^  double area_efficiency;$/;"	m	struct:__anon5
area_ram_cells	src/gpuwattch/cacti/cacti_interface.h	/^  double area_ram_cells;$/;"	m	class:mem_array
area_wt	src/gpuwattch/cacti/cacti_interface.h	/^        cycle_time_wt, area_wt;$/;"	m	class:InputParameter
area_wt_nuca	src/gpuwattch/cacti/cacti_interface.h	/^        cycle_time_wt_nuca, area_wt_nuca;$/;"	m	class:InputParameter
arg_buffer_list_t	src/cuda-sim/ptx_ir.h	/^typedef std::list< arg_buffer_t > arg_buffer_list_t;$/;"	t
arg_buffer_t	src/cuda-sim/ptx_ir.h	/^   arg_buffer_t( const arg_buffer_t &another )$/;"	f	class:arg_buffer_t
arg_buffer_t	src/cuda-sim/ptx_ir.h	/^   arg_buffer_t( const symbol *dst_sym, const operand_info &src_op, ptx_reg_t source_value ) : m_src_op(src_op)$/;"	f	class:arg_buffer_t
arg_buffer_t	src/cuda-sim/ptx_ir.h	/^   arg_buffer_t( const symbol *dst_sym, const operand_info &src_op, void *source_param_value_array, unsigned array_size ) : m_src_op(src_op)$/;"	f	class:arg_buffer_t
arg_buffer_t	src/cuda-sim/ptx_ir.h	/^   arg_buffer_t()$/;"	f	class:arg_buffer_t
arg_buffer_t	src/cuda-sim/ptx_ir.h	/^class arg_buffer_t {$/;"	c
arr_min	src/gpuwattch/cacti/cacti_interface.h	/^  min_values_t *arr_min;$/;"	m	class:mem_array
array_inputs	src/gpuwattch/arch_const.h	/^} array_inputs;$/;"	t	typeref:struct:__anon27
arrive	src/ramulator_sim/Request.h	/^    long arrive = -1;$/;"	m	class:Request
aspect_ratio	src/gpuwattch/cacti/parameter.h	/^    double aspect_ratio;$/;"	m	class:TechnologyParameter::InterconnectType
assignDefault	src/option_parser.cc	/^   virtual bool assignDefault(const char *str) { return fromString(str); }$/;"	f	class:OptionRegistry
assignDefault	src/option_parser.cc	/^bool OptionRegistry<char *>::assignDefault(const char *str) $/;"	f	class:OptionRegistry
assign_bb	src/cuda-sim/ptx_ir.h	/^   void assign_bb(basic_block_t* basic_block) \/\/assign instruction to a basic block$/;"	f	class:ptx_instruction
assoc	src/gpuwattch/arch_const.h	/^	unsigned int assoc;\/\/fully$/;"	m	struct:__anon27
assoc	src/gpuwattch/basic_components.h	/^    double    capacity, blockW, assoc, nbanks;$/;"	m	class:CacheDynParam
assoc	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int assoc;$/;"	m	class:InputParameter
assoc	src/ramulator_sim/Cache.h	/^  unsigned int assoc;$/;"	m	class:Cache
asymmetric	src/intersim/traffic.cpp	/^int asymmetric( int source, int total_nodes )$/;"	f
atime	src/intersim2/flit.hpp	/^  int  atime;$/;"	m	class:Flit
atom_callback	src/cuda-sim/instructions.cc	/^void atom_callback( const inst_t* inst, ptx_thread_info* thread )$/;"	f
atom_impl	src/cuda-sim/instructions.cc	/^void atom_impl( const ptx_instruction *pI, ptx_thread_info *thread )$/;"	f
atomic_operation_spec	src/cuda-sim/ptx.y	/^atomic_operation_spec: ATOMIC_AND { add_option(ATOMIC_AND); } $/;"	l
attrib	src/gpuwattch/xmlParser.h	/^    XMLAttribute attrib;$/;"	m	struct:XMLNodeContents
attribute_exposed_latency	src/cuda-sim/ptx-stats.cc	/^    void attribute_exposed_latency(int count = 1)$/;"	f	class:ptx_inflight_memory_insn_tracker
available_for_fetch	src/gpgpu-sim/shader.cc	/^bool barrier_set_t::available_for_fetch( unsigned warp_id ) const$/;"	f	class:barrier_set_t
average_duty_cycle	src/gpgpu-sim/power_stat.h	/^   float average_duty_cycle;$/;"	m	class:power_core_stat_t
average_pipeline_duty_cycle	src/gpgpu-sim/gpu-sim.h	/^   float * average_pipeline_duty_cycle;$/;"	m	class:gpgpu_sim
average_serving_requests	src/ramulator_sim/DRAM.h	/^    ScalarStat average_serving_requests;$/;"	m	class:DRAM
avg	src/gpuwattch/gpgpu_sim_wrapper.h	/^	T avg;$/;"	m	struct:avg_max_min_counters
avg_hops	src/gpuwattch/cacti/nuca.h	/^    double avg_hops;$/;"	m	class:nuca_org_t
avg_max_min_counters	src/gpuwattch/gpgpu_sim_wrapper.h	/^	avg_max_min_counters(){avg=0; max=0; min=0;}$/;"	f	struct:avg_max_min_counters
avg_max_min_counters	src/gpuwattch/gpgpu_sim_wrapper.h	/^struct avg_max_min_counters{$/;"	s
b	src/cuda-sim/instructions.cc	/^   float b;$/;"	m	union:intfloat	file:
b_h	src/gpuwattch/cacti/parameter.h	/^    double b_h;$/;"	m	class:TechnologyParameter::MemoryType
b_mux_predec	src/gpuwattch/cacti/mat.h	/^    Predec * b_mux_predec;$/;"	m	class:Mat
b_ref_rank	src/ramulator_sim/DSARP.h	/^    bool b_ref_rank;$/;"	m	class:DSARP
b_w	src/gpuwattch/cacti/parameter.h	/^    double b_w;$/;"	m	class:TechnologyParameter::MemoryType
backComSize	src/gpuwattch/arch_const.h	/^const int backComSize=5;$/;"	v
backlog_early_pull_threshold	src/ramulator_sim/Refresh.h	/^  int backlog_early_pull_threshold = -6;$/;"	m	class:Refresh
backlog_max	src/ramulator_sim/Refresh.h	/^  int backlog_max = 8;$/;"	m	class:Refresh
backlog_min	src/ramulator_sim/Refresh.h	/^  int backlog_min = -8;$/;"	m	class:Refresh
bandwidth_management	src/gpgpu-sim/gpu-cache.cc	/^baseline_cache::bandwidth_management::bandwidth_management(cache_config &config) $/;"	f	class:baseline_cache::bandwidth_management
bandwidth_management	src/gpgpu-sim/gpu-cache.h	/^    class bandwidth_management $/;"	c	class:baseline_cache
bank	src/gpuwattch/cacti/uca.h	/^    Bank   bank;$/;"	m	class:UCA
bankID	src/gpgpu-sim/mem_fetch.h	/^   unsigned bankID() const { return m_raw_addr.bk; }$/;"	f	class:mem_fetch
bank_count	src/gpuwattch/cacti/nuca.h	/^    int bank_count;$/;"	m	class:nuca_org_t
bank_height	src/gpuwattch/cacti/cacti_interface.h	/^  double bank_height;$/;"	m	struct:__anon5
bank_idle	src/gpgpu-sim/shader.h	/^      bool bank_idle( unsigned bank ) const$/;"	f	class:opndcoll_rfu_t::arbiter_t
bank_pda	src/gpuwattch/cacti/nuca.h	/^    Component bank_pda;$/;"	m	class:nuca_org_t
bank_ref_counters	src/ramulator_sim/Refresh.h	/^  vector<int> bank_ref_counters;$/;"	m	class:Refresh
bank_refresh_backlog	src/ramulator_sim/Refresh.h	/^  vector<vector<int>*> bank_refresh_backlog;$/;"	m	class:Refresh
bank_width	src/gpuwattch/basic_components.h	/^	int bank_width; \/\/ in bits$/;"	m	class:DRAMParam
bank_width	src/gpuwattch/cacti/cacti_interface.h	/^  double bank_width;$/;"	m	struct:__anon5
bankreads	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int ***bankreads; \/\/bankreads[shader id][dram chip id][bank id]$/;"	m	class:memory_stats_t
bankwrites	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int ***bankwrites; \/\/bankwrites[shader id][dram chip id][bank id]$/;"	m	class:memory_stats_t
bar_sync_impl	src/cuda-sim/instructions.cc	/^void bar_sync_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
barrier_context_saved	src/cuda-sim/cuda-sim.cc	/^std::map<unsigned, std::map<unsigned, barrier_context_t> > SimulationInitializer::barrier_context_saved;$/;"	m	class:SimulationInitializer	file:
barrier_context_saved	src/cuda-sim/cuda-sim.h	/^  static std::map<unsigned, std::map<unsigned, barrier_context_t> > barrier_context_saved;$/;"	m	class:SimulationInitializer
barrier_context_t	src/cuda-sim/cuda-sim.h	/^struct barrier_context_t {$/;"	s
barrier_set_t	src/gpgpu-sim/shader.cc	/^barrier_set_t::barrier_set_t( unsigned max_warps_per_core, unsigned max_cta_per_core )$/;"	f	class:barrier_set_t
barrier_set_t	src/gpgpu-sim/shader.h	/^class barrier_set_t {$/;"	c
base64DecodeTable	src/gpuwattch/xmlParser.cc	/^const unsigned char base64DecodeTable[] = {$/;"	v
base64EncodeTable	src/gpuwattch/xmlParser.cc	/^XMLCSTR base64EncodeTable=_CXML("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/");$/;"	v
base64Fillchar	src/gpuwattch/xmlParser.cc	/^static const char base64Fillchar = _CXML('='); \/\/ used to mark partial words at the end$/;"	v	file:
base_energy	src/gpuwattch/logic.h	/^	double energy, base_energy,per_access_energy, leakage, gate_leakage;$/;"	m	class:FunctionalUnit
base_height	src/gpuwattch/interconnect.h	/^    double base_height;$/;"	m	class:interconnect
base_width	src/gpuwattch/interconnect.h	/^    double base_width;$/;"	m	class:interconnect
baseline_cache	src/gpgpu-sim/gpu-cache.h	/^    baseline_cache( const char *name, cache_config &config, int core_id, int type_id, mem_fetch_interface *memport,$/;"	f	class:baseline_cache
baseline_cache	src/gpgpu-sim/gpu-cache.h	/^    baseline_cache( const char *name,$/;"	f	class:baseline_cache
baseline_cache	src/gpgpu-sim/gpu-cache.h	/^class baseline_cache : public cache_t {$/;"	c
basic_block_t	src/cuda-sim/ptx_ir.h	/^   basic_block_t( unsigned ID, ptx_instruction *begin, ptx_instruction *end, bool entry, bool ex)$/;"	f	struct:basic_block_t
basic_block_t	src/cuda-sim/ptx_ir.h	/^struct basic_block_t {$/;"	s
bb_id	src/cuda-sim/ptx_ir.h	/^   unsigned bb_id;$/;"	m	struct:basic_block_t
bdata	src/option_parser.cc	/^   bool bdata;$/;"	m	class:testtype	file:
begin	common/preemption_info.h	/^    const_iterator  begin() const { return m_techniques.begin(); }$/;"	f	class:preemption_info_t
begin	common/preemption_info.h	/^    iterator        begin()       { return m_techniques.begin(); }$/;"	f	class:preemption_info_t
begin	launcher/launcher_option_parser.h	/^  const_iterator begin()  const { return childs.begin(); }$/;"	f	class:LauncherOptionParser
begin	launcher/launcher_option_parser.h	/^  iterator begin()              { return childs.begin(); }$/;"	f	class:LauncherOptionParser
begin	src/abstract_hardware_model.h	/^    const_mem_iterator begin() const  { return m_accessq.begin(); }$/;"	f	class:warp_inst_t
begin	src/abstract_hardware_model.h	/^    mem_iterator begin()              { return m_accessq.begin(); }$/;"	f	class:warp_inst_t
begin_of_cur_reqcnt	src/ramulator_sim/DRAM.h	/^    long begin_of_cur_reqcnt = -1;$/;"	m	class:DRAM
begin_of_refreshing	src/ramulator_sim/DRAM.h	/^    long begin_of_refreshing = -1;$/;"	m	class:DRAM
begin_of_serving	src/ramulator_sim/DRAM.h	/^    long begin_of_serving = -1;$/;"	m	class:DRAM
bernoulli	src/intersim/injection.cpp	/^int bernoulli( int \/*source*\/, double rate )$/;"	f
bfe_impl	src/cuda-sim/instructions.cc	/^void bfe_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
bfi_impl	src/cuda-sim/instructions.cc	/^void bfi_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
bfind_impl	src/cuda-sim/instructions.cc	/^void bfind_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
binaryArgs	launcher/child_process.h	/^  std::vector<std::string> binaryArgs;$/;"	m	class:ChildProcess
binaryName	launcher/child_process.h	/^  std::string binaryName;$/;"	m	class:ChildProcess
binned_histogram	src/gpgpu-sim/histogram.cc	/^binned_histogram::binned_histogram (const binned_histogram& other)$/;"	f	class:binned_histogram
binned_histogram	src/gpgpu-sim/histogram.cc	/^binned_histogram::binned_histogram (std::string name, int nbins, int* bins) $/;"	f	class:binned_histogram
binned_histogram	src/gpgpu-sim/histogram.h	/^class binned_histogram {$/;"	c
bit_mux_dec	src/gpuwattch/cacti/mat.h	/^    Decoder * bit_mux_dec;$/;"	m	class:Mat
bit_to_byte	src/gpuwattch/cacti/const.h	/^const double    bit_to_byte  = 8.0;$/;"	v
bitcomp	src/intersim/traffic.cpp	/^int bitcomp( int source, int total_nodes )$/;"	f
bitrev	src/intersim/traffic.cpp	/^int bitrev( int source, int total_nodes )$/;"	f
bits	src/cuda-sim/ptx_sim.h	/^   } bits;$/;"	m	union:ptx_reg_t	typeref:struct:ptx_reg_t::__anon2
bk	src/gpgpu-sim/addrdec.h	/^   unsigned bk;$/;"	m	struct:addrdec_t
bk_tag_length	src/gpgpu-sim/gpu-sim.h	/^   unsigned bk_tag_length; \/\/number of bits that define a bank inside a bank group$/;"	m	struct:memory_config
bl_precharge_eq_drv	src/gpuwattch/cacti/mat.h	/^    Driver * bl_precharge_eq_drv;$/;"	m	class:Mat
blk	src/gpuwattch/cacti/decoder.h	/^  PredecBlk * blk;$/;"	m	class:PredecBlkDrv
blk1	src/gpuwattch/cacti/decoder.h	/^    PredecBlk    * blk1;$/;"	m	class:Predec
blk2	src/gpuwattch/cacti/decoder.h	/^    PredecBlk    * blk2;$/;"	m	class:Predec
blockW	src/gpuwattch/basic_components.h	/^    double    capacity, blockW, assoc, nbanks;$/;"	m	class:CacheDynParam
block_addr	src/gpgpu-sim/gpu-cache.h	/^    new_addr_type block_addr( new_addr_type addr ) const$/;"	f	class:cache_config
block_addr	src/gpgpu-sim/gpu-cache.h	/^    new_addr_type block_addr(new_addr_type addr) const { return m_config.block_addr(addr); }$/;"	f	class:baseline_cache
block_dim	common/kernel_config.h	/^  dim3 block_dim() const { return m_BlockDim; }$/;"	f	class:kernel_config
block_num	src/ramulator_sim/Cache.h	/^  unsigned int block_num;$/;"	m	class:Cache
block_power	src/gpuwattch/cacti/decoder.h	/^    powerDef block_power;$/;"	m	class:Predec
block_size	src/ramulator_sim/Cache.h	/^  unsigned int block_size;$/;"	m	class:Cache
block_spec	src/cuda-sim/ptx.y	/^block_spec: MAXNTID_DIRECTIVE INT_OPERAND COMMA INT_OPERAND COMMA INT_OPERAND {func_header_info_int(".maxntid", $2);$/;"	l
block_spec_list	src/cuda-sim/ptx.y	/^block_spec_list: block_spec$/;"	l
block_sz	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int block_sz;  \/\/ bytes$/;"	m	class:InputParameter
blocksize	src/gpuwattch/arch_const.h	/^	unsigned int blocksize;$/;"	m	struct:__anon27
boolint	src/option_parser.cc	/^   unsigned int boolint;$/;"	m	class:testtype	file:
borrow_credit	src/gpgpu-sim/l2cache.cc	/^void memory_partition_unit::arbitration_metadata::borrow_credit(int inner_sub_partition_id) $/;"	f	class:memory_partition_unit::arbitration_metadata
boundary_buf	src/intersim/interconnect_interface.cpp	/^   boundary_buf(){$/;"	f	class:boundary_buf
boundary_buf	src/intersim/interconnect_interface.cpp	/^class boundary_buf{$/;"	c	file:
boundary_buf_capacity	src/intersim/interconnect_interface.cpp	/^unsigned int boundary_buf_capacity ;  $/;"	v
bra_impl	src/cuda-sim/instructions.cc	/^void bra_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
branch_effort_nand2_gate_output	src/gpuwattch/cacti/decoder.h	/^  int branch_effort_nand2_gate_output;$/;"	m	class:PredecBlk
branch_effort_nand3_gate_output	src/gpuwattch/cacti/decoder.h	/^  int branch_effort_nand3_gate_output;$/;"	m	class:PredecBlk
branch_instructions	src/gpuwattch/XML_Parse.h	/^	double branch_instructions;$/;"	m	struct:__anon15
branch_mispredictions	src/gpuwattch/XML_Parse.h	/^	double branch_mispredictions;$/;"	m	struct:__anon15
branch_taken	src/cuda-sim/ptx_sim.h	/^   bool branch_taken() const$/;"	f	class:ptx_thread_info
break_impl	src/cuda-sim/instructions.cc	/^void break_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
breakaddr_impl	src/cuda-sim/instructions.cc	/^void breakaddr_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
brev_impl	src/cuda-sim/instructions.cc	/^void brev_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
brk_pt	src/debug.h	/^   brk_pt( const char *fileline, unsigned uid )$/;"	f	class:brk_pt
brk_pt	src/debug.h	/^   brk_pt( unsigned addr, unsigned value )$/;"	f	class:brk_pt
brk_pt	src/debug.h	/^   brk_pt() { m_valid=false; }$/;"	f	class:brk_pt
brk_pt	src/debug.h	/^class brk_pt {$/;"	c
brkpt_impl	src/cuda-sim/instructions.cc	/^void brkpt_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
broadcast_addr_din_over_ver_htrees	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int broadcast_addr_din_over_ver_htrees;$/;"	m	class:InputParameter
brx_impl	src/cuda-sim/instructions.cc	/^void brx_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
bucket_size	src/ramulator_sim/StatType.h	/^  Counter bucket_size;$/;"	m	class:Stats_Ram::Distribution
bucket_size	src/ramulator_sim/StatType.h	/^  Counter bucket_size;$/;"	m	class:Stats_Ram::Histogram
buf	src/gpuwattch/xmlParser.h	/^    XMLSTR buf;$/;"	m	struct:ToXMLStringTool
buf	src/gpuwattch/xmlParser.h	/^    void *buf;$/;"	m	struct:XMLParserBase64Tool
buf	src/intersim/interconnect_interface.cpp	/^   queue<void *> buf;$/;"	m	class:boundary_buf	file:
buff_tot	src/gpuwattch/cacti/highradix.h	/^    Component wire_tot, buff_tot, crossbar_tot, arb_tot;$/;"	m	class:HighRadix
buffer	src/gpuwattch/cacti/router.h	/^    Component arbiter, crossbar, buffer;$/;"	m	class:MCPAT_Router
buffer_	src/gpuwattch/cacti/highradix.cc	/^Mat * HighRadix::buffer_(double block_sz, double sz)$/;"	f	class:HighRadix
buffer_sizes	src/gpuwattch/XML_Parse.h	/^	int buffer_sizes[20];$/;"	m	struct:__anon11
buffer_sizes	src/gpuwattch/XML_Parse.h	/^	int buffer_sizes[20];$/;"	m	struct:__anon13
buffer_sizes	src/gpuwattch/XML_Parse.h	/^	int buffer_sizes[20];$/;"	m	struct:__anon16
buffer_sizes	src/gpuwattch/XML_Parse.h	/^	int buffer_sizes[20];$/;"	m	struct:__anon17
buffer_sizes	src/gpuwattch/XML_Parse.h	/^	int buffer_sizes[20];$/;"	m	struct:__anon18
buffer_sizes	src/gpuwattch/XML_Parse.h	/^	int buffer_sizes[20];$/;"	m	struct:__anon19
buffer_stats	src/gpuwattch/cacti/router.cc	/^void MCPAT_Router::buffer_stats()$/;"	f	class:MCPAT_Router
buflen	src/gpuwattch/xmlParser.h	/^    int buflen;$/;"	m	struct:ToXMLStringTool
buflen	src/gpuwattch/xmlParser.h	/^    int buflen;$/;"	m	struct:XMLParserBase64Tool
buildRoutingTable	src/intersim2/networks/anynet.cpp	/^void AnyNet::buildRoutingTable(){$/;"	f	class:AnyNet
builtin_operand	src/cuda-sim/ptx.y	/^builtin_operand: SPECIAL_REGISTER DIMENSION_MODIFIER { add_builtin_operand($1,$2); }$/;"	l
builtin_t	src/cuda-sim/ptx_ir.h	/^   reg_t, vector_t, builtin_t, address_t, memory_t, float_op_t, double_op_t, int_t, $/;"	e	enum:operand_type
burst	src/gpgpu-sim/addrdec.h	/^   unsigned burst;$/;"	m	struct:addrdec_t
burst_len	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int burst_len;$/;"	m	class:InputParameter
burstlength_of_DRAM_chip	src/gpuwattch/XML_Parse.h	/^	int burstlength_of_DRAM_chip;$/;"	m	struct:__anon22
busW	src/gpgpu-sim/gpu-sim.h	/^   unsigned busW;$/;"	m	struct:memory_config
busy	src/gpgpu-sim/gpu-cache.h	/^    bool busy() const {return false;}$/;"	f	class:mshr_table
busy	src/gpgpu-sim/l2cache.cc	/^bool memory_partition_unit::busy() const $/;"	f	class:memory_partition_unit
busy	src/gpgpu-sim/l2cache.cc	/^bool memory_sub_partition::busy() const $/;"	f	class:memory_sub_partition
busy	src/intersim/event_router.hpp	/^      idle, busy, tail_pending$/;"	e	enum:EventNextVCState::eNextVCState
busy	src/intersim2/routers/event_router.hpp	/^  enum eNextVCState { idle, busy, tail_pending };$/;"	e	enum:EventNextVCState::eNextVCState
busy	src/stream_manager.cc	/^bool CUstream_st::busy()$/;"	f	class:CUstream_st
busy_cycles	src/gpuwattch/XML_Parse.h	/^	double busy_cycles;$/;"	m	struct:__anon15
busy_cycles	src/gpuwattch/basic_components.h	/^    double pipeline_duty_cycle, total_cycles, busy_cycles, idle_cycles;$/;"	m	class:CoreDynParam
busy_cycles	src/ramulator_sim/DRAM.h	/^    ScalarStat busy_cycles;$/;"	m	class:DRAM
bypass	src/gpuwattch/core.h	/^	Component  bypass;$/;"	m	class:EXECU
bytes	libcuda/cuda_runtime_api.cc	/^    char bytes[16];$/;"	m	struct:CUuuid_st	file:
bytes	src/abstract_hardware_model.h	/^        mem_access_byte_mask_t bytes;$/;"	m	struct:warp_inst_t::transaction_info
c	src/gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR s; int l; XMLCHAR c;} XMLCharacterEntity;$/;"	m	struct:__anon7	file:
c_arb	src/gpuwattch/cacti/highradix.h	/^    MCPAT_Arbiter *cb_arb, *vc_arb, *c_arb;$/;"	m	class:HighRadix
c_buff	src/gpuwattch/cacti/highradix.h	/^    Mat *inp_buff, *r_buff, *c_buff;$/;"	m	class:HighRadix
c_gate_load	src/gpuwattch/cacti/decoder.h	/^  double c_gate_load;$/;"	m	class:Driver
c_load_nand2_path_out	src/gpuwattch/cacti/decoder.h	/^  double c_load_nand2_path_out;$/;"	m	class:PredecBlkDrv
c_load_nand3_path_out	src/gpuwattch/cacti/decoder.h	/^  double c_load_nand3_path_out;$/;"	m	class:PredecBlkDrv
c_wire_load	src/gpuwattch/cacti/decoder.h	/^  double c_wire_load;$/;"	m	class:Driver
cacheL	src/gpuwattch/sharedcache.h	/^	enum cache_level cacheL;$/;"	m	class:SharedCache	typeref:enum:SharedCache::cache_level
cachePorts	src/gpuwattch/arch_const.h	/^const int cachePorts=200;$/;"	v
cache_access_logger_types	src/gpgpu-sim/stat-tool.cc	/^enum cache_access_logger_types {$/;"	g	file:
cache_block_state	src/gpgpu-sim/gpu-cache.h	/^enum cache_block_state {$/;"	g
cache_block_t	src/gpgpu-sim/gpu-cache.h	/^    cache_block_t()$/;"	f	struct:cache_block_t
cache_block_t	src/gpgpu-sim/gpu-cache.h	/^struct cache_block_t {$/;"	s
cache_config	src/gpgpu-sim/gpu-cache.h	/^    cache_config() $/;"	f	class:cache_config
cache_config	src/gpgpu-sim/gpu-cache.h	/^class cache_config {$/;"	c
cache_cycle	src/gpgpu-sim/l2cache.cc	/^void memory_partition_unit::cache_cycle(unsigned cycle) $/;"	f	class:memory_partition_unit
cache_cycle	src/gpgpu-sim/l2cache.cc	/^void memory_sub_partition::cache_cycle( unsigned cycle )$/;"	f	class:memory_sub_partition
cache_event	src/gpgpu-sim/gpu-cache.h	/^enum cache_event {$/;"	g
cache_eviction	src/ramulator_sim/Cache.h	/^  ScalarStat cache_eviction;$/;"	m	class:Cache
cache_flush	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::cache_flush()$/;"	f	class:shader_core_ctx
cache_flush	src/gpgpu-sim/shader.cc	/^void simt_core_cluster::cache_flush()$/;"	f	class:simt_core_cluster
cache_ht	src/gpuwattch/cacti/cacti_interface.h	/^    double cache_ht;$/;"	m	class:uca_org_t
cache_len	src/gpuwattch/cacti/cacti_interface.h	/^    double cache_len;$/;"	m	class:uca_org_t
cache_level	src/gpuwattch/basic_components.h	/^enum cache_level {$/;"	g
cache_level	src/gpuwattch/cacti/cacti_interface.h	/^    int cache_level;$/;"	m	class:InputParameter
cache_lines	src/ramulator_sim/Cache.h	/^  std::map<int, std::list<Line> > cache_lines;$/;"	m	class:Cache
cache_mshr_hit	src/ramulator_sim/Cache.h	/^  ScalarStat cache_mshr_hit;$/;"	m	class:Cache
cache_mshr_unavailable	src/ramulator_sim/Cache.h	/^  ScalarStat cache_mshr_unavailable;$/;"	m	class:Cache
cache_op	src/abstract_hardware_model.h	/^    cache_operator_type cache_op;$/;"	m	class:inst_t
cache_operator_type	src/abstract_hardware_model.h	/^enum cache_operator_type {$/;"	g
cache_option	src/cuda-sim/ptx_ir.h	/^   unsigned cache_option() const { return m_cache_option; }$/;"	f	class:ptx_instruction
cache_p	src/gpuwattch/core.h	/^	enum Cache_policy cache_p;$/;"	m	class:InstFetchU	typeref:enum:InstFetchU::Cache_policy
cache_p	src/gpuwattch/core.h	/^	enum Cache_policy cache_p;$/;"	m	class:LoadStoreU	typeref:enum:LoadStoreU::Cache_policy
cache_policy	src/gpuwattch/XML_Parse.h	/^	int cache_policy;\/\/0 no write or write-though with non-write allocate;1 write-back with write-allocate$/;"	m	struct:__anon10
cache_policy	src/gpuwattch/XML_Parse.h	/^	int cache_policy;\/\/0 no write or write-though with non-write allocate;1 write-back with write-allocate$/;"	m	struct:__anon11
cache_policy	src/gpuwattch/XML_Parse.h	/^	int cache_policy;\/\/0 no write or write-though with non-write allocate;1 write-back with write-allocate$/;"	m	struct:__anon12
cache_policy	src/gpuwattch/XML_Parse.h	/^	int cache_policy;\/\/0 no write or write-though with non-write allocate;1 write-back with write-allocate$/;"	m	struct:__anon13
cache_policy	src/gpuwattch/XML_Parse.h	/^	int cache_policy;\/\/0 no write or write-though with non-write allocate;1 write-back with write-allocate$/;"	m	struct:__anon16
cache_policy	src/gpuwattch/XML_Parse.h	/^	int cache_policy;\/\/0 no write or write-though with non-write allocate;1 write-back with write-allocate$/;"	m	struct:__anon17
cache_policy	src/gpuwattch/XML_Parse.h	/^	int cache_policy;\/\/0 no write or write-though with non-write allocate;1 write-back with write-allocate$/;"	m	struct:__anon18
cache_policy	src/gpuwattch/XML_Parse.h	/^	int cache_policy;\/\/0 no write or write-though with non-write allocate;1 write-back with write-allocate$/;"	m	struct:__anon19
cache_read_access	src/ramulator_sim/Cache.h	/^  ScalarStat cache_read_access;$/;"	m	class:Cache
cache_read_miss	src/ramulator_sim/Cache.h	/^  ScalarStat cache_read_miss;$/;"	m	class:Cache
cache_request_status	src/gpgpu-sim/gpu-cache.h	/^enum cache_request_status {$/;"	g
cache_request_status_str	src/gpgpu-sim/gpu-cache.cc	/^const char * cache_request_status_str(enum cache_request_status status) $/;"	f
cache_set_unavailable	src/ramulator_sim/Cache.h	/^  ScalarStat cache_set_unavailable;$/;"	m	class:Cache
cache_stats	src/gpgpu-sim/gpu-cache.cc	/^cache_stats::cache_stats(){$/;"	f	class:cache_stats
cache_stats	src/gpgpu-sim/gpu-cache.h	/^class cache_stats {$/;"	c
cache_status	src/gpgpu-sim/gpu-cache.h	/^    FuncCache cache_status;$/;"	m	class:cache_config
cache_sub_stats	src/gpgpu-sim/gpu-cache.h	/^    cache_sub_stats(){$/;"	f	struct:cache_sub_stats
cache_sub_stats	src/gpgpu-sim/gpu-cache.h	/^struct cache_sub_stats{$/;"	s
cache_sz	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int cache_sz;  \/\/ in bytes$/;"	m	class:InputParameter
cache_t	src/gpgpu-sim/gpu-cache.h	/^class cache_t {$/;"	c
cache_total_access	src/ramulator_sim/Cache.h	/^  ScalarStat cache_total_access;$/;"	m	class:Cache
cache_total_miss	src/ramulator_sim/Cache.h	/^  ScalarStat cache_total_miss;$/;"	m	class:Cache
cache_write_access	src/ramulator_sim/Cache.h	/^  ScalarStat cache_write_access;$/;"	m	class:Cache
cache_write_miss	src/ramulator_sim/Cache.h	/^  ScalarStat cache_write_miss;$/;"	m	class:Cache
cachep	src/gpuwattch/sharedcache.h	/^    CacheDynParam cachep;$/;"	m	class:SharedCache
caches	src/gpuwattch/array.h	/^  ArrayST* caches;$/;"	m	class:InstCache
cachesys	src/ramulator_sim/Cache.h	/^  std::shared_ptr<CacheSystem> cachesys;$/;"	m	class:Cache
cacti_interface	src/gpuwattch/cacti/io.cc	/^uca_org_t cacti_interface($/;"	f
cacti_interface	src/gpuwattch/cacti/io.cc	/^uca_org_t cacti_interface(InputParameter  * const local_interface)$/;"	f
cacti_interface	src/gpuwattch/cacti/io.cc	/^uca_org_t cacti_interface(const string & infile_name)$/;"	f
calcBuffer	src/intersim2/power/power_module.cpp	/^void Power_Module::calcBuffer(const BufferMonitor *bm){$/;"	f	class:Power_Module
calcChannel	src/intersim2/power/power_module.cpp	/^void Power_Module::calcChannel(const FlitChannel* f){$/;"	f	class:Power_Module
calcSwitch	src/intersim2/power/power_module.cpp	/^void Power_Module::calcSwitch(const SwitchMonitor* sm){$/;"	f	class:Power_Module
calc_cycles	src/gpuwattch/cacti/nuca.cc	/^Nuca::calc_cycles(double lat, double oper_freq)$/;"	f	class:Nuca
calc_log2	src/ramulator_sim/Cache.h	/^  int calc_log2(int val) {$/;"	f	class:Cache
calc_log2	src/ramulator_sim/Memory.h	/^    int calc_log2(int val) {$/;"	f	class:Memory
calc_router_parameters	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::calc_router_parameters()$/;"	f	class:MCPAT_Router
calc_time_mt_wrapper	src/gpuwattch/cacti/Ucache.cc	/^void * calc_time_mt_wrapper(void * void_obj)$/;"	f
calc_time_mt_wrapper_struct	src/gpuwattch/cacti/Ucache.h	/^struct calc_time_mt_wrapper_struct$/;"	s
calc_weighted_speedup	src/ramulator_sim/Config.h	/^  bool calc_weighted_speedup() const {$/;"	f	class:Config
calculate_dist	src/gpgpu-sim/visualizer.cc	/^   void calculate_dist() {$/;"	f	class:my_time_vector
calculate_ld_dist	src/gpgpu-sim/visualizer.cc	/^   void calculate_ld_dist(void) {$/;"	f	class:my_time_vector	file:
calculate_nuca_area	src/gpuwattch/cacti/nuca.cc	/^Nuca::calculate_nuca_area (nuca_org_t *nuca)$/;"	f	class:Nuca
calculate_st_dist	src/gpgpu-sim/visualizer.cc	/^   void calculate_st_dist(void) {$/;"	f	class:my_time_vector	file:
calculate_time	src/gpuwattch/cacti/Ucache.cc	/^bool calculate_time($/;"	f
calculate_wire_stats	src/gpuwattch/cacti/wire.cc	/^Wire::calculate_wire_stats()$/;"	f	class:Wire
call_impl	src/cuda-sim/instructions.cc	/^void call_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
callback	src/abstract_hardware_model.h	/^        dram_callback_t callback;$/;"	m	struct:warp_inst_t::per_thread_info
callback	src/ramulator_sim/Cache.cpp	/^void Cache::callback(Request& req) {$/;"	f	class:Cache
callback	src/ramulator_sim/Request.h	/^    function<void(Request&)> callback; \/\/ call back with more info$/;"	m	class:Request
callp_impl	src/cuda-sim/instructions.cc	/^void callp_impl( const ptx_instruction *pI, ptx_thread_info *thread )$/;"	f
callstack_pop	src/cuda-sim/ptx_sim.cc	/^bool ptx_thread_info::callstack_pop()$/;"	f	class:ptx_thread_info
callstack_pop_plus	src/cuda-sim/ptx_sim.cc	/^bool ptx_thread_info::callstack_pop_plus()$/;"	f	class:ptx_thread_info
callstack_push	src/cuda-sim/ptx_sim.cc	/^void ptx_thread_info::callstack_push( unsigned pc, unsigned rpc, const symbol *return_var_src, const symbol *return_var_dst, unsigned call_uid )$/;"	f	class:ptx_thread_info
callstack_push_plus	src/cuda-sim/ptx_sim.cc	/^void ptx_thread_info::callstack_push_plus( unsigned pc, unsigned rpc, const symbol *return_var_src, const symbol *return_var_dst, unsigned call_uid )$/;"	f	class:ptx_thread_info
cam	src/gpuwattch/cacti/parameter.h	/^  MemoryType cam;$/;"	m	class:TechnologyParameter
camFlag	src/gpuwattch/cacti/mat.h	/^    bool     is_dram,is_fa, pure_cam, camFlag;$/;"	m	class:Mat
cam_bl_precharge_eq_drv	src/gpuwattch/cacti/mat.h	/^    Driver * cam_bl_precharge_eq_drv;\/\/bitline pre-charge circuit is separated for CAM and RAM arrays.$/;"	m	class:Mat
cam_cell	src/gpuwattch/cacti/mat.h	/^    Area     cell,cam_cell;$/;"	m	class:Mat
cam_cell	src/gpuwattch/cacti/parameter.h	/^    Area   cell, cam_cell;\/\/cell is the sram_cell in both nomal cache\/ram and FA.$/;"	m	class:DynamicParameter
cam_cell	src/gpuwattch/cacti/parameter.h	/^  DeviceType cam_cell;   \/\/ SRAM cell transistor$/;"	m	class:TechnologyParameter
cam_cell	src/gpuwattch/cacti/subarray.h	/^    Area    cell, cam_cell;$/;"	m	class:Subarray
can_estimate_drain	common/kernel_info_t.h	/^   bool can_estimate_drain() const$/;"	f	class:kernel_info_t
can_issue	src/gpgpu-sim/shader.h	/^    virtual bool can_issue( const warp_inst_t &inst ) const { return m_dispatch_reg->empty() && !occupied.test(inst.latency); }$/;"	f	class:simd_function_unit
can_issue	src/gpgpu-sim/shader.h	/^    virtual bool can_issue( const warp_inst_t &inst ) const$/;"	f	class:ldst_unit
can_issue	src/gpgpu-sim/shader.h	/^    virtual bool can_issue( const warp_inst_t &inst ) const$/;"	f	class:pipelined_simd_unit
can_issue	src/gpgpu-sim/shader.h	/^    virtual bool can_issue( const warp_inst_t &inst ) const$/;"	f	class:sfu
can_issue	src/gpgpu-sim/shader.h	/^    virtual bool can_issue( const warp_inst_t &inst ) const$/;"	f	class:sp_unit
can_issue_new_cta	common/kernel_info_t.cc	/^kernel_info_t::can_issue_new_cta(unsigned core_id) const$/;"	f	class:kernel_info_t
can_issue_to_dram	src/gpgpu-sim/l2cache.cc	/^bool memory_partition_unit::can_issue_to_dram(int inner_sub_partition_id) $/;"	f	class:memory_partition_unit
can_start_kernel	src/gpgpu-sim/gpu-sim.cc	/^bool gpgpu_sim::can_start_kernel()$/;"	f	class:gpgpu_sim
cancel_drain	src/gpgpu-sim/shader.cc	/^shader_core_ctx::cancel_drain()$/;"	f	class:shader_core_ctx
cancel_removal	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::SM_info::cancel_removal(const unsigned linear_shader_id)$/;"	f	class:DynamicScheduler::SM_info
cap	src/ramulator_sim/Scheduler.h	/^    long cap = 16;$/;"	m	class:Scheduler
capacity	src/gpgpu-sim/gpu-cache.h	/^        unsigned capacity() const { return m_size;}$/;"	f	class:tex_cache::fifo
capacity	src/gpuwattch/arch_const.h	/^	unsigned int capacity;$/;"	m	struct:__anon27
capacity	src/gpuwattch/basic_components.h	/^    double    capacity, blockW, assoc, nbanks;$/;"	m	class:CacheDynParam
capacity	src/intersim/interconnect_interface.cpp	/^   unsigned capacity;$/;"	m	class:boundary_buf	file:
capacity_per_channel	src/gpuwattch/XML_Parse.h	/^	int capacity_per_channel;$/;"	m	struct:__anon22
cas_latency	src/gpuwattch/cacti/cacti_interface.h	/^  double cas_latency;$/;"	m	struct:__anon5
cb	src/gpuwattch/cacti/highradix.h	/^    Crossbar *cb, *out_cb;$/;"	m	class:HighRadix
cbEndTag	src/gpuwattch/xmlParser.cc	/^    int                    cbEndTag;$/;"	m	struct:XML	file:
cbNewElement	src/gpuwattch/xmlParser.cc	/^    int                    cbNewElement;$/;"	m	struct:XML	file:
cb_arb	src/gpuwattch/cacti/highradix.h	/^    MCPAT_Arbiter *cb_arb, *vc_arb, *c_arb;$/;"	m	class:HighRadix
cb_stats	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::cb_stats ()$/;"	f	class:MCPAT_Router
cc	src/gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor
cc	src/gpuwattch/sharedcache.h	/^    Component L2Tot, cc, cc1, ccTot;$/;"	m	class:CCdir
cc1	src/gpuwattch/sharedcache.h	/^    Component L2Tot, cc, cc1, ccTot;$/;"	m	class:CCdir
ccTot	src/gpuwattch/sharedcache.h	/^    Component L2Tot, cc, cc1, ccTot;$/;"	m	class:CCdir
ccache	src/gpuwattch/XML_Parse.h	/^	dcache_systemcore ccache;$/;"	m	struct:__anon15
ccache	src/gpuwattch/core.h	/^	DataCache ccache;$/;"	m	class:LoadStoreU
cdb_alu_accesses	src/gpuwattch/XML_Parse.h	/^	double cdb_alu_accesses;$/;"	m	struct:__anon15
cdb_fpu_accesses	src/gpuwattch/XML_Parse.h	/^	double cdb_fpu_accesses;$/;"	m	struct:__anon15
cdb_mul_accesses	src/gpuwattch/XML_Parse.h	/^	double cdb_mul_accesses;$/;"	m	struct:__anon15
cdb_overhead	src/gpuwattch/basic_components.h	/^const double cdb_overhead = 1.1;$/;"	v
cdf	src/ramulator_sim/StatType.h	/^const uint16_t cdf       = 0x00000040;$/;"	m	namespace:Stats_Ram
cell	src/gpuwattch/cacti/decoder.h	/^    const  Area & cell;$/;"	m	class:Decoder
cell	src/gpuwattch/cacti/mat.h	/^    Area     cell,cam_cell;$/;"	m	class:Mat
cell	src/gpuwattch/cacti/parameter.h	/^    Area   cell, cam_cell;\/\/cell is the sram_cell in both nomal cache\/ram and FA.$/;"	m	class:DynamicParameter
cell	src/gpuwattch/cacti/subarray.h	/^    Area    cell, cam_cell;$/;"	m	class:Subarray
cell_a_w	src/gpuwattch/cacti/parameter.h	/^    double cell_a_w;$/;"	m	class:TechnologyParameter::MemoryType
cell_h_def	src/gpuwattch/cacti/parameter.h	/^  double cell_h_def;$/;"	m	class:TechnologyParameter
cell_load	src/gpuwattch/logic.h	/^	double cell_load;$/;"	m	class:DFFCell
cell_nmos_w	src/gpuwattch/cacti/parameter.h	/^    double cell_nmos_w;$/;"	m	class:TechnologyParameter::MemoryType
cell_pmos_w	src/gpuwattch/cacti/parameter.h	/^    double cell_pmos_w;$/;"	m	class:TechnologyParameter::MemoryType
cflog_print	src/gpgpu-sim/stat-tool.cc	/^void cflog_print(FILE *fout) $/;"	f
cflog_snapshot	src/gpgpu-sim/stat-tool.cc	/^void cflog_snapshot( int logger_id, unsigned long long  cycle ) $/;"	f
cflog_update_thread_pc	src/gpgpu-sim/stat-tool.cc	/^void cflog_update_thread_pc( int logger_id, int thread_id, address_type pc ) $/;"	f
cflog_visualizer_gzprint	src/gpgpu-sim/stat-tool.cc	/^void cflog_visualizer_gzprint(gzFile fout) $/;"	f
cflog_visualizer_print	src/gpgpu-sim/stat-tool.cc	/^void cflog_visualizer_print(FILE *fout) $/;"	f
change_cache_config	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::change_cache_config(FuncCache cache_config, std::string kernel_name)$/;"	f	class:gpgpu_sim
change_double_operand_type	src/cuda-sim/ptx_parser.cc	/^void change_double_operand_type( int operand_type )$/;"	f
change_memory_addr_space	src/cuda-sim/ptx_parser.cc	/^void change_memory_addr_space(const char *identifier) $/;"	f
change_operand_lohi	src/cuda-sim/ptx_parser.cc	/^void change_operand_lohi( int lohi )$/;"	f
change_operand_neg	src/cuda-sim/ptx_parser.cc	/^void change_operand_neg( )$/;"	f
channel	src/ramulator_sim/Controller.h	/^    DRAM<T>* channel;$/;"	m	class:Controller
channel	src/ramulator_sim/SpeedyController.h	/^    DRAM<T>* channel;$/;"	m	class:SpeedyController
channelArea	src/intersim2/power/power_module.hpp	/^  double channelArea;$/;"	m	class:Power_Module
channelClkPower	src/intersim2/power/power_module.hpp	/^  double channelClkPower;$/;"	m	class:Power_Module
channelDFFPower	src/intersim2/power/power_module.hpp	/^  double channelDFFPower;$/;"	m	class:Power_Module
channelDesc	src/abstract_hardware_model.h	/^   struct cudaChannelFormatDesc  channelDesc;$/;"	m	struct:textureReference	typeref:struct:textureReference::cudaChannelFormatDesc
channelLeakPower	src/intersim2/power/power_module.hpp	/^  double channelLeakPower;$/;"	m	class:Power_Module
channelWirePower	src/intersim2/power/power_module.hpp	/^  double channelWirePower;$/;"	m	class:Power_Module
channel_sweep	src/intersim2/power/power_module.hpp	/^  double  channel_sweep; $/;"	m	class:Power_Module
channel_width	src/intersim2/power/power_module.hpp	/^  double channel_width;$/;"	m	class:Power_Module
channel_width	src/ramulator_sim/ALDRAM.h	/^    int channel_width = 64;$/;"	m	class:ALDRAM
channel_width	src/ramulator_sim/DDR3.h	/^    int channel_width = 64;$/;"	m	class:DDR3
channel_width	src/ramulator_sim/DDR4.h	/^    int channel_width = 64;$/;"	m	class:DDR4
channel_width	src/ramulator_sim/DSARP.h	/^    int channel_width = 32;$/;"	m	class:DSARP
channel_width	src/ramulator_sim/GDDR5.h	/^    int channel_width = 64;$/;"	m	class:GDDR5
channel_width	src/ramulator_sim/HBM.h	/^    int channel_width = 128;$/;"	m	class:HBM
channel_width	src/ramulator_sim/LPDDR3.h	/^    int channel_width = 64;$/;"	m	class:LPDDR3
channel_width	src/ramulator_sim/LPDDR4.h	/^    int channel_width = 32;$/;"	m	class:LPDDR4
channel_width	src/ramulator_sim/SALP.h	/^    int channel_width = 64;$/;"	m	class:SALP
channel_width	src/ramulator_sim/TLDRAM.h	/^    int channel_width = 64;$/;"	m	class:TLDRAM
channel_width	src/ramulator_sim/WideIO.h	/^    int channel_width = 128;$/;"	m	class:WideIO
channel_width	src/ramulator_sim/WideIO2.h	/^    int channel_width = 64;$/;"	m	class:WideIO2
channels	src/ramulator_sim/Config.h	/^  int channels;$/;"	m	class:Config
chaos_mesh	src/intersim/routefunc.cpp	/^void chaos_mesh( const Router *r, const Flit *f, $/;"	f
chaos_mesh	src/intersim2/routefunc.cpp	/^void chaos_mesh( const Router *r, const Flit *f, $/;"	f
chaos_torus	src/intersim/routefunc.cpp	/^void chaos_torus( const Router *r, const Flit *f, $/;"	f
chaos_torus	src/intersim2/routefunc.cpp	/^void chaos_torus( const Router *r, const Flit *f, $/;"	f
char_encoding_Big5	src/gpuwattch/xmlParser.h	/^        char_encoding_Big5=5,$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_GB2312	src/gpuwattch/xmlParser.h	/^        char_encoding_GB2312=4,$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_GBK	src/gpuwattch/xmlParser.h	/^        char_encoding_GBK=6     \/\/ this is actually the same as Big5$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_ShiftJIS	src/gpuwattch/xmlParser.h	/^        char_encoding_ShiftJIS=3,$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_UTF8	src/gpuwattch/xmlParser.h	/^        char_encoding_UTF8=1,$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_error	src/gpuwattch/xmlParser.h	/^        char_encoding_error=0,$/;"	e	enum:XMLNode::XMLCharEncoding
char_encoding_legacy	src/gpuwattch/xmlParser.h	/^        char_encoding_legacy=2,$/;"	e	enum:XMLNode::XMLCharEncoding
characterEncoding	src/gpuwattch/xmlParser.cc	/^static XMLNode::XMLCharEncoding characterEncoding=XMLNode::char_encoding_UTF8;$/;"	v	file:
charmemset	src/gpuwattch/xmlParser.cc	/^static inline void charmemset(XMLSTR dest,XMLCHAR c,int l) { while (l--) *(dest++)=c; }$/;"	f	file:
check	src/ramulator_sim/DRAM.h	/^bool DRAM<T>::check(typename T::Command cmd, const int* addr, long clk)$/;"	f	class:DRAM
check	src/ramulator_sim/StatType.h	/^  bool check() const {$/;"	f	class:Stats_Ram::VectorBase
check	src/ramulator_sim/Statistics.h	/^  bool check(void) const { return StatBase<StatType>::stat.check(); }$/;"	f	class:VectorStatBase
checkCollision	src/gpgpu-sim/scoreboard.cc	/^bool Scoreboard::checkCollision( unsigned wid, const class inst_t *inst ) const$/;"	f	class:Scoreboard
checkExecutionStatusAndUpdate	src/cuda-sim/cuda-sim.h	/^    virtual void checkExecutionStatusAndUpdate(warp_inst_t &inst, unsigned t, unsigned tid)$/;"	f	class:functionalCoreSim
checkExecutionStatusAndUpdate	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::checkExecutionStatusAndUpdate(warp_inst_t &inst, unsigned t, unsigned tid)$/;"	f	class:shader_core_ctx
check_and_empty_core	src/gpgpu-sim/shader.cc	/^shader_core_ctx::check_and_empty_core()$/;"	f	class:shader_core_ctx
check_finished_kernel	src/stream_manager.cc	/^stream_manager::check_finished_kernel()$/;"	f	class:stream_manager
check_for_cancel_removal	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::check_for_cancel_removal() const$/;"	f	class:DynamicScheduler
check_for_cancel_removal	launcher/mk-sched/mk_scheduler.h	/^  virtual std::vector<kernel_info_t*> check_for_cancel_removal() const { return std::vector<kernel_info_t*>(); }$/;"	f	class:StaticScheduler
check_for_duplicates	src/cuda-sim/ptx_parser.cc	/^bool check_for_duplicates( const char *identifier )$/;"	f
check_for_preemption_done	src/gpgpu-sim/shader.cc	/^shader_core_ctx::check_for_preemption_done() const$/;"	f	class:shader_core_ctx
check_for_prev_stats	common/kernel_info_t.cc	/^kernel_info_t::check_for_prev_stats()$/;"	f	class:kernel_info_t
check_for_removal	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::check_for_removal() const$/;"	f	class:DynamicScheduler
check_for_removal	launcher/mk-sched/mk_scheduler.h	/^  virtual std::vector<kernel_info_t*> check_for_removal() const { return std::vector<kernel_info_t*>(); }$/;"	f	class:StaticScheduler
check_ld_update	src/gpgpu-sim/visualizer.cc	/^   void check_ld_update(unsigned int uid,unsigned int slot, long int latency) { $/;"	f	class:my_time_vector
check_mem_org	src/gpuwattch/cacti/Ucache.cc	/^bool check_mem_org(mem_array & u, const min_values_t *minval)$/;"	f
check_mshr_parameters	src/gpgpu-sim/gpu-cache.h	/^    void check_mshr_parameters( unsigned num_entries, unsigned max_merged )$/;"	f	class:mshr_table
check_nuca_org	src/gpuwattch/cacti/nuca.cc	/^Nuca::check_nuca_org (nuca_org_t *n, min_values_t *minval)$/;"	f	class:Nuca
check_operands	src/cuda-sim/ptx_ir.cc	/^static std::list<operand_info> check_operands( int opcode,$/;"	f	file:
check_progress_in_inst	launcher/mk-sched/mk_scheduler.h	/^  bool check_progress_in_inst() const { return progress_policy == PROGRESS_INST; }$/;"	f	class:DynamicScheduler
check_row_hit	src/ramulator_sim/DRAM.h	/^bool DRAM<T>::check_row_hit(typename T::Command cmd, const int* addr)$/;"	f	class:DRAM
check_row_open	src/ramulator_sim/DRAM.h	/^bool DRAM<T>::check_row_open(typename T::Command cmd, const int* addr)$/;"	f	class:DRAM
check_st_update	src/gpgpu-sim/visualizer.cc	/^   void check_st_update(unsigned int uid,unsigned int slot, long int latency) { $/;"	f	class:my_time_vector
check_target_extension	src/cuda-sim/ptx_sim.h	/^      void check_target_extension( const char *ext ) $/;"	f	class:ptx_version
check_time_vector_update	src/gpgpu-sim/visualizer.cc	/^void check_time_vector_update(unsigned int uid,int slot ,long int latency,int type) $/;"	f
check_uca_org	src/gpuwattch/cacti/Ucache.cc	/^bool check_uca_org(uca_org_t & u, min_values_t *minval)$/;"	f
check_unlock	src/ramulator_sim/Cache.h	/^  bool check_unlock(long addr) {$/;"	f	class:Cache
check_valid	src/gpgpu-sim/gpu-cache.cc	/^bool cache_stats::check_valid(int type, int status) const{$/;"	f	class:cache_stats
child	src/gpuwattch/xmlParser.h	/^    XMLNode child;$/;"	m	struct:XMLNodeContents
child_pid	launcher/communicate.h	/^  pid_t child_pid;$/;"	m	class:Communicate
children	src/ramulator_sim/DRAM.h	/^    vector<DRAM*> children;$/;"	m	class:DRAM
childs	launcher/launcher_option_parser.h	/^  std::vector<ChildProcess*> childs;$/;"	m	class:LauncherOptionParser
chip	src/gpgpu-sim/addrdec.h	/^   unsigned chip; \/\/ actually channel id; in 3d memory it means stack id; commented by freeman, 3d part$/;"	m	struct:addrdec_t
chip_PR_overhead	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:BranchPredictor
chip_PR_overhead	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:Core
chip_PR_overhead	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:EXECU
chip_PR_overhead	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:InstFetchU
chip_PR_overhead	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:LoadStoreU
chip_PR_overhead	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:MemManU
chip_PR_overhead	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:RegFU
chip_PR_overhead	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:SchedulerU
chip_PR_overhead	src/gpuwattch/logic.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:UndiffCore
chip_PR_overhead	src/gpuwattch/noc.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:NoC
chip_coverage	src/gpuwattch/XML_Parse.h	/^	double chip_coverage;$/;"	m	struct:__anon21
chip_coverage	src/gpuwattch/basic_components.h	/^		   duty_cycle, chip_coverage, route_over_perc;$/;"	m	class:NoCParam
chip_layout_overhead	src/gpuwattch/cacti/parameter.h	/^  double chip_layout_overhead;$/;"	m	class:TechnologyParameter
chiplet_time	src/gpgpu-sim/gpu-sim.h	/^   double chiplet_time;$/;"	m	class:gpgpu_sim
choiceCtrBits	src/gpuwattch/arch_const.h	/^const int choiceCtrBits=2;$/;"	v
choicePredictorSize	src/gpuwattch/arch_const.h	/^const int choicePredictorSize=8192;$/;"	v
chooser	src/gpuwattch/core.h	/^	ArrayST * chooser;$/;"	m	class:BranchPredictor
chooser_predictor_bits	src/gpuwattch/XML_Parse.h	/^	int chooser_predictor_bits;$/;"	m	struct:__anon9
chooser_predictor_entries	src/gpuwattch/XML_Parse.h	/^	int chooser_predictor_entries;$/;"	m	struct:__anon9
chop	src/cuda-sim/instructions.cc	/^ptx_reg_t chop( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_mode, int saturation_mode )$/;"	f
chunks	src/abstract_hardware_model.h	/^        std::bitset<4> chunks; \/\/ bitmask: 32-byte chunks accessed$/;"	m	struct:warp_inst_t::transaction_info
cid_to_sid	src/gpgpu-sim/shader.h	/^    unsigned cid_to_sid( unsigned cid, unsigned cluster_id ) const { return cluster_id*n_simt_cores_per_cluster + cid; }$/;"	f	struct:shader_core_config
cinterfacetest	src/option_parser.cc	/^int cinterfacetest(int argc, const char *argv[])$/;"	f
cl	src/intersim2/flit.hpp	/^  int cl;$/;"	m	class:Flit
clamp	src/cuda-sim/instructions.cc	/^unsigned clamp( unsigned x, unsigned y, unsigned mx, unsigned my, size_t elem_size )$/;"	f
class_based	src/intersim/trafficmanager.hpp	/^      class_based, age_based, none$/;"	e	enum:TrafficManager::ePriority
class_based	src/intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_based, hop_count_based, sequence_based, none };$/;"	e	enum:TrafficManager::ePriority
classes	src/intersim2/power/power_module.hpp	/^  int classes;$/;"	m	class:Power_Module
classify_memfetch	src/gpgpu-sim/traffic_breakdown.cc	/^std::string traffic_breakdown::classify_memfetch(class mem_fetch * mf)$/;"	f	class:traffic_breakdown
cleanup	src/gpuwattch/cacti/cacti_interface.cc	/^void uca_org_t :: cleanup()$/;"	f	class:uca_org_t
clear	src/abstract_hardware_model.h	/^    void clear() const$/;"	f	class:warp_inst_t
clear	src/gpgpu-sim/gpu-cache.cc	/^void cache_stats::clear(){$/;"	f	class:cache_stats
clear	src/gpgpu-sim/gpu-cache.h	/^    void clear(){$/;"	f	struct:cache_sub_stats
clear	src/gpuwattch/xmlParser.h	/^    XMLClear clear;$/;"	m	struct:XMLNodeContents
clearRPC	src/cuda-sim/ptx_sim.h	/^   void clearRPC()$/;"	f	class:ptx_thread_info
clear_L2cache_sub_stats_kain	src/gpgpu-sim/l2cache.cc	/^void memory_sub_partition::clear_L2cache_sub_stats_kain() {$/;"	f	class:memory_sub_partition
clear_active	src/abstract_hardware_model.cc	/^void warp_inst_t::clear_active( const active_mask_t &inactive ) {$/;"	f	class:warp_inst_t
clear_context	common/cta_stat_context.cc	/^cta_stat_context_t::clear_context()$/;"	f	class:cta_stat_context_t
clear_executed_kernel_info	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::clear_executed_kernel_info()$/;"	f	class:gpgpu_sim
clear_executed_kernel_info	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::clear_executed_kernel_info(kernel_info_t* kernel)$/;"	f	class:gpgpu_sim
clear_for_migration	src/gpgpu-sim/shader.cc	/^barrier_set_t::clear_for_migration(const unsigned cta_id)$/;"	f	class:barrier_set_t
clear_for_warp	src/gpgpu-sim/shader.cc	/^opndcoll_rfu_t::clear_for_warp(const unsigned warp_id)$/;"	f	class:opndcoll_rfu_t
clear_for_warp	src/gpgpu-sim/shader.cc	/^opndcoll_rfu_t::collector_unit_t::clear_for_warp(const unsigned warp_id)$/;"	f	class:opndcoll_rfu_t::collector_unit_t
clear_imiss_pending	common/shd_warp_t.h	/^    void clear_imiss_pending() { assert(imiss_pending()); m_imiss_pending=false; }$/;"	f	class:shd_warp_t
clear_lower_bits	src/ramulator_sim/Memory.h	/^    void clear_lower_bits(long& addr, int bits)$/;"	f	class:Memory
clear_membar	common/shd_warp_t.h	/^    void clear_membar() { m_membar=false; }$/;"	f	class:shd_warp_t
clear_modifiedregs	src/cuda-sim/ptx_sim.h	/^   void clear_modifiedregs() { m_debug_trace_regs_modified.back().clear(); m_debug_trace_regs_read.back().clear(); }$/;"	f	class:ptx_thread_info
clear_pending_writebacks	src/gpgpu-sim/shader.h	/^    void clear_pending_writebacks() { m_pending_writes.clear(); }$/;"	f	class:ldst_unit
clear_ptxinfo	src/cuda-sim/cuda-sim.cc	/^void clear_ptxinfo()$/;"	f
clear_statistics	launcher/mk-sched/mk_scheduler.h	/^  virtual void clear_statistics() {}$/;"	f	class:MKScheduler
clear_sub_stats_kain	src/gpgpu-sim/gpu-cache.cc	/^void cache_stats::clear_sub_stats_kain() {$/;"	f	class:cache_stats
clear_sub_stats_kain	src/gpgpu-sim/gpu-cache.h	/^	void clear_sub_stats_kain(){$/;"	f	class:baseline_cache
clear_time_map_vectors	src/gpgpu-sim/visualizer.cc	/^   void clear_time_map_vectors(void) {   $/;"	f	class:my_time_vector
clear_warp	src/gpgpu-sim/shader.cc	/^opndcoll_rfu_t::arbiter_t::clear_warp(unsigned warp_id)$/;"	f	class:opndcoll_rfu_t::arbiter_t
clear_warp	src/gpgpu-sim/shader.h	/^      void clear_warp(unsigned warp_id) { if (!is_free() && m_op.get_wid() == warp_id) reset(); }$/;"	f	class:opndcoll_rfu_t::allocation_t
clk	src/ramulator_sim/Cache.h	/^  long clk = 0;$/;"	m	class:CacheSystem
clk	src/ramulator_sim/Controller.h	/^    long clk = 0;$/;"	m	class:Controller
clk	src/ramulator_sim/Refresh.h	/^  long clk, refreshed;$/;"	m	class:Refresh
clk	src/ramulator_sim/SpeedyController.h	/^    long clk = 0;$/;"	m	class:SpeedyController
clk_ns	src/ramulator_sim/Memory.h	/^    double clk_ns()$/;"	f	class:Memory
clock	common/cu_event_st.h	/^   time_t clock() const { return m_wallclock; }$/;"	f	class:CUevent_st
clockRate	src/gpuwattch/basic_components.h	/^	double clockRate,executionTime;$/;"	m	class:CacheDynParam
clockRate	src/gpuwattch/basic_components.h	/^    double  clockRate,num_mcs, peakDataTransferRate, num_channels;$/;"	m	class:MCParam
clockRate	src/gpuwattch/basic_components.h	/^    double  clockRate;$/;"	m	class:DRAMParam
clockRate	src/gpuwattch/basic_components.h	/^    double  clockRate;$/;"	m	class:NIUParam
clockRate	src/gpuwattch/basic_components.h	/^    double  clockRate;$/;"	m	class:NoCParam
clockRate	src/gpuwattch/basic_components.h	/^    double  clockRate;$/;"	m	class:PCIeParam
clockRate	src/gpuwattch/basic_components.h	/^    double clockRate,executionTime;$/;"	m	class:CoreDynParam
clockRate	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:BranchPredictor
clockRate	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:Core
clockRate	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:EXECU
clockRate	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:InstFetchU
clockRate	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:LoadStoreU
clockRate	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:MemManU
clockRate	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:RENAMINGU
clockRate	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:RegFU
clockRate	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:SchedulerU
clockRate	src/gpuwattch/logic.h	/^	double clockRate,executionTime;$/;"	m	class:FunctionalUnit
clockRate	src/gpuwattch/logic.h	/^	double clockRate,executionTime;$/;"	m	class:UndiffCore
clockRate	src/gpuwattch/sharedcache.h	/^    double scktRatio, clockRate, executionTime;$/;"	m	class:CCdir
clock_boundary_buf	src/intersim/interconnect_interface.cpp	/^boundary_buf** clock_boundary_buf; $/;"	v
clock_cap	src/gpuwattch/logic.h	/^	double clock_cap;$/;"	m	class:DFFCell
clock_multiplier	src/gpgpu-sim/shader.cc	/^unsigned ldst_unit::clock_multiplier() const$/;"	f	class:ldst_unit
clock_multiplier	src/gpgpu-sim/shader.h	/^    virtual unsigned clock_multiplier() const { return 1; }$/;"	f	class:simd_function_unit
clock_rate	src/gpuwattch/XML_Parse.h	/^	int clock_rate;$/;"	m	struct:__anon15
clockrate	src/gpuwattch/XML_Parse.h	/^	int clockrate;$/;"	m	struct:__anon16
clockrate	src/gpuwattch/XML_Parse.h	/^	int clockrate;$/;"	m	struct:__anon17
clockrate	src/gpuwattch/XML_Parse.h	/^	int clockrate;$/;"	m	struct:__anon18
clockrate	src/gpuwattch/XML_Parse.h	/^	int clockrate;$/;"	m	struct:__anon19
clockrate	src/gpuwattch/XML_Parse.h	/^	int clockrate;$/;"	m	struct:__anon21
clockrate	src/gpuwattch/XML_Parse.h	/^    int clockrate;$/;"	m	struct:__anon24
clockrate	src/gpuwattch/XML_Parse.h	/^    int clockrate;$/;"	m	struct:__anon25
close_files	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::close_files()$/;"	f	class:gpgpu_sim_wrapper
clz_impl	src/cuda-sim/instructions.cc	/^void clz_impl( const ptx_instruction *pI, ptx_thread_info *thread )$/;"	f
cmd	src/ramulator_sim/ALDRAM.h	/^        Command cmd;$/;"	m	struct:ALDRAM::TimingEntry
cmd	src/ramulator_sim/DDR3.h	/^        Command cmd;$/;"	m	struct:DDR3::TimingEntry
cmd	src/ramulator_sim/DDR4.h	/^        Command cmd;$/;"	m	struct:DDR4::TimingEntry
cmd	src/ramulator_sim/DSARP.h	/^        Command cmd;$/;"	m	struct:DSARP::TimingEntry
cmd	src/ramulator_sim/GDDR5.h	/^        Command cmd;$/;"	m	struct:GDDR5::TimingEntry
cmd	src/ramulator_sim/HBM.h	/^        Command cmd;$/;"	m	struct:HBM::TimingEntry
cmd	src/ramulator_sim/LPDDR3.h	/^        Command cmd;$/;"	m	struct:LPDDR3::TimingEntry
cmd	src/ramulator_sim/LPDDR4.h	/^        Command cmd;$/;"	m	struct:LPDDR4::TimingEntry
cmd	src/ramulator_sim/SALP.h	/^        Command cmd;$/;"	m	struct:SALP::TimingEntry
cmd	src/ramulator_sim/TLDRAM.h	/^        Command cmd;$/;"	m	struct:TLDRAM::TimingEntry
cmd	src/ramulator_sim/WideIO.h	/^        Command cmd;$/;"	m	struct:WideIO::TimingEntry
cmd	src/ramulator_sim/WideIO2.h	/^        Command cmd;$/;"	m	struct:WideIO2::TimingEntry
cmd_coeff	src/gpuwattch/basic_components.h	/^    double cmd_coeff;$/;"	m	class:DRAMParam
cmd_trace_files	src/ramulator_sim/Controller.h	/^    vector<ofstream> cmd_trace_files;$/;"	m	class:Controller
cmd_trace_files	src/ramulator_sim/SpeedyController.h	/^    vector<ofstream> cmd_trace_files;$/;"	m	class:SpeedyController
cmd_trace_prefix	src/ramulator_sim/Controller.h	/^    string cmd_trace_prefix = "cmd-trace-";$/;"	m	class:Controller
cmd_trace_prefix	src/ramulator_sim/SpeedyController.h	/^    string cmd_trace_prefix = "cmd-trace-";$/;"	m	class:SpeedyController
cmem	src/abstract_hardware_model.h	/^   int cmem;$/;"	m	struct:gpgpu_ptx_sim_kernel_info
cmesh_next	src/intersim2/networks/cmesh.cpp	/^int cmesh_next( int cur, int dest ) {$/;"	f
cmesh_next_no_express	src/intersim2/networks/cmesh.cpp	/^int cmesh_next_no_express( int cur, int dest ) {$/;"	f
cmesh_xy	src/intersim2/networks/cmesh.cpp	/^int cmesh_xy( int cur, int dest ) {$/;"	f
cmesh_xy_no_express	src/intersim2/networks/cmesh.cpp	/^int cmesh_xy_no_express( int cur, int dest ) {$/;"	f
cmesh_yx	src/intersim2/networks/cmesh.cpp	/^int cmesh_yx( int cur, int dest ) {$/;"	f
cmesh_yx_no_express	src/intersim2/networks/cmesh.cpp	/^int cmesh_yx_no_express( int cur, int dest ) {$/;"	f
cmos_Ig_leakage	src/gpuwattch/cacti/basic_circuit.cc	/^double cmos_Ig_leakage($/;"	f
cmos_Ig_n	src/gpuwattch/cacti/basic_circuit.cc	/^double cmos_Ig_n($/;"	f
cmos_Ig_p	src/gpuwattch/cacti/basic_circuit.cc	/^double cmos_Ig_p($/;"	f
cmos_Ileak	src/gpuwattch/cacti/basic_circuit.cc	/^double cmos_Ileak($/;"	f
cmos_Isub_leakage	src/gpuwattch/cacti/basic_circuit.cc	/^double cmos_Isub_leakage($/;"	f
cnot_impl	src/cuda-sim/instructions.cc	/^void cnot_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
coalesce_scale	src/gpuwattch/memoryctrl.h	/^	double coalesce_scale;$/;"	m	class:MCFrontEnd
coalesced_segment	src/gpgpu-sim/shader.cc	/^address_type coalesced_segment(address_type addr, unsigned segment_size_lg2bytes)$/;"	f
col	build/src/cuda-sim/lex.ptx_.c	/^unsigned col = 0;$/;"	v
col	src/gpgpu-sim/addrdec.h	/^   unsigned col;$/;"	m	struct:addrdec_t
collect_operand	src/gpgpu-sim/shader.h	/^      void collect_operand( unsigned op )$/;"	f	class:opndcoll_rfu_t::collector_unit_t
collector_unit_t	src/gpgpu-sim/shader.h	/^      collector_unit_t()$/;"	f	class:opndcoll_rfu_t::collector_unit_t
collector_unit_t	src/gpgpu-sim/shader.h	/^   class collector_unit_t {$/;"	c	class:opndcoll_rfu_t
collector_units	src/gpuwattch/XML_Parse.h	/^   int collector_units;\/\/ (4)$/;"	m	struct:__anon15
columnID	src/gpgpu-sim/mem_fetch.h	/^   unsigned columnID() const { return m_raw_addr.col; }$/;"	f	class:mem_fetch
columns	src/gpuwattch/cacti/nuca.h	/^    int columns;$/;"	m	class:nuca_org_t
combination	src/gpuwattch/cacti/basic_circuit.cc	/^int combination(int n, int m)$/;"	f
comm_dram	src/gpuwattch/cacti/const.h	/^  comm_dram = 4$/;"	e	enum:ram_cell_tech_type_num
comm_dram_num_cells_wl_stitching_	src/gpuwattch/cacti/const.h	/^const static uint32_t comm_dram_num_cells_wl_stitching_ = 256;$/;"	v
command	src/intersim/config.y	/^command : STR '=' STR ';'   { Configuration::GetTheConfig()->Assign( $1, $3 ); free( $1 ); free( $3 ); }$/;"	l
command	src/intersim2/config.y	/^command : STR '=' STR ';'   { config_assign_string( $1, $3 ); free( $1 ); free( $3 ); }$/;"	l
command_name	src/ramulator_sim/ALDRAM.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:ALDRAM
command_name	src/ramulator_sim/DDR3.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:DDR3
command_name	src/ramulator_sim/DDR4.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:DDR4
command_name	src/ramulator_sim/DSARP.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:DSARP
command_name	src/ramulator_sim/GDDR5.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:GDDR5
command_name	src/ramulator_sim/HBM.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:HBM
command_name	src/ramulator_sim/LPDDR3.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:LPDDR3
command_name	src/ramulator_sim/LPDDR4.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:LPDDR4
command_name	src/ramulator_sim/SALP.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:SALP
command_name	src/ramulator_sim/TLDRAM.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:TLDRAM
command_name	src/ramulator_sim/WideIO.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:WideIO
command_name	src/ramulator_sim/WideIO2.h	/^    string command_name[int(Command::MAX)] = {$/;"	m	class:WideIO2
commands	src/intersim/config.y	/^commands : commands command$/;"	l
commands	src/intersim2/config.y	/^commands : commands command$/;"	l
commitW	src/gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_decodeW;$/;"	m	class:CoreDynParam
commitWidth	src/gpuwattch/arch_const.h	/^const int commitWidth=8;$/;"	v
commit_width	src/gpuwattch/XML_Parse.h	/^	int commit_width;$/;"	m	struct:__anon15
committed_fp_instructions	src/gpuwattch/XML_Parse.h	/^	double committed_fp_instructions;$/;"	m	struct:__anon15
committed_instructions	src/gpuwattch/XML_Parse.h	/^	double committed_instructions;$/;"	m	struct:__anon15
committed_int_instructions	src/gpuwattch/XML_Parse.h	/^	double committed_int_instructions;$/;"	m	struct:__anon15
compair_depart_clk	src/ramulator_sim/SpeedyController.h	/^    class compair_depart_clk {$/;"	c	class:SpeedyController
compair_first_clk	src/ramulator_sim/SpeedyController.h	/^    static bool compair_first_clk(const request_info& lhs, const request_info& rhs) {$/;"	f	class:SpeedyController
compare	src/ramulator_sim/Scheduler.h	/^    function<ReqIter(ReqIter, ReqIter)> compare[int(Type::MAX)] = {$/;"	m	class:Scheduler
compare_bits	src/gpuwattch/logic.h	/^	int compare_bits;$/;"	m	class:dep_resource_conflict_check
compare_cap	src/gpuwattch/logic.cc	/^double dep_resource_conflict_check::compare_cap()$/;"	f	class:dep_resource_conflict_check
compare_spec	src/cuda-sim/ptx.y	/^compare_spec:EQ_OPTION { add_option(EQ_OPTION); } $/;"	l
completed	src/abstract_hardware_model.cc	/^void warp_inst_t::completed( unsigned long long cycle ) const $/;"	f	class:warp_inst_t
compute	src/gpuwattch/core.cc	/^void Core::compute()$/;"	f	class:Core
compute	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::compute()$/;"	f	class:gpgpu_sim_wrapper
compute	src/gpuwattch/interconnect.cc	/^interconnect::compute()$/;"	f	class:interconnect
compute	src/gpuwattch/logic.cc	/^void Pipeline::compute()$/;"	f	class:Pipeline
compute	src/gpuwattch/memoryctrl.cc	/^void MCBackend::compute()$/;"	f	class:MCBackend
compute	src/gpuwattch/memoryctrl.cc	/^void MCPHY::compute()$/;"	f	class:MCPHY
compute	src/gpuwattch/processor.cc	/^void Processor::compute () $/;"	f	class:Processor
computeEnergy	src/gpuwattch/core.cc	/^void BranchPredictor::computeEnergy(bool is_tdp)$/;"	f	class:BranchPredictor
computeEnergy	src/gpuwattch/core.cc	/^void Core::computeEnergy(bool is_tdp)$/;"	f	class:Core
computeEnergy	src/gpuwattch/core.cc	/^void EXECU::computeEnergy(bool is_tdp)$/;"	f	class:EXECU
computeEnergy	src/gpuwattch/core.cc	/^void InstFetchU::computeEnergy(bool is_tdp)$/;"	f	class:InstFetchU
computeEnergy	src/gpuwattch/core.cc	/^void LoadStoreU::computeEnergy(bool is_tdp)$/;"	f	class:LoadStoreU
computeEnergy	src/gpuwattch/core.cc	/^void MemManU::computeEnergy(bool is_tdp)$/;"	f	class:MemManU
computeEnergy	src/gpuwattch/core.cc	/^void RENAMINGU::computeEnergy(bool is_tdp)$/;"	f	class:RENAMINGU
computeEnergy	src/gpuwattch/core.cc	/^void RegFU::computeEnergy(bool is_tdp)$/;"	f	class:RegFU
computeEnergy	src/gpuwattch/core.cc	/^void SchedulerU::computeEnergy(bool is_tdp)$/;"	f	class:SchedulerU
computeEnergy	src/gpuwattch/iocontrollers.cc	/^void FlashController::computeEnergy(bool is_tdp)$/;"	f	class:FlashController
computeEnergy	src/gpuwattch/iocontrollers.cc	/^void NIUController::computeEnergy(bool is_tdp)$/;"	f	class:NIUController
computeEnergy	src/gpuwattch/iocontrollers.cc	/^void PCIeController::computeEnergy(bool is_tdp)$/;"	f	class:PCIeController
computeEnergy	src/gpuwattch/logic.cc	/^void FunctionalUnit::computeEnergy(bool is_tdp)$/;"	f	class:FunctionalUnit
computeEnergy	src/gpuwattch/memoryctrl.cc	/^void DRAM::computeEnergy(bool is_tdp)$/;"	f	class:DRAM
computeEnergy	src/gpuwattch/memoryctrl.cc	/^void MCBackend::computeEnergy(bool is_tdp)$/;"	f	class:MCBackend
computeEnergy	src/gpuwattch/memoryctrl.cc	/^void MCFrontEnd::computeEnergy(bool is_tdp)$/;"	f	class:MCFrontEnd
computeEnergy	src/gpuwattch/memoryctrl.cc	/^void MCPHY::computeEnergy(bool is_tdp)$/;"	f	class:MCPHY
computeEnergy	src/gpuwattch/memoryctrl.cc	/^void MemoryController::computeEnergy(bool is_tdp)$/;"	f	class:MemoryController
computeEnergy	src/gpuwattch/noc.cc	/^void NoC::computeEnergy(bool is_tdp)$/;"	f	class:NoC
computeEnergy	src/gpuwattch/sharedcache.cc	/^void SharedCache::computeEnergy(bool is_tdp)$/;"	f	class:SharedCache
compute_C	src/gpuwattch/cacti/subarray.cc	/^void Subarray::compute_C()$/;"	f	class:Subarray
compute_DFF_cell	src/gpuwattch/logic.cc	/^void DFFCell::compute_DFF_cell()$/;"	f	class:DFFCell
compute_arb_power	src/gpuwattch/cacti/highradix.cc	/^void HighRadix::compute_arb_power()$/;"	f	class:HighRadix
compute_area	src/gpuwattch/cacti/decoder.cc	/^void Decoder::compute_area()$/;"	f	class:Decoder
compute_area	src/gpuwattch/cacti/decoder.cc	/^void PredecBlk::compute_area()$/;"	f	class:PredecBlk
compute_area	src/gpuwattch/cacti/decoder.cc	/^void PredecBlkDrv::compute_area()$/;"	f	class:PredecBlkDrv
compute_base_power	src/gpuwattch/array.cc	/^void ArrayST::compute_base_power()$/;"	f	class:ArrayST
compute_bit_mux_sa_precharge_sa_mux_wr_drv_wr_mux_h	src/gpuwattch/cacti/mat.cc	/^double Mat::compute_bit_mux_sa_precharge_sa_mux_wr_drv_wr_mux_h()$/;"	f	class:Mat
compute_bitline_delay	src/gpuwattch/cacti/mat.cc	/^double Mat::compute_bitline_delay(double inrisetime)$/;"	f	class:Mat
compute_buff_power	src/gpuwattch/cacti/highradix.cc	/^void HighRadix::compute_buff_power()$/;"	f	class:HighRadix
compute_bus_power	src/gpuwattch/cacti/highradix.cc	/^void HighRadix::compute_bus_power()$/;"	f	class:HighRadix
compute_cam_delay	src/gpuwattch/cacti/mat.cc	/^double Mat::compute_cam_delay(double inrisetime)$/;"	f	class:Mat
compute_comparator_delay	src/gpuwattch/cacti/mat.cc	/^double Mat::compute_comparator_delay(double inrisetime)$/;"	f	class:Mat
compute_comparators_height	src/gpuwattch/cacti/mat.cc	/^double Mat::compute_comparators_height($/;"	f	class:Mat
compute_crossbar_power	src/gpuwattch/cacti/highradix.cc	/^void HighRadix::compute_crossbar_power()$/;"	f	class:HighRadix
compute_delay	src/gpuwattch/cacti/decoder.cc	/^double Driver::compute_delay(double inrisetime)$/;"	f	class:Driver
compute_delays	src/gpuwattch/cacti/bank.cc	/^double Bank::compute_delays(double inrisetime)$/;"	f	class:Bank
compute_delays	src/gpuwattch/cacti/decoder.cc	/^double Decoder::compute_delays(double inrisetime)$/;"	f	class:Decoder
compute_delays	src/gpuwattch/cacti/decoder.cc	/^double Predec::compute_delays(double inrisetime)$/;"	f	class:Predec
compute_delays	src/gpuwattch/cacti/decoder.cc	/^pair<double, double> PredecBlk::compute_delays($/;"	f	class:PredecBlk
compute_delays	src/gpuwattch/cacti/decoder.cc	/^pair<double, double> PredecBlkDrv::compute_delays($/;"	f	class:PredecBlkDrv
compute_delays	src/gpuwattch/cacti/mat.cc	/^double Mat::compute_delays(double inrisetime)$/;"	f	class:Mat
compute_delays	src/gpuwattch/cacti/uca.cc	/^double UCA::compute_delays(double inrisetime)$/;"	f	class:UCA
compute_diffusion_width	src/gpuwattch/cacti/component.cc	/^double Component::compute_diffusion_width(int num_stacked_in, int num_folded_tr)$/;"	f	class:Component
compute_gate_area	src/gpuwattch/cacti/component.cc	/^double Component::compute_gate_area($/;"	f	class:Component
compute_power	src/gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::compute_power() {$/;"	f	class:MCPAT_Arbiter
compute_power	src/gpuwattch/cacti/crossbar.cc	/^void Crossbar::compute_power()$/;"	f	class:Crossbar
compute_power	src/gpuwattch/cacti/highradix.cc	/^HighRadix::compute_power()$/;"	f	class:HighRadix
compute_power_energy	src/gpuwattch/cacti/bank.cc	/^void Bank::compute_power_energy()$/;"	f	class:Bank
compute_power_energy	src/gpuwattch/cacti/mat.cc	/^void Mat::compute_power_energy()$/;"	f	class:Mat
compute_power_energy	src/gpuwattch/cacti/uca.cc	/^void UCA::compute_power_energy()$/;"	f	class:UCA
compute_sa_delay	src/gpuwattch/cacti/mat.cc	/^double Mat::compute_sa_delay(double inrisetime)$/;"	f	class:Mat
compute_stage_vector	src/gpuwattch/logic.cc	/^void Pipeline::compute_stage_vector()$/;"	f	class:Pipeline
compute_subarray_out_drv	src/gpuwattch/cacti/mat.cc	/^double Mat::compute_subarray_out_drv(double inrisetime)$/;"	f	class:Mat
compute_tr_width_after_folding	src/gpuwattch/cacti/component.cc	/^double Component::compute_tr_width_after_folding($/;"	f	class:Component
compute_widths	src/gpuwattch/cacti/decoder.cc	/^void Decoder::compute_widths()$/;"	f	class:Decoder
compute_widths	src/gpuwattch/cacti/decoder.cc	/^void Driver::compute_widths()$/;"	f	class:Driver
compute_widths	src/gpuwattch/cacti/decoder.cc	/^void PredecBlk::compute_widths()$/;"	f	class:PredecBlk
compute_widths	src/gpuwattch/cacti/decoder.cc	/^void PredecBlkDrv::compute_widths()$/;"	f	class:PredecBlkDrv
concatlower	src/ramulator_sim/Cache.cpp	/^void Cache::concatlower(Cache* lower) {$/;"	f	class:Cache
concrete_scheduler	src/gpgpu-sim/shader.h	/^enum concrete_scheduler$/;"	g
concurrent_row_access	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int **concurrent_row_access; \/\/concurrent_row_access[dram chip id][bank id]$/;"	m	class:memory_stats_t
concurrent_streams_empty	src/stream_manager.cc	/^bool stream_manager::concurrent_streams_empty()$/;"	f	class:stream_manager
config	launcher/child_process.h	/^    kernel_config config;$/;"	m	struct:ChildProcess::kernel_build_info
config_assign_float	src/intersim2/config_utils.cpp	/^extern "C" void config_assign_float( char const * field, double value )$/;"	f
config_assign_int	src/intersim2/config_utils.cpp	/^extern "C" void config_assign_int( char const * field, int value )$/;"	f
config_assign_string	src/intersim2/config_utils.cpp	/^extern "C" void config_assign_string( char const * field, char const * value )$/;"	f
config_error	src/intersim2/config_utils.cpp	/^extern "C" void config_error( char const * msg, int lineno )$/;"	f
config_input	src/intersim/config_utils.cpp	/^int config_input( char *line, int max_size )$/;"	f
config_input	src/intersim2/config_utils.cpp	/^extern "C" int config_input(char * line, int max_size)$/;"	f
config_str	src/trace.cc	/^    const char* config_str;$/;"	m	namespace:Trace	file:
conflict_check_power	src/gpuwattch/logic.cc	/^void dep_resource_conflict_check::conflict_check_power()$/;"	f	class:dep_resource_conflict_check
conflicts	src/gpuwattch/XML_Parse.h	/^	double conflicts;$/;"	m	struct:__anon10
conflicts	src/gpuwattch/XML_Parse.h	/^	double conflicts;$/;"	m	struct:__anon11
conflicts	src/gpuwattch/XML_Parse.h	/^	double conflicts;$/;"	m	struct:__anon12
conflicts	src/gpuwattch/XML_Parse.h	/^	double conflicts;$/;"	m	struct:__anon13
conflicts	src/gpuwattch/XML_Parse.h	/^	double conflicts;$/;"	m	struct:__anon16
conflicts	src/gpuwattch/XML_Parse.h	/^	double conflicts;$/;"	m	struct:__anon17
conflicts	src/gpuwattch/XML_Parse.h	/^	double conflicts;$/;"	m	struct:__anon18
conflicts	src/gpuwattch/XML_Parse.h	/^	double conflicts;$/;"	m	struct:__anon19
connect_basic_blocks	src/cuda-sim/ptx_ir.cc	/^void function_info::connect_basic_blocks( ) \/\/iterate across m_basic_blocks of function, connecting basic blocks together$/;"	f	class:function_info
connect_break_targets	src/cuda-sim/ptx_ir.cc	/^bool function_info::connect_break_targets() \/\/connecting break instructions with proper targets$/;"	f	class:function_info
const_coeff	src/gpuwattch/basic_components.h	/^    double const_coeff;$/;"	m	class:DRAMParam
const_dynamic_power	src/gpuwattch/gpgpu_sim_wrapper.h	/^    double const_dynamic_power;$/;"	m	class:gpgpu_sim_wrapper
const_iterator	common/preemption_info.h	/^    typedef std::map<unsigned, PREEMPTION_TECHNIQUE_ENUM>::const_iterator const_iterator;$/;"	t	class:preemption_info_t
const_iterator	launcher/launcher_option_parser.h	/^  typedef std::vector<ChildProcess*>::const_iterator  const_iterator;$/;"	t	class:LauncherOptionParser
const_iterator	src/cuda-sim/ptx_ir.h	/^   typedef std::vector<operand_info>::const_iterator const_iterator;$/;"	t	class:ptx_instruction
const_iterator_begin	src/cuda-sim/ptx_ir.h	/^   iterator const_iterator_begin() { return m_consts.begin();}$/;"	f	class:symbol_table
const_iterator_end	src/cuda-sim/ptx_ir.h	/^   iterator const_iterator_end() { return m_consts.end();}$/;"	f	class:symbol_table
const_mem_iterator	src/abstract_hardware_model.h	/^    typedef std::list<mem_access_t>::const_iterator const_mem_iterator;$/;"	t	class:warp_inst_t
const_space	src/abstract_hardware_model.h	/^   const_space,$/;"	e	enum:_memory_space_t
constant_cycle	src/gpgpu-sim/shader.cc	/^bool ldst_unit::constant_cycle( warp_inst_t &inst, mem_stage_stall_type &rc_fail, mem_stage_access_type &fail_type)$/;"	f	class:ldst_unit
cont_stats	src/gpuwattch/cacti/nuca.cc	/^int cont_stats[2 \/*l2 or l3*\/][5\/* cores *\/][ROUTER_TYPES][7 \/*banks*\/][8 \/* cycle time *\/];$/;"	v
contains	src/ramulator_sim/Config.h	/^  bool contains(const std::string& name) const {$/;"	f	class:Config
contention	src/gpuwattch/cacti/nuca.h	/^    double contention;$/;"	m	class:nuca_org_t
context_load_cta	src/gpgpu-sim/shader.cc	/^shader_core_ctx::context_load_cta()$/;"	f	class:shader_core_ctx
context_loading	launcher/mk-sched/mk_scheduler.h	/^    std::vector<bool> context_loading;$/;"	m	class:DynamicScheduler::SM_info
context_save_cta	src/gpgpu-sim/shader.cc	/^shader_core_ctx::context_save_cta(unsigned cta_id)$/;"	f	class:shader_core_ctx
context_switch_cta	common/kernel_info_t.cc	/^kernel_info_t::context_switch_cta(dim3 switching_cta_id, unsigned long long context_save_done_time, unsigned shader_id, unsigned hw_cta_id)$/;"	f	class:kernel_info_t
context_switches	src/gpuwattch/XML_Parse.h	/^	double context_switches;$/;"	m	struct:__anon15
context_switching_delay	src/gpgpu-sim/shader.h	/^    unsigned long long context_switching_delay;$/;"	m	class:shader_core_ctx
context_type	src/gpgpu-sim/mem_fetch.h	/^enum context_type{$/;"	g
convert_to_ptxplus	src/abstract_hardware_model.h	/^    bool convert_to_ptxplus() const { return m_ptx_convert_to_ptxplus; }$/;"	f	class:gpgpu_functional_sim_config
coption	src/option_parser.cc	/^   char * coption;$/;"	m	class:testtype	file:
copy_arg_to_buffer	src/cuda-sim/ptx_ir.cc	/^arg_buffer_t copy_arg_to_buffer(ptx_thread_info * thread, operand_info actual_param_op, const symbol * formal_param)$/;"	f
copy_args_into_buffer_list	src/cuda-sim/ptx_ir.cc	/^void copy_args_into_buffer_list( const ptx_instruction * pI, $/;"	f
copy_buffer_list_into_frame	src/cuda-sim/ptx_ir.cc	/^void copy_buffer_list_into_frame(ptx_thread_info * thread, arg_buffer_list_t &arg_values) $/;"	f
copy_buffer_to_frame	src/cuda-sim/ptx_ir.cc	/^void copy_buffer_to_frame(ptx_thread_info * thread, const arg_buffer_t &a) $/;"	f
core	src/gpuwattch/XML_Parse.h	/^	system_core core[64];$/;"	m	struct:__anon26
core	src/gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor
core_cache_stats	src/gpgpu-sim/power_stat.h	/^    class cache_stats core_cache_stats[NUM_STAT_IDX]; \/\/ Total core stats$/;"	m	struct:mem_power_stats_pod	typeref:class:mem_power_stats_pod::cache_stats
core_clock_ratio	src/gpuwattch/XML_Parse.h	/^   double core_clock_ratio;\/\/ (2.0)$/;"	m	struct:__anon15
core_config	src/abstract_hardware_model.h	/^    core_config() $/;"	f	struct:core_config
core_config	src/abstract_hardware_model.h	/^struct core_config {$/;"	s
core_context_loading	src/gpgpu-sim/shader.h	/^    bool core_context_loading;$/;"	m	class:shader_core_ctx
core_context_saving	src/gpgpu-sim/shader.h	/^    bool core_context_saving;$/;"	m	class:shader_core_ctx
core_cycle	launcher/mk-sched/mk_scheduler.h	/^  virtual void core_cycle(const std::vector<unsigned> & scheduled_ctas)       {}$/;"	f	class:MKScheduler
core_cycle	src/gpgpu-sim/shader.cc	/^void simt_core_cluster::core_cycle()$/;"	f	class:simt_core_cluster
core_draining	src/gpgpu-sim/shader.h	/^    bool core_draining;$/;"	m	class:shader_core_ctx
core_flushing	src/gpgpu-sim/shader.h	/^    bool core_flushing;$/;"	m	class:shader_core_ctx
core_freq	src/gpgpu-sim/gpu-sim.h	/^    double core_freq;$/;"	m	class:gpgpu_sim_config
core_num	src/ramulator_sim/Config.h	/^  int core_num = 0;$/;"	m	class:Config
core_numbers	src/gpgpu-sim/gpu-sim.cc	/^int core_numbers = 0;$/;"	v
core_period	src/gpgpu-sim/gpu-sim.h	/^    double core_period;$/;"	m	class:gpgpu_sim_config
core_t	src/abstract_hardware_model.h	/^        core_t( gpgpu_sim *gpu, $/;"	f	class:core_t
core_t	src/abstract_hardware_model.h	/^class core_t {$/;"	c
core_tech_node	src/gpuwattch/XML_Parse.h	/^	double core_tech_node;$/;"	m	struct:__anon26
core_time	src/gpgpu-sim/gpu-sim.h	/^   double core_time;$/;"	m	class:gpgpu_sim
core_tx_density	src/gpuwattch/cacti/parameter.h	/^    double core_tx_density;$/;"	m	class:TechnologyParameter::ScalingFactor
core_ty	src/gpuwattch/array.h	/^  enum Core_type core_ty;$/;"	m	class:ArrayST	typeref:enum:ArrayST::Core_type
core_ty	src/gpuwattch/basic_components.h	/^    enum Core_type  core_ty;$/;"	m	class:CoreDynParam	typeref:enum:CoreDynParam::Core_type
core_ty	src/gpuwattch/interconnect.h	/^    enum Core_type core_ty;$/;"	m	class:interconnect	typeref:enum:interconnect::Core_type
core_ty	src/gpuwattch/logic.h	/^	enum  Core_type core_ty;$/;"	m	class:UndiffCore	typeref:enum:UndiffCore::Core_type
core_ty	src/gpuwattch/logic.h	/^	enum Core_type core_ty;$/;"	m	class:inst_decoder	typeref:enum:inst_decoder::Core_type
core_ty	src/gpuwattch/logic.h	/^	enum Core_type core_ty;$/;"	m	class:selection_logic	typeref:enum:selection_logic::Core_type
coredynp	src/gpuwattch/core.h	/^	CoreDynParam  coredynp;$/;"	m	class:BranchPredictor
coredynp	src/gpuwattch/core.h	/^	CoreDynParam  coredynp;$/;"	m	class:EXECU
coredynp	src/gpuwattch/core.h	/^	CoreDynParam  coredynp;$/;"	m	class:InstFetchU
coredynp	src/gpuwattch/core.h	/^	CoreDynParam  coredynp;$/;"	m	class:LoadStoreU
coredynp	src/gpuwattch/core.h	/^	CoreDynParam  coredynp;$/;"	m	class:MemManU
coredynp	src/gpuwattch/core.h	/^	CoreDynParam  coredynp;$/;"	m	class:RENAMINGU
coredynp	src/gpuwattch/core.h	/^	CoreDynParam  coredynp;$/;"	m	class:RegFU
coredynp	src/gpuwattch/core.h	/^	CoreDynParam  coredynp;$/;"	m	class:SchedulerU
coredynp	src/gpuwattch/core.h	/^    CoreDynParam  coredynp;$/;"	m	class:Core
coredynp	src/gpuwattch/logic.h	/^	CoreDynParam  coredynp;$/;"	m	class:FunctionalUnit
coredynp	src/gpuwattch/logic.h	/^	CoreDynParam  coredynp;$/;"	m	class:Pipeline
coredynp	src/gpuwattch/logic.h	/^	CoreDynParam  coredynp;$/;"	m	class:UndiffCore
coredynp	src/gpuwattch/logic.h	/^	CoreDynParam  coredynp;$/;"	m	class:dep_resource_conflict_check
coreid	src/ramulator_sim/Request.h	/^    int coreid;$/;"	m	class:Request
corepipe	src/gpuwattch/core.h	/^    Pipeline   * corepipe;$/;"	m	class:Core
cores	src/gpuwattch/cacti/cacti_interface.h	/^    int cores;$/;"	m	class:InputParameter
cores	src/gpuwattch/processor.h	/^	vector<Core *> cores;$/;"	m	class:Processor
cos_impl	src/cuda-sim/instructions.cc	/^void cos_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
count	src/ramulator_sim/ALDRAM.h	/^        int count[int(Level::MAX)];$/;"	m	struct:ALDRAM::OrgEntry
count	src/ramulator_sim/DDR3.h	/^        int count[int(Level::MAX)];$/;"	m	struct:DDR3::OrgEntry
count	src/ramulator_sim/DDR4.h	/^        int count[int(Level::MAX)];$/;"	m	struct:DDR4::OrgEntry
count	src/ramulator_sim/DSARP.h	/^        int count[int(Level::MAX)];$/;"	m	struct:DSARP::OrgEntry
count	src/ramulator_sim/GDDR5.h	/^        int count[int(Level::MAX)];$/;"	m	struct:GDDR5::OrgEntry
count	src/ramulator_sim/HBM.h	/^        int count[int(Level::MAX)];$/;"	m	struct:HBM::OrgEntry
count	src/ramulator_sim/LPDDR3.h	/^        int count[int(Level::MAX)];$/;"	m	struct:LPDDR3::OrgEntry
count	src/ramulator_sim/LPDDR4.h	/^        int count[int(Level::MAX)];$/;"	m	struct:LPDDR4::OrgEntry
count	src/ramulator_sim/SALP.h	/^        int count[int(Level::MAX)];$/;"	m	struct:SALP::OrgEntry
count	src/ramulator_sim/TLDRAM.h	/^        int count[int(Level::MAX)];$/;"	m	struct:TLDRAM::OrgEntry
count	src/ramulator_sim/WideIO.h	/^        int count[int(Level::MAX)];$/;"	m	struct:WideIO::OrgEntry
count	src/ramulator_sim/WideIO2.h	/^        int count[int(Level::MAX)];$/;"	m	struct:WideIO2::OrgEntry
cppinterfacetest	src/option_parser.cc	/^int cppinterfacetest(int argc, const char *argv[])$/;"	f
cpu_tick	src/ramulator_sim/Config.h	/^  int cpu_tick;$/;"	m	class:Config
cpx_arbassoc	src/gpuwattch/arch_const.h	/^const int cpx_arbassoc=1;$/;"	v
cpx_arbblocksize	src/gpuwattch/arch_const.h	/^const int cpx_arbblocksize=2;$/;"	v
cpx_arbsize	src/gpuwattch/arch_const.h	/^const int cpx_arbsize=128;$/;"	v
cpx_bufferassoc	src/gpuwattch/arch_const.h	/^const int cpx_bufferassoc=1;$/;"	v
cpx_bufferblocksize	src/gpuwattch/arch_const.h	/^const int cpx_bufferblocksize=32;$/;"	v
cpx_buffersize	src/gpuwattch/arch_const.h	/^const int cpx_buffersize=1024;$/;"	v
cpx_numarb	src/gpuwattch/arch_const.h	/^const int cpx_numarb=8;$/;"	v
cpx_numbuffer	src/gpuwattch/arch_const.h	/^const int cpx_numbuffer=8;$/;"	v
cpy_tid_to_reg	src/cuda-sim/ptx_sim.cc	/^void ptx_thread_info::cpy_tid_to_reg( dim3 tid )$/;"	f	class:ptx_thread_info
create	src/ramulator_sim/MemoryFactory.cpp	/^MemoryBase *MemoryFactory<SALP>::create(const Config& configs, int cacheline, fifo_pipeline<mem_fetch> *r_returnq) {$/;"	f	class:MemoryFactory
create	src/ramulator_sim/MemoryFactory.cpp	/^MemoryBase *MemoryFactory<WideIO2>::create(const Config& configs, int cacheline, fifo_pipeline<mem_fetch> *r_returnq) {$/;"	f	class:MemoryFactory
create	src/ramulator_sim/MemoryFactory.h	/^    static MemoryBase *create(const Config& configs, int cacheline, fifo_pipeline<mem_fetch> *r_returnq)$/;"	f	class:MemoryFactory
createWarp	src/cuda-sim/cuda-sim.cc	/^void  functionalCoreSim::createWarp(unsigned warpId)$/;"	f	class:functionalCoreSim
createXMLString	src/gpuwattch/xmlParser.cc	/^XMLSTR XMLNode::createXMLString(int nFormat, int *pnSize) const$/;"	f	class:XMLNode
createXMLTopNode	src/gpuwattch/xmlParser.cc	/^XMLNode XMLNode::createXMLTopNode(XMLCSTR lpszName, char isDeclaration) { return XMLNode(NULL,stringDup(lpszName),isDeclaration); }$/;"	f	class:XMLNode
createXMLTopNode_WOSD	src/gpuwattch/xmlParser.cc	/^XMLNode XMLNode::createXMLTopNode_WOSD(XMLSTR lpszName, char isDeclaration) { return XMLNode(NULL,lpszName,isDeclaration); }$/;"	f	class:XMLNode
create_basic_blocks	src/cuda-sim/ptx_ir.cc	/^void function_info::create_basic_blocks()$/;"	f	class:function_info
create_buf	src/intersim/interconnect_interface.cpp	/^void create_buf(int src_n,int warp_n,int vc_n)$/;"	f
create_node_map	src/intersim/interconnect_interface.cpp	/^void create_node_map(int n_shader, int n_mem, int size, int use_map) $/;"	f
create_thread_CFlogger	src/gpgpu-sim/stat-tool.cc	/^void create_thread_CFlogger( int n_loggers, int n_threads, address_type start_pc, unsigned long long  logging_interval) $/;"	f
credit_return_queue	src/intersim/trafficmanager.hpp	/^   queue<Flit *> * credit_return_queue; \/\/keeps flits that their corresponding credits are not sent yet$/;"	m	class:TrafficManager
crossbar	src/gpuwattch/cacti/router.h	/^    Component arbiter, crossbar, buffer;$/;"	m	class:MCPAT_Router
crossbar_accesses	src/gpuwattch/XML_Parse.h	/^	double crossbar_accesses;$/;"	m	struct:__anon20
crossbar_ctrline	src/gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::crossbar_ctrline() {$/;"	f	class:MCPAT_Arbiter
crossbar_ctrline	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::crossbar_ctrline() {$/;"	f	class:MCPAT_Router
crossbar_inpline	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::crossbar_inpline() {$/;"	f	class:MCPAT_Router
crossbar_outline	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::crossbar_outline() {$/;"	f	class:MCPAT_Router
crossbar_tot	src/gpuwattch/cacti/highradix.h	/^    Component wire_tot, buff_tot, crossbar_tot, arb_tot;$/;"	m	class:HighRadix
crossbar_type	src/gpuwattch/XML_Parse.h	/^	char crossbar_type[20];$/;"	m	struct:__anon21
crosspoint_type	src/gpuwattch/XML_Parse.h	/^	char crosspoint_type[20];$/;"	m	struct:__anon21
cta_exists	common/preempt_overhead.h	/^  bool cta_exists(unsigned hw_cta_id) const$/;"	f	class:shader_preempt_overhead
cta_finishes_running	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::SM_info::cta_finishes_running(const unsigned shader_id, const unsigned cta_id)$/;"	f	class:DynamicScheduler::SM_info
cta_id	common/kernel_info_t.h	/^  dim3 cta_id;$/;"	m	class:timed_dim3
cta_non_idempotent	launcher/mk-sched/mk_scheduler.h	/^    std::vector<std::bitset<MAX_CTA_PER_SHADER> > cta_non_idempotent;$/;"	m	class:DynamicScheduler::SM_info
cta_passes_non_idempotent_region	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::SM_info::cta_passes_non_idempotent_region(const unsigned shader_id, const unsigned cta_id)$/;"	f	class:DynamicScheduler::SM_info
cta_per_shader	common/kernel_info_t.h	/^   std::vector<unsigned> cta_per_shader;$/;"	m	class:kernel_info_t
cta_preempt_overhead	common/preempt_overhead.h	/^  cta_preempt_overhead(unsigned _hw_cta_id, unsigned long long _throughput_overhead, unsigned long long _latency_overhead, kernel_info_t::PreemptionTechnique _preempt)$/;"	f	class:cta_preempt_overhead
cta_preempt_overhead	common/preempt_overhead.h	/^class cta_preempt_overhead {$/;"	c
cta_preempt_overhead_compare	common/preempt_overhead.h	/^  cta_preempt_overhead_compare() {}$/;"	f	class:cta_preempt_overhead_compare
cta_preempt_overhead_compare	common/preempt_overhead.h	/^class cta_preempt_overhead_compare {$/;"	c
cta_running	launcher/mk-sched/mk_scheduler.h	/^    std::vector<std::bitset<MAX_CTA_PER_SHADER> > cta_running;$/;"	m	class:DynamicScheduler::SM_info
cta_sort	common/preempt_overhead.h	/^typedef std::priority_queue<cta_preempt_overhead , std::vector<cta_preempt_overhead>, cta_preempt_overhead_compare> cta_sort;$/;"	t
cta_starts_running	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::SM_info::cta_starts_running(const unsigned shader_id, const unsigned cta_id)$/;"	f	class:DynamicScheduler::SM_info
cta_stat_context_t	common/cta_stat_context.cc	/^cta_stat_context_t::cta_stat_context_t()$/;"	f	class:cta_stat_context_t
cta_stat_context_t	common/cta_stat_context.h	/^class cta_stat_context_t {$/;"	c
cta_stat_saved	src/cuda-sim/cuda-sim.cc	/^std::map<unsigned, std::map<unsigned, cta_stat_context_t> > SimulationInitializer::cta_stat_saved;$/;"	m	class:SimulationInitializer	file:
cta_stat_saved	src/cuda-sim/cuda-sim.h	/^  static std::map<unsigned, std::map<unsigned, cta_stat_context_t> > cta_stat_saved;$/;"	m	class:SimulationInitializer
cta_stops_running	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::SM_info::cta_stops_running(const unsigned shader_id, const unsigned cta_id)$/;"	f	class:DynamicScheduler::SM_info
cta_to_warp_t	src/gpgpu-sim/shader.h	/^   typedef std::map<unsigned, warp_set_t >  cta_to_warp_t;$/;"	t	class:barrier_set_t
ctas_in_issued_order	src/gpgpu-sim/shader.h	/^    std::list<unsigned> ctas_in_issued_order;$/;"	m	class:shader_core_ctx
ctime	src/intersim2/flit.hpp	/^  int  ctime;$/;"	m	class:Flit
ctrl	src/ramulator_sim/Refresh.h	/^  Controller<T>* ctrl;$/;"	m	class:Refresh
ctrl	src/ramulator_sim/Scheduler.h	/^    Controller<T>* ctrl;$/;"	m	class:RowPolicy
ctrl	src/ramulator_sim/Scheduler.h	/^    Controller<T>* ctrl;$/;"	m	class:RowTable
ctrl	src/ramulator_sim/Scheduler.h	/^    Controller<T>* ctrl;$/;"	m	class:Scheduler
ctrl_write_mode	src/ramulator_sim/Refresh.h	/^  bool ctrl_write_mode = false;$/;"	m	class:Refresh
ctrls	src/ramulator_sim/Memory.h	/^    vector<Controller<T>*> ctrls;$/;"	m	class:Memory
cu_sets_t	src/gpgpu-sim/shader.h	/^   typedef std::map<unsigned \/* collector set *\/, std::vector<collector_unit_t> \/*collector sets*\/ > cu_sets_t;$/;"	t	class:opndcoll_rfu_t
cudaAddressModeClamp	src/abstract_hardware_model.h	/^   cudaAddressModeClamp$/;"	e	enum:cudaTextureAddressMode
cudaAddressModeWrap	src/abstract_hardware_model.h	/^   cudaAddressModeWrap,$/;"	e	enum:cudaTextureAddressMode
cudaArray	common/cuda_array.h	/^struct cudaArray {$/;"	s
cudaArray	libcuda/cuda_runtime_api.cc	/^struct cudaArray$/;"	s	file:
cudaBindTexture	launcher/simulator.cc	/^Simulator::cudaBindTexture(const struct textureReference* texref, const void *devPtr, const struct cudaChannelFormatDesc& desc, size_t size)$/;"	f	class:Simulator
cudaBindTexture	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaBindTexture(size_t *offset,$/;"	f
cudaBindTextureToArray	launcher/simulator.cc	/^Simulator::cudaBindTextureToArray(const struct textureReference *texref, const struct cudaArray *array)$/;"	f	class:Simulator
cudaBindTextureToArray	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaBindTextureToArray(const struct textureReference *texref, const struct cudaArray *array, const struct cudaChannelFormatDesc *desc)$/;"	f
cudaChannelFormatDesc	src/abstract_hardware_model.h	/^struct cudaChannelFormatDesc {$/;"	s
cudaChannelFormatKind	src/abstract_hardware_model.h	/^enum cudaChannelFormatKind {$/;"	g
cudaChannelFormatKindFloat	src/abstract_hardware_model.h	/^   cudaChannelFormatKindFloat$/;"	e	enum:cudaChannelFormatKind
cudaChannelFormatKindSigned	src/abstract_hardware_model.h	/^   cudaChannelFormatKindSigned,$/;"	e	enum:cudaChannelFormatKind
cudaChannelFormatKindUnsigned	src/abstract_hardware_model.h	/^   cudaChannelFormatKindUnsigned,$/;"	e	enum:cudaChannelFormatKind
cudaChooseDevice	launcher/simulator.cc	/^Simulator::cudaChooseDevice(const struct cudaDeviceProp *prop)$/;"	f	class:Simulator
cudaChooseDevice	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaChooseDevice(int *device, const struct cudaDeviceProp *prop)$/;"	f
cudaConfigureCall	launcher/simulator.cc	/^Simulator::cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem, cudaStream_t stream)$/;"	f	class:Simulator
cudaConfigureCall	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem, cudaStream_t stream)$/;"	f
cudaCreateChannelDesc	libcuda/cuda_runtime_api.cc	/^__host__ struct cudaChannelFormatDesc CUDARTAPI cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f)$/;"	f
cudaDeviceReset	libcuda/cuda_runtime_api.cc	/^cudaError_t cudaDeviceReset ( void ) {$/;"	f
cudaDeviceSynchronize	libcuda/cuda_runtime_api.cc	/^cudaError_t CUDARTAPI cudaDeviceSynchronize(void){$/;"	f
cudaDriverGetVersion	libcuda/cuda_runtime_api.cc	/^cudaError_t CUDARTAPI cudaDriverGetVersion(int *driverVersion)$/;"	f
cudaEventCreate	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaEventCreate(cudaEvent_t *event)$/;"	f
cudaEventCreateWithFlags	libcuda/cuda_runtime_api.cc	/^cudaError_t CUDARTAPI cudaEventCreateWithFlags(cudaEvent_t *event, int flags)$/;"	f
cudaEventDestroy	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaEventDestroy(cudaEvent_t event)$/;"	f
cudaEventElapsedTime	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end)$/;"	f
cudaEventQuery	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaEventQuery(cudaEvent_t event)$/;"	f
cudaEventRecord	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaEventRecord(cudaEvent_t event, cudaStream_t stream)$/;"	f
cudaEventSynchronize	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaEventSynchronize(cudaEvent_t event)$/;"	f
cudaFilterModeLinear	src/abstract_hardware_model.h	/^   cudaFilterModeLinear$/;"	e	enum:cudaTextureFilterMode
cudaFilterModePoint	src/abstract_hardware_model.h	/^   cudaFilterModePoint,$/;"	e	enum:cudaTextureFilterMode
cudaFree	launcher/simulator.cc	/^Simulator::cudaFree(void *devPtr)$/;"	f	class:Simulator
cudaFree	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaFree(void *devPtr)$/;"	f
cudaFreeArray	launcher/simulator.cc	/^Simulator::cudaFreeArray(struct cudaArray *array)$/;"	f	class:Simulator
cudaFreeArray	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaFreeArray(struct cudaArray *array)$/;"	f
cudaFreeHost	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaFreeHost(void *ptr)$/;"	f
cudaFuncGetAttributes	libcuda/cuda_runtime_api.cc	/^cudaError_t CUDARTAPI cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const char *hostFun )$/;"	f
cudaFuncSetCacheConfig	launcher/simulator.cc	/^Simulator::cudaFuncSetCacheConfig(const char * hostFunc, enum cudaFuncCache cacheConfig)$/;"	f	class:Simulator
cudaFuncSetCacheConfig	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaFuncSetCacheConfig(const char *func, enum cudaFuncCache  cacheConfig )$/;"	f
cudaGLMapBufferObject	libcuda/cuda_runtime_api.cc	/^cudaError_t cudaGLMapBufferObject(void** devPtr, GLuint bufferObj) $/;"	f
cudaGLRegisterBufferObject	libcuda/cuda_runtime_api.cc	/^cudaError_t cudaGLRegisterBufferObject(GLuint bufferObj)$/;"	f
cudaGLSetGLDevice	libcuda/cuda_runtime_api.cc	/^cudaError_t CUDARTAPI cudaGLSetGLDevice(int device)$/;"	f
cudaGLUnmapBufferObject	libcuda/cuda_runtime_api.cc	/^cudaError_t cudaGLUnmapBufferObject(GLuint bufferObj)$/;"	f
cudaGLUnregisterBufferObject	libcuda/cuda_runtime_api.cc	/^cudaError_t cudaGLUnregisterBufferObject(GLuint bufferObj) $/;"	f
cudaGetChannelDesc	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, const struct cudaArray *array)$/;"	f
cudaGetDevice	launcher/simulator.cc	/^Simulator::cudaGetDevice()$/;"	f	class:Simulator
cudaGetDevice	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaGetDevice(int *device)$/;"	f
cudaGetDeviceCount	launcher/simulator.cc	/^Simulator::cudaGetDeviceCount()$/;"	f	class:Simulator
cudaGetDeviceCount	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaGetDeviceCount(int *count)$/;"	f
cudaGetDeviceProperties	launcher/simulator.cc	/^Simulator::cudaGetDeviceProperties(int device)$/;"	f	class:Simulator
cudaGetDeviceProperties	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device)$/;"	f
cudaGetErrorString	libcuda/cuda_runtime_api.cc	/^__host__ const char* CUDARTAPI cudaGetErrorString(cudaError_t error)$/;"	f
cudaGetExportTable	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId)$/;"	f
cudaGetLastError	launcher/simulator.cc	/^Simulator::cudaGetLastError()$/;"	f	class:Simulator
cudaGetLastError	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaGetLastError(void)$/;"	f
cudaGetSymbolAddress	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaGetSymbolAddress(void **devPtr, const char *symbol)$/;"	f
cudaGetSymbolSize	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaGetSymbolSize(size_t *size, const char *symbol)$/;"	f
cudaGetTextureAlignmentOffset	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref)$/;"	f
cudaGetTextureReference	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaGetTextureReference(const struct textureReference **texref, const char *symbol)$/;"	f
cudaHostAlloc	libcuda/cuda_runtime_api.cc	/^cudaError_t CUDARTAPI cudaHostAlloc(void **pHost,  size_t bytes, unsigned int flags)$/;"	f
cudaHostGetDevicePointer	libcuda/cuda_runtime_api.cc	/^cudaError_t CUDARTAPI cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags)$/;"	f
cudaLaunch	launcher/simulator.cc	/^Simulator::cudaLaunch( const char *hostFun, ChildProcess* parent )$/;"	f	class:Simulator
cudaLaunch	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaLaunch( const char *hostFun )$/;"	f
cudaMalloc	launcher/simulator.cc	/^Simulator::cudaMalloc(size_t size)$/;"	f	class:Simulator
cudaMalloc	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMalloc(void **devPtr, size_t size)$/;"	f
cudaMallocArray	launcher/simulator.cc	/^Simulator::cudaMallocArray(size_t size)$/;"	f	class:Simulator
cudaMallocArray	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMallocArray(struct cudaArray **array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height __dv(1))$/;"	f
cudaMallocHost	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMallocHost(void **ptr, size_t size)$/;"	f
cudaMallocPitch	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height)$/;"	f
cudaMemcpy	launcher/simulator.cc	/^Simulator::cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)$/;"	f	class:Simulator
cudaMemcpy	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind)$/;"	f
cudaMemcpy2D	launcher/simulator.cc	/^Simulator::cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind)$/;"	f	class:Simulator
cudaMemcpy2D	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind)$/;"	f
cudaMemcpy2DArrayToArray	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemcpy2DArrayToArray(struct cudaArray *dst, size_t wOffsetDst, size_t hOffsetDst, const struct cudaArray *src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind __dv(cudaMemcpyDeviceToDevice))$/;"	f
cudaMemcpy2DAsync	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream)$/;"	f
cudaMemcpy2DFromArray	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemcpy2DFromArray(void *dst, size_t dpitch, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind)$/;"	f
cudaMemcpy2DFromArrayAsync	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream)$/;"	f
cudaMemcpy2DToArray	launcher/simulator.cc	/^Simulator::cudaMemcpy2DToArray(void *devPtr, const void *hostPtr, enum cudaMemcpyKind kind, size_t size)$/;"	f	class:Simulator
cudaMemcpy2DToArray	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemcpy2DToArray(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind)$/;"	f
cudaMemcpy2DToArrayAsync	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemcpy2DToArrayAsync(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream)$/;"	f
cudaMemcpyArrayToArray	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemcpyArrayToArray(struct cudaArray *dst, size_t wOffsetDst, size_t hOffsetDst, const struct cudaArray *src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind __dv(cudaMemcpyDeviceToDevice))$/;"	f
cudaMemcpyAsync	launcher/simulator.cc	/^Simulator::cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)$/;"	f	class:Simulator
cudaMemcpyAsync	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)$/;"	f
cudaMemcpyFromArray	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemcpyFromArray(void *dst, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind)$/;"	f
cudaMemcpyFromArrayAsync	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemcpyFromArrayAsync(void *dst, const struct cudaArray *src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)$/;"	f
cudaMemcpyFromSymbol	launcher/simulator.cc	/^Simulator::cudaMemcpyFromSymbol(void *dst, const char *symbol, size_t count, size_t offset)$/;"	f	class:Simulator
cudaMemcpyFromSymbol	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemcpyFromSymbol(void *dst, const char *symbol, size_t count, size_t offset __dv(0), enum cudaMemcpyKind kind __dv(cudaMemcpyDeviceToHost))$/;"	f
cudaMemcpyToArray	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemcpyToArray(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind)$/;"	f
cudaMemcpyToArrayAsync	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemcpyToArrayAsync(struct cudaArray *dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream)$/;"	f
cudaMemcpyToSymbol	launcher/simulator.cc	/^Simulator::cudaMemcpyToSymbol(const char *symbol, const void *src, size_t count, size_t offset)$/;"	f	class:Simulator
cudaMemcpyToSymbol	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemcpyToSymbol(const char *symbol, const void *src, size_t count, size_t offset __dv(0), enum cudaMemcpyKind kind __dv(cudaMemcpyHostToDevice))$/;"	f
cudaMemset	launcher/simulator.cc	/^Simulator::cudaMemset(void *mem, int c, size_t count)$/;"	f	class:Simulator
cudaMemset	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemset(void *mem, int c, size_t count)$/;"	f
cudaMemset2D	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaMemset2D(void *mem, size_t pitch, int c, size_t width, size_t height)$/;"	f
cudaReadModeElementType	src/abstract_hardware_model.h	/^   cudaReadModeElementType,$/;"	e	enum:cudaTextureReadMode
cudaReadModeNormalizedFloat	src/abstract_hardware_model.h	/^   cudaReadModeNormalizedFloat$/;"	e	enum:cudaTextureReadMode
cudaRuntimeGetVersion	libcuda/cuda_runtime_api.cc	/^cudaError_t CUDARTAPI cudaRuntimeGetVersion(int *runtimeVersion)$/;"	f
cudaSetDevice	launcher/simulator.cc	/^Simulator::cudaSetDevice(int device)$/;"	f	class:Simulator
cudaSetDevice	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaSetDevice(int device)$/;"	f
cudaSetDeviceFlags	libcuda/cuda_runtime_api.cc	/^cudaError_t CUDARTAPI cudaSetDeviceFlags( int flags )$/;"	f
cudaSetValidDevices	libcuda/cuda_runtime_api.cc	/^cudaError_t CUDARTAPI cudaSetValidDevices(int *device_arr, int len)$/;"	f
cudaSetupArgument	launcher/simulator.cc	/^Simulator::cudaSetupArgument(const void *arg, size_t size, size_t offset)$/;"	f	class:Simulator
cudaSetupArgument	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaSetupArgument(const void *arg, size_t size, size_t offset)$/;"	f
cudaStreamCreate	launcher/simulator.cc	/^Simulator::cudaStreamCreate()$/;"	f	class:Simulator
cudaStreamCreate	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaStreamCreate(cudaStream_t *stream)$/;"	f
cudaStreamDestroy	launcher/simulator.cc	/^Simulator::cudaStreamDestroy(cudaStream_t stream)$/;"	f	class:Simulator
cudaStreamDestroy	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaStreamDestroy(cudaStream_t stream)$/;"	f
cudaStreamQuery	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaStreamQuery(cudaStream_t stream)$/;"	f
cudaStreamSynchronize	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaStreamSynchronize(cudaStream_t stream)$/;"	f
cudaTextureAddressMode	src/abstract_hardware_model.h	/^enum cudaTextureAddressMode {$/;"	g
cudaTextureFilterMode	src/abstract_hardware_model.h	/^enum cudaTextureFilterMode {$/;"	g
cudaTextureReadMode	src/abstract_hardware_model.h	/^enum cudaTextureReadMode {$/;"	g
cudaTextureReferences	launcher/child_process.h	/^  std::map<const void*, struct textureReference*> cudaTextureReferences;$/;"	m	class:ChildProcess
cudaThreadExit	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaThreadExit(void)$/;"	f
cudaThreadSynchronize	launcher/simulator.cc	/^Simulator::cudaThreadSynchronize(void)$/;"	f	class:Simulator
cudaThreadSynchronize	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaThreadSynchronize(void)$/;"	f
cudaUnbindTexture	libcuda/cuda_runtime_api.cc	/^__host__ cudaError_t CUDARTAPI cudaUnbindTexture(const struct textureReference *texref)$/;"	f
cudaVarNames	launcher/child_process.h	/^  std::map<const void*, char*> cudaVarNames;$/;"	m	class:ChildProcess
cudaWGLGetDevice	libcuda/cuda_runtime_api.cc	/^cudaError_t CUDARTAPI cudaWGLGetDevice(int *device, HGPUNV hGpu)$/;"	f
cuda_launch_stack	launcher/simulator.h	/^  std::list<kernel_config>                    cuda_launch_stack;$/;"	m	class:Simulator
cuda_math	libcuda/cuda_runtime_api.cc	/^namespace cuda_math {$/;"	n	file:
cuda_math	src/cuda-sim/cuda-math.h	/^namespace cuda_math {$/;"	n
cuda_not_implemented	launcher/simulator.cc	/^cuda_not_implemented(const char* func, unsigned line)$/;"	f	file:
cuda_not_implemented	libcuda/cuda_runtime_api.cc	/^static void cuda_not_implemented( const char* func, unsigned line )$/;"	f	file:
cuobjdumpELFSection	libcuda/cuda_runtime_api.cc	/^    cuobjdumpELFSection() {}$/;"	f	class:cuobjdumpELFSection
cuobjdumpELFSection	libcuda/cuda_runtime_api.cc	/^class cuobjdumpELFSection : public cuobjdumpSection$/;"	c	file:
cuobjdumpInit	libcuda/cuda_runtime_api.cc	/^void cuobjdumpInit(unsigned forced_max_capability){$/;"	f
cuobjdumpPTXSection	libcuda/cuda_runtime_api.cc	/^    cuobjdumpPTXSection(){$/;"	f	class:cuobjdumpPTXSection
cuobjdumpPTXSection	libcuda/cuda_runtime_api.cc	/^class cuobjdumpPTXSection : public cuobjdumpSection$/;"	c	file:
cuobjdumpRegisterFatBinary	libcuda/cuda_runtime_api.cc	/^void cuobjdumpRegisterFatBinary(unsigned int handle, char* filename){$/;"	f
cuobjdumpSection	libcuda/cuda_runtime_api.cc	/^    cuobjdumpSection() {$/;"	f	class:cuobjdumpSection
cuobjdumpSection	libcuda/cuda_runtime_api.cc	/^class cuobjdumpSection {$/;"	c	file:
cuobjdumpSectionList	libcuda/cuda_runtime_api.cc	/^std::list<cuobjdumpSection*> cuobjdumpSectionList;$/;"	v
cuobjdumpSectionType	libcuda/cuda_runtime_api.cc	/^enum cuobjdumpSectionType {$/;"	g	file:
curTick	src/ramulator_sim/StatType.cpp	/^Tick curTick = 0;$/;"	m	namespace:Stats_Ram	file:
cur_clk	src/ramulator_sim/DRAM.h	/^    long cur_clk = 0;$/;"	m	class:DRAM
cur_serving_requests	src/ramulator_sim/DRAM.h	/^    int cur_serving_requests = 0;$/;"	m	class:DRAM
current	src/ramulator_sim/StatType.h	/^  Counter current;$/;"	m	class:Stats_Ram::Average
current_speed	src/ramulator_sim/ALDRAM.h	/^    Speed current_speed;$/;"	m	class:ALDRAM
cut_through	src/intersim2/routers/chaos_router.hpp	/^    cut_through,   \/\/    >***>$/;"	e	enum:ChaosRouter::eQState
cvec	src/ramulator_sim/StatType.h	/^  VCounter cvec;$/;"	m	class:Stats_Ram::Distribution
cvec	src/ramulator_sim/StatType.h	/^  VCounter cvec;$/;"	m	class:Stats_Ram::Histogram
cvt_impl	src/cuda-sim/instructions.cc	/^void cvt_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
cvta_impl	src/cuda-sim/instructions.cc	/^void cvta_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
cycle	src/gpgpu-sim/gpu-cache.cc	/^void baseline_cache::cycle(){$/;"	f	class:baseline_cache
cycle	src/gpgpu-sim/gpu-cache.cc	/^void tex_cache::cycle(){$/;"	f	class:tex_cache
cycle	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::cycle()$/;"	f	class:gpgpu_sim
cycle	src/gpgpu-sim/shader.cc	/^void ldst_unit::cycle()$/;"	f	class:ldst_unit
cycle	src/gpgpu-sim/shader.cc	/^void scheduler_unit::cycle()$/;"	f	class:scheduler_unit
cycle	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::cycle()$/;"	f	class:shader_core_ctx
cycle	src/gpgpu-sim/shader.h	/^    virtual void cycle()$/;"	f	class:pipelined_simd_unit
cycle	src/intersim2/power/buffer_monitor.cpp	/^void BufferMonitor::cycle() {$/;"	f	class:BufferMonitor
cycle	src/intersim2/power/switch_monitor.cpp	/^void SwitchMonitor::cycle() {$/;"	f	class:SwitchMonitor
cycle	src/ramulator_sim/gpu_wrapper.cpp	/^void GpuWrapper::cycle()$/;"	f	class:GpuWrapper
cycle_time	src/gpuwattch/cacti/Ucache.h	/^  double cycle_time;$/;"	m	struct:solution
cycle_time	src/gpuwattch/cacti/cacti_interface.h	/^    double cycle_time;$/;"	m	class:uca_org_t
cycle_time	src/gpuwattch/cacti/cacti_interface.h	/^  double cycle_time;$/;"	m	class:mem_array
cycle_time	src/gpuwattch/cacti/cacti_interface.h	/^  double cycle_time;$/;"	m	struct:__anon5
cycle_time	src/gpuwattch/cacti/component.h	/^    double cycle_time;$/;"	m	class:Component
cycle_time	src/gpuwattch/cacti/router.h	/^    double cycle_time, max_cyc;$/;"	m	class:MCPAT_Router
cycle_time_dev	src/gpuwattch/cacti/cacti_interface.h	/^        cycle_time_dev, area_dev;$/;"	m	class:InputParameter
cycle_time_dev_nuca	src/gpuwattch/cacti/cacti_interface.h	/^        cycle_time_dev_nuca, area_dev_nuca;$/;"	m	class:InputParameter
cycle_time_wt	src/gpuwattch/cacti/cacti_interface.h	/^        cycle_time_wt, area_wt;$/;"	m	class:InputParameter
cycle_time_wt_nuca	src/gpuwattch/cacti/cacti_interface.h	/^        cycle_time_wt_nuca, area_wt_nuca;$/;"	m	class:InputParameter
cycles	src/abstract_hardware_model.h	/^    unsigned cycles; \/\/ used for implementing initiation interval delay$/;"	m	class:warp_inst_t
cycles	src/gpgpu-sim/gpu-sim.h	/^    unsigned long long cycles;$/;"	m	struct:KAIN_Power_Gate_Number_Cycles
cycles	src/intersim2/vc.hpp	/^    int cycles;$/;"	m	struct:VC::state_info_t
d	src/gpuwattch/xmlParser.h	/^      XMLNodeData *d;$/;"	m	struct:XMLNode
d2d	src/cuda-sim/instructions.cc	/^ptx_reg_t d2d( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_mode, int saturation_mode )$/;"	f
d2x	src/cuda-sim/instructions.cc	/^ptx_reg_t d2x( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_mode, int saturation_mode )$/;"	f
data	src/intersim/flit.hpp	/^   void* data;$/;"	m	struct:Flit
data	src/intersim/interconnect_interface.h	/^   void *data;$/;"	m	struct:glue_buf
data	src/intersim2/flit.hpp	/^  void* data ;$/;"	m	class:Flit
data	src/ramulator_sim/StatType.h	/^  std::vector<Element> data;$/;"	m	class:Stats_Ram::VectorBase
dataBusWidth	src/gpuwattch/basic_components.h	/^    int	   llcBlockSize, dataBusWidth, addressBusWidth;$/;"	m	class:MCParam
data_arr	src/gpuwattch/cacti/Ucache.h	/^  list<mem_array *> data_arr;$/;"	m	struct:calc_time_mt_wrapper_struct
data_arr_peri_global_tech_type	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int data_arr_peri_global_tech_type;$/;"	m	class:InputParameter
data_arr_ram_cell_tech_type	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int data_arr_ram_cell_tech_type;$/;"	m	class:InputParameter
data_array	src/gpuwattch/cacti/cacti_interface.h	/^    results_mem_array data_array;$/;"	m	class:uca_org_t
data_array2	src/gpuwattch/cacti/cacti_interface.h	/^    mem_array * data_array2;$/;"	m	class:uca_org_t
data_array_index	src/gpuwattch/cacti/Ucache.h	/^  int    data_array_index;$/;"	m	struct:solution
data_array_iter	src/gpuwattch/cacti/Ucache.h	/^  list<mem_array *>::iterator data_array_iter;$/;"	m	struct:solution
data_assoc	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int data_assoc;$/;"	m	class:InputParameter
data_block	src/gpgpu-sim/gpu-cache.h	/^        data_block() { m_valid = false;}$/;"	f	struct:tex_cache::data_block
data_block	src/gpgpu-sim/gpu-cache.h	/^    struct data_block {$/;"	s	class:tex_cache
data_cache	src/gpgpu-sim/gpu-cache.h	/^    data_cache( const char *name, cache_config &config,$/;"	f	class:data_cache
data_cache	src/gpgpu-sim/gpu-cache.h	/^    data_cache( const char *name,$/;"	f	class:data_cache
data_cache	src/gpgpu-sim/gpu-cache.h	/^class data_cache : public baseline_cache {$/;"	c
data_command_freq_ratio	src/gpgpu-sim/gpu-sim.h	/^   unsigned data_command_freq_ratio; \/\/ frequency ratio between DRAM data bus and command bus (2 for GDDR3, 4 for GDDR5)$/;"	m	struct:memory_config
data_in_bits	src/gpuwattch/cacti/htree2.h	/^    int add_bits, data_in_bits,search_data_in_bits,data_out_bits,  search_data_out_bits;$/;"	m	class:Htree2
data_num_c_subarray	src/gpuwattch/cacti/parameter.h	/^    int data_num_c_subarray;$/;"	m	class:DynamicParameter
data_num_r_subarray	src/gpuwattch/cacti/parameter.h	/^    int data_num_r_subarray;$/;"	m	class:DynamicParameter
data_out_bits	src/gpuwattch/cacti/htree2.h	/^    int add_bits, data_in_bits,search_data_in_bits,data_out_bits,  search_data_out_bits;$/;"	m	class:Htree2
data_port_busy_cycles	src/gpgpu-sim/gpu-cache.h	/^    unsigned long long data_port_busy_cycles; $/;"	m	struct:cache_sub_stats
data_port_free	src/gpgpu-sim/gpu-cache.cc	/^bool baseline_cache::bandwidth_management::data_port_free() const$/;"	f	class:baseline_cache::bandwidth_management
data_port_free	src/gpgpu-sim/gpu-cache.h	/^    bool data_port_free() const { return m_bandwidth_management.data_port_free(); } $/;"	f	class:baseline_cache
data_port_free	src/gpgpu-sim/gpu-cache.h	/^    bool data_port_free() const { return true; }$/;"	f	class:tex_cache
data_res	src/gpuwattch/cacti/Ucache.h	/^  min_values_t * data_res;$/;"	m	struct:calc_time_mt_wrapper_struct
data_size	src/abstract_hardware_model.h	/^    unsigned data_size; \/\/ what is the size of the word being operated on?$/;"	m	class:inst_t
data_width	src/gpuwattch/arch_const.h	/^const int data_width			=	64;$/;"	v
data_width	src/gpuwattch/interconnect.h	/^    int data_width;$/;"	m	class:interconnect
databus_width	src/gpuwattch/XML_Parse.h	/^	int databus_width;$/;"	m	struct:__anon23
datasheet_operating_clock	src/gpuwattch/basic_components.h	/^	int datasheet_operating_clock; \/\/ this is specified by DATA SHEET. This is NOT the actual DRAM clock$/;"	m	class:DRAMParam
datasheet_vdd	src/gpuwattch/basic_components.h	/^	double datasheet_vdd;$/;"	m	class:DRAMParam
datatype2size	src/cuda-sim/cuda-sim.cc	/^static unsigned datatype2size( unsigned data_type )$/;"	f	file:
dbgout	common/kernel_info_t.cc	/^static std::ofstream dbgout;$/;"	v	file:
dbgout	launcher/mk-sched/mk_scheduler.cc	/^static std::ofstream dbgout;$/;"	v	file:
dc	src/gpuwattch/sharedcache.h	/^    DataCache dc;\/\/Shared cache$/;"	m	class:CCdir
dcache	src/gpuwattch/XML_Parse.h	/^	dcache_systemcore dcache;$/;"	m	struct:__anon15
dcache	src/gpuwattch/core.h	/^	DataCache dcache;$/;"	m	class:LoadStoreU
dcache_config	src/gpuwattch/XML_Parse.h	/^	double dcache_config[20];$/;"	m	struct:__anon13
dcache_systemcore	src/gpuwattch/XML_Parse.h	/^} dcache_systemcore;$/;"	t	typeref:struct:__anon13
dcache_write_buffers	src/gpuwattch/arch_const.h	/^const int dcache_write_buffers=8;$/;"	v
dcacheassoc	src/gpuwattch/arch_const.h	/^const int dcacheassoc=4;$/;"	v
dcacheblocksize	src/gpuwattch/arch_const.h	/^const int dcacheblocksize=32;$/;"	v
dcachesize	src/gpuwattch/arch_const.h	/^const int dcachesize=32768;$/;"	v
deactivate_threads	src/gpgpu-sim/shader.cc	/^shader_core_ctx::deactivate_threads(const unsigned start_thread_id, const unsigned end_thread_id)$/;"	f	class:shader_core_ctx
deadlock_check	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::deadlock_check()$/;"	f	class:gpgpu_sim
deallocate_barrier	src/gpgpu-sim/shader.cc	/^void barrier_set_t::deallocate_barrier( unsigned cta_id )$/;"	f	class:barrier_set_t
debug	src/ramulator_sim/Cache.cpp	4;"	d	file:
debug	src/ramulator_sim/Cache.cpp	6;"	d	file:
debugFile	launcher/simulator.cc	/^static FILE* debugFile = NULL;$/;"	v	file:
dec	launcher/stats/stats.h	/^  virtual void dec(uint64_t val) {$/;"	f	class:Stats::AverageScalarStorage
dec	launcher/stats/stats.h	/^  virtual void dec(uint64_t val) {$/;"	f	class:Stats::CountScalarStorage
dec	launcher/stats/stats.h	/^  virtual void dec(uint64_t val) {$/;"	f	class:Stats::MaxScalarStorage
dec	src/gpuwattch/cacti/decoder.h	/^  Decoder   * dec;$/;"	m	class:PredecBlkDrv
dec	src/gpuwattch/cacti/decoder.h	/^  Decoder * dec;$/;"	m	class:PredecBlk
dec	src/ramulator_sim/StatType.h	/^  void dec(Counter val) {$/;"	f	class:Stats_Ram::Average
dec_SM_for_kernel	launcher/mk-sched/even_scheduler.cc	/^EvenScheduler::dec_SM_for_kernel(kernel_info_t* kernel, unsigned linear_shader_id)$/;"	f	class:EvenScheduler
dec_SM_for_kernel	launcher/mk-sched/fixed_scheduler.cc	/^FixedScheduler::dec_SM_for_kernel(kernel_info_t* kernel, unsigned linear_shader_id)$/;"	f	class:FixedScheduler
dec_SM_for_kernel	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::dec_SM_for_kernel(kernel_info_t* kernel, unsigned linear_shader_id)$/;"	f	class:DynamicScheduler
dec_fat_binary	launcher/child_process.h	/^  void dec_fat_binary()           { --fat_binary_count; }$/;"	f	class:ChildProcess
dec_inst_in_pipeline	common/shd_warp_t.h	/^    void dec_inst_in_pipeline()$/;"	f	class:shd_warp_t
dec_inst_in_pipeline	common/shd_warp_t.h	/^    void dec_inst_in_pipeline(const unsigned num_insts)$/;"	f	class:shd_warp_t
dec_inst_in_warp	src/gpgpu-sim/shader.h	/^    void dec_inst_in_warp( unsigned warp_id ) { m_warp[warp_id].dec_inst_in_pipeline(); } \/\/ also used in writeback()$/;"	f	class:shader_core_ctx
dec_n_atomic	common/shd_warp_t.h	/^    void dec_n_atomic(unsigned n) { m_n_atomic-=n; }$/;"	f	class:shd_warp_t
dec_num_simulated_insts	common/kernel_info_t.cc	/^kernel_info_t::dec_num_simulated_insts(unsigned wasted_insts)$/;"	f	class:kernel_info_t
dec_num_simulated_insts	launcher/child_process.cc	/^ChildProcess::dec_num_simulated_insts(unsigned wasted_insts)$/;"	f	class:ChildProcess
dec_running	common/kernel_info_t.h	/^   void dec_running()$/;"	f	class:kernel_info_t
dec_running_ctas	common/kernel_info_t.h	/^   void dec_running_ctas() { assert(m_running_ctas > 0); --m_running_ctas; }$/;"	f	class:kernel_info_t
dec_scheduled_cta	common/kernel_info_t.cc	/^kernel_info_t::dec_scheduled_cta(const unsigned shader_id)$/;"	f	class:kernel_info_t
dec_store_req	common/shd_warp_t.h	/^    void dec_store_req() $/;"	f	class:shd_warp_t
decl_location	src/cuda-sim/ptx_ir.h	/^   const std::string &decl_location() const { return m_decl_location;} $/;"	f	class:symbol
decode	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::decode()$/;"	f	class:shader_core_ctx
decode	src/gpuwattch/xmlParser.cc	/^unsigned char *XMLParserBase64Tool::decode(XMLCSTR data, int *outlen, XMLError *xe)$/;"	f	class:XMLParserBase64Tool
decode	src/gpuwattch/xmlParser.cc	/^unsigned char XMLParserBase64Tool::decode(XMLCSTR data, unsigned char *buf, int len, XMLError *xe)$/;"	f	class:XMLParserBase64Tool
decode	src/ramulator_sim/DRAM.h	/^typename T::Command DRAM<T>::decode(typename T::Command cmd, const int* addr)$/;"	f	class:DRAM
decodeSize	src/gpuwattch/xmlParser.cc	/^unsigned int XMLParserBase64Tool::decodeSize(XMLCSTR data,XMLError *xe)$/;"	f	class:XMLParserBase64Tool
decodeW	src/gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_decodeW;$/;"	m	class:CoreDynParam
decodeWidth	src/gpuwattch/arch_const.h	/^const int decodeWidth=8;$/;"	v
decode_space	src/cuda-sim/instructions.cc	/^void decode_space( memory_space_t &space, ptx_thread_info *thread, const operand_info &op, memory_space *&mem, addr_t &addr)$/;"	f
decode_token	src/cuda-sim/ptx_parser.cc	/^const char *decode_token( int type )$/;"	f
decode_width	src/gpuwattch/XML_Parse.h	/^	int decode_width;$/;"	m	struct:__anon15
decoded_stream_buffer_size	src/gpuwattch/XML_Parse.h	/^	int decoded_stream_buffer_size;$/;"	m	struct:__anon15
decrement_atomic_count	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::decrement_atomic_count( unsigned wid, unsigned n )$/;"	f	class:shader_core_ctx
deepCopy	src/gpuwattch/xmlParser.cc	/^XMLNode XMLNode::deepCopy() const$/;"	f	class:XMLNode
deg_bl_muxing	src/gpuwattch/cacti/cacti_interface.h	/^  int    deg_bl_muxing;$/;"	m	class:mem_array
deg_bl_muxing	src/gpuwattch/cacti/cacti_interface.h	/^  int deg_bl_muxing;$/;"	m	struct:__anon5
deg_bl_muxing	src/gpuwattch/cacti/mat.h	/^    int      deg_bl_muxing;$/;"	m	class:Mat
deg_bl_muxing	src/gpuwattch/cacti/parameter.h	/^    int deg_bl_muxing;$/;"	m	class:DynamicParameter
deg_senseamp_muxing_non_associativity	src/gpuwattch/cacti/parameter.h	/^    int deg_senseamp_muxing_non_associativity;$/;"	m	class:DynamicParameter
delay	src/gpuwattch/cacti/component.h	/^    double delay;$/;"	m	class:Component
delay	src/gpuwattch/cacti/decoder.h	/^    double delay;$/;"	m	class:Decoder
delay	src/gpuwattch/cacti/decoder.h	/^  double delay;$/;"	m	class:Driver
delay_addr_din_horizontal_htree	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_addr_din_horizontal_htree;$/;"	m	struct:__anon5
delay_addr_din_vertical_htree	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_addr_din_vertical_htree;$/;"	m	struct:__anon5
delay_array_to_sa_mux_lev_1_decoder	src/gpuwattch/cacti/uca.h	/^    double delay_array_to_sa_mux_lev_1_decoder;$/;"	m	class:UCA
delay_array_to_sa_mux_lev_2_decoder	src/gpuwattch/cacti/uca.h	/^    double delay_array_to_sa_mux_lev_2_decoder;$/;"	m	class:UCA
delay_before_decoder	src/gpuwattch/cacti/mat.h	/^    double   delay_before_decoder;$/;"	m	class:Mat
delay_before_subarray_output_driver	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_before_subarray_output_driver;$/;"	m	class:mem_array
delay_before_subarray_output_driver	src/gpuwattch/cacti/uca.h	/^    double delay_before_subarray_output_driver;$/;"	m	class:UCA
delay_bit_mux_decoder	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_bit_mux_decoder;$/;"	m	struct:__anon5
delay_bit_mux_predecode_driver_and_block	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_bit_mux_predecode_driver_and_block;$/;"	m	struct:__anon5
delay_bitline	src/gpuwattch/cacti/mat.h	/^    double   delay_bitline;$/;"	m	class:Mat
delay_bitlines	src/gpuwattch/cacti/cacti_interface.h	/^         delay_bitlines,$/;"	m	class:mem_array
delay_bitlines	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_bitlines;$/;"	m	struct:__anon5
delay_bl_restore	src/gpuwattch/cacti/mat.h	/^    double   delay_bl_restore;$/;"	m	class:Mat
delay_cam	src/gpuwattch/cacti/mat.h	/^    double   delay_fa_tag, delay_cam;$/;"	m	class:Mat
delay_cam_ml_reset	src/gpuwattch/cacti/mat.h	/^    double   delay_cam_ml_reset;$/;"	m	class:Mat
delay_cam_sl_restore	src/gpuwattch/cacti/mat.h	/^    double   delay_cam_sl_restore;$/;"	m	class:Mat
delay_comparator	src/gpuwattch/cacti/cacti_interface.h	/^         delay_comparator,$/;"	m	class:mem_array
delay_comparator	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_comparator;$/;"	m	struct:__anon5
delay_comparator	src/gpuwattch/cacti/mat.h	/^    double   delay_comparator;$/;"	m	class:Mat
delay_crossbar	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_crossbar;$/;"	m	struct:__anon5
delay_dev	src/gpuwattch/cacti/cacti_interface.h	/^    int delay_dev, dynamic_power_dev, leakage_power_dev,$/;"	m	class:InputParameter
delay_dev_nuca	src/gpuwattch/cacti/cacti_interface.h	/^    int delay_dev_nuca, dynamic_power_dev_nuca, leakage_power_dev_nuca,$/;"	m	class:InputParameter
delay_dout_horizontal_htree	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_dout_horizontal_htree;$/;"	m	struct:__anon5
delay_dout_htree	src/gpuwattch/cacti/cacti_interface.h	/^         delay_dout_htree,$/;"	m	class:mem_array
delay_dout_vertical_htree	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_dout_vertical_htree;$/;"	m	struct:__anon5
delay_fa_ram_wl	src/gpuwattch/cacti/mat.h	/^    double   delay_fa_ram_wl;$/;"	m	class:Mat
delay_fa_tag	src/gpuwattch/cacti/mat.h	/^    double   delay_fa_tag, delay_cam;$/;"	m	class:Mat
delay_from_subarray_out_drv_to_out	src/gpuwattch/cacti/uca.h	/^    double delay_from_subarray_out_drv_to_out;$/;"	m	class:UCA
delay_from_subarray_output_driver_to_output	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_from_subarray_output_driver_to_output;$/;"	m	class:mem_array
delay_hit_miss	src/gpuwattch/cacti/mat.h	/^    double   delay_hit_miss;$/;"	m	class:Mat
delay_hit_miss_reset	src/gpuwattch/cacti/mat.h	/^    double   delay_hit_miss_reset;$/;"	m	class:Mat
delay_input_htree	src/gpuwattch/cacti/cacti_interface.h	/^         delay_input_htree,$/;"	m	class:mem_array
delay_input_htree	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_input_htree;$/;"	m	struct:__anon5
delay_inside_mat	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_inside_mat;$/;"	m	struct:__anon5
delay_matchchline	src/gpuwattch/cacti/mat.h	/^    double   delay_matchchline;$/;"	m	class:Mat
delay_matchlines	src/gpuwattch/cacti/cacti_interface.h	/^         delay_matchlines;$/;"	m	class:mem_array
delay_nand2_path	src/gpuwattch/cacti/decoder.h	/^  double delay_nand2_path;$/;"	m	class:PredecBlk
delay_nand2_path	src/gpuwattch/cacti/decoder.h	/^  double delay_nand2_path;$/;"	m	class:PredecBlkDrv
delay_nand3_path	src/gpuwattch/cacti/decoder.h	/^  double delay_nand3_path;$/;"	m	class:PredecBlk
delay_nand3_path	src/gpuwattch/cacti/decoder.h	/^  double delay_nand3_path;$/;"	m	class:PredecBlkDrv
delay_optimal_wire	src/gpuwattch/cacti/wire.cc	/^void Wire::delay_optimal_wire ()$/;"	f	class:Wire
delay_output_htree	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_output_htree;$/;"	m	struct:__anon5
delay_reply_network	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_reply_network;$/;"	m	struct:__anon5
delay_request_network	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_request_network;$/;"	m	struct:__anon5
delay_route_to_bank	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_route_to_bank,$/;"	m	class:mem_array
delay_route_to_bank	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_route_to_bank;$/;"	m	struct:__anon5
delay_row_decoder	src/gpuwattch/cacti/cacti_interface.h	/^         delay_row_decoder,$/;"	m	class:mem_array
delay_row_decoder	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_row_decoder;$/;"	m	struct:__anon5
delay_row_predecode_driver_and_block	src/gpuwattch/cacti/cacti_interface.h	/^         delay_row_predecode_driver_and_block,$/;"	m	class:mem_array
delay_row_predecode_driver_and_block	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_row_predecode_driver_and_block;$/;"	m	struct:__anon5
delay_sa	src/gpuwattch/cacti/mat.h	/^    double   delay_sa;$/;"	m	class:Mat
delay_searchline	src/gpuwattch/cacti/mat.h	/^    double   delay_searchline;$/;"	m	class:Mat
delay_sense_amp	src/gpuwattch/cacti/cacti_interface.h	/^         delay_sense_amp,$/;"	m	class:mem_array
delay_sense_amp	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_sense_amp;$/;"	m	struct:__anon5
delay_senseamp_mux_decoder	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_senseamp_mux_decoder;$/;"	m	class:mem_array
delay_senseamp_mux_lev_1_decoder	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_senseamp_mux_lev_1_decoder;$/;"	m	struct:__anon5
delay_senseamp_mux_lev_1_predecode_driver_and_block	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_senseamp_mux_lev_1_predecode_driver_and_block;$/;"	m	struct:__anon5
delay_senseamp_mux_lev_2_decoder	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_senseamp_mux_lev_2_decoder;$/;"	m	struct:__anon5
delay_senseamp_mux_lev_2_predecode_driver_and_block	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_senseamp_mux_lev_2_predecode_driver_and_block;$/;"	m	struct:__anon5
delay_subarray_out_drv	src/gpuwattch/cacti/mat.h	/^    double   delay_subarray_out_drv;$/;"	m	class:Mat
delay_subarray_out_drv_htree	src/gpuwattch/cacti/mat.h	/^    double   delay_subarray_out_drv_htree;$/;"	m	class:Mat
delay_subarray_output_driver	src/gpuwattch/cacti/cacti_interface.h	/^         delay_subarray_output_driver,$/;"	m	class:mem_array
delay_subarray_output_driver	src/gpuwattch/cacti/cacti_interface.h	/^  double delay_subarray_output_driver;$/;"	m	struct:__anon5
delay_wl_reset	src/gpuwattch/cacti/mat.h	/^    double   delay_wl_reset;$/;"	m	class:Mat
delay_writeback	src/gpuwattch/cacti/mat.h	/^    double   delay_writeback;$/;"	m	class:Mat
delay_wt	src/gpuwattch/cacti/cacti_interface.h	/^    int delay_wt, dynamic_power_wt, leakage_power_wt,$/;"	m	class:InputParameter
delay_wt_nuca	src/gpuwattch/cacti/cacti_interface.h	/^    int delay_wt_nuca, dynamic_power_wt_nuca, leakage_power_wt_nuca,$/;"	m	class:InputParameter
deleteAttribute	src/gpuwattch/xmlParser.cc	/^void XMLNode::deleteAttribute(XMLAttribute *a){ if (a) deleteAttribute(a->lpszName); }$/;"	f	class:XMLNode
deleteAttribute	src/gpuwattch/xmlParser.cc	/^void XMLNode::deleteAttribute(XMLCSTR lpszName)$/;"	f	class:XMLNode
deleteAttribute	src/gpuwattch/xmlParser.cc	/^void XMLNode::deleteAttribute(int i)$/;"	f	class:XMLNode
deleteClear	src/gpuwattch/xmlParser.cc	/^void XMLNode::deleteClear(XMLCSTR lpszValue) { deleteClear(indexClear(lpszValue)); }$/;"	f	class:XMLNode
deleteClear	src/gpuwattch/xmlParser.cc	/^void XMLNode::deleteClear(XMLClear *a) { if (a) deleteClear(a->lpszValue); }$/;"	f	class:XMLNode
deleteClear	src/gpuwattch/xmlParser.cc	/^void XMLNode::deleteClear(int i)$/;"	f	class:XMLNode
deleteNodeContent	src/gpuwattch/xmlParser.cc	/^void XMLNode::deleteNodeContent()$/;"	f	class:XMLNode
deleteSIMTStack	src/abstract_hardware_model.cc	/^void core_t::deleteSIMTStack()$/;"	f	class:core_t
deleteText	src/gpuwattch/xmlParser.cc	/^void XMLNode::deleteText(XMLCSTR lpszValue) { deleteText(indexText(lpszValue)); }$/;"	f	class:XMLNode
deleteText	src/gpuwattch/xmlParser.cc	/^void XMLNode::deleteText(int i)$/;"	f	class:XMLNode
delete_all_threads	src/gpgpu-sim/shader.cc	/^shader_core_ctx::delete_all_threads()$/;"	f	class:shader_core_ctx
dep_resource_conflict_check	src/gpuwattch/logic.cc	/^dep_resource_conflict_check::dep_resource_conflict_check($/;"	f	class:dep_resource_conflict_check
dep_resource_conflict_check	src/gpuwattch/logic.h	/^class dep_resource_conflict_check : public Component{$/;"	c
depart	src/ramulator_sim/Request.h	/^    long depart;$/;"	m	class:Request
depthVC	src/intersim2/power/power_module.hpp	/^  double depthVC;$/;"	m	class:Power_Module
desc	common/cuda_array.h	/^   struct cudaChannelFormatDesc desc;$/;"	m	struct:cudaArray	typeref:struct:cudaArray::cudaChannelFormatDesc
desc	libcuda/cuda_runtime_api.cc	/^	struct cudaChannelFormatDesc desc;$/;"	m	struct:cudaArray	typeref:struct:cudaArray::cudaChannelFormatDesc	file:
desc	src/ramulator_sim/StatType.h	/^  Derived &desc(const std::string &__desc) {$/;"	f	class:Stats_Ram::Stat
desc	src/ramulator_sim/Statistics.h	/^  StatBase<StatType> & desc(std::string _desc) {$/;"	f	class:StatBase
dest	src/intersim/flit.hpp	/^   int  dest;$/;"	m	struct:Flit
dest	src/intersim/interconnect_interface.h	/^   int  dest;$/;"	m	struct:glue_buf
dest	src/intersim2/flit.hpp	/^  int  dest;$/;"	m	class:Flit
dest	src/intersim2/traffic.cpp	/^int AsymmetricTrafficPattern::dest(int source)$/;"	f	class:AsymmetricTrafficPattern
dest	src/intersim2/traffic.cpp	/^int BadPermDFlyTrafficPattern::dest(int source)$/;"	f	class:BadPermDFlyTrafficPattern
dest	src/intersim2/traffic.cpp	/^int BadPermYarcTrafficPattern::dest(int source)$/;"	f	class:BadPermYarcTrafficPattern
dest	src/intersim2/traffic.cpp	/^int BitCompTrafficPattern::dest(int source)$/;"	f	class:BitCompTrafficPattern
dest	src/intersim2/traffic.cpp	/^int BitRevTrafficPattern::dest(int source)$/;"	f	class:BitRevTrafficPattern
dest	src/intersim2/traffic.cpp	/^int DiagonalTrafficPattern::dest(int source)$/;"	f	class:DiagonalTrafficPattern
dest	src/intersim2/traffic.cpp	/^int HotSpotTrafficPattern::dest(int source)$/;"	f	class:HotSpotTrafficPattern
dest	src/intersim2/traffic.cpp	/^int NeighborTrafficPattern::dest(int source)$/;"	f	class:NeighborTrafficPattern
dest	src/intersim2/traffic.cpp	/^int RandomPermutationTrafficPattern::dest(int source)$/;"	f	class:RandomPermutationTrafficPattern
dest	src/intersim2/traffic.cpp	/^int ShuffleTrafficPattern::dest(int source)$/;"	f	class:ShuffleTrafficPattern
dest	src/intersim2/traffic.cpp	/^int Taper64TrafficPattern::dest(int source)$/;"	f	class:Taper64TrafficPattern
dest	src/intersim2/traffic.cpp	/^int TornadoTrafficPattern::dest(int source)$/;"	f	class:TornadoTrafficPattern
dest	src/intersim2/traffic.cpp	/^int TransposeTrafficPattern::dest(int source)$/;"	f	class:TransposeTrafficPattern
dest	src/intersim2/traffic.cpp	/^int UniformBackgroundTrafficPattern::dest(int source)$/;"	f	class:UniformBackgroundTrafficPattern
dest	src/intersim2/traffic.cpp	/^int UniformRandomTrafficPattern::dest(int source)$/;"	f	class:UniformRandomTrafficPattern
dest_tag	src/intersim/routefunc.cpp	/^void dest_tag( const Router *r, const Flit *f, int in_channel, $/;"	f
dest_tag_fly	src/intersim2/routefunc.cpp	/^void dest_tag_fly( const Router *r, const Flit *f, int in_channel, $/;"	f
destroy_stream	src/stream_manager.cc	/^void stream_manager::destroy_stream( CUstream_st *stream )$/;"	f	class:stream_manager
destroy_thread_CFlogger	src/gpgpu-sim/stat-tool.cc	/^void destroy_thread_CFlogger( ) $/;"	f
detachFromParent	src/gpuwattch/xmlParser.cc	/^int XMLNode::detachFromParent(XMLNodeData *d)$/;"	f	class:XMLNode
detailed_dram_model	src/gpuwattch/basic_components.h	/^	int detailed_dram_model; \/\/ 1 - to use newly added DRAM model (GDDR5 only), 0 - use empirical model$/;"	m	class:DRAMParam
detect_print_steady_state	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::detect_print_steady_state(int position, double init_val)$/;"	f	class:gpgpu_sim_wrapper
devPtr	common/cuda_array.h	/^   void *devPtr;$/;"	m	struct:cudaArray
devPtr	libcuda/cuda_runtime_api.cc	/^	void *devPtr;$/;"	m	struct:cudaArray	file:
devPtr32	common/cuda_array.h	/^   int devPtr32;$/;"	m	struct:cudaArray
devPtr32	libcuda/cuda_runtime_api.cc	/^	int devPtr32;$/;"	m	struct:cudaArray	file:
dev_type	src/gpuwattch/arch_const.h	/^const unsigned int 	dev_type		=	0;$/;"	v
deviceType	src/gpuwattch/cacti/arbiter.h	/^    TechnologyParameter::DeviceType *deviceType;$/;"	m	class:MCPAT_Arbiter
deviceType	src/gpuwattch/cacti/crossbar.h	/^	TechnologyParameter::DeviceType *deviceType;$/;"	m	class:Crossbar
deviceType	src/gpuwattch/cacti/highradix.h	/^    TechnologyParameter::DeviceType *deviceType;$/;"	m	class:HighRadix
deviceType	src/gpuwattch/cacti/htree2.h	/^    TechnologyParameter::DeviceType *deviceType;$/;"	m	class:Htree2
deviceType	src/gpuwattch/cacti/nuca.h	/^    TechnologyParameter::DeviceType *deviceType;$/;"	m	class:Nuca
deviceType	src/gpuwattch/cacti/router.h	/^	TechnologyParameter::DeviceType *deviceType;$/;"	m	class:MCPAT_Router
deviceType	src/gpuwattch/cacti/wire.h	/^    TechnologyParameter::DeviceType *deviceType;$/;"	m	class:Wire
deviceType	src/gpuwattch/interconnect.h	/^    TechnologyParameter::DeviceType *deviceType;$/;"	m	class:interconnect
device_clock	src/gpuwattch/XML_Parse.h	/^	int device_clock;$/;"	m	struct:__anon22
device_ty	src/gpuwattch/array.h	/^  enum Device_ty device_ty;$/;"	m	class:ArrayST	typeref:enum:ArrayST::Device_ty
device_ty	src/gpuwattch/interconnect.h	/^	enum Device_ty device_ty;$/;"	m	class:interconnect	typeref:enum:interconnect::Device_ty
device_ty	src/gpuwattch/logic.h	/^	enum Device_ty device_ty;$/;"	m	class:Pipeline	typeref:enum:Pipeline::Device_ty
device_ty	src/gpuwattch/logic.h	/^	enum Device_ty device_ty;$/;"	m	class:inst_decoder	typeref:enum:inst_decoder::Device_ty
device_ty	src/gpuwattch/logic.h	/^	enum Device_ty device_ty;$/;"	m	class:selection_logic	typeref:enum:selection_logic::Device_ty
device_type	src/gpuwattch/XML_Parse.h	/^	int device_type;$/;"	m	struct:__anon16
device_type	src/gpuwattch/XML_Parse.h	/^	int device_type;$/;"	m	struct:__anon17
device_type	src/gpuwattch/XML_Parse.h	/^	int device_type;$/;"	m	struct:__anon18
device_type	src/gpuwattch/XML_Parse.h	/^	int device_type;$/;"	m	struct:__anon19
device_type	src/gpuwattch/XML_Parse.h	/^	int device_type;$/;"	m	struct:__anon26
dfqassoc	src/gpuwattch/arch_const.h	/^const int dfqassoc=1;$/;"	v
dfqblocksize	src/gpuwattch/arch_const.h	/^const int dfqblocksize=16;$/;"	v
dfqsize	src/gpuwattch/arch_const.h	/^const int dfqsize=1024;$/;"	v
diagonal	src/intersim/traffic.cpp	/^int diagonal( int source, int total_nodes )$/;"	f
diff_cap	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::diff_cap(double w, int type \/*0 for n-mos and 1 for p-mos*\/,$/;"	f	class:MCPAT_Router
dim3	common/kernel_config.h	/^struct dim3 {$/;"	s
dim3	common/kernel_info_t.h	/^struct dim3 {$/;"	s
dim3_equals	common/kernel_info_t.cc	/^dim3_equals(const dim3& lhs, const dim3& rhs)$/;"	f	file:
dim_order_bal_torus	src/intersim/routefunc.cpp	/^void dim_order_bal_torus( const Router *r, const Flit *f, int in_channel, $/;"	f
dim_order_bal_torus	src/intersim2/routefunc.cpp	/^void dim_order_bal_torus( const Router *r, const Flit *f, int in_channel, $/;"	f
dim_order_mesh	src/intersim/routefunc.cpp	/^void dim_order_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
dim_order_mesh	src/intersim2/routefunc.cpp	/^void dim_order_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
dim_order_ni_mesh	src/intersim/routefunc.cpp	/^void dim_order_ni_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
dim_order_ni_mesh	src/intersim2/routefunc.cpp	/^void dim_order_ni_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
dim_order_ni_torus	src/intersim/routefunc.cpp	/^void dim_order_ni_torus( const Router *r, const Flit *f, int in_channel, $/;"	f
dim_order_ni_torus	src/intersim2/routefunc.cpp	/^void dim_order_ni_torus( const Router *r, const Flit *f, int in_channel, $/;"	f
dim_order_pni_mesh	src/intersim2/routefunc.cpp	/^void dim_order_pni_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
dim_order_torus	src/intersim/routefunc.cpp	/^void dim_order_torus( const Router *r, const Flit *f, int in_channel, $/;"	f
dim_order_torus	src/intersim2/routefunc.cpp	/^void dim_order_torus( const Router *r, const Flit *f, int in_channel, $/;"	f
dimension	src/cuda-sim/ptx_ir.h	/^   unsigned dimension() const { return m_geom_spec;}$/;"	f	class:ptx_instruction
dimensions	common/cuda_array.h	/^   unsigned dimensions;$/;"	m	struct:cudaArray
dimensions	libcuda/cuda_runtime_api.cc	/^	unsigned dimensions;$/;"	m	struct:cudaArray	file:
dir_duty_cycle	src/gpuwattch/XML_Parse.h	/^	double dir_duty_cycle;$/;"	m	struct:__anon18
dir_duty_cycle	src/gpuwattch/XML_Parse.h	/^	double dir_duty_cycle;$/;"	m	struct:__anon19
dir_duty_cycle	src/gpuwattch/basic_components.h	/^    double duty_cycle, dir_duty_cycle;$/;"	m	class:CacheDynParam
dir_overhead	src/gpuwattch/sharedcache.h	/^    double	   dir_overhead;$/;"	m	class:SharedCache
dir_ty	src/gpuwattch/basic_components.h	/^	enum Dir_type    dir_ty;$/;"	m	class:CacheDynParam	typeref:enum:CacheDynParam::Dir_type
directive_statement	src/cuda-sim/ptx.y	/^directive_statement: variable_declaration SEMI_COLON$/;"	l
dirty	src/ramulator_sim/Cache.h	/^    bool dirty;$/;"	m	struct:Cache::Line
disabled	src/gpgpu-sim/gpu-cache.h	/^    bool disabled() const { return m_disabled;}$/;"	f	class:cache_config
dispatch	src/gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::collector_unit_t::dispatch()$/;"	f	class:opndcoll_rfu_t::collector_unit_t
dispatchWidth	src/gpuwattch/arch_const.h	/^const int dispatchWidth=8;$/;"	v
dispatch_delay	src/abstract_hardware_model.h	/^    bool dispatch_delay()$/;"	f	class:warp_inst_t
dispatch_ready_cu	src/gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::dispatch_ready_cu()$/;"	f	class:opndcoll_rfu_t
dispatch_unit_t	src/gpgpu-sim/shader.h	/^      dispatch_unit_t(std::vector<collector_unit_t>* cus) $/;"	f	class:opndcoll_rfu_t::dispatch_unit_t
dispatch_unit_t	src/gpgpu-sim/shader.h	/^   class dispatch_unit_t {$/;"	c	class:opndcoll_rfu_t
display	src/gpgpu-sim/gpu-cache.cc	/^void mshr_table::display( FILE *fp ) const{$/;"	f	class:mshr_table
display	src/gpuwattch/cacti/parameter.cc	/^void TechnologyParameter::DeviceType::display(uint32_t indent)$/;"	f	class:TechnologyParameter::DeviceType
display	src/gpuwattch/cacti/parameter.cc	/^void TechnologyParameter::InterconnectType::display(uint32_t indent)$/;"	f	class:TechnologyParameter::InterconnectType
display	src/gpuwattch/cacti/parameter.cc	/^void TechnologyParameter::MemoryType::display(uint32_t indent)$/;"	f	class:TechnologyParameter::MemoryType
display	src/gpuwattch/cacti/parameter.cc	/^void TechnologyParameter::ScalingFactor::display(uint32_t indent)$/;"	f	class:TechnologyParameter::ScalingFactor
display	src/gpuwattch/cacti/parameter.cc	/^void TechnologyParameter::display(uint32_t indent)$/;"	f	class:TechnologyParameter
display	src/intersim2/power/buffer_monitor.cpp	/^void BufferMonitor::display(ostream & os) const {$/;"	f	class:BufferMonitor
display	src/intersim2/power/switch_monitor.cpp	/^void SwitchMonitor::display(ostream & os) const {$/;"	f	class:SwitchMonitor
display	src/ramulator_sim/StatType.h	/^const uint16_t display   = 0x00000002;$/;"	m	namespace:Stats_Ram
displayDeviceType	src/gpuwattch/processor.cc	/^void Processor::displayDeviceType(int device_type_, uint32_t indent)$/;"	f	class:Processor
displayEnergy	src/gpuwattch/core.cc	/^void BranchPredictor::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:BranchPredictor
displayEnergy	src/gpuwattch/core.cc	/^void Core::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:Core
displayEnergy	src/gpuwattch/core.cc	/^void EXECU::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:EXECU
displayEnergy	src/gpuwattch/core.cc	/^void InstFetchU::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:InstFetchU
displayEnergy	src/gpuwattch/core.cc	/^void LoadStoreU::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:LoadStoreU
displayEnergy	src/gpuwattch/core.cc	/^void MemManU::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:MemManU
displayEnergy	src/gpuwattch/core.cc	/^void RENAMINGU::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:RENAMINGU
displayEnergy	src/gpuwattch/core.cc	/^void RegFU::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:RegFU
displayEnergy	src/gpuwattch/core.cc	/^void SchedulerU::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:SchedulerU
displayEnergy	src/gpuwattch/iocontrollers.cc	/^void FlashController::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:FlashController
displayEnergy	src/gpuwattch/iocontrollers.cc	/^void NIUController::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:NIUController
displayEnergy	src/gpuwattch/iocontrollers.cc	/^void PCIeController::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:PCIeController
displayEnergy	src/gpuwattch/logic.cc	/^void FunctionalUnit::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:FunctionalUnit
displayEnergy	src/gpuwattch/logic.cc	/^void UndiffCore::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:UndiffCore
displayEnergy	src/gpuwattch/memoryctrl.cc	/^void MCFrontEnd::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:MCFrontEnd
displayEnergy	src/gpuwattch/memoryctrl.cc	/^void MemoryController::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:MemoryController
displayEnergy	src/gpuwattch/noc.cc	/^void NoC::displayEnergy(uint32_t indent,int plevel,bool is_tdp)$/;"	f	class:NoC
displayEnergy	src/gpuwattch/processor.cc	/^void Processor::displayEnergy(uint32_t indent, int plevel, bool is_tdp_parm)$/;"	f	class:Processor
displayEnergy	src/gpuwattch/sharedcache.cc	/^void SharedCache::displayEnergy(uint32_t indent,bool is_tdp)$/;"	f	class:SharedCache
displayInterconnectType	src/gpuwattch/processor.cc	/^void Processor::displayInterconnectType(int interconnect_type_, uint32_t indent)$/;"	f	class:Processor
display_icnt_state	src/intersim/interconnect_interface.cpp	/^void display_icnt_state( FILE *fp )$/;"	f
display_ip	src/gpuwattch/cacti/io.cc	/^InputParameter::display_ip()$/;"	f	class:InputParameter
display_map	src/intersim/interconnect_interface.cpp	/^void display_map(int dim,int count)$/;"	f
display_pipeline	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::display_pipeline(FILE *fout, int print_mem, int mask ) const$/;"	f	class:shader_core_ctx
display_pipeline	src/gpgpu-sim/shader.cc	/^void simt_core_cluster::display_pipeline( unsigned sid, FILE *fout, int print_mem, int mask )$/;"	f	class:simt_core_cluster
display_simt_state	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::display_simt_state(FILE *fout, int mask ) const$/;"	f	class:shader_core_ctx
display_state	src/gpgpu-sim/gpu-cache.cc	/^void baseline_cache::display_state( FILE *fp ) const{$/;"	f	class:baseline_cache
display_state	src/gpgpu-sim/gpu-cache.cc	/^void tex_cache::display_state( FILE *fp ) const$/;"	f	class:tex_cache
dist	src/ramulator_sim/ALDRAM.h	/^        int dist;$/;"	m	struct:ALDRAM::TimingEntry
dist	src/ramulator_sim/DDR3.h	/^        int dist;$/;"	m	struct:DDR3::TimingEntry
dist	src/ramulator_sim/DDR4.h	/^        int dist;$/;"	m	struct:DDR4::TimingEntry
dist	src/ramulator_sim/DSARP.h	/^        int dist;$/;"	m	struct:DSARP::TimingEntry
dist	src/ramulator_sim/GDDR5.h	/^        int dist;$/;"	m	struct:GDDR5::TimingEntry
dist	src/ramulator_sim/HBM.h	/^        int dist;$/;"	m	struct:HBM::TimingEntry
dist	src/ramulator_sim/LPDDR3.h	/^        int dist;$/;"	m	struct:LPDDR3::TimingEntry
dist	src/ramulator_sim/LPDDR4.h	/^        int dist;$/;"	m	struct:LPDDR4::TimingEntry
dist	src/ramulator_sim/SALP.h	/^        int dist;$/;"	m	struct:SALP::TimingEntry
dist	src/ramulator_sim/StatType.h	/^const uint16_t dist      = 0x00000080;$/;"	m	namespace:Stats_Ram
dist	src/ramulator_sim/TLDRAM.h	/^        int dist;$/;"	m	struct:TLDRAM::TimingEntry
dist	src/ramulator_sim/WideIO.h	/^        int dist;$/;"	m	struct:WideIO::TimingEntry
dist	src/ramulator_sim/WideIO2.h	/^        int dist;$/;"	m	struct:WideIO2::TimingEntry
div_impl	src/cuda-sim/instructions.cc	/^void div_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
divergence_support_t	src/abstract_hardware_model.h	/^enum divergence_support_t {$/;"	g
divider_multiplier	src/gpuwattch/XML_Parse.h	/^	char divider_multiplier[20];$/;"	m	struct:__anon15
do_atomic	src/abstract_hardware_model.cc	/^void warp_inst_t::do_atomic( const active_mask_t& access_mask,bool forceDo ) {$/;"	f	class:warp_inst_t
do_atomic	src/abstract_hardware_model.cc	/^void warp_inst_t::do_atomic(bool forceDo) {$/;"	f	class:warp_inst_t
do_atomic	src/gpgpu-sim/mem_fetch.cc	/^void mem_fetch::do_atomic()$/;"	f	class:mem_fetch
do_on_warp_issued	src/gpgpu-sim/shader.cc	/^two_level_active_scheduler::do_on_warp_issued( unsigned warp_id,$/;"	f	class:two_level_active_scheduler
do_on_warp_issued	src/gpgpu-sim/shader.cc	/^void scheduler_unit::do_on_warp_issued( unsigned warp_id,$/;"	f	class:scheduler_unit
do_operation	src/stream_manager.cc	/^void stream_operation::do_operation( gpgpu_sim *gpu )$/;"	f	class:stream_operation
dom	src/cuda-sim/ptx_ir.h	/^   bool dom(const basic_block_t *B) {$/;"	f	struct:basic_block_t
domain_size	src/gpuwattch/XML_Parse.h	/^    int domain_size;$/;"	m	struct:__anon26
dominator_ids	src/cuda-sim/ptx_ir.h	/^   std::set<int> dominator_ids;$/;"	m	struct:basic_block_t
done	common/cu_event_st.h	/^   bool done() const { return m_done; }$/;"	f	class:CUevent_st
done	common/kernel_info_t.h	/^   bool done() const$/;"	f	class:kernel_info_t
done	src/intersim/trafficmanager.hpp	/^      warming_up, running, draining, done$/;"	e	enum:TrafficManager::eSimState
done	src/intersim2/trafficmanager.hpp	/^  enum eSimState { warming_up, running, draining, done };$/;"	e	enum:TrafficManager::eSimState
done_adding_supervised_warps	src/gpgpu-sim/shader.h	/^    virtual void done_adding_supervised_warps() {$/;"	f	class:gto_scheduler
done_adding_supervised_warps	src/gpgpu-sim/shader.h	/^    virtual void done_adding_supervised_warps() {$/;"	f	class:lrr_scheduler
done_adding_supervised_warps	src/gpgpu-sim/shader.h	/^    virtual void done_adding_supervised_warps() {$/;"	f	class:scheduler_unit
done_adding_supervised_warps	src/gpgpu-sim/shader.h	/^    virtual void done_adding_supervised_warps() {$/;"	f	class:swl_scheduler
done_adding_supervised_warps	src/gpgpu-sim/shader.h	/^    virtual void done_adding_supervised_warps() {$/;"	f	class:two_level_active_scheduler
done_exit	common/shd_warp_t.h	/^    bool done_exit() const { return m_done_exit; }$/;"	f	class:shd_warp_t
donecycle	src/cuda-sim/ptx_sim.h	/^   unsigned donecycle() const { return m_cycle_done; }$/;"	f	class:ptx_thread_info
dor_cmesh	src/intersim2/networks/cmesh.cpp	/^void dor_cmesh( const Router *r, const Flit *f, int in_channel, $/;"	f
dor_next_mesh	src/intersim/routefunc.cpp	/^int dor_next_mesh( int cur, int dest )$/;"	f
dor_next_mesh	src/intersim2/routefunc.cpp	/^int dor_next_mesh( int cur, int dest, bool descending )$/;"	f
dor_next_torus	src/intersim/routefunc.cpp	/^void dor_next_torus( int cur, int dest, int in_port,$/;"	f
dor_next_torus	src/intersim2/routefunc.cpp	/^void dor_next_torus( int cur, int dest, int in_port,$/;"	f
dor_no_express_cmesh	src/intersim2/networks/cmesh.cpp	/^void dor_no_express_cmesh( const Router *r, const Flit *f, int in_channel, $/;"	f
doub_net	src/intersim/interconnect_interface.cpp	/^bool doub_net = false; \/\/double networks disabled by default$/;"	v
double_op_t	src/cuda-sim/ptx_ir.h	/^   reg_t, vector_t, builtin_t, address_t, memory_t, float_op_t, double_op_t, int_t, $/;"	e	enum:operand_type
double_value	build/src/cuda-sim/ptx.tab.c	/^  double double_value;$/;"	m	union:YYSTYPE	file:
double_value	build/src/cuda-sim/ptx.tab.h	/^  double double_value;$/;"	m	union:YYSTYPE
dp	src/gpuwattch/cacti/bank.h	/^    const DynamicParameter & dp;$/;"	m	class:Bank
dp	src/gpuwattch/cacti/mat.h	/^    const DynamicParameter & dp;$/;"	m	class:Mat
dp	src/gpuwattch/cacti/subarray.h	/^    const DynamicParameter & dp;$/;"	m	class:Subarray
dp	src/gpuwattch/cacti/uca.h	/^    DynamicParameter dp;$/;"	m	class:UCA
dq	src/ramulator_sim/ALDRAM.h	/^        int dq;$/;"	m	struct:ALDRAM::OrgEntry
dq	src/ramulator_sim/DDR3.h	/^        int dq;$/;"	m	struct:DDR3::OrgEntry
dq	src/ramulator_sim/DDR4.h	/^        int dq;$/;"	m	struct:DDR4::OrgEntry
dq	src/ramulator_sim/DSARP.h	/^        int dq;$/;"	m	struct:DSARP::OrgEntry
dq	src/ramulator_sim/GDDR5.h	/^        int dq;$/;"	m	struct:GDDR5::OrgEntry
dq	src/ramulator_sim/HBM.h	/^        int dq;$/;"	m	struct:HBM::OrgEntry
dq	src/ramulator_sim/LPDDR3.h	/^        int dq;$/;"	m	struct:LPDDR3::OrgEntry
dq	src/ramulator_sim/LPDDR4.h	/^        int dq;$/;"	m	struct:LPDDR4::OrgEntry
dq	src/ramulator_sim/SALP.h	/^        int dq;$/;"	m	struct:SALP::OrgEntry
dq	src/ramulator_sim/TLDRAM.h	/^        int dq;$/;"	m	struct:TLDRAM::OrgEntry
dq	src/ramulator_sim/WideIO.h	/^        int dq;$/;"	m	struct:WideIO::OrgEntry
dq	src/ramulator_sim/WideIO2.h	/^        int dq;$/;"	m	struct:WideIO2::OrgEntry
dq_lat_table	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned dq_lat_table[32];$/;"	m	class:memory_stats_t
dqs_signal_width	src/gpuwattch/basic_components.h	/^	int dqs_signal_width; \/\/ in bits$/;"	m	class:DRAMParam
dr	src/intersim/flit.hpp	/^   mutable int dr;$/;"	m	struct:Flit
dragonfly_port	src/intersim2/networks/dragonfly.cpp	/^int dragonfly_port(int rID, int source, int dest){$/;"	f
dragonflynew_hopcnt	src/intersim2/networks/dragonfly.cpp	/^int dragonflynew_hopcnt(int src, int dest) $/;"	f
drain_C_	src/gpuwattch/cacti/basic_circuit.cc	/^double drain_C_($/;"	f
drain_core	src/gpgpu-sim/shader.cc	/^shader_core_ctx::drain_core()$/;"	f	class:shader_core_ctx
drain_cta	src/gpgpu-sim/shader.cc	/^shader_core_ctx::drain_cta(unsigned cta_id)$/;"	f	class:shader_core_ctx
draining	src/intersim/trafficmanager.hpp	/^      warming_up, running, draining, done$/;"	e	enum:TrafficManager::eSimState
draining	src/intersim2/trafficmanager.hpp	/^  enum eSimState { warming_up, running, draining, done };$/;"	e	enum:TrafficManager::eSimState
dram	src/gpuwattch/cacti/parameter.h	/^  MemoryType dram;$/;"	m	class:TechnologyParameter
dram	src/gpuwattch/memoryctrl.h	/^    DRAM * dram;$/;"	m	class:MemoryController
dram_L2_queue_full	src/gpgpu-sim/l2cache.cc	/^bool memory_sub_partition::dram_L2_queue_full() const$/;"	f	class:memory_sub_partition
dram_L2_queue_push	src/gpgpu-sim/l2cache.cc	/^void memory_sub_partition::dram_L2_queue_push( class mem_fetch* mf )$/;"	f	class:memory_sub_partition
dram_acc	src/gpuwattch/cacti/parameter.h	/^  DeviceType dram_acc;    \/\/ DRAM access transistor$/;"	m	class:TechnologyParameter
dram_act	src/gpuwattch/XML_Parse.h	/^	double dram_act;$/;"	m	struct:__anon23
dram_act_coeff	src/gpuwattch/XML_Parse.h	/^	double dram_act_coeff;$/;"	m	struct:__anon23
dram_activity	src/gpuwattch/XML_Parse.h	/^	double dram_activity;$/;"	m	struct:__anon23
dram_activity_coeff	src/gpuwattch/XML_Parse.h	/^	double dram_activity_coeff;$/;"	m	struct:__anon23
dram_array_availability	src/gpuwattch/cacti/cacti_interface.h	/^  double dram_array_availability;$/;"	m	struct:__anon5
dram_atom_size	src/gpgpu-sim/gpu-sim.h	/^   unsigned dram_atom_size; \/\/ number of bytes transferred per read or write command $/;"	m	struct:memory_config
dram_callback_t	src/abstract_hardware_model.h	/^   dram_callback_t() { function=NULL; instruction=NULL; thread=NULL; }$/;"	f	struct:dram_callback_t
dram_callback_t	src/abstract_hardware_model.h	/^struct dram_callback_t {$/;"	s
dram_capacity	src/ramulator_sim/Memory.h	/^    ScalarStat dram_capacity;$/;"	m	class:Memory
dram_cell_C	src/gpuwattch/cacti/parameter.h	/^  double dram_cell_C;$/;"	m	class:TechnologyParameter
dram_cell_I_off_worst_case_len_temp	src/gpuwattch/cacti/parameter.h	/^  double dram_cell_I_off_worst_case_len_temp;$/;"	m	class:TechnologyParameter
dram_cell_I_on	src/gpuwattch/cacti/parameter.h	/^  double dram_cell_I_on;$/;"	m	class:TechnologyParameter
dram_cell_Vdd	src/gpuwattch/cacti/parameter.h	/^  double dram_cell_Vdd;$/;"	m	class:TechnologyParameter
dram_cell_tech_flavor	src/gpuwattch/cacti/const.h	/^const int dram_cell_tech_flavor = 3;$/;"	v
dram_cmd	src/gpuwattch/XML_Parse.h	/^	double dram_cmd;$/;"	m	struct:__anon23
dram_cmd_coeff	src/gpuwattch/XML_Parse.h	/^	double dram_cmd_coeff;$/;"	m	struct:__anon23
dram_const_coeff	src/gpuwattch/XML_Parse.h	/^	double dram_const_coeff;$/;"	m	struct:__anon23
dram_ctrl_t	src/gpgpu-sim/gpu-sim.h	/^enum dram_ctrl_t {$/;"	g
dram_cycle	src/gpgpu-sim/l2cache.cc	/^void memory_partition_unit::dram_cycle() $/;"	f	class:memory_partition_unit
dram_delay_t	src/gpgpu-sim/l2cache.h	/^   struct dram_delay_t$/;"	s	class:memory_partition_unit
dram_freq	src/gpgpu-sim/gpu-sim.h	/^    double dram_freq;$/;"	m	class:gpgpu_sim_config
dram_latency	src/gpgpu-sim/gpu-sim.h	/^   unsigned dram_latency;$/;"	m	struct:memory_config
dram_nop	src/gpuwattch/XML_Parse.h	/^	double dram_nop;$/;"	m	struct:__anon23
dram_nop_coeff	src/gpuwattch/XML_Parse.h	/^	double dram_nop_coeff;$/;"	m	struct:__anon23
dram_num_cells_wl_stitching_	src/gpuwattch/cacti/const.h	/^const static uint32_t dram_num_cells_wl_stitching_ = 64;$/;"	v
dram_period	src/gpgpu-sim/gpu-sim.h	/^    double dram_period;$/;"	m	class:gpgpu_sim_config
dram_period_kain_index	src/gpgpu-sim/gpu-sim.cc	/^double dram_period_kain_index = 1.0;$/;"	v
dram_pre	src/gpuwattch/XML_Parse.h	/^	double dram_pre;$/;"	m	struct:__anon22
dram_pre	src/gpuwattch/XML_Parse.h	/^	double dram_pre;$/;"	m	struct:__anon23
dram_pre_coeff	src/gpuwattch/XML_Parse.h	/^	double dram_pre_coeff;$/;"	m	struct:__anon23
dram_rd	src/gpuwattch/XML_Parse.h	/^	double dram_rd;$/;"	m	struct:__anon23
dram_rd_coeff	src/gpuwattch/XML_Parse.h	/^	double dram_rd_coeff;$/;"	m	struct:__anon23
dram_refresh_period	src/gpuwattch/cacti/cacti_interface.h	/^  double dram_refresh_period;$/;"	m	struct:__anon5
dram_refresh_period	src/gpuwattch/cacti/parameter.h	/^    double dram_refresh_period;$/;"	m	class:DynamicParameter
dram_req	src/gpuwattch/XML_Parse.h	/^	double dram_req;$/;"	m	struct:__anon23
dram_req_coeff	src/gpuwattch/XML_Parse.h	/^	double dram_req_coeff;$/;"	m	struct:__anon23
dram_time	src/gpgpu-sim/gpu-sim.h	/^   double dram_time;$/;"	m	class:gpgpu_sim
dram_traffic	src/cuda-sim/ptx-stats.cc	/^    unsigned long long dram_traffic;$/;"	m	class:ptx_file_line_stats	file:
dram_type	src/gpuwattch/memoryctrl.h	/^	enum Dram_type dram_type;$/;"	m	class:DRAM	typeref:enum:DRAM::Dram_type
dram_wl	src/gpuwattch/cacti/parameter.h	/^  DeviceType dram_wl;     \/\/ DRAM wordline transistor$/;"	m	class:TechnologyParameter
dram_wr	src/gpuwattch/XML_Parse.h	/^	double dram_wr;$/;"	m	struct:__anon23
dram_wr_coeff	src/gpuwattch/XML_Parse.h	/^	double dram_wr_coeff;$/;"	m	struct:__anon23
dramp	src/gpuwattch/memoryctrl.h	/^    DRAMParam  dramp;$/;"	m	class:DRAM
driver_power	src/gpuwattch/cacti/decoder.h	/^    powerDef driver_power;$/;"	m	class:Predec
dropWhiteSpace	src/gpuwattch/xmlParser.cc	/^static char guessWideCharChars=1, dropWhiteSpace=1, removeCommentsInMiddleOfText=1;$/;"	v	file:
drv1	src/gpuwattch/cacti/decoder.h	/^    PredecBlkDrv * drv1;$/;"	m	class:Predec
drv2	src/gpuwattch/cacti/decoder.h	/^    PredecBlkDrv * drv2;$/;"	m	class:Predec
dst	src/abstract_hardware_model.h	/^        int dst[MAX_REG_OPERANDS];$/;"	m	struct:inst_t::__anon28
dst	src/cuda-sim/ptx_ir.h	/^   const operand_info &dst() const $/;"	f	class:ptx_instruction
dst	src/cuda-sim/ptx_ir.h	/^   operand_info &dst() $/;"	f	class:ptx_instruction
dst_vc	src/intersim/event_router.hpp	/^      int  dst_vc;$/;"	m	struct:EventRouter::tArrivalEvent
dst_vc	src/intersim/event_router.hpp	/^      int  dst_vc;$/;"	m	struct:EventRouter::tTransportEvent
dst_vc	src/intersim2/routers/event_router.hpp	/^    int  dst_vc;$/;"	m	struct:EventRouter::tArrivalEvent
dst_vc	src/intersim2/routers/event_router.hpp	/^    int  dst_vc;$/;"	m	struct:EventRouter::tTransportEvent
dtlb	src/gpuwattch/XML_Parse.h	/^	dtlb_systemcore dtlb;$/;"	m	struct:__anon15
dtlb	src/gpuwattch/core.h	/^	ArrayST * dtlb;$/;"	m	class:MemManU
dtlb_systemcore	src/gpuwattch/XML_Parse.h	/^} dtlb_systemcore;$/;"	t	typeref:struct:__anon12
dtlbassoc	src/gpuwattch/arch_const.h	/^const int dtlbassoc=0;\/\/fully$/;"	v
dtlbblocksize	src/gpuwattch/arch_const.h	/^const int dtlbblocksize=8;$/;"	v
dtlbsize	src/gpuwattch/arch_const.h	/^const int dtlbsize=512;$/;"	v
dual_pump	src/gpuwattch/XML_Parse.h	/^	int dual_pump;$/;"	m	struct:__anon21
dummy_way_sel_predec_blk1	src/gpuwattch/cacti/mat.h	/^    PredecBlk * dummy_way_sel_predec_blk1;$/;"	m	class:Mat
dummy_way_sel_predec_blk2	src/gpuwattch/cacti/mat.h	/^    PredecBlk * dummy_way_sel_predec_blk2;$/;"	m	class:Mat
dummy_way_sel_predec_blk_drv2	src/gpuwattch/cacti/mat.h	/^    PredecBlkDrv * dummy_way_sel_predec_blk_drv2;$/;"	m	class:Mat
dump	src/cuda-sim/ptx_ir.cc	/^void symbol_table::dump()$/;"	f	class:symbol_table
dump	src/gpgpu-sim/shader.cc	/^void barrier_set_t::dump() const$/;"	f	class:barrier_set_t
dump	src/gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::collector_unit_t::dump(FILE *fp, const shader_core_ctx *shader ) const$/;"	f	class:opndcoll_rfu_t::collector_unit_t
dump	src/gpgpu-sim/shader.h	/^      void dump(FILE *fp) const $/;"	f	class:opndcoll_rfu_t::op_t
dump	src/gpgpu-sim/shader.h	/^      void dump(FILE *fp) const {$/;"	f	class:opndcoll_rfu_t::allocation_t
dump	src/gpgpu-sim/shader.h	/^      void dump(FILE *fp) const$/;"	f	class:opndcoll_rfu_t::arbiter_t
dump	src/gpgpu-sim/shader.h	/^   void dump( FILE *fp ) const$/;"	f	class:opndcoll_rfu_t
dump	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::dump()$/;"	f	class:gpgpu_sim_wrapper
dump_callstack	src/cuda-sim/ptx_sim.cc	/^void ptx_thread_info::dump_callstack() const$/;"	f	class:ptx_thread_info
dump_modifiedregs	src/cuda-sim/ptx_sim.cc	/^void ptx_thread_info::dump_modifiedregs(FILE *fp)$/;"	f	class:ptx_thread_info
dump_pipeline	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::dump_pipeline( int mask, int s, int m ) const$/;"	f	class:gpgpu_sim
dump_regs	src/cuda-sim/ptx_sim.cc	/^void ptx_thread_info::dump_regs( FILE *fp )$/;"	f	class:ptx_thread_info
dump_warp_state	src/gpgpu-sim/gpu-sim.cc	/^void shader_core_ctx::dump_warp_state( FILE *fout ) const$/;"	f	class:shader_core_ctx
duty_cycle	src/gpuwattch/XML_Parse.h	/^	double duty_cycle;$/;"	m	struct:__anon16
duty_cycle	src/gpuwattch/XML_Parse.h	/^	double duty_cycle;$/;"	m	struct:__anon17
duty_cycle	src/gpuwattch/XML_Parse.h	/^	double duty_cycle;$/;"	m	struct:__anon18
duty_cycle	src/gpuwattch/XML_Parse.h	/^	double duty_cycle;$/;"	m	struct:__anon19
duty_cycle	src/gpuwattch/XML_Parse.h	/^	double duty_cycle;$/;"	m	struct:__anon21
duty_cycle	src/gpuwattch/XML_Parse.h	/^	double duty_cycle;$/;"	m	struct:__anon23
duty_cycle	src/gpuwattch/XML_Parse.h	/^	double duty_cycle;$/;"	m	struct:__anon24
duty_cycle	src/gpuwattch/XML_Parse.h	/^	double duty_cycle;$/;"	m	struct:__anon25
duty_cycle	src/gpuwattch/basic_components.h	/^		   duty_cycle, chip_coverage, route_over_perc;$/;"	m	class:NoCParam
duty_cycle	src/gpuwattch/basic_components.h	/^    double duty_cycle, dir_duty_cycle;$/;"	m	class:CacheDynParam
duty_cycle	src/gpuwattch/basic_components.h	/^    double duty_cycle, perc_load;$/;"	m	class:NIUParam
duty_cycle	src/gpuwattch/basic_components.h	/^    double duty_cycle, perc_load;$/;"	m	class:PCIeParam
duty_cycle	src/gpuwattch/basic_components.h	/^    double frontend_duty_cycle, duty_cycle, perc_load;$/;"	m	class:MCParam
dyn_power_before_scaling	src/gpuwattch/processor.h	/^		double dyn_power_before_scaling;$/;"	m	class:Processor
dyn_read_energy_from_closed_page	src/gpuwattch/cacti/cacti_interface.h	/^  double dyn_read_energy_from_closed_page;$/;"	m	struct:__anon5
dyn_read_energy_from_closed_page	src/gpuwattch/cacti/uca.h	/^    double dyn_read_energy_from_closed_page;$/;"	m	class:UCA
dyn_read_energy_from_open_page	src/gpuwattch/cacti/cacti_interface.h	/^  double dyn_read_energy_from_open_page;$/;"	m	struct:__anon5
dyn_read_energy_from_open_page	src/gpuwattch/cacti/uca.h	/^    double dyn_read_energy_from_open_page;$/;"	m	class:UCA
dyn_read_energy_remaining_words_in_burst	src/gpuwattch/cacti/uca.h	/^    double dyn_read_energy_remaining_words_in_burst;$/;"	m	class:UCA
dynamic	src/gpuwattch/cacti/cacti_interface.h	/^    double dynamic;$/;"	m	class:powerComponents
dynamic_power_dev	src/gpuwattch/cacti/cacti_interface.h	/^    int delay_dev, dynamic_power_dev, leakage_power_dev,$/;"	m	class:InputParameter
dynamic_power_dev_nuca	src/gpuwattch/cacti/cacti_interface.h	/^    int delay_dev_nuca, dynamic_power_dev_nuca, leakage_power_dev_nuca,$/;"	m	class:InputParameter
dynamic_power_wt	src/gpuwattch/cacti/cacti_interface.h	/^    int delay_wt, dynamic_power_wt, leakage_power_wt,$/;"	m	class:InputParameter
dynamic_power_wt_nuca	src/gpuwattch/cacti/cacti_interface.h	/^    int delay_wt_nuca, dynamic_power_wt_nuca, leakage_power_wt_nuca,$/;"	m	class:InputParameter
dynamic_warp_id	src/abstract_hardware_model.h	/^    unsigned dynamic_warp_id() const $/;"	f	class:warp_inst_t
eAttribEquals	src/gpuwattch/xmlParser.cc	/^    eAttribEquals,$/;"	e	enum:Attrib	file:
eAttribName	src/gpuwattch/xmlParser.cc	/^    eAttribName = 0,$/;"	e	enum:Attrib	file:
eAttribValue	src/gpuwattch/xmlParser.cc	/^    eAttribValue$/;"	e	enum:Attrib	file:
eInsideTag	src/gpuwattch/xmlParser.cc	/^    eInsideTag = 0,$/;"	e	enum:Status	file:
eNextVCState	src/intersim/event_router.hpp	/^   enum eNextVCState {$/;"	g	class:EventNextVCState
eNextVCState	src/intersim2/routers/event_router.hpp	/^  enum eNextVCState { idle, busy, tail_pending };$/;"	g	class:EventNextVCState
eNodeAttribute	src/gpuwattch/xmlParser.h	/^    eNodeAttribute=1,$/;"	e	enum:XMLElementType
eNodeChild	src/gpuwattch/xmlParser.h	/^    eNodeChild=0,$/;"	e	enum:XMLElementType
eNodeClear	src/gpuwattch/xmlParser.h	/^    eNodeClear=3,$/;"	e	enum:XMLElementType
eNodeNULL	src/gpuwattch/xmlParser.h	/^    eNodeNULL=4$/;"	e	enum:XMLElementType
eNodeText	src/gpuwattch/xmlParser.h	/^    eNodeText=2,$/;"	e	enum:XMLElementType
eOutsideTag	src/gpuwattch/xmlParser.cc	/^    eOutsideTag$/;"	e	enum:Status	file:
ePrioType	src/intersim2/vc.hpp	/^  enum ePrioType { local_age_based, queue_length_based, hop_count_based, none, other };$/;"	g	class:VC
ePriority	src/intersim/trafficmanager.hpp	/^   enum ePriority {$/;"	g	class:TrafficManager
ePriority	src/intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_based, hop_count_based, sequence_based, none };$/;"	g	class:TrafficManager
eQState	src/intersim2/routers/chaos_router.hpp	/^  enum eQState {$/;"	g	class:ChaosRouter
eSimMode	src/intersim/trafficmanager.hpp	/^   enum eSimMode {$/;"	g	class:TrafficManager
eSimState	src/intersim/trafficmanager.hpp	/^   enum eSimState {$/;"	g	class:TrafficManager
eSimState	src/intersim2/trafficmanager.hpp	/^  enum eSimState { warming_up, running, draining, done };$/;"	g	class:TrafficManager
eTokenClear	src/gpuwattch/xmlParser.cc	/^    eTokenClear,$/;"	e	enum:XMLTokenTypeTag	file:
eTokenCloseTag	src/gpuwattch/xmlParser.cc	/^    eTokenCloseTag,         \/* ">"            *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenDeclaration	src/gpuwattch/xmlParser.cc	/^    eTokenDeclaration,      \/* "<?"           *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenEquals	src/gpuwattch/xmlParser.cc	/^    eTokenEquals,           \/* "="            *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenError	src/gpuwattch/xmlParser.cc	/^    eTokenError$/;"	e	enum:XMLTokenTypeTag	file:
eTokenQuotedText	src/gpuwattch/xmlParser.cc	/^    eTokenQuotedText,$/;"	e	enum:XMLTokenTypeTag	file:
eTokenShortHandClose	src/gpuwattch/xmlParser.cc	/^    eTokenShortHandClose,   \/* "\/>"           *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenTagEnd	src/gpuwattch/xmlParser.cc	/^    eTokenTagEnd,           \/* "<\/"           *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenTagStart	src/gpuwattch/xmlParser.cc	/^    eTokenTagStart,         \/* "<"            *\/$/;"	e	enum:XMLTokenTypeTag	file:
eTokenText	src/gpuwattch/xmlParser.cc	/^    eTokenText = 0,$/;"	e	enum:XMLTokenTypeTag	file:
eVCState	src/intersim/vc.hpp	/^   enum eVCState {$/;"	g	class:VC
eVCState	src/intersim2/vc.hpp	/^  enum eVCState { state_min = 0, idle = state_min, routing, vc_alloc, active, $/;"	g	class:VC
eXMLErrorBase64DataSizeIsNotMultipleOf4	src/gpuwattch/xmlParser.h	/^    eXMLErrorBase64DataSizeIsNotMultipleOf4,$/;"	e	enum:XMLError
eXMLErrorBase64DecodeBufferTooSmall	src/gpuwattch/xmlParser.h	/^    eXMLErrorBase64DecodeBufferTooSmall$/;"	e	enum:XMLError
eXMLErrorBase64DecodeIllegalCharacter	src/gpuwattch/xmlParser.h	/^    eXMLErrorBase64DecodeIllegalCharacter,$/;"	e	enum:XMLError
eXMLErrorBase64DecodeTruncatedData	src/gpuwattch/xmlParser.h	/^    eXMLErrorBase64DecodeTruncatedData,$/;"	e	enum:XMLError
eXMLErrorCannotOpenWriteFile	src/gpuwattch/xmlParser.h	/^    eXMLErrorCannotOpenWriteFile,$/;"	e	enum:XMLError
eXMLErrorCannotWriteFile	src/gpuwattch/xmlParser.h	/^    eXMLErrorCannotWriteFile,$/;"	e	enum:XMLError
eXMLErrorCharConversionError	src/gpuwattch/xmlParser.h	/^    eXMLErrorCharConversionError,$/;"	e	enum:XMLError
eXMLErrorCharacterCodeAbove255	src/gpuwattch/xmlParser.h	/^    eXMLErrorCharacterCodeAbove255,$/;"	e	enum:XMLError
eXMLErrorEmpty	src/gpuwattch/xmlParser.h	/^    eXMLErrorEmpty,$/;"	e	enum:XMLError
eXMLErrorFileNotFound	src/gpuwattch/xmlParser.h	/^    eXMLErrorFileNotFound,$/;"	e	enum:XMLError
eXMLErrorFirstTagNotFound	src/gpuwattch/xmlParser.h	/^    eXMLErrorFirstTagNotFound,$/;"	e	enum:XMLError
eXMLErrorMissingEndTag	src/gpuwattch/xmlParser.h	/^    eXMLErrorMissingEndTag,$/;"	e	enum:XMLError
eXMLErrorMissingEndTagName	src/gpuwattch/xmlParser.h	/^    eXMLErrorMissingEndTagName,$/;"	e	enum:XMLError
eXMLErrorMissingTagName	src/gpuwattch/xmlParser.h	/^    eXMLErrorMissingTagName,$/;"	e	enum:XMLError
eXMLErrorNoElements	src/gpuwattch/xmlParser.h	/^    eXMLErrorNoElements,$/;"	e	enum:XMLError
eXMLErrorNoXMLTagFound	src/gpuwattch/xmlParser.h	/^    eXMLErrorNoXMLTagFound,$/;"	e	enum:XMLError
eXMLErrorNone	src/gpuwattch/xmlParser.h	/^    eXMLErrorNone = 0,$/;"	e	enum:XMLError
eXMLErrorUnexpectedToken	src/gpuwattch/xmlParser.h	/^    eXMLErrorUnexpectedToken,$/;"	e	enum:XMLError
eXMLErrorUnknownCharacterEntity	src/gpuwattch/xmlParser.h	/^    eXMLErrorUnknownCharacterEntity,$/;"	e	enum:XMLError
eXMLErrorUnmatchedEndClearTag	src/gpuwattch/xmlParser.h	/^    eXMLErrorUnmatchedEndClearTag,$/;"	e	enum:XMLError
eXMLErrorUnmatchedEndTag	src/gpuwattch/xmlParser.h	/^    eXMLErrorUnmatchedEndTag,$/;"	e	enum:XMLError
e_clock	src/gpuwattch/logic.h	/^	powerDef e_clock;$/;"	m	class:DFFCell
e_keep_0	src/gpuwattch/logic.h	/^	powerDef e_keep_0;$/;"	m	class:DFFCell
e_keep_1	src/gpuwattch/logic.h	/^	powerDef e_keep_1;$/;"	m	class:DFFCell
e_switch	src/gpuwattch/logic.h	/^	powerDef e_switch;$/;"	m	class:DFFCell
early_inject_refresh	src/ramulator_sim/Refresh.cpp	/^void Refresh<DSARP>::early_inject_refresh() {$/;"	f	class:Refresh
ed	src/gpuwattch/cacti/cacti_interface.h	/^    int ed; \/\/ED or ED2 optimization$/;"	m	class:InputParameter
efficiency	src/gpuwattch/cacti/Ucache.h	/^  double efficiency;$/;"	m	struct:solution
effpower_coeff	src/gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector<double> effpower_coeff;$/;"	m	class:gpgpu_sim_wrapper
ejection_buf	src/intersim/interconnect_interface.cpp	/^queue<Flit *> ** ejection_buf; $/;"	v
ejection_buffer_capacity	src/intersim/interconnect_interface.cpp	/^unsigned int ejection_buffer_capacity ;  $/;"	v
element_exist_stack	src/gpgpu-sim/stack.cc	/^int element_exist_stack(Stack *S, address_type value) {$/;"	f
elffilename	libcuda/cuda_runtime_api.cc	/^    std::string elffilename;$/;"	m	class:cuobjdumpELFSection	file:
embedded	src/gpuwattch/arch_const.h	/^const bool			embedded		=	false; \/\/NEW$/;"	v
embedded	src/gpuwattch/logic.h	/^	bool   opt_performance, embedded;$/;"	m	class:UndiffCore
empty	src/abstract_hardware_model.h	/^    bool empty() const { return m_empty; }$/;"	f	class:warp_inst_t
empty	src/gpgpu-sim/delayqueue.h	/^   bool empty() const { return m_head == NULL; }$/;"	f	class:fifo_pipeline
empty	src/gpgpu-sim/gpu-cache.h	/^        bool empty() const { return m_num == 0;}$/;"	f	class:tex_cache::fifo
empty	src/gpgpu-sim/gpu-cache.h	/^    bool empty() const { return m_data.empty(); }$/;"	f	class:mshr_table
empty	src/intersim2/routers/chaos_router.hpp	/^    empty,         \/\/            input avail$/;"	e	enum:ChaosRouter::eQState
empty	src/stream_manager.cc	/^bool CUstream_st::empty()$/;"	f	class:CUstream_st
empty	src/stream_manager.cc	/^bool stream_manager::empty()$/;"	f	class:stream_manager
emptyNode	src/gpuwattch/xmlParser.cc	/^XMLNode       XMLNode::emptyNode       (     )       { return XMLNode::emptyXMLNode; }$/;"	f	class:XMLNode
emptyTheNode	src/gpuwattch/xmlParser.cc	/^void XMLNode::emptyTheNode(char force)$/;"	f	class:XMLNode
emptyXMLAttribute	src/gpuwattch/xmlParser.cc	/^XMLAttribute XMLNode::emptyXMLAttribute={ NULL, NULL};$/;"	m	class:XMLNode	file:
emptyXMLAttribute	src/gpuwattch/xmlParser.h	/^    static XMLAttribute emptyXMLAttribute;$/;"	m	struct:XMLNode
emptyXMLClear	src/gpuwattch/xmlParser.cc	/^XMLClear XMLNode::emptyXMLClear={ NULL, NULL, NULL};$/;"	m	class:XMLNode	file:
emptyXMLClear	src/gpuwattch/xmlParser.h	/^    static XMLClear emptyXMLClear;$/;"	m	struct:XMLNode
emptyXMLNode	src/gpuwattch/xmlParser.cc	/^XMLNode XMLNode::emptyXMLNode;$/;"	m	class:XMLNode	file:
emptyXMLNode	src/gpuwattch/xmlParser.h	/^    static XMLNode emptyXMLNode;$/;"	m	struct:XMLNode
empty_stack	src/gpgpu-sim/stack.cc	/^int empty_stack(Stack *S) {$/;"	f
enable_debug_trace	src/cuda-sim/ptx_sim.h	/^   void enable_debug_trace() { m_enable_debug_trace = true; }$/;"	f	class:ptx_thread_info
enable_ptx_file_line_stats	src/cuda-sim/ptx-stats.cc	/^bool enable_ptx_file_line_stats;$/;"	v
enabled	src/trace.cc	/^    bool enabled = false;$/;"	m	namespace:Trace	file:
encode	src/gpuwattch/xmlParser.cc	/^XMLSTR XMLParserBase64Tool::encode(unsigned char *inbuf, unsigned int inlen, char formatted)$/;"	f	class:XMLParserBase64Tool
encodeLength	src/gpuwattch/xmlParser.cc	/^int XMLParserBase64Tool::encodeLength(int inlen, char formatted)$/;"	f	class:XMLParserBase64Tool
end	common/preemption_info.h	/^    const_iterator  end()   const { return m_techniques.end();   }$/;"	f	class:preemption_info_t
end	common/preemption_info.h	/^    iterator        end()         { return m_techniques.end();   }$/;"	f	class:preemption_info_t
end	launcher/launcher_option_parser.h	/^  const_iterator end()    const { return childs.end();   }$/;"	f	class:LauncherOptionParser
end	launcher/launcher_option_parser.h	/^  iterator end()                { return childs.end();   }$/;"	f	class:LauncherOptionParser
end	src/abstract_hardware_model.h	/^    const_mem_iterator end() const    { return m_accessq.end(); }$/;"	f	class:warp_inst_t
end	src/abstract_hardware_model.h	/^    mem_iterator end()                { return m_accessq.end(); }$/;"	f	class:warp_inst_t
end_function	src/cuda-sim/ptx_parser.cc	/^void end_function() $/;"	f
end_of_refreshing	src/ramulator_sim/DRAM.h	/^    long end_of_refreshing = -1;$/;"	m	class:DRAM
end_of_serving	src/ramulator_sim/DRAM.h	/^    long end_of_serving = -1;$/;"	m	class:DRAM
energy	src/gpuwattch/logic.h	/^	double energy, base_energy,per_access_energy, leakage, gate_leakage;$/;"	m	class:FunctionalUnit
enqueue	src/ramulator_sim/Controller.h	/^    bool enqueue(Request& req)$/;"	f	class:Controller
enqueue	src/ramulator_sim/SpeedyController.h	/^    bool enqueue(Request& req)$/;"	f	class:SpeedyController
entry	common/kernel_info_t.h	/^   class function_info *entry() { return m_kernel_entry; }$/;"	f	class:kernel_info_t
entry	common/kernel_info_t.h	/^   const class function_info *entry() const { return m_kernel_entry; }$/;"	f	class:kernel_info_t
entry_t	src/intersim2/arbiters/arbiter.hpp	/^  } entry_t ;$/;"	t	class:Arbiter	typeref:struct:Arbiter::__anon1
enumContents	src/gpuwattch/xmlParser.cc	/^XMLNodeContents XMLNode::enumContents(int i) const$/;"	f	class:XMLNode
eps	src/ramulator_sim/StatType.h	/^const double eps = 1e-8;$/;"	m	namespace:Stats_Ram
error	src/gpuwattch/xmlParser.cc	/^    enum XMLError          error;$/;"	m	struct:XML	typeref:enum:XML::XMLError	file:
error	src/gpuwattch/xmlParser.h	/^    enum XMLError error;$/;"	m	struct:XMLResults	typeref:enum:XMLResults::XMLError
error_checking	src/gpuwattch/cacti/io.cc	/^bool InputParameter::error_checking()$/;"	f	class:InputParameter
etype	src/gpuwattch/xmlParser.h	/^    enum XMLElementType etype;$/;"	m	struct:XMLNodeContents	typeref:enum:XMLNodeContents::XMLElementType
event_tracker_t	libcuda/cuda_runtime_api.cc	/^typedef std::map<unsigned,CUevent_st*> event_tracker_t;$/;"	t	file:
event_warp_issued	src/gpgpu-sim/shader.cc	/^void shader_core_stats::event_warp_issued( unsigned s_id, unsigned warp_id, unsigned num_issued, unsigned dynamic_warp_id ) {$/;"	f	class:shader_core_stats
evict	src/ramulator_sim/Cache.cpp	/^void Cache::evict(std::list<Line>* lines,$/;"	f	class:Cache
evictline	src/ramulator_sim/Cache.cpp	/^void Cache::evictline(long addr, bool dirty) {$/;"	f	class:Cache
ex2_impl	src/cuda-sim/instructions.cc	/^void ex2_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
exClockRate	src/gpuwattch/core.h	/^	double exClockRate;$/;"	m	class:Core
exClockRate	src/gpuwattch/core.h	/^   double exClockRate; $/;"	m	class:RegFU
exClockRate	src/gpuwattch/processor.h	/^    double exClockRate;$/;"	m	class:Processor
exactMemory	src/gpuwattch/xmlParser.cc	/^void XMLNode::exactMemory(XMLNodeData *d)$/;"	f	class:XMLNode
exec_count	src/cuda-sim/ptx-stats.cc	/^    unsigned long exec_count;$/;"	m	class:ptx_file_line_stats	file:
execute	src/cuda-sim/cuda-sim.cc	/^void functionalCoreSim::execute()$/;"	f	class:functionalCoreSim
execute	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::execute()$/;"	f	class:shader_core_ctx
executeWarp	src/cuda-sim/cuda-sim.cc	/^void functionalCoreSim::executeWarp(unsigned i, bool &allAtBarrier, bool & someOneLive)$/;"	f	class:functionalCoreSim
execute_warp_inst_t	src/abstract_hardware_model.cc	/^void core_t::execute_warp_inst_t(warp_inst_t &inst, unsigned warpId)$/;"	f	class:core_t
executed_blocks	common/kernel_info_t.cc	/^kernel_info_t::executed_blocks() const$/;"	f	class:kernel_info_t
executed_insts_for_ctas	src/gpgpu-sim/shader.h	/^    std::vector<executed_insts_st> executed_insts_for_ctas;$/;"	m	class:shader_core_ctx
executed_insts_st	src/gpgpu-sim/shader.h	/^      executed_insts_st()$/;"	f	struct:shader_core_ctx::executed_insts_st
executed_insts_st	src/gpgpu-sim/shader.h	/^    struct executed_insts_st {$/;"	s	class:shader_core_ctx
executed_kernel_info_string	src/gpgpu-sim/gpu-sim.cc	/^std::string gpgpu_sim::executed_kernel_info_string() $/;"	f	class:gpgpu_sim
executionTime	src/gpuwattch/basic_components.h	/^	double clockRate,executionTime;$/;"	m	class:CacheDynParam
executionTime	src/gpuwattch/basic_components.h	/^    double clockRate,executionTime;$/;"	m	class:CoreDynParam
executionTime	src/gpuwattch/basic_components.h	/^    double executionTime, reads, writes;$/;"	m	class:MCParam
executionTime	src/gpuwattch/basic_components.h	/^    double executionTime, total_access, link_throughput,link_latency,$/;"	m	class:NoCParam
executionTime	src/gpuwattch/basic_components.h	/^    double executionTime;$/;"	m	class:DRAMParam
executionTime	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:BranchPredictor
executionTime	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:Core
executionTime	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:EXECU
executionTime	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:InstFetchU
executionTime	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:LoadStoreU
executionTime	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:MemManU
executionTime	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:RENAMINGU
executionTime	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:RegFU
executionTime	src/gpuwattch/core.h	/^	double clockRate,executionTime;$/;"	m	class:SchedulerU
executionTime	src/gpuwattch/logic.h	/^	double clockRate,executionTime;$/;"	m	class:FunctionalUnit
executionTime	src/gpuwattch/logic.h	/^	double clockRate,executionTime;$/;"	m	class:UndiffCore
executionTime	src/gpuwattch/noc.h	/^	double executionTime;$/;"	m	class:NoC
executionTime	src/gpuwattch/sharedcache.h	/^    double scktRatio, clockRate, executionTime;$/;"	m	class:CCdir
executionTime	src/gpuwattch/sharedcache.h	/^    double scktRatio, executionTime;$/;"	m	class:SharedCache
exeu	src/gpuwattch/core.h	/^    FunctionalUnit * exeu;$/;"	m	class:EXECU
exist	src/gpuwattch/cacti/decoder.h	/^    bool   exist;$/;"	m	class:Decoder
exist	src/gpuwattch/cacti/decoder.h	/^  bool exist;$/;"	m	class:PredecBlk
exist	src/gpuwattch/core.h	/^	bool exist;$/;"	m	class:BranchPredictor
exist	src/gpuwattch/core.h	/^	bool exist;$/;"	m	class:EXECU
exist	src/gpuwattch/core.h	/^	bool exist;$/;"	m	class:InstFetchU
exist	src/gpuwattch/core.h	/^	bool exist;$/;"	m	class:LoadStoreU
exist	src/gpuwattch/core.h	/^	bool exist;$/;"	m	class:MemManU
exist	src/gpuwattch/core.h	/^	bool exist;$/;"	m	class:RENAMINGU
exist	src/gpuwattch/core.h	/^	bool exist;$/;"	m	class:RegFU
exist	src/gpuwattch/core.h	/^    bool exist;$/;"	m	class:SchedulerU
exist	src/gpuwattch/logic.h	/^	bool exist;$/;"	m	class:UndiffCore
exitCore	src/cuda-sim/ptx_sim.h	/^   void exitCore()$/;"	f	class:ptx_thread_info
exit_impl	src/cuda-sim/instructions.cc	/^void exit_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
exit_parse_error	src/gpgpu-sim/gpu-cache.h	/^    void exit_parse_error()$/;"	f	class:cache_config
exit_simulation	src/gpgpusim_entrypoint.cc	/^void exit_simulation()$/;"	f
expected_SMs	launcher/mk-sched/even_scheduler.h	/^  std::map<kernel_info_t*, unsigned> expected_SMs;$/;"	m	class:EvenScheduler
expected_limit_insts	src/ramulator_sim/Config.h	/^  long expected_limit_insts = 0;$/;"	m	class:Config
expected_shaders	launcher/mk-sched/mk_scheduler.h	/^    unsigned expected_shaders;$/;"	m	class:DynamicScheduler::SM_info
experimental_lib_support	src/abstract_hardware_model.h	/^    bool experimental_lib_support() const { return m_experimental_lib_support; }$/;"	f	class:gpgpu_functional_sim_config
exposed_latency	src/cuda-sim/ptx-stats.cc	/^    unsigned long long exposed_latency; \/\/ latency exposed as pipeline bubbles (attributed to this instruction)$/;"	m	class:ptx_file_line_stats	file:
extend_channel_width	src/ramulator_sim/MemoryFactory.h	/^    static void extend_channel_width(T* spec, int cacheline)$/;"	f	class:MemoryFactory
extensions	src/cuda-sim/ptx_sim.h	/^      unsigned extensions() const { assert(m_valid); return m_ptx_extensions; }$/;"	f	class:ptx_version
extra_dq_write_signal_width	src/gpuwattch/basic_components.h	/^	int extra_dq_write_signal_width; \/\/in bits$/;"	m	class:DRAMParam
extra_mf_fields	src/gpgpu-sim/gpu-cache.h	/^        extra_mf_fields( new_addr_type a, unsigned i, unsigned d ) $/;"	f	struct:baseline_cache::extra_mf_fields
extra_mf_fields	src/gpgpu-sim/gpu-cache.h	/^        extra_mf_fields( unsigned i ) $/;"	f	struct:tex_cache::extra_mf_fields
extra_mf_fields	src/gpgpu-sim/gpu-cache.h	/^        extra_mf_fields()  { m_valid = false;}$/;"	f	struct:baseline_cache::extra_mf_fields
extra_mf_fields	src/gpgpu-sim/gpu-cache.h	/^        extra_mf_fields()  { m_valid = false;}$/;"	f	struct:tex_cache::extra_mf_fields
extra_mf_fields	src/gpgpu-sim/gpu-cache.h	/^    struct extra_mf_fields {$/;"	s	class:baseline_cache
extra_mf_fields	src/gpgpu-sim/gpu-cache.h	/^    struct extra_mf_fields {$/;"	s	class:tex_cache
extra_mf_fields_lookup	src/gpgpu-sim/gpu-cache.h	/^    typedef std::map<mem_fetch*,extra_mf_fields> extra_mf_fields_lookup;$/;"	t	class:baseline_cache
extra_mf_fields_lookup	src/gpgpu-sim/gpu-cache.h	/^    typedef std::map<mem_fetch*,extra_mf_fields> extra_mf_fields_lookup;$/;"	t	class:tex_cache
extract_code_using_cuobjdump	libcuda/cuda_runtime_api.cc	/^void extract_code_using_cuobjdump(){$/;"	f
extract_cta_id_from_warp_id	src/gpgpu-sim/shader.h	/^    unsigned extract_cta_id_from_warp_id(unsigned warp_id) const { return m_warp[warp_id].get_cta_id(); }$/;"	f	class:shader_core_ctx
exu	src/gpuwattch/core.h	/^	EXECU      * exu;$/;"	m	class:Core
f	src/abstract_hardware_model.h	/^   enum cudaChannelFormatKind f;$/;"	m	struct:cudaChannelFormatDesc	typeref:enum:cudaChannelFormatDesc::cudaChannelFormatKind
f16	src/cuda-sim/ptx_sim.h	/^   float             f16; $/;"	m	union:ptx_reg_t
f2f	src/cuda-sim/instructions.cc	/^ptx_reg_t f2f( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_mode, int saturation_mode )$/;"	f
f2x	src/cuda-sim/instructions.cc	/^ptx_reg_t f2x( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_mode, int saturation_mode )$/;"	f
f32	src/cuda-sim/ptx_sim.h	/^   float          f32;$/;"	m	union:ptx_reg_t
f64	src/cuda-sim/ptx_sim.h	/^   double            f64;$/;"	m	union:ptx_reg_t
fCLK	src/intersim2/power/power_module.hpp	/^  double fCLK ;              $/;"	m	class:Power_Module
fFRAT	src/gpuwattch/core.h	/^	ArrayST * fFRAT;$/;"	m	class:RENAMINGU
fRRAT	src/gpuwattch/core.h	/^	ArrayST * fRRAT;$/;"	m	class:RENAMINGU
factorial	src/gpuwattch/cacti/basic_circuit.cc	/^int factorial(int n, int m)$/;"	f
fast_access	src/gpuwattch/cacti/cacti_interface.h	/^    bool     fast_access;$/;"	m	class:InputParameter
fat_binary_count	launcher/child_process.h	/^  unsigned        fat_binary_count;$/;"	m	class:ChildProcess
fatbin_registered	libcuda/cuda_runtime_api.cc	/^std::map<int, bool>fatbin_registered;$/;"	v
fatbinmap	libcuda/cuda_runtime_api.cc	/^std::map<int, std::string> fatbinmap;$/;"	v
fattree_anca	src/intersim2/routefunc.cpp	/^void fattree_anca( const Router *r, const Flit *f,$/;"	f
fattree_nca	src/intersim2/routefunc.cpp	/^void fattree_nca( const Router *r, const Flit *f,$/;"	f
fcp	src/gpuwattch/iocontrollers.h	/^    MCParam  fcp;$/;"	m	class:FlashController
fdata	src/option_parser.cc	/^   float fdata;$/;"	m	class:testtype	file:
fdcl	src/gpuwattch/core.h	/^	dep_resource_conflict_check * fdcl;$/;"	m	class:RENAMINGU
feature_not_implemented	src/cuda-sim/ptx_sim.cc	/^void feature_not_implemented( const char *f ) $/;"	f
fetch	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::fetch()$/;"	f	class:shader_core_ctx
fetchW	src/gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_decodeW;$/;"	m	class:CoreDynParam
fetchWidth	src/gpuwattch/arch_const.h	/^const int fetchWidth=8;$/;"	v
fetch_unit_response_buffer_full	src/gpgpu-sim/shader.cc	/^bool shader_core_ctx::fetch_unit_response_buffer_full() const$/;"	f	class:shader_core_ctx
fetch_width	src/gpuwattch/XML_Parse.h	/^	int fetch_width;$/;"	m	struct:__anon15
ffreeL	src/gpuwattch/core.h	/^	ArrayST * ffreeL;$/;"	m	class:RENAMINGU
fifo	src/gpgpu-sim/gpu-cache.h	/^        fifo( unsigned size )$/;"	f	class:tex_cache::fifo
fifo	src/gpgpu-sim/gpu-cache.h	/^    template<class T> class fifo {$/;"	c	class:tex_cache
fifo_data	src/gpgpu-sim/delayqueue.h	/^struct fifo_data {$/;"	s
fifo_pipeline	src/gpgpu-sim/delayqueue.h	/^   fifo_pipeline(const char* nm, unsigned int minlen, unsigned int maxlen ) $/;"	f	class:fifo_pipeline
fifo_pipeline	src/gpgpu-sim/delayqueue.h	/^class fifo_pipeline {$/;"	c
file_n	src/gpuwattch/cacti/cacti_interface.h	/^    char file_n[100];$/;"	m	class:uca_org_t
file_name	src/intersim2/networks/anynet.hpp	/^  string file_name;$/;"	m	class:AnyNet
fill	src/gpgpu-sim/gpu-cache.cc	/^void baseline_cache::fill(mem_fetch *mf, unsigned time){$/;"	f	class:baseline_cache
fill	src/gpgpu-sim/gpu-cache.cc	/^void tag_array::fill( new_addr_type addr, unsigned time )$/;"	f	class:tag_array
fill	src/gpgpu-sim/gpu-cache.cc	/^void tag_array::fill( unsigned index, unsigned time ) $/;"	f	class:tag_array
fill	src/gpgpu-sim/gpu-cache.cc	/^void tex_cache::fill( mem_fetch *mf, unsigned time )$/;"	f	class:tex_cache
fill	src/gpgpu-sim/gpu-cache.h	/^    void fill( unsigned time )$/;"	f	struct:cache_block_t
fill	src/gpgpu-sim/shader.cc	/^void ldst_unit::fill( mem_fetch *mf )$/;"	f	class:ldst_unit
fill_buffer_accesses	src/gpuwattch/XML_Parse.h	/^	double fill_buffer_accesses;$/;"	m	struct:__anon11
fill_buffer_accesses	src/gpuwattch/XML_Parse.h	/^	double fill_buffer_accesses;$/;"	m	struct:__anon13
fill_buffer_accesses	src/gpuwattch/XML_Parse.h	/^	double fill_buffer_accesses;$/;"	m	struct:__anon18
fill_buffer_accesses	src/gpuwattch/XML_Parse.h	/^	double fill_buffer_accesses;$/;"	m	struct:__anon19
fill_port_busy_cycles	src/gpgpu-sim/gpu-cache.h	/^    unsigned long long fill_port_busy_cycles; $/;"	m	struct:cache_sub_stats
fill_port_free	src/gpgpu-sim/gpu-cache.cc	/^bool baseline_cache::bandwidth_management::fill_port_free() const$/;"	f	class:baseline_cache::bandwidth_management
fill_port_free	src/gpgpu-sim/gpu-cache.h	/^    bool fill_port_free() const { return m_bandwidth_management.fill_port_free(); } $/;"	f	class:baseline_cache
fill_port_free	src/gpgpu-sim/gpu-cache.h	/^    bool fill_port_free() const { return true; }$/;"	f	class:tex_cache
filling	src/intersim2/routers/chaos_router.hpp	/^    filling,       \/\/    >**H    ready to send$/;"	e	enum:ChaosRouter::eQState
filterMode	src/abstract_hardware_model.h	/^   enum cudaTextureFilterMode    filterMode;$/;"	m	struct:textureReference	typeref:enum:textureReference::cudaTextureFilterMode
filter_data_arr	src/gpuwattch/cacti/Ucache.cc	/^void filter_data_arr(list<mem_array *> & curr_list)$/;"	f
filter_tag_arr	src/gpuwattch/cacti/Ucache.cc	/^void filter_tag_arr(const min_values_t * min, list<mem_array *> & list)$/;"	f
final_dec	src/gpuwattch/logic.h	/^	Decoder * final_dec;$/;"	m	class:inst_decoder
final_value	launcher/stats/stats.h	/^  uint64_t final_value;$/;"	m	class:Stats::CountScalarStorage
final_value	launcher/stats/stats.h	/^  uint64_t final_value;$/;"	m	class:Stats::MaxScalarStorage
finalize	launcher/stats/stats.h	/^  void finalize()       { storage.finish(); }$/;"	f	class:Stats::ScalarBase
finalize	src/cuda-sim/cuda-sim.cc	/^void function_info::finalize( memory_space *param_mem ) $/;"	f	class:function_info
findELFSection	libcuda/cuda_runtime_api.cc	/^cuobjdumpELFSection* findELFSection(const std::string identifier){$/;"	f
findELFSectionInList	libcuda/cuda_runtime_api.cc	/^cuobjdumpELFSection* findELFSectionInList(std::list<cuobjdumpSection*> sectionlist, const std::string identifier){$/;"	f
findPTXSection	libcuda/cuda_runtime_api.cc	/^cuobjdumpPTXSection* findPTXSection(const std::string identifier){$/;"	f
findPTXSectionInList	libcuda/cuda_runtime_api.cc	/^cuobjdumpPTXSection* findPTXSectionInList(std::list<cuobjdumpSection*> sectionlist, const std::string identifier){$/;"	f
findPosition	src/gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::findPosition(XMLNodeData *d, int index, XMLElementType xxtype)$/;"	f	class:XMLNode
findTextureReference	launcher/child_process.cc	/^ChildProcess::findTextureReference(const void* hostVar)$/;"	f	class:ChildProcess
findVarName	launcher/child_process.cc	/^ChildProcess::findVarName(const void* hostVar)$/;"	f	class:ChildProcess
find_area	src/gpuwattch/cacti/cacti_interface.cc	/^void uca_org_t::find_area()$/;"	f	class:uca_org_t
find_break_target	src/cuda-sim/ptx_ir.cc	/^operand_info* function_info::find_break_target( ptx_instruction * p_break_insn ) \/\/find the target of a break instruction $/;"	f	class:function_info
find_cyc	src/gpuwattch/cacti/cacti_interface.cc	/^void uca_org_t::find_cyc()$/;"	f	class:uca_org_t
find_delay	src/gpuwattch/cacti/cacti_interface.cc	/^void uca_org_t::find_delay()$/;"	f	class:uca_org_t
find_distance	src/intersim2/networks/flatfly_onchip.cpp	/^int find_distance (int src, int dest) {$/;"	f
find_dominators	src/cuda-sim/ptx_ir.cc	/^void function_info::find_dominators( )$/;"	f	class:function_info
find_drain_flush_shaders	common/kernel_info_t.cc	/^kernel_info_t::find_drain_flush_shaders(const std::vector<bool>& drain_candidates, const std::vector<bool>& flush_candidates, unsigned num_shaders) const$/;"	f	class:kernel_info_t
find_drain_switch_flush_shaders	common/kernel_info_t.cc	/^kernel_info_t::find_drain_switch_flush_shaders(const std::vector<bool>& drain_candidates, const std::vector<bool>& switch_candidates, const std::vector<bool>& flush_candidates, unsigned num_shaders) const$/;"	f	class:kernel_info_t
find_drain_switch_shaders	common/kernel_info_t.cc	/^kernel_info_t::find_drain_switch_shaders(const std::vector<bool>& drain_candidates, const std::vector<bool>& switch_candidates, unsigned num_shaders) const$/;"	f	class:kernel_info_t
find_energy	src/gpuwattch/cacti/cacti_interface.cc	/^void uca_org_t::find_energy()$/;"	f	class:uca_org_t
find_fine_grain_preemptions	common/kernel_info_t.cc	/^kernel_info_t::find_fine_grain_preemptions(const std::vector<bool>& candidates, const std::vector<std::bitset<MAX_CTA_PER_SHADER> >& non_idempotent_ctas, unsigned num_shaders) const$/;"	f	class:kernel_info_t
find_idominators	src/cuda-sim/ptx_ir.cc	/^void function_info::find_idominators( )$/;"	f	class:function_info
find_ipostdominators	src/cuda-sim/ptx_ir.cc	/^void function_info::find_ipostdominators( )$/;"	f	class:function_info
find_least_progressed_shaders	common/kernel_info_t.cc	/^kernel_info_t::find_least_progressed_shaders(const std::vector<bool>& candidates, unsigned num_shaders) const$/;"	f	class:kernel_info_t
find_most_progressed_shaders	common/kernel_info_t.cc	/^kernel_info_t::find_most_progressed_shaders(const std::vector<bool>& candidates, unsigned num_shaders) const$/;"	f	class:kernel_info_t
find_next_real_instruction	src/cuda-sim/ptx_ir.cc	/^std::list<ptx_instruction*>::iterator function_info::find_next_real_instruction( std::list<ptx_instruction*>::iterator i)$/;"	f	class:function_info
find_optimal_nuca	src/gpuwattch/cacti/nuca.cc	/^Nuca::find_optimal_nuca (list<nuca_org_t *> *n, min_values_t *minval)$/;"	f	class:Nuca
find_optimal_uca	src/gpuwattch/cacti/Ucache.cc	/^void find_optimal_uca(uca_org_t *res, min_values_t * minval, list<uca_org_t> & ulist)$/;"	f
find_postdominators	src/cuda-sim/ptx_ir.cc	/^void function_info::find_postdominators( )$/;"	f	class:function_info
find_ran_intm	src/intersim2/networks/flatfly_onchip.cpp	/^int find_ran_intm (int src, int dest) {$/;"	f
find_ready	src/gpgpu-sim/shader.h	/^      collector_unit_t *find_ready()$/;"	f	class:opndcoll_rfu_t::dispatch_unit_t
find_reconvergence_points	src/cuda-sim/cuda-sim.cc	/^struct rec_pts find_reconvergence_points( function_info *finfo )$/;"	f
find_shaders_to_cancel	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::find_shaders_to_cancel(kernel_info_t* kernel, unsigned num_cancel)$/;"	f	class:DynamicScheduler
find_shaders_to_cancel	launcher/mk-sched/mk_scheduler.h	/^  virtual std::vector<unsigned> find_shaders_to_cancel(kernel_info_t* kernel, unsigned num_cancel) { return std::vector<unsigned>(); }$/;"	f	class:StaticScheduler
find_shaders_to_remove	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::find_shaders_to_remove(kernel_info_t* kernel, unsigned num_remove)$/;"	f	class:DynamicScheduler
find_shaders_to_remove	launcher/mk-sched/mk_scheduler.h	/^  virtual std::vector<preemption_info_t> find_shaders_to_remove(kernel_info_t* kernel, unsigned num_remove) { return std::vector<preemption_info_t>(); }$/;"	f	class:StaticScheduler
find_switch_flush_shaders	common/kernel_info_t.cc	/^kernel_info_t::find_switch_flush_shaders(const std::vector<bool>& switch_candidates, const std::vector<bool>& flush_candidates, unsigned num_shaders) const$/;"	f	class:kernel_info_t
finish	launcher/stats/stats.h	/^  virtual void finish()           {}$/;"	f	class:Stats::CountScalarStorage
finish	launcher/stats/stats.h	/^  virtual void finish()           {}$/;"	f	class:Stats::MaxScalarStorage
finish	launcher/stats/stats.h	/^  virtual void finish()         { set(last_value); }$/;"	f	class:Stats::AverageScalarStorage
finish	src/ramulator_sim/Controller.h	/^    void finish(long read_req, long dram_cycles) {$/;"	f	class:Controller
finish	src/ramulator_sim/DRAM.h	/^void DRAM<T>::finish(long dram_cycles) {$/;"	f	class:DRAM
finish	src/ramulator_sim/Memory.h	/^    void finish(void) {$/;"	f	class:Memory
finish	src/ramulator_sim/SpeedyController.h	/^    void finish(int read_req, int write_req, int dram_cycles) {$/;"	f	class:SpeedyController
finish	src/ramulator_sim/gpu_wrapper.cpp	/^void GpuWrapper::finish(void) {$/;"	f	class:GpuWrapper
finish_CTA	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::finish_CTA(kernel_info_t* kernel, const unsigned shader_id, const unsigned cta_id)$/;"	f	class:DynamicScheduler
finish_CTA	launcher/mk-sched/mk_scheduler.h	/^  virtual void finish_CTA(kernel_info_t* kernel, const unsigned shader_id, const unsigned cta_id) {}$/;"	f	class:StaticScheduler
finish_cta	common/kernel_info_t.cc	/^kernel_info_t::finish_cta(unsigned shader_id, unsigned hw_cta_id)$/;"	f	class:kernel_info_t
finished_kernel	src/gpgpu-sim/gpu-sim.cc	/^unsigned gpgpu_sim::finished_kernel()$/;"	f	class:gpgpu_sim
first_level	src/ramulator_sim/Cache.h	/^  Cache::Level first_level;$/;"	m	class:CacheSystem
first_level_dir	src/gpuwattch/XML_Parse.h	/^    int first_level_dir;$/;"	m	struct:__anon26
first_run_done	launcher/child_process.h	/^  bool first_run_done;$/;"	m	class:ChildProcess
fixed_lat_icnt	src/intersim/interconnect_interface.cpp	/^int fixed_lat_icnt = 0;$/;"	v
fixed_latency	src/intersim/interconnect_interface.cpp	/^int fixed_latency(int input, int output)$/;"	f
flag_L2_gate	src/gpuwattch/cacti/decoder.h	/^  int flag_L2_gate;$/;"	m	class:PredecBlk
flag_driver_exists	src/gpuwattch/cacti/decoder.h	/^  int flag_driver_exists;$/;"	m	class:PredecBlkDrv
flag_two_unique_paths	src/gpuwattch/cacti/decoder.h	/^  bool   flag_two_unique_paths;$/;"	m	class:PredecBlk
flags	src/ramulator_sim/StatType.h	/^  Derived &flags(Flags __flags) {$/;"	f	class:Stats_Ram::Stat
flags	src/ramulator_sim/StatType.h	/^  uint16_t flags;$/;"	m	class:Stats_Ram::Flags
flags	src/ramulator_sim/Statistics.h	/^  StatBase<StatType> & flags(Stats_Ram::Flags _flags) {$/;"	f	class:StatBase
flashc	src/gpuwattch/XML_Parse.h	/^	system_mc flashc;$/;"	m	struct:__anon26
flashcontroller	src/gpuwattch/processor.h	/^    FlashController  * flashcontroller;$/;"	m	class:Processor
flashcontrollers	src/gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor
flatfly_outport	src/intersim2/networks/flatfly_onchip.cpp	/^int flatfly_outport(int dest, int rID) {$/;"	f
flatfly_outport_yx	src/intersim2/networks/flatfly_onchip.cpp	/^int flatfly_outport_yx(int dest, int rID) {$/;"	f
flatfly_transformation	src/intersim2/networks/flatfly_onchip.cpp	/^int flatfly_transformation(int dest){$/;"	f
flex_int16_t	build/src/cuda-sim/lex.ptx_.c	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	build/src/cuda-sim/lex.ptx_.c	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int16_t	build/src/cuda-sim/lex.ptxinfo_.c	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	build/src/cuda-sim/lex.ptxinfo_.c	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int16_t	src/intersim2/lex.yy.c	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	src/intersim2/lex.yy.c	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int32_t	build/src/cuda-sim/lex.ptx_.c	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	build/src/cuda-sim/lex.ptx_.c	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int32_t	build/src/cuda-sim/lex.ptxinfo_.c	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	build/src/cuda-sim/lex.ptxinfo_.c	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int32_t	src/intersim2/lex.yy.c	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	src/intersim2/lex.yy.c	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int8_t	build/src/cuda-sim/lex.ptx_.c	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	build/src/cuda-sim/lex.ptx_.c	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_int8_t	build/src/cuda-sim/lex.ptxinfo_.c	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	build/src/cuda-sim/lex.ptxinfo_.c	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_int8_t	src/intersim2/lex.yy.c	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	src/intersim2/lex.yy.c	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_uint16_t	build/src/cuda-sim/lex.ptx_.c	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	build/src/cuda-sim/lex.ptx_.c	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint16_t	build/src/cuda-sim/lex.ptxinfo_.c	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	build/src/cuda-sim/lex.ptxinfo_.c	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint16_t	src/intersim2/lex.yy.c	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	src/intersim2/lex.yy.c	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint32_t	build/src/cuda-sim/lex.ptx_.c	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	build/src/cuda-sim/lex.ptx_.c	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint32_t	build/src/cuda-sim/lex.ptxinfo_.c	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	build/src/cuda-sim/lex.ptxinfo_.c	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint32_t	src/intersim2/lex.yy.c	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	src/intersim2/lex.yy.c	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint8_t	build/src/cuda-sim/lex.ptx_.c	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	build/src/cuda-sim/lex.ptx_.c	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
flex_uint8_t	build/src/cuda-sim/lex.ptxinfo_.c	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	build/src/cuda-sim/lex.ptxinfo_.c	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
flex_uint8_t	src/intersim2/lex.yy.c	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	src/intersim2/lex.yy.c	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
flit_bits	src/gpuwattch/XML_Parse.h	/^	int flit_bits;$/;"	m	struct:__anon20
flit_bits	src/gpuwattch/XML_Parse.h	/^	int flit_bits;$/;"	m	struct:__anon21
flit_c	src/intersim/interconnect_interface.h	/^   int flit_c; \/\/ flit count $/;"	m	struct:glue_buf
flit_size	src/gpuwattch/basic_components.h	/^    int	   flit_size;$/;"	m	class:NoCParam
flit_size	src/gpuwattch/cacti/arbiter.h	/^    double flit_size;$/;"	m	class:MCPAT_Arbiter
flit_size	src/gpuwattch/cacti/crossbar.h	/^    double flit_size;$/;"	m	class:Crossbar
flit_size	src/gpuwattch/cacti/router.h	/^    double flit_size;$/;"	m	class:MCPAT_Router
flitp_compare	src/intersim/trafficmanager.hpp	/^class flitp_compare {$/;"	c
float2	src/cuda-sim/cuda-math.h	/^   struct float2 {$/;"	s	namespace:cuda_math
float2	src/cuda-sim/cuda-math.h	/^   typedef struct float2 float2;$/;"	t	namespace:cuda_math	typeref:struct:cuda_math::float2
float2int	src/cuda-sim/cuda-math.h	/^int float2int(float a, enum cudaRoundMode mode)$/;"	f	namespace:cuda_math
float2uint	src/cuda-sim/cuda-math.h	/^unsigned int float2uint(float a, enum cudaRoundMode mode)$/;"	f	namespace:cuda_math
float4	src/cuda-sim/cuda-math.h	/^   struct float4 {$/;"	s	namespace:cuda_math
float4	src/cuda-sim/cuda-math.h	/^   typedef struct float4 float4;$/;"	t	namespace:cuda_math	typeref:struct:cuda_math::float4
float_op_t	src/cuda-sim/ptx_ir.h	/^   reg_t, vector_t, builtin_t, address_t, memory_t, float_op_t, double_op_t, int_t, $/;"	e	enum:operand_type
float_regfile_reads	src/gpuwattch/XML_Parse.h	/^	double float_regfile_reads;$/;"	m	struct:__anon15
float_regfile_writes	src/gpuwattch/XML_Parse.h	/^	double float_regfile_writes;$/;"	m	struct:__anon15
float_value	build/src/cuda-sim/ptx.tab.c	/^  float  float_value;$/;"	m	union:YYSTYPE	file:
float_value	build/src/cuda-sim/ptx.tab.h	/^  float  float_value;$/;"	m	union:YYSTYPE
floating_point_rounding_mode	src/cuda-sim/ptx.y	/^floating_point_rounding_mode: RN_OPTION { add_option(RN_OPTION); } $/;"	l
flush	src/gpgpu-sim/gpu-cache.cc	/^void tag_array::flush() $/;"	f	class:tag_array
flush	src/gpgpu-sim/gpu-cache.h	/^    void flush(){m_tag_array->flush();}$/;"	f	class:baseline_cache
flush	src/gpgpu-sim/shader.cc	/^void ldst_unit::flush(){$/;"	f	class:ldst_unit
flushL2	src/gpgpu-sim/l2cache.cc	/^unsigned memory_sub_partition::flushL2() $/;"	f	class:memory_sub_partition
flush_core	src/gpgpu-sim/shader.cc	/^shader_core_ctx::flush_core()$/;"	f	class:shader_core_ctx
flush_cta	src/gpgpu-sim/shader.cc	/^shader_core_ctx::flush_cta(unsigned cta_id)$/;"	f	class:shader_core_ctx
fma_impl	src/cuda-sim/instructions.cc	/^void fma_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
fnum	src/intersim2/y.tab.c	/^  double fnum;$/;"	m	union:YYSTYPE	file:
fnum	src/intersim2/y.tab.h	/^  double fnum;$/;"	m	union:YYSTYPE
fopt	src/gpuwattch/cacti/const.h	162;"	d
force_cache_config	src/gpuwattch/cacti/cacti_interface.h	/^    bool force_cache_config;$/;"	m	class:InputParameter
force_nuca_bank	src/gpuwattch/cacti/cacti_interface.h	/^    int force_nuca_bank;$/;"	m	class:InputParameter
force_wiretype	src/gpuwattch/cacti/cacti_interface.h	/^    int force_wiretype;$/;"	m	class:InputParameter
fpTagBypass	src/gpuwattch/core.h	/^	interconnect * fpTagBypass;$/;"	m	class:EXECU
fp_Iw_height	src/gpuwattch/core.h	/^	double Iw_height, fp_Iw_height,ROB_height;$/;"	m	class:SchedulerU
fp_bypass	src/gpuwattch/core.h	/^	interconnect * fp_bypass;$/;"	m	class:EXECU
fp_data_width	src/gpuwattch/basic_components.h	/^    int  int_data_width, fp_data_width,v_address_width, p_address_width;$/;"	m	class:CoreDynParam
fp_decodeW	src/gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_decodeW;$/;"	m	class:CoreDynParam
fp_inst_window	src/gpuwattch/core.h	/^	ArrayST         * fp_inst_window;$/;"	m	class:SchedulerU
fp_inst_window_reads	src/gpuwattch/XML_Parse.h	/^	double fp_inst_window_reads;$/;"	m	struct:__anon15
fp_inst_window_selections	src/gpuwattch/XML_Parse.h	/^	double fp_inst_window_selections;$/;"	m	struct:__anon15
fp_inst_window_wakeup_accesses	src/gpuwattch/XML_Parse.h	/^	double fp_inst_window_wakeup_accesses;$/;"	m	struct:__anon15
fp_inst_window_writes	src/gpuwattch/XML_Parse.h	/^	double fp_inst_window_writes;$/;"	m	struct:__anon15
fp_instruction_window_size	src/gpuwattch/XML_Parse.h	/^	int fp_instruction_window_size;$/;"	m	struct:__anon15
fp_instructions	src/gpuwattch/XML_Parse.h	/^	double fp_instructions;$/;"	m	struct:__anon15
fp_issueW	src/gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_decodeW;$/;"	m	class:CoreDynParam
fp_issue_width	src/gpuwattch/XML_Parse.h	/^	int fp_issue_width;$/;"	m	struct:__anon15
fp_pipeline_stages	src/gpuwattch/basic_components.h	/^    int  num_hthreads, pipeline_stages, fp_pipeline_stages, num_pipelines, num_fp_pipelines;$/;"	m	class:CoreDynParam
fp_regfile_height	src/gpuwattch/core.h	/^	double int_regfile_height, fp_regfile_height;$/;"	m	class:RegFU
fp_rename_accesses	src/gpuwattch/XML_Parse.h	/^	double fp_rename_accesses;$/;"	m	struct:__anon15
fp_rename_reads	src/gpuwattch/XML_Parse.h	/^	double fp_rename_reads;$/;"	m	struct:__anon15
fp_rename_writes	src/gpuwattch/XML_Parse.h	/^	double fp_rename_writes;$/;"	m	struct:__anon15
fp_u	src/gpuwattch/core.h	/^    FunctionalUnit * fp_u;$/;"	m	class:EXECU
fpfp_node_cap	src/gpuwattch/logic.cc	/^double DFFCell::fpfp_node_cap(unsigned int fan_in, unsigned int fan_out)$/;"	f	class:DFFCell
fprint	src/gpgpu-sim/histogram.cc	/^void binned_histogram::fprint (FILE *fout) const$/;"	f	class:binned_histogram
fpu_accesses	src/gpuwattch/XML_Parse.h	/^	double fpu_accesses;$/;"	m	struct:__anon15
fragment_entry	src/gpgpu-sim/gpu-cache.h	/^        fragment_entry( mem_fetch *mf, unsigned idx, bool m, unsigned d )$/;"	f	struct:tex_cache::fragment_entry
fragment_entry	src/gpgpu-sim/gpu-cache.h	/^        fragment_entry() {}$/;"	f	struct:tex_cache::fragment_entry
fragment_entry	src/gpgpu-sim/gpu-cache.h	/^    struct fragment_entry {$/;"	s	class:tex_cache
freeBuffer	src/gpuwattch/xmlParser.cc	/^void ToXMLStringTool::freeBuffer(){ if (buf) free(buf); buf=NULL; buflen=0; }$/;"	f	class:ToXMLStringTool
freeBuffer	src/gpuwattch/xmlParser.cc	/^void XMLParserBase64Tool::freeBuffer(){ if (buf) free(buf); buf=NULL; buflen=0; }$/;"	f	class:XMLParserBase64Tool
freeXMLString	src/gpuwattch/xmlParser.cc	/^void freeXMLString(XMLSTR t){if(t)free(t);}$/;"	f
free_list	launcher/mk-sched/fixed_scheduler.h	/^  std::list<unsigned> free_list;$/;"	m	class:FixedScheduler
free_physical_pages	src/ramulator_sim/Memory.h	/^    vector<int> free_physical_pages;$/;"	m	class:Memory
free_physical_pages_remaining	src/ramulator_sim/Memory.h	/^    long free_physical_pages_remaining;$/;"	m	class:Memory
free_stack	src/gpgpu-sim/stack.cc	/^void free_stack(Stack *S) {$/;"	f
freq	src/ramulator_sim/ALDRAM.h	/^        double freq, tCK;$/;"	m	struct:ALDRAM::SpeedEntry
freq	src/ramulator_sim/DDR3.h	/^        double freq, tCK;$/;"	m	struct:DDR3::SpeedEntry
freq	src/ramulator_sim/DDR4.h	/^        double freq, tCK;$/;"	m	struct:DDR4::SpeedEntry
freq	src/ramulator_sim/DSARP.h	/^        double freq, tCK;$/;"	m	struct:DSARP::SpeedEntry
freq	src/ramulator_sim/GDDR5.h	/^        double freq, tCK;$/;"	m	struct:GDDR5::SpeedEntry
freq	src/ramulator_sim/HBM.h	/^        double freq, tCK;$/;"	m	struct:HBM::SpeedEntry
freq	src/ramulator_sim/LPDDR3.h	/^        double freq, tCK;$/;"	m	struct:LPDDR3::SpeedEntry
freq	src/ramulator_sim/LPDDR4.h	/^        double freq, tCK;$/;"	m	struct:LPDDR4::SpeedEntry
freq	src/ramulator_sim/SALP.h	/^        double freq, tCK;$/;"	m	struct:SALP::SpeedEntry
freq	src/ramulator_sim/TLDRAM.h	/^        double freq, tCK;$/;"	m	struct:TLDRAM::SpeedEntry
freq	src/ramulator_sim/WideIO.h	/^        double freq, tCK;$/;"	m	struct:WideIO::SpeedEntry
freq	src/ramulator_sim/WideIO2.h	/^        double freq, tCK;$/;"	m	struct:WideIO2::SpeedEntry
fringe_cap	src/gpuwattch/cacti/parameter.h	/^  double fringe_cap;$/;"	m	class:TechnologyParameter
fromString	src/option_parser.cc	/^   virtual bool fromString(const string str)$/;"	f	class:OptionRegistry
fromString	src/option_parser.cc	/^bool OptionRegistry<bool>::fromString(const string str)$/;"	f	class:OptionRegistry
fromString	src/option_parser.cc	/^bool OptionRegistry<char *>::fromString(const string str)$/;"	f	class:OptionRegistry
fromString	src/option_parser.cc	/^bool OptionRegistry<string>::fromString(const string str)$/;"	f	class:OptionRegistry
fromXMLString	src/gpuwattch/xmlParser.cc	/^XMLSTR fromXMLString(XMLCSTR s, int lo, XML *pXML)$/;"	f
front	src/stream_manager.h	/^    stream_operation &front() { return m_operations.front(); }$/;"	f	struct:CUstream_st
frontend	src/gpuwattch/memoryctrl.h	/^	MCFrontEnd * frontend;$/;"	m	class:MemoryController
frontendBuffer	src/gpuwattch/memoryctrl.h	/^	ArrayST  * frontendBuffer;$/;"	m	class:MCFrontEnd
frontend_duty_cycle	src/gpuwattch/basic_components.h	/^    double frontend_duty_cycle, duty_cycle, perc_load;$/;"	m	class:MCParam
fu_size	src/gpuwattch/basic_components.h	/^    int missb_size, fu_size, prefetchb_size, wbb_size;$/;"	m	class:CacheDynParam
fu_type	src/gpuwattch/logic.h	/^	enum FU_type fu_type;$/;"	m	class:FunctionalUnit	typeref:enum:FunctionalUnit::FU_type
full	src/gpgpu-sim/delayqueue.h	/^   bool full() const { return (m_max_len && m_length >= m_max_len); }$/;"	f	class:fifo_pipeline
full	src/gpgpu-sim/gpu-cache.cc	/^bool mshr_table::full( new_addr_type block_addr ) const{$/;"	f	class:mshr_table
full	src/gpgpu-sim/gpu-cache.h	/^        bool full() const { return m_num == m_size;}$/;"	f	class:tex_cache::fifo
full	src/gpgpu-sim/l2cache.cc	/^bool memory_sub_partition::full() const$/;"	f	class:memory_sub_partition
full	src/gpgpu-sim/l2cache.h	/^    virtual bool full( unsigned size, bool write) const $/;"	f	class:L2interface
full	src/gpgpu-sim/shader.h	/^    virtual bool full( unsigned size, bool write ) const $/;"	f	class:shader_memory_interface
full	src/gpgpu-sim/shader.h	/^    virtual bool full( unsigned size, bool write) const$/;"	f	class:perfect_memory_interface
full	src/intersim2/routers/chaos_router.hpp	/^    full,          \/\/  T****H    ready to send$/;"	e	enum:ChaosRouter::eQState
full	src/ramulator_sim/Controller.h	/^    bool full(Request::Type type)$/;"	f	class:Controller
full	src/ramulator_sim/Memory.h	/^    bool full (Request::Type type, long req_addr)$/;"	f	class:Memory
full	src/ramulator_sim/gpu_wrapper.cpp	/^bool GpuWrapper::full(int request_type, long request_addr )$/;"	f	class:GpuWrapper
full_stack	src/gpgpu-sim/stack.cc	/^int full_stack(Stack *S) {$/;"	f
fully_assoc	src/gpuwattch/cacti/cacti_interface.h	/^    bool     fully_assoc;$/;"	m	class:InputParameter
fully_assoc	src/gpuwattch/cacti/decoder.h	/^    bool   fully_assoc;$/;"	m	class:Decoder
fully_assoc	src/gpuwattch/cacti/parameter.h	/^    bool fully_assoc;$/;"	m	class:DynamicParameter
func_addr	src/cuda-sim/ptx_ir.h	/^   const operand_info &func_addr() const$/;"	f	class:ptx_instruction
func_exec_inst	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::func_exec_inst( warp_inst_t &inst )$/;"	f	class:shader_core_ctx
func_header	src/cuda-sim/ptx_parser.cc	/^void func_header(const char* a) {} \/\/intentional dummy function$/;"	f
func_header_info	src/cuda-sim/ptx_parser.cc	/^void func_header_info(const char* a) {} \/\/intentional dummy function$/;"	f
func_header_info_int	src/cuda-sim/ptx_parser.cc	/^void func_header_info_int(const char* a, int b) {} \/\/intentional dummy function$/;"	f
func_info	src/cuda-sim/ptx_sim.h	/^   function_info *func_info()$/;"	f	class:ptx_thread_info
function	src/abstract_hardware_model.h	/^   void (*function)(const class inst_t*, class ptx_thread_info*);$/;"	m	struct:dram_callback_t
function_calls	src/gpuwattch/XML_Parse.h	/^	double function_calls;$/;"	m	struct:__anon15
function_decl	src/cuda-sim/ptx.y	/^function_decl: function_decl_header LEFT_PAREN { start_function($1); func_header_info("(");} param_entry RIGHT_PAREN {func_header_info(")");} function_ident_param { $$ = reset_symtab(); }$/;"	l
function_decl_header	src/cuda-sim/ptx.y	/^function_decl_header: ENTRY_DIRECTIVE { $$ = 1; g_func_decl=1; func_header(".entry"); }$/;"	l
function_defn	src/cuda-sim/ptx.y	/^function_defn: function_decl { set_symtab($1); func_header(".skip"); } statement_block { end_function(); }$/;"	l
function_ident_param	src/cuda-sim/ptx.y	/^function_ident_param: IDENTIFIER { add_function_name($1); } LEFT_PAREN {func_header_info("(");} param_list RIGHT_PAREN { g_func_decl=0; func_header_info(")"); } $/;"	l
function_info	src/cuda-sim/ptx_ir.cc	/^function_info::function_info(int entry_point ) $/;"	f	class:function_info
function_info	src/cuda-sim/ptx_ir.h	/^class function_info {$/;"	c
function_info	src/cuda-sim/ptxinfo.y	/^function_info: info$/;"	l
function_name	src/cuda-sim/ptxinfo.y	/^function_name: FUNC QUOTE IDENTIFIER QUOTE { ptxinfo_function($3); }$/;"	l
functionalCoreSim	src/cuda-sim/cuda-sim.h	/^    functionalCoreSim(kernel_info_t * kernel, gpgpu_sim *g, unsigned warp_size)$/;"	f	class:functionalCoreSim
functionalCoreSim	src/cuda-sim/cuda-sim.h	/^class functionalCoreSim: public core_t$/;"	c
functional_done	common/shd_warp_t.cc	/^shd_warp_t::functional_done() const$/;"	f	class:shd_warp_t
gA	src/intersim2/networks/dragonfly.cpp	/^int gP, gA, gG;$/;"	v
gBurstAlpha	src/intersim/injection.cpp	/^double gBurstAlpha;$/;"	v
gBurstBeta	src/intersim/injection.cpp	/^double gBurstBeta;$/;"	v
gC	src/intersim2/main.cpp	/^int gC;\/\/concentration$/;"	v
gConstPacketSize	src/intersim/injection.cpp	/^int    gConstPacketSize;$/;"	v
gG	src/intersim2/networks/dragonfly.cpp	/^int gP, gA, gG;$/;"	v
gInjectionProcessMap	src/intersim/injection.cpp	/^map<string, tInjectionProcess> gInjectionProcessMap;$/;"	v
gK	src/intersim/network.cpp	/^int gK = 0;$/;"	v
gK	src/intersim2/main.cpp	/^int gK;\/\/radix$/;"	v
gN	src/intersim/network.cpp	/^int gN = 0;$/;"	v
gN	src/intersim2/main.cpp	/^int gN;\/\/dimension$/;"	v
gNodeStates	src/intersim/injection.cpp	/^int *gNodeStates = 0;$/;"	v
gNodes	src/intersim/network.cpp	/^int gNodes = 0;$/;"	v
gNodes	src/intersim2/main.cpp	/^int gNodes;$/;"	v
gNumVCS	src/intersim/routefunc.cpp	/^int gNumVCS;$/;"	v
gNumVCs	src/intersim2/routefunc.cpp	/^int gNumVCs;$/;"	v
gP	src/intersim2/networks/dragonfly.cpp	/^int gP, gA, gG;$/;"	v
gPerm	src/intersim/traffic.cpp	/^int *gPerm = 0;$/;"	v
gPermSeed	src/intersim/traffic.cpp	/^int gPermSeed;$/;"	v
gPrintActivity	src/intersim2/main.cpp	/^bool gPrintActivity;$/;"	v
gReadReplyBeginVC	src/intersim2/routefunc.cpp	/^int gReadReplyBeginVC, gReadReplyEndVC;$/;"	v
gReadReplyEndVC	src/intersim2/routefunc.cpp	/^int gReadReplyBeginVC, gReadReplyEndVC;$/;"	v
gReadReqBeginVC	src/intersim2/routefunc.cpp	/^int gReadReqBeginVC, gReadReqEndVC;$/;"	v
gReadReqEndVC	src/intersim2/routefunc.cpp	/^int gReadReqBeginVC, gReadReqEndVC;$/;"	v
gResetTraffic	src/intersim/traffic.cpp	/^int gResetTraffic = 0;$/;"	v
gRoutingFunctionMap	src/intersim/routefunc.cpp	/^map<string, tRoutingFunction> gRoutingFunctionMap;$/;"	v
gRoutingFunctionMap	src/intersim2/routefunc.cpp	/^map<string, tRoutingFunction> gRoutingFunctionMap;$/;"	v
gStepTraffic	src/intersim/traffic.cpp	/^int gStepTraffic  = 0;$/;"	v
gTrace	src/intersim2/main.cpp	/^bool gTrace;$/;"	v
gTrafficFunctionMap	src/intersim/traffic.cpp	/^map<string, tTrafficFunction> gTrafficFunctionMap;$/;"	v
gWatchOut	src/intersim2/main.cpp	/^ostream * gWatchOut;$/;"	v
gWriteReplyBeginVC	src/intersim2/routefunc.cpp	/^int gWriteReplyBeginVC, gWriteReplyEndVC;$/;"	v
gWriteReplyEndVC	src/intersim2/routefunc.cpp	/^int gWriteReplyBeginVC, gWriteReplyEndVC;$/;"	v
gWriteReqBeginVC	src/intersim2/routefunc.cpp	/^int gWriteReqBeginVC, gWriteReqEndVC;$/;"	v
gWriteReqEndVC	src/intersim2/routefunc.cpp	/^int gWriteReqBeginVC, gWriteReqEndVC;$/;"	v
g_add_identifier_cached__array_dim	src/cuda-sim/ptx_parser.cc	/^int g_add_identifier_cached__array_dim;$/;"	v
g_add_identifier_cached__array_ident	src/cuda-sim/ptx_parser.cc	/^int g_add_identifier_cached__array_ident;$/;"	v
g_add_identifier_cached__identifier	src/cuda-sim/ptx_parser.cc	/^char *g_add_identifier_cached__identifier = NULL;$/;"	v
g_alignment_spec	src/cuda-sim/ptx_parser.cc	/^int g_alignment_spec = -1;$/;"	v
g_assemble_code_next_pc	src/cuda-sim/cuda-sim.cc	/^unsigned g_assemble_code_next_pc=0; $/;"	v
g_const_alloc	src/cuda-sim/ptx_parser.cc	/^unsigned g_const_alloc = 1;$/;"	v
g_const_name_lookup	src/cuda-sim/cuda-sim.cc	/^std::map<const void*,std::string>   g_const_name_lookup; \/\/ indexed by hostVar$/;"	v
g_constants	src/cuda-sim/cuda-sim.cc	/^std::set<std::string>   g_constants;$/;"	v
g_cuda_launch_blocking	src/cuda-sim/cuda-sim.cc	/^bool g_cuda_launch_blocking = false;$/;"	v
g_current_symbol_table	src/cuda-sim/ptx_parser.cc	/^static symbol_table *g_current_symbol_table = NULL;$/;"	v	file:
g_cvt_fn	src/cuda-sim/instructions.cc	/^ptx_reg_t (*g_cvt_fn[11][11])( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, $/;"	v
g_debug_execution	src/cuda-sim/cuda-sim.cc	/^int g_debug_execution = 0;$/;"	v
g_debug_ir_generation	src/cuda-sim/ptx_parser.cc	/^static bool g_debug_ir_generation=false;$/;"	v	file:
g_debug_pc	src/cuda-sim/cuda-sim.cc	/^addr_t g_debug_pc = 0xBEEF1518;$/;"	v
g_debug_thread_uid	src/cuda-sim/cuda-sim.cc	/^int g_debug_thread_uid = 0;$/;"	v
g_declared	build/src/cuda-sim/ptxinfo.tab.c	/^	static unsigned g_declared;$/;"	v	file:
g_entry_func_param_index	src/cuda-sim/ptx_parser.cc	/^static unsigned g_entry_func_param_index=0;$/;"	v	file:
g_entry_point	src/cuda-sim/ptx_parser.cc	/^static int g_entry_point;$/;"	v	file:
g_error_detected	src/cuda-sim/ptx_parser.cc	/^int g_error_detected = 0;$/;"	v
g_extern_spec	src/cuda-sim/ptx_parser.cc	/^int g_extern_spec = 0;$/;"	v
g_filename	src/cuda-sim/ptx_parser.cc	/^const char *g_filename;$/;"	v
g_func_cta_info	src/cuda-sim/cuda-sim.cc	/^ptx_cta_info *g_func_cta_info = NULL;$/;"	v
g_func_decl	src/cuda-sim/ptx_parser.cc	/^int g_func_decl = 0;$/;"	v
g_func_info	src/cuda-sim/ptx_parser.cc	/^static function_info *g_func_info = NULL;$/;"	v	file:
g_glbmap	libcuda/cuda_runtime_api.cc	/^glbmap_entry_t* g_glbmap = NULL;$/;"	v
g_global_allfiles_symbol_table	src/cuda-sim/ptx_parser.cc	/^static symbol_table *g_global_allfiles_symbol_table = NULL;$/;"	v	file:
g_global_mem	src/cuda-sim/ptx_loader.cc	/^memory_space *g_global_mem;$/;"	v
g_global_name_lookup	src/cuda-sim/cuda-sim.cc	/^std::map<const void*,std::string>   g_global_name_lookup; \/\/ indexed by hostVar$/;"	v
g_global_symbol_table	src/cuda-sim/ptx_parser.cc	/^static symbol_table *g_global_symbol_table = NULL;$/;"	v	file:
g_globals	src/cuda-sim/cuda-sim.cc	/^std::set<std::string>   g_globals;$/;"	v
g_icnt_interface	src/intersim2/main.cpp	/^InterconnectInterface *g_icnt_interface;$/;"	v
g_ident_add_uid	src/cuda-sim/ptx_parser.cc	/^int g_ident_add_uid = 0;$/;"	v
g_inst_classification_stat	src/cuda-sim/cuda-sim.cc	/^void ** g_inst_classification_stat = NULL;$/;"	v
g_inst_lookup	src/cuda-sim/ptx_parser.cc	/^std::map<std::string,std::map<unsigned,const ptx_instruction*> > g_inst_lookup;$/;"	v
g_inst_op_classification_stat	src/cuda-sim/cuda-sim.cc	/^void ** g_inst_op_classification_stat= NULL;$/;"	v
g_instructions	src/cuda-sim/ptx_parser.cc	/^static std::list<ptx_instruction*> g_instructions;$/;"	v	file:
g_interactive_debugger_enabled	src/gpgpu-sim/gpu-sim.cc	/^bool g_interactive_debugger_enabled=false;$/;"	v
g_keep_intermediate_files	src/cuda-sim/ptx_loader.cc	/^bool g_keep_intermediate_files;$/;"	v
g_label	src/cuda-sim/ptx_parser.cc	/^symbol *g_label;$/;"	v
g_last_cudaError	libcuda/cuda_runtime_api.cc	/^cudaError_t g_last_cudaError = cudaSuccess;$/;"	v
g_last_symbol	src/cuda-sim/ptx_parser.cc	/^static symbol *g_last_symbol = NULL;$/;"	v	file:
g_max_regs_per_thread	src/cuda-sim/ptx_parser.cc	/^unsigned g_max_regs_per_thread = 0;$/;"	v
g_metric_trace_filename	src/gpgpu-sim/gpu-sim.h	/^    char *g_metric_trace_filename;$/;"	m	struct:power_config
g_metric_trace_filename	src/gpuwattch/gpgpu_sim_wrapper.h	/^    char *g_metric_trace_filename;$/;"	m	class:gpgpu_sim_wrapper
g_my_time_vector	src/gpgpu-sim/visualizer.cc	/^my_time_vector* g_my_time_vector; $/;"	v
g_neg_pred	src/cuda-sim/ptx_parser.cc	/^int g_neg_pred;$/;"	v
g_network_config_filename	src/gpgpu-sim/icnt_wrapper.cc	/^char* g_network_config_filename;$/;"	v
g_network_mode	src/gpgpu-sim/icnt_wrapper.cc	/^int   g_network_mode;$/;"	v
g_num_ptx_inst_uid	src/cuda-sim/instructions.cc	/^unsigned ptx_instruction::g_num_ptx_inst_uid=0;$/;"	m	class:ptx_instruction	file:
g_num_ptx_inst_uid	src/cuda-sim/ptx_ir.h	/^   static unsigned g_num_ptx_inst_uid;$/;"	m	class:ptx_instruction
g_num_vcs	src/intersim/interconnect_interface.cpp	/^unsigned int g_num_vcs; \/\/number of virtual channels$/;"	v
g_opcode	src/cuda-sim/ptx_parser.cc	/^int g_opcode = -1;$/;"	v
g_opcode_string	src/cuda-sim/instructions.cc	/^const char *g_opcode_string[NUM_OPCODES] = {$/;"	v
g_operands	src/cuda-sim/ptx_parser.cc	/^std::list<operand_info> g_operands;$/;"	v
g_options	src/cuda-sim/ptx_parser.cc	/^std::list<int> g_options;$/;"	v
g_override_embedded_ptx	src/cuda-sim/ptx_loader.cc	/^bool g_override_embedded_ptx = false;$/;"	v
g_param_mem	src/cuda-sim/ptx_loader.cc	/^memory_space *g_param_mem;$/;"	v
g_pc_to_finfo	src/cuda-sim/cuda-sim.cc	/^std::map<unsigned,function_info*> g_pc_to_finfo;$/;"	v
g_pipe	libcuda/cuda_runtime_api.cc	/^static Communicate *g_pipe = NULL;$/;"	v	file:
g_power_config_name	src/gpgpu-sim/gpu-sim.h	/^	char *g_power_config_name;$/;"	m	struct:power_config
g_power_filename	src/gpgpu-sim/gpu-sim.h	/^    char *g_power_filename;$/;"	m	struct:power_config
g_power_filename	src/gpuwattch/gpgpu_sim_wrapper.h	/^    char *g_power_filename;$/;"	m	class:gpgpu_sim_wrapper
g_power_per_cycle_dump	src/gpgpu-sim/gpu-sim.h	/^    bool g_power_per_cycle_dump;$/;"	m	struct:power_config
g_power_per_cycle_dump	src/gpuwattch/gpgpu_sim_wrapper.h	/^    bool g_power_per_cycle_dump;$/;"	m	class:gpgpu_sim_wrapper
g_power_simulation_enabled	src/gpgpu-sim/gpu-sim.h	/^    bool g_power_simulation_enabled;$/;"	m	struct:power_config
g_power_simulation_enabled	src/gpuwattch/gpgpu_sim_wrapper.h	/^    bool g_power_simulation_enabled;$/;"	m	class:gpgpu_sim_wrapper
g_power_simulator_debug	src/gpgpu-sim/gpu-sim.h	/^    bool g_power_simulator_debug;$/;"	m	struct:power_config
g_power_trace_enabled	src/gpgpu-sim/gpu-sim.h	/^    bool g_power_trace_enabled;$/;"	m	struct:power_config
g_power_trace_enabled	src/gpuwattch/gpgpu_sim_wrapper.h	/^    bool g_power_trace_enabled;$/;"	m	class:gpgpu_sim_wrapper
g_power_trace_filename	src/gpgpu-sim/gpu-sim.h	/^    char *g_power_trace_filename;$/;"	m	struct:power_config
g_power_trace_filename	src/gpuwattch/gpgpu_sim_wrapper.h	/^    char *g_power_trace_filename;$/;"	m	class:gpgpu_sim_wrapper
g_power_trace_zlevel	src/gpgpu-sim/gpu-sim.h	/^    int g_power_trace_zlevel;$/;"	m	struct:power_config
g_power_trace_zlevel	src/gpuwattch/gpgpu_sim_wrapper.h	/^	int g_power_trace_zlevel;$/;"	m	class:gpgpu_sim_wrapper
g_pred	src/cuda-sim/ptx_parser.cc	/^const symbol *g_pred;$/;"	v
g_pred_mod	src/cuda-sim/ptx_parser.cc	/^int g_pred_mod;$/;"	v
g_print_memory_space	src/cuda-sim/memory.cc	/^void g_print_memory_space(memory_space *mem, const char *format = "%08x", FILE *fout = stdout) $/;"	f
g_ptr_spec	src/cuda-sim/ptx_parser.cc	/^memory_space_t g_ptr_spec = undefined_space;$/;"	v
g_ptx_cta_info_sm_idx_used	src/cuda-sim/ptx_sim.cc	/^std::map<unsigned, std::set<unsigned long long> > g_ptx_cta_info_sm_idx_used;$/;"	v
g_ptx_cta_info_uid	src/cuda-sim/ptx_sim.cc	/^unsigned long long g_ptx_cta_info_uid = 1;$/;"	v
g_ptx_inst_debug_file	src/abstract_hardware_model.h	/^    char* g_ptx_inst_debug_file;$/;"	m	class:gpgpu_functional_sim_config
g_ptx_inst_debug_thread_uid	src/abstract_hardware_model.h	/^    int   g_ptx_inst_debug_thread_uid;$/;"	m	class:gpgpu_functional_sim_config
g_ptx_inst_debug_to_file	src/abstract_hardware_model.h	/^    int   g_ptx_inst_debug_to_file;$/;"	m	class:gpgpu_functional_sim_config
g_ptx_kernel_count	src/cuda-sim/cuda-sim.cc	/^int g_ptx_kernel_count = -1; \/\/ used for classification stat collection purposes $/;"	v
g_ptx_sim_mode	src/cuda-sim/cuda-sim.cc	/^int g_ptx_sim_mode; \/\/ if non-zero run functional simulation only (i.e., no notion of a clock cycle)$/;"	v
g_ptx_sim_num_insn	src/cuda-sim/cuda-sim.cc	/^unsigned g_ptx_sim_num_insn = 0;$/;"	v
g_ptx_thread_info_delete_count	src/cuda-sim/ptx_sim.cc	/^unsigned g_ptx_thread_info_delete_count=0;$/;"	v
g_ptx_thread_info_uid_next	src/cuda-sim/ptx_sim.cc	/^unsigned g_ptx_thread_info_uid_next=1;$/;"	v
g_ptx_token_decode	src/cuda-sim/ptx_parser.cc	/^static std::map<unsigned,std::string> g_ptx_token_decode;$/;"	v	file:
g_ptxinfo_error_detected	src/cuda-sim/cuda-sim.cc	/^int g_ptxinfo_error_detected;$/;"	v
g_ptxinfo_filename	src/cuda-sim/ptx_loader.cc	/^const char *g_ptxinfo_filename;$/;"	v
g_ptxinfo_kinfo	src/cuda-sim/cuda-sim.cc	/^static struct gpgpu_ptx_sim_kernel_info g_ptxinfo_kinfo;$/;"	v	typeref:struct:gpgpu_ptx_sim_kernel_info	file:
g_ptxinfo_kname	src/cuda-sim/cuda-sim.cc	/^static char *g_ptxinfo_kname = NULL;$/;"	v	file:
g_return_var	src/cuda-sim/ptx_parser.cc	/^static operand_info g_return_var;$/;"	v	file:
g_rpts	src/cuda-sim/cuda-sim.cc	/^struct std::map<function_info*,rec_pts> g_rpts;$/;"	v	typeref:struct:map
g_save_embedded_ptx	src/cuda-sim/ptx_loader.cc	/^static bool g_save_embedded_ptx;$/;"	v	file:
g_scalar_type	src/cuda-sim/ptx_parser.cc	/^std::list<int> g_scalar_type;$/;"	v
g_scalar_type_spec	src/cuda-sim/ptx_parser.cc	/^int g_scalar_type_spec = -1;$/;"	v
g_shader_core_config	src/cuda-sim/ptx_parser.cc	/^static const struct core_config *g_shader_core_config;$/;"	v	typeref:struct:core_config	file:
g_simulation_starttime	src/gpgpusim_entrypoint.cc	/^time_t g_simulation_starttime;$/;"	v
g_single_step	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long g_single_step=0; \/\/ set this in gdb to single step the pipeline$/;"	v
g_space_spec	src/cuda-sim/ptx_parser.cc	/^memory_space_t g_space_spec = undefined_space;$/;"	v
g_steady_power_levels_enabled	src/gpgpu-sim/gpu-sim.h	/^    bool g_steady_power_levels_enabled;$/;"	m	struct:power_config
g_steady_power_levels_enabled	src/gpuwattch/gpgpu_sim_wrapper.h	/^    bool g_steady_power_levels_enabled;$/;"	m	class:gpgpu_sim_wrapper
g_steady_state_tracking_filename	src/gpgpu-sim/gpu-sim.h	/^    char * g_steady_state_tracking_filename;$/;"	m	struct:power_config
g_steady_state_tracking_filename	src/gpuwattch/gpgpu_sim_wrapper.h	/^    char * g_steady_state_tracking_filename;$/;"	m	class:gpgpu_sim_wrapper
g_stream_manager	src/gpgpusim_entrypoint.cc	/^stream_manager *g_stream_manager;$/;"	v
g_surf_mem	src/cuda-sim/ptx_loader.cc	/^memory_space *g_surf_mem;$/;"	v
g_sym_name_to_symbol_table	src/cuda-sim/ptx_parser.cc	/^std::map<std::string,symbol_table*> g_sym_name_to_symbol_table;$/;"	v
g_system	build/src/cuda-sim/ptxinfo.tab.c	/^	static unsigned g_system;$/;"	v	file:
g_tex_mem	src/cuda-sim/ptx_loader.cc	/^memory_space *g_tex_mem;$/;"	v
g_the_gpu	src/gpgpusim_entrypoint.cc	/^gpgpu_sim *g_the_gpu;$/;"	v
g_the_gpu_config	src/gpgpusim_entrypoint.cc	/^gpgpu_sim_config g_the_gpu_config;$/;"	v
g_timer_events	libcuda/cuda_runtime_api.cc	/^event_tracker_t g_timer_events;$/;"	v
g_tp	src/gpuwattch/cacti/parameter.cc	/^TechnologyParameter g_tp;$/;"	v
g_use_nonlinear_model	src/gpgpu-sim/gpu-sim.h	/^    bool g_use_nonlinear_model;$/;"	m	struct:power_config
g_var_type	src/cuda-sim/ptx_parser.cc	/^type_info *g_var_type = NULL;$/;"	v
g_vector_spec	src/cuda-sim/ptx_parser.cc	/^int g_vector_spec = -1;$/;"	v
g_visualizer_enabled	src/gpgpu-sim/gpu-sim.h	/^    bool  g_visualizer_enabled;$/;"	m	class:gpgpu_sim_config
g_visualizer_filename	src/gpgpu-sim/gpu-sim.h	/^    char *g_visualizer_filename;$/;"	m	class:gpgpu_sim_config
g_visualizer_zlevel	src/gpgpu-sim/gpu-sim.h	/^    int   g_visualizer_zlevel;$/;"	m	class:gpgpu_sim_config
g_watchpoint_hits	src/debug.cc	/^std::map<unsigned,watchpoint_event> g_watchpoint_hits;$/;"	v
gap	src/gpgpu-sim/addrdec.h	/^   unsigned int gap;$/;"	m	class:linear_to_raw_address_translation
gate_C	src/gpuwattch/cacti/basic_circuit.cc	/^double gate_C($/;"	f
gate_C_pass	src/gpuwattch/cacti/basic_circuit.cc	/^double gate_C_pass($/;"	f
gate_cap	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::gate_cap(double w) {$/;"	f	class:MCPAT_Router
gate_leakage	src/gpuwattch/cacti/cacti_interface.h	/^    double gate_leakage;$/;"	m	class:powerComponents
gate_leakage	src/gpuwattch/logic.h	/^	double energy, base_energy,per_access_energy, leakage, gate_leakage;$/;"	m	class:FunctionalUnit
generate_mem_accesses	src/abstract_hardware_model.cc	/^void warp_inst_t::generate_mem_accesses()$/;"	f	class:warp_inst_t
generate_remap_matrix	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::generate_remap_matrix()$/;"	f	class:linear_to_raw_address_translation
generic_space	src/abstract_hardware_model.h	/^   generic_space,$/;"	e	enum:_memory_space_t
generic_to_global	src/cuda-sim/cuda-sim.cc	/^addr_t generic_to_global( addr_t addr )$/;"	f
generic_to_local	src/cuda-sim/cuda-sim.cc	/^addr_t generic_to_local( unsigned smid, unsigned hwtid, addr_t addr )$/;"	f
generic_to_shared	src/cuda-sim/cuda-sim.cc	/^addr_t generic_to_shared( unsigned smid, addr_t addr )$/;"	f
get	launcher/mk-sched/named_info.cc	/^NamedInfo<T>::get(std::string str) const$/;"	f	class:NamedInfo
getArch	libcuda/cuda_runtime_api.cc	/^    unsigned getArch() {return arch;}$/;"	f	class:cuobjdumpSection
getAttribute	src/gpuwattch/xmlParser.cc	/^XMLAttribute XMLNode::getAttribute     (int i) const { if ((!d)||(i>=d->nAttribute)) return emptyXMLAttribute; return d->pAttribute[i]; }$/;"	f	class:XMLNode
getAttribute	src/gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::getAttribute(XMLCSTR lpszAttrib, int *j) const$/;"	f	class:XMLNode
getAttribute	src/gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::getAttribute(XMLCSTR name, int j) const$/;"	f	class:XMLNode
getAttributeName	src/gpuwattch/xmlParser.cc	/^XMLCSTR      XMLNode::getAttributeName (int i) const { if ((!d)||(i>=d->nAttribute)) return NULL;              return d->pAttribute[i].lpszName;  }$/;"	f	class:XMLNode
getAttributeValue	src/gpuwattch/xmlParser.cc	/^XMLCSTR      XMLNode::getAttributeValue(int i) const { if ((!d)||(i>=d->nAttribute)) return NULL;              return d->pAttribute[i].lpszValue; }$/;"	f	class:XMLNode
getChildNode	src/gpuwattch/xmlParser.cc	/^XMLNode      XMLNode::getChildNode     (int i) const { if ((!d)||(i>=d->nChild    )) return emptyXMLNode;      return d->pChild[i];     }$/;"	f	class:XMLNode
getChildNode	src/gpuwattch/xmlParser.cc	/^XMLNode XMLNode::getChildNode(XMLCSTR name, int *j) const$/;"	f	class:XMLNode
getChildNode	src/gpuwattch/xmlParser.cc	/^XMLNode XMLNode::getChildNode(XMLCSTR name, int j) const$/;"	f	class:XMLNode
getChildNodeByPath	src/gpuwattch/xmlParser.cc	/^XMLNode XMLNode::getChildNodeByPath(XMLCSTR _path, char createMissing, XMLCHAR sep)$/;"	f	class:XMLNode
getChildNodeByPathNonConst	src/gpuwattch/xmlParser.cc	/^XMLNode XMLNode::getChildNodeByPathNonConst(XMLSTR path, char createIfMissing, XMLCHAR sep)$/;"	f	class:XMLNode
getChildNodeWithAttribute	src/gpuwattch/xmlParser.cc	/^XMLNode XMLNode::getChildNodeWithAttribute(XMLCSTR name,XMLCSTR attributeName,XMLCSTR attributeValue, int *k) const$/;"	f	class:XMLNode
getClear	src/gpuwattch/xmlParser.cc	/^XMLClear     XMLNode::getClear         (int i) const { if ((!d)||(i>=d->nClear    )) return emptyXMLClear;     return d->pClear[i];     }$/;"	f	class:XMLNode
getELFfilename	libcuda/cuda_runtime_api.cc	/^    std::string getELFfilename() {return elffilename;}$/;"	f	class:cuobjdumpELFSection
getError	src/gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::getError(XMLError xerror)$/;"	f	class:XMLNode
getExecuteWarp	src/abstract_hardware_model.cc	/^warp_inst_t core_t::getExecuteWarp(unsigned warpId)$/;"	f	class:core_t
getID	launcher/child_process.h	/^  unsigned getID() const { return ID; }$/;"	f	class:ChildProcess
getIdentifier	libcuda/cuda_runtime_api.cc	/^    std::string getIdentifier() {return identifier;}$/;"	f	class:cuobjdumpSection
getMemoryConfig	src/gpgpu-sim/gpu-sim.cc	/^const struct memory_config * gpgpu_sim::getMemoryConfig()$/;"	f	class:gpgpu_sim
getName	src/gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::getName() const { if (!d) return NULL; return d->lpszName;   }$/;"	f	class:XMLNode
getNextChar	src/gpuwattch/xmlParser.cc	/^static inline XMLCHAR getNextChar(XML *pXML)$/;"	f	file:
getNumberOfProcesses	launcher/launcher_option_parser.h	/^  unsigned getNumberOfProcesses() const { return childs.size(); }$/;"	f	class:LauncherOptionParser
getPTXfilename	libcuda/cuda_runtime_api.cc	/^    std::string getPTXfilename() {return ptxfilename;}$/;"	f	class:cuobjdumpPTXSection
getParentNode	src/gpuwattch/xmlParser.cc	/^XMLNode      XMLNode::getParentNode    (     ) const { if ((!d)||(!d->pParent     )) return emptyXMLNode;      return XMLNode(d->pParent); }$/;"	f	class:XMLNode
getSASSfilename	libcuda/cuda_runtime_api.cc	/^    std::string getSASSfilename() {return sassfilename;}$/;"	f	class:cuobjdumpELFSection
getSIMTCluster	src/gpgpu-sim/gpu-sim.cc	/^simt_core_cluster * gpgpu_sim::getSIMTCluster()$/;"	f	class:gpgpu_sim
getScheduler	launcher/launcher_option_parser.h	/^  MKScheduler* getScheduler() { return scheduler; }$/;"	f	class:LauncherOptionParser
getShaderCoreConfig	src/gpgpu-sim/gpu-sim.cc	/^const struct shader_core_config * gpgpu_sim::getShaderCoreConfig()$/;"	f	class:gpgpu_sim
getStats	src/intersim2/trafficmanager.hpp	/^  Stats * getStats(const string & name) { return _stats[name]; }$/;"	f	class:TrafficManager
getText	src/gpuwattch/xmlParser.cc	/^XMLCSTR      XMLNode::getText          (int i) const { if ((!d)||(i>=d->nText     )) return NULL;              return d->pText[i];      }$/;"	f	class:XMLNode
getTime	src/intersim2/trafficmanager.hpp	/^  inline int getTime() { return _time;}$/;"	f	class:TrafficManager
getVersion	src/gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::getVersion() { return _CXML("v2.39"); }$/;"	f	class:XMLNode
get_L1C_sub_stats	src/gpgpu-sim/shader.cc	/^void ldst_unit::get_L1C_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:ldst_unit
get_L1C_sub_stats	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::get_L1C_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:shader_core_ctx
get_L1C_sub_stats	src/gpgpu-sim/shader.cc	/^void simt_core_cluster::get_L1C_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:simt_core_cluster
get_L1D_sub_stats	src/gpgpu-sim/shader.cc	/^void ldst_unit::get_L1D_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:ldst_unit
get_L1D_sub_stats	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::get_L1D_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:shader_core_ctx
get_L1D_sub_stats	src/gpgpu-sim/shader.cc	/^void simt_core_cluster::get_L1D_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:simt_core_cluster
get_L1I_sub_stats	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::get_L1I_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:shader_core_ctx
get_L1I_sub_stats	src/gpgpu-sim/shader.cc	/^void simt_core_cluster::get_L1I_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:simt_core_cluster
get_L1T_sub_stats	src/gpgpu-sim/shader.cc	/^void ldst_unit::get_L1T_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:ldst_unit
get_L1T_sub_stats	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::get_L1T_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:shader_core_ctx
get_L1T_sub_stats	src/gpgpu-sim/shader.cc	/^void simt_core_cluster::get_L1T_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:simt_core_cluster
get_L2cache_sub_stats	src/gpgpu-sim/l2cache.cc	/^void memory_sub_partition::get_L2cache_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:memory_sub_partition
get_L2cache_sub_stats_kain	src/gpgpu-sim/l2cache.cc	/^void memory_sub_partition::get_L2cache_sub_stats_kain(unsigned cluster_id, struct cache_sub_stats &css) const{$/;"	f	class:memory_sub_partition
get_PC	src/cuda-sim/ptx_ir.h	/^   addr_t get_PC() const$/;"	f	class:ptx_instruction
get_access_byte_mask	src/gpgpu-sim/mem_fetch.h	/^   mem_access_byte_mask_t get_access_byte_mask() const { return m_access.get_byte_mask(); }$/;"	f	class:mem_fetch
get_access_type	src/gpgpu-sim/mem_fetch.h	/^   enum mem_access_type get_access_type() const { return m_access.get_type(); }$/;"	f	class:mem_fetch
get_access_warp_mask	src/gpgpu-sim/mem_fetch.h	/^   const active_mask_t& get_access_warp_mask() const { return m_access.get_warp_mask(); }$/;"	f	class:mem_fetch
get_active_count	src/gpgpu-sim/shader.h	/^      unsigned get_active_count() const { return m_warp->active_count(); }$/;"	f	class:opndcoll_rfu_t::collector_unit_t
get_active_count	src/gpgpu-sim/shader.h	/^      unsigned get_active_count() const$/;"	f	class:opndcoll_rfu_t::op_t
get_active_lanes_in_pipeline	src/gpgpu-sim/shader.h	/^    virtual unsigned get_active_lanes_in_pipeline()$/;"	f	class:pipelined_simd_unit
get_active_mask	src/abstract_hardware_model.cc	/^const simt_mask_t &simt_stack::get_active_mask() const$/;"	f	class:simt_stack
get_active_mask	src/abstract_hardware_model.h	/^    const active_mask_t & get_active_mask() const$/;"	f	class:warp_inst_t
get_active_mask	src/gpgpu-sim/shader.h	/^      const active_mask_t & get_active_mask() const { return m_warp->get_active_mask(); }$/;"	f	class:opndcoll_rfu_t::collector_unit_t
get_active_mask	src/gpgpu-sim/shader.h	/^      const active_mask_t & get_active_mask()$/;"	f	class:opndcoll_rfu_t::op_t
get_active_threads	common/shd_warp_t.h	/^    const std::bitset<MAX_WARP_SIZE>& get_active_threads() const { return m_active_threads; }$/;"	f	class:shd_warp_t
get_active_threads_for_cta	src/gpgpu-sim/shader.h	/^    unsigned get_active_threads_for_cta(unsigned hw_cta_id) const { assert(hw_cta_id < MAX_CTA_PER_SHADER); return m_cta_status[hw_cta_id]; }$/;"	f	class:shader_core_ctx
get_addr	src/abstract_hardware_model.h	/^    new_addr_type get_addr( unsigned n ) const$/;"	f	class:warp_inst_t
get_addr	src/abstract_hardware_model.h	/^   new_addr_type get_addr() const { return m_addr; }$/;"	f	class:mem_access_t
get_addr	src/debug.h	/^   addr_t get_addr() const { return m_addr; }$/;"	f	class:brk_pt
get_addr	src/gpgpu-sim/mem_fetch.h	/^   new_addr_type get_addr() const { return m_access.get_addr(); }$/;"	f	class:mem_fetch
get_addr_offset	src/cuda-sim/ptx_ir.h	/^   int get_addr_offset() const { return m_addr_offset;}$/;"	f	class:operand_info
get_addr_space	src/cuda-sim/ptx_ir.h	/^   enum _memory_space_t get_addr_space() const { return m_addr_space; }$/;"	f	class:operand_info
get_addr_vec	src/ramulator_sim/Controller.cpp	/^vector<int> Controller<SALP>::get_addr_vec(SALP::Command cmd, list<Request>::iterator req) {$/;"	f	class:Controller
get_addr_vec	src/ramulator_sim/Controller.h	/^    vector<int> get_addr_vec(typename T::Command cmd, list<Request>::iterator req) {$/;"	f	class:Controller
get_address	src/cuda-sim/ptx_ir.h	/^   addr_t get_address() const $/;"	f	class:symbol
get_app_binary	libcuda/cuda_runtime_api.cc	/^std::string get_app_binary(){$/;"	f
get_area	src/gpuwattch/cacti/area.h	/^  double get_area() const$/;"	f	class:Area
get_arg	src/cuda-sim/ptx_ir.h	/^   const symbol* get_arg( unsigned n ) const$/;"	f	class:function_info
get_args	common/kernel_config.h	/^  gpgpu_ptx_sim_arg_list_t get_args() { return m_args; }$/;"	f	class:kernel_config
get_array_dim	src/cuda-sim/ptx_ir.h	/^   int get_array_dim() const { assert(m_init); return m_array_dim; }$/;"	f	class:type_info_key
get_array_type	src/cuda-sim/ptx_ir.cc	/^type_info *symbol_table::get_array_type( type_info *base_type, unsigned array_dim ) $/;"	f	class:symbol_table
get_atomic	src/cuda-sim/ptx_ir.h	/^   unsigned get_atomic() const { return m_atomic_spec;}$/;"	f	class:ptx_instruction
get_bank	src/abstract_hardware_model.h	/^   unsigned get_bank() const { return m_bank; }$/;"	f	class:memory_space_t
get_bank	src/gpgpu-sim/shader.h	/^      unsigned get_bank() const { return m_bank; }$/;"	f	class:opndcoll_rfu_t::op_t
get_bb	src/cuda-sim/ptx_ir.h	/^   basic_block_t* get_bb() { return m_basic_block;}$/;"	f	class:ptx_instruction
get_bit	src/cuda-sim/ptx_sim.h	/^   int get_bit( unsigned bit )$/;"	f	union:ptx_reg_t
get_block	src/gpgpu-sim/gpu-cache.h	/^    cache_block_t &get_block(unsigned idx) { return m_lines[idx];}$/;"	f	class:tag_array
get_builtin	src/cuda-sim/ptx_sim.cc	/^unsigned ptx_thread_info::get_builtin( int builtin_id, unsigned dim_mod ) $/;"	f	class:ptx_thread_info
get_buswidth_in_bytes	src/gpgpu-sim/gpu-sim.h	/^   unsigned get_buswidth_in_bytes() const$/;"	f	struct:memory_config
get_byte_mask	src/abstract_hardware_model.h	/^   mem_access_byte_mask_t get_byte_mask() const { return m_byte_mask; }$/;"	f	class:mem_access_t
get_cache_config	src/gpgpu-sim/gpu-sim.cc	/^FuncCache gpgpu_sim::get_cache_config(std::string kernel_name)$/;"	f	class:gpgpu_sim
get_cache_misses	src/gpgpu-sim/power_stat.h	/^    unsigned get_cache_misses(){$/;"	f	class:power_stat_t
get_cache_read_misses	src/gpgpu-sim/power_stat.h	/^    unsigned get_cache_read_misses(){$/;"	f	class:power_stat_t
get_cache_stats	src/gpgpu-sim/shader.cc	/^void ldst_unit::get_cache_stats(cache_stats &cs) {$/;"	f	class:ldst_unit
get_cache_stats	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::get_cache_stats(cache_stats &cs){$/;"	f	class:shader_core_ctx
get_cache_stats	src/gpgpu-sim/shader.cc	/^void simt_core_cluster::get_cache_stats(cache_stats &cs) const{$/;"	f	class:simt_core_cluster
get_cache_status	src/gpgpu-sim/gpu-cache.h	/^    FuncCache get_cache_status() {return cache_status;}$/;"	f	class:cache_config
get_cache_write_misses	src/gpgpu-sim/power_stat.h	/^    unsigned get_cache_write_misses(){$/;"	f	class:power_stat_t
get_channels	src/ramulator_sim/Config.h	/^  int get_channels() const {return channels;}$/;"	f	class:Config
get_chip_id	src/gpgpu-sim/mem_fetch.h	/^   unsigned get_chip_id() const { return m_raw_addr.chip; }$/;"	f	class:mem_fetch
get_cmpop	src/cuda-sim/ptx_ir.h	/^   unsigned get_cmpop() const { return m_compare_op;}$/;"	f	class:ptx_instruction
get_coefficient_ccache_readhits	src/gpuwattch/core.h	/^	float get_coefficient_ccache_readhits()$/;"	f	class:Core
get_coefficient_ccache_readmisses	src/gpuwattch/core.h	/^	float get_coefficient_ccache_readmisses()$/;"	f	class:Core
get_coefficient_dcache_readhits	src/gpuwattch/core.h	/^	float get_coefficient_dcache_readhits()$/;"	f	class:Core
get_coefficient_dcache_readmisses	src/gpuwattch/core.h	/^	float get_coefficient_dcache_readmisses()$/;"	f	class:Core
get_coefficient_dcache_writehits	src/gpuwattch/core.h	/^	float get_coefficient_dcache_writehits()$/;"	f	class:Core
get_coefficient_dcache_writemisses	src/gpuwattch/core.h	/^	float get_coefficient_dcache_writemisses(){$/;"	f	class:Core
get_coefficient_duty_cycle	src/gpuwattch/core.h	/^	float get_coefficient_duty_cycle()$/;"	f	class:Core
get_coefficient_fpint_insts	src/gpuwattch/core.h	/^	float get_coefficient_fpint_insts(){$/;"	f	class:Core
get_coefficient_fpu_accesses	src/gpuwattch/core.h	/^	float get_coefficient_fpu_accesses(){$/;"	f	class:Core
get_coefficient_ialu_accesses	src/gpuwattch/core.h	/^	float get_coefficient_ialu_accesses(){$/;"	f	class:Core
get_coefficient_icache_hits	src/gpuwattch/core.h	/^	float get_coefficient_icache_hits(){$/;"	f	class:Core
get_coefficient_icache_misses	src/gpuwattch/core.h	/^	float get_coefficient_icache_misses(){$/;"	f	class:Core
get_coefficient_l2_read_hits	src/gpuwattch/processor.h	/^	 double get_coefficient_l2_read_hits(){$/;"	f	class:Processor
get_coefficient_l2_read_misses	src/gpuwattch/processor.h	/^	 double get_coefficient_l2_read_misses(){$/;"	f	class:Processor
get_coefficient_l2_write_hits	src/gpuwattch/processor.h	/^	 double get_coefficient_l2_write_hits(){$/;"	f	class:Processor
get_coefficient_l2_write_misses	src/gpuwattch/processor.h	/^	 double get_coefficient_l2_write_misses(){$/;"	f	class:Processor
get_coefficient_lsq_accesses	src/gpuwattch/core.h	/^	float get_coefficient_lsq_accesses()$/;"	f	class:Core
get_coefficient_mem_pre	src/gpuwattch/processor.h	/^	 double get_coefficient_mem_pre()$/;"	f	class:Processor
get_coefficient_mem_reads	src/gpuwattch/processor.h	/^	 double get_coefficient_mem_reads()$/;"	f	class:Processor
get_coefficient_mem_writes	src/gpuwattch/processor.h	/^	 double get_coefficient_mem_writes()$/;"	f	class:Processor
get_coefficient_noc_accesses	src/gpuwattch/processor.h	/^	 double get_coefficient_noc_accesses() {$/;"	f	class:Processor
get_coefficient_noregfileops_accesses	src/gpuwattch/core.h	/^	float get_coefficient_noregfileops_accesses(){return ((exu->rfu->xbar_rfu->power.readOp.dynamic\/(32\/**1.5*\/))+$/;"	f	class:Core
get_coefficient_readcoalescing	src/gpuwattch/processor.h	/^    double get_coefficient_readcoalescing()$/;"	f	class:Processor
get_coefficient_regreads_accesses	src/gpuwattch/core.h	/^	float get_coefficient_regreads_accesses(){$/;"	f	class:Core
get_coefficient_regwrites_accesses	src/gpuwattch/core.h	/^	float get_coefficient_regwrites_accesses(){return ((exu->rfu->IRF->local_result.power.writeOp.dynamic\/32)*(4*2)\/*\/1.5*\/);}$/;"	f	class:Core
get_coefficient_sfu_accesses	src/gpuwattch/core.h	/^	float get_coefficient_sfu_accesses(){$/;"	f	class:Core
get_coefficient_sharedmemory_readhits	src/gpuwattch/core.h	/^	float get_coefficient_sharedmemory_readhits()$/;"	f	class:Core
get_coefficient_tcache_readhits	src/gpuwattch/core.h	/^	float get_coefficient_tcache_readhits()$/;"	f	class:Core
get_coefficient_tcache_readmisses	src/gpuwattch/core.h	/^	float get_coefficient_tcache_readmisses()$/;"	f	class:Core
get_coefficient_tcache_readmisses1	src/gpuwattch/core.h	/^	float get_coefficient_tcache_readmisses1(){$/;"	f	class:Core
get_coefficient_tcache_readmisses2	src/gpuwattch/core.h	/^	float get_coefficient_tcache_readmisses2(){$/;"	f	class:Core
get_coefficient_tot_insts	src/gpuwattch/core.h	/^	float get_coefficient_tot_insts(){$/;"	f	class:Core
get_coefficient_writecoalescing	src/gpuwattch/processor.h	/^    double get_coefficient_writecoalescing()$/;"	f	class:Processor
get_committed_inst	src/gpgpu-sim/power_stat.h	/^    unsigned get_committed_inst(){$/;"	f	class:power_stat_t
get_config	src/abstract_hardware_model.h	/^    const gpgpu_functional_sim_config &get_config() const { return m_function_model_config; }$/;"	f	class:gpgpu_t
get_config	src/cuda-sim/ptx_sim.h	/^   const gpgpu_functional_sim_config &get_config() const { return m_gpu->get_config(); }$/;"	f	class:ptx_thread_info
get_config	src/gpgpu-sim/gpu-sim.h	/^   const gpgpu_sim_config &get_config() const { return m_config; }$/;"	f	class:gpgpu_sim
get_config	src/gpgpu-sim/shader.h	/^    const shader_core_config *get_config() const { return m_config; }$/;"	f	class:shader_core_ctx
get_const_dynamic_power	src/gpuwattch/processor.h	/^    double get_const_dynamic_power()$/;"	f	class:Processor
get_const_mem_offset	src/cuda-sim/ptx_ir.h	/^   addr_t get_const_mem_offset() const { return m_const_mem_offset; }$/;"	f	class:operand_info
get_constant_c_accesses	src/gpgpu-sim/power_stat.h	/^    unsigned get_constant_c_accesses(){$/;"	f	class:power_stat_t
get_constant_c_hits	src/gpgpu-sim/power_stat.h	/^    unsigned get_constant_c_hits(){$/;"	f	class:power_stat_t
get_constant_c_misses	src/gpgpu-sim/power_stat.h	/^    unsigned get_constant_c_misses(){$/;"	f	class:power_stat_t
get_context_size_in_bytes	src/gpgpu-sim/shader.cc	/^shader_core_config::get_context_size_in_bytes(const kernel_info_t* k) const$/;"	f	class:shader_core_config
get_context_switch_cycle	src/gpgpu-sim/gpu-sim.h	/^    unsigned long long get_context_switch_cycle(unsigned context_in_bytes) const$/;"	f	class:gpgpu_sim_config
get_converge_point	src/cuda-sim/cuda-sim.cc	/^address_type get_converge_point( address_type pc ) $/;"	f
get_core	src/cuda-sim/ptx_sim.h	/^   core_t *get_core() { return m_core; }$/;"	f	class:ptx_thread_info
get_core	src/gpgpu-sim/shader.h	/^    shader_core_ctx* get_core(unsigned core_id) { return m_core[core_id]; }$/;"	f	class:simt_core_cluster
get_core_num	src/ramulator_sim/Config.h	/^  int get_core_num() const {return core_num;}$/;"	f	class:Config
get_cpu_tick	src/ramulator_sim/Config.h	/^  int get_cpu_tick() const {return cpu_tick;}$/;"	f	class:Config
get_cta_dim	common/kernel_info_t.h	/^   dim3 get_cta_dim() const { return m_block_dim; }$/;"	f	class:kernel_info_t
get_cta_id	common/shd_warp_t.h	/^    unsigned get_cta_id() const { return m_cta_id; }$/;"	f	class:shd_warp_t
get_cta_num_insts	common/kernel_info_t.h	/^   unsigned long long get_cta_num_insts() const { return m_cta_num_insts; }$/;"	f	class:kernel_info_t
get_cta_uid	src/cuda-sim/ptx_sim.h	/^   unsigned long long get_cta_uid() { return m_cta_info->get_sm_idx();}$/;"	f	class:ptx_thread_info
get_ctaid	src/cuda-sim/ptx_sim.h	/^   dim3 get_ctaid() const { return m_ctaid; }$/;"	f	class:ptx_thread_info
get_ctrl_size	src/gpgpu-sim/mem_fetch.h	/^   unsigned get_ctrl_size() const { return m_ctrl_size; }$/;"	f	class:mem_fetch
get_curr_cycle	launcher/stats/stats.cc	/^unsigned long long Stats::get_curr_cycle()$/;"	f	class:Stats
get_curr_cycle	src/gpgpusim_entrypoint.cc	/^get_curr_cycle()$/;"	f
get_data_size	src/gpgpu-sim/mem_fetch.h	/^   unsigned get_data_size() const { return m_data_size; }$/;"	f	class:mem_fetch
get_device	launcher/simulator.h	/^    _cuda_device_id *get_device() { return m_gpu; }$/;"	f	struct:Simulator::CUctx_st
get_device	launcher/simulator.h	/^    struct _cuda_device_id *get_device( unsigned n ) {$/;"	f	struct:Simulator::_cuda_device_id
get_dim3_id_kain	common/kernel_info_t.h	/^   dim3 get_dim3_id_kain(unsigned cta_id)$/;"	f	class:kernel_info_t
get_dispatch_delay	src/abstract_hardware_model.h	/^    unsigned get_dispatch_delay() const { return cycles; }$/;"	f	class:warp_inst_t
get_double_operand_type	src/cuda-sim/ptx_ir.h	/^   int get_double_operand_type() const { return  m_double_operand_type; }$/;"	f	class:operand_info
get_drainable_vector	launcher/mk-sched/mk_scheduler.h	/^    const std::vector<bool> get_drainable_vector() const$/;"	f	class:DynamicScheduler::SM_info
get_draining_latency	common/kernel_info_t.h	/^   unsigned long long get_draining_latency(unsigned sid, unsigned hw_tbid) const$/;"	f	class:kernel_info_t
get_draining_throughput_overhead	common/kernel_info_t.h	/^   unsigned long long get_draining_throughput_overhead(unsigned sid, unsigned hw_tbid) const$/;"	f	class:kernel_info_t
get_draining_throughput_overhead_for_shader	common/kernel_info_t.cc	/^kernel_info_t::get_draining_throughput_overhead_for_shader(unsigned shader_id) const$/;"	f	class:kernel_info_t
get_dram_act	src/gpgpu-sim/power_stat.h	/^    unsigned get_dram_act(){$/;"	f	class:power_stat_t
get_dram_activity	src/gpgpu-sim/power_stat.h	/^    unsigned get_dram_activity(){$/;"	f	class:power_stat_t
get_dram_cmd	src/gpgpu-sim/power_stat.h	/^    unsigned get_dram_cmd(){$/;"	f	class:power_stat_t
get_dram_nop	src/gpgpu-sim/power_stat.h	/^    unsigned get_dram_nop(){$/;"	f	class:power_stat_t
get_dram_pre	src/gpgpu-sim/power_stat.h	/^    unsigned get_dram_pre(){$/;"	f	class:power_stat_t
get_dram_rd	src/gpgpu-sim/power_stat.h	/^    unsigned get_dram_rd(){$/;"	f	class:power_stat_t
get_dram_req	src/gpgpu-sim/power_stat.h	/^    unsigned get_dram_req(){$/;"	f	class:power_stat_t
get_dram_wr	src/gpgpu-sim/power_stat.h	/^    unsigned get_dram_wr(){$/;"	f	class:power_stat_t
get_dst	src/cuda-sim/ptx_ir.h	/^   const symbol *get_dst() const { return m_dst; }$/;"	f	class:arg_buffer_t
get_dynamic_warp_id	common/shd_warp_t.h	/^    unsigned get_dynamic_warp_id() const { return m_dynamic_warp_id; }$/;"	f	class:shd_warp_t
get_dynamic_warp_issue	src/gpgpu-sim/shader.h	/^    const std::vector< std::vector<unsigned> >& get_dynamic_warp_issue() const$/;"	f	class:shader_core_stats
get_event	libcuda/cuda_runtime_api.cc	/^CUevent_st *get_event(cudaEvent_t event)$/;"	f
get_executed_cycles	common/cta_stat_context.cc	/^cta_stat_context_t::get_executed_cycles() const$/;"	f	class:cta_stat_context_t
get_executed_cycles	common/kernel_info_t.h	/^   unsigned long long get_executed_cycles(unsigned sid, unsigned hw_tbid) const$/;"	f	class:kernel_info_t
get_executed_cycles_for_shader	common/kernel_info_t.h	/^   unsigned long long get_executed_cycles_for_shader(unsigned sid) const$/;"	f	class:kernel_info_t
get_executed_insts	common/cta_stat_context.cc	/^cta_stat_context_t::get_executed_insts() const$/;"	f	class:cta_stat_context_t
get_executed_insts	common/kernel_info_t.h	/^   unsigned long long get_executed_insts(unsigned sid, unsigned hw_tbid) const$/;"	f	class:kernel_info_t
get_executed_insts_for_shader	common/kernel_info_t.h	/^   unsigned long long get_executed_insts_for_shader(unsigned sid) const$/;"	f	class:kernel_info_t
get_expected_limit_insts	src/ramulator_sim/Config.h	/^  long get_expected_limit_insts() const {return expected_limit_insts;}$/;"	f	class:Config
get_fat_cubin_handle	launcher/simulator.cc	/^Simulator::get_fat_cubin_handle()$/;"	f	class:Simulator
get_finfo	src/cuda-sim/ptx_sim.h	/^   const function_info *get_finfo() const { return m_func_info;   }$/;"	f	class:ptx_thread_info
get_finfo	src/cuda-sim/ptx_sim.h	/^   function_info *get_finfo() { return m_func_info;   }$/;"	f	class:ptx_thread_info
get_first_cmd	src/ramulator_sim/Controller.h	/^    typename T::Command get_first_cmd(list<Request>::iterator req)$/;"	f	class:Controller
get_first_cmd	src/ramulator_sim/SpeedyController.h	/^    typename T::Command get_first_cmd(Request& req)$/;"	f	class:SpeedyController
get_flattened_cta_id	common/kernel_info_t.h	/^   unsigned get_flattened_cta_id(dim3 tbid3) const$/;"	f	class:kernel_info_t
get_flattened_thread_id	common/kernel_info_t.h	/^   unsigned get_flattened_thread_id(dim3 tid3) const$/;"	f	class:kernel_info_t
get_flushable_vector	launcher/mk-sched/mk_scheduler.h	/^    const std::vector<bool> get_flushable_vector() const$/;"	f	class:DynamicScheduler::SM_info
get_forced_max_capability	src/abstract_hardware_model.h	/^    unsigned get_forced_max_capability() const { return m_ptx_force_max_capability; }$/;"	f	class:gpgpu_functional_sim_config
get_fpdiv_accessess	src/gpgpu-sim/power_stat.h	/^    unsigned get_fpdiv_accessess(){$/;"	f	class:power_stat_t
get_fpmul_accessess	src/gpgpu-sim/power_stat.h	/^    unsigned get_fpmul_accessess(){$/;"	f	class:power_stat_t
get_free	src/abstract_hardware_model.h	/^	warp_inst_t ** get_free(){$/;"	f	class:register_set
get_function_size	src/cuda-sim/ptx_ir.h	/^   unsigned get_function_size() { return m_instructions.size();}$/;"	f	class:function_info
get_global_memory	src/abstract_hardware_model.h	/^    class memory_space *get_global_memory() { return m_global_mem; }$/;"	f	class:gpgpu_t
get_global_memory	src/cuda-sim/ptx_sim.h	/^   memory_space *get_global_memory() { return m_gpu->get_global_memory(); }$/;"	f	class:ptx_thread_info
get_global_next	src/cuda-sim/ptx_ir.h	/^   addr_t get_global_next() { return m_global_next;}$/;"	f	class:symbol_table
get_gpgpu	launcher/simulator.h	/^    gpgpu_sim *get_gpgpu() { return m_gpgpu; }$/;"	f	struct:Simulator::_cuda_device_id
get_gpu	src/abstract_hardware_model.h	/^        class gpgpu_sim * get_gpu() {return m_gpu;}$/;"	f	class:core_t
get_gpu	src/cuda-sim/ptx_sim.h	/^   class gpgpu_sim *get_gpu() { return (gpgpu_sim*)m_gpu;}$/;"	f	class:ptx_thread_info
get_gpu	src/gpgpu-sim/shader.h	/^    gpgpu_sim *get_gpu() { return m_gpu; }$/;"	f	class:simt_core_cluster
get_grid_dim	common/kernel_info_t.h	/^   dim3 get_grid_dim() const { return m_grid_dim; }$/;"	f	class:kernel_info_t
get_h	src/gpuwattch/cacti/area.h	/^  double get_h() const { return h; }$/;"	f	class:Area
get_head	src/ramulator_sim/Scheduler.h	/^    list<Request>::iterator get_head(list<Request>& q)$/;"	f	class:Scheduler
get_hits	src/ramulator_sim/Scheduler.h	/^    int get_hits(vector<int>& addr_vec)$/;"	f	class:RowTable
get_hw_ctaid	src/cuda-sim/ptx_sim.h	/^   unsigned get_hw_ctaid() const { return m_hw_ctaid;}$/;"	f	class:ptx_thread_info
get_hw_sid	src/cuda-sim/ptx_sim.h	/^   unsigned get_hw_sid() const { return m_hw_sid;}$/;"	f	class:ptx_thread_info
get_hw_tid	src/cuda-sim/ptx_sim.h	/^   unsigned get_hw_tid() const { return m_hw_tid;}$/;"	f	class:ptx_thread_info
get_hw_wid	src/cuda-sim/ptx_sim.h	/^   unsigned get_hw_wid() const { return m_hw_wid;}$/;"	f	class:ptx_thread_info
get_ialu_accessess	src/gpgpu-sim/power_stat.h	/^    unsigned get_ialu_accessess(){$/;"	f	class:power_stat_t
get_icnt_mem_to_simt	src/gpgpu-sim/power_stat.h	/^    long get_icnt_mem_to_simt(){$/;"	f	class:power_stat_t
get_icnt_power_stats	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::get_icnt_power_stats(long &n_simt_to_mem, long &n_mem_to_simt) const{$/;"	f	class:shader_core_ctx
get_icnt_receive_time	src/gpgpu-sim/mem_fetch.h	/^   unsigned get_icnt_receive_time() const { return m_icnt_receive_time; }$/;"	f	class:mem_fetch
get_icnt_simt_to_mem	src/gpgpu-sim/power_stat.h	/^    long get_icnt_simt_to_mem(){$/;"	f	class:power_stat_t
get_icnt_stats	src/gpgpu-sim/shader.cc	/^void simt_core_cluster::get_icnt_stats(long &n_simt_to_mem, long &n_mem_to_simt) const {$/;"	f	class:simt_core_cluster
get_icount	src/cuda-sim/ptx_sim.h	/^   unsigned get_icount() const { return m_icount;}$/;"	f	class:ptx_thread_info
get_id	launcher/simulator.h	/^    unsigned get_id() const { return m_id; }$/;"	f	struct:Simulator::_cuda_device_id
get_id	src/gpgpu-sim/l2cache.h	/^   unsigned get_id() const { return m_id; } $/;"	f	class:memory_sub_partition
get_id	src/gpgpu-sim/shader.h	/^      unsigned get_id() const { return m_cuid; } \/\/ returns CU hw id$/;"	f	class:opndcoll_rfu_t::collector_unit_t
get_idempotent_occupied_vector	launcher/mk-sched/mk_scheduler.h	/^    const std::vector<bool> get_idempotent_occupied_vector() const$/;"	f	class:DynamicScheduler::SM_info
get_index	src/ramulator_sim/Cache.h	/^  int get_index(long addr) {$/;"	f	class:Cache
get_init_max_cta_per_shader	common/kernel_info_t.h	/^   unsigned get_init_max_cta_per_shader() const { return init_max_cta_per_shader; }$/;"	f	class:kernel_info_t
get_initializer	src/cuda-sim/ptx_ir.h	/^   std::list<operand_info> get_initializer() const$/;"	f	class:symbol
get_insn_str	src/cuda-sim/ptx_ir.cc	/^std::string function_info::get_insn_str( unsigned pc ) const$/;"	f	class:function_info
get_inst	src/cuda-sim/ptx_sim.cc	/^const ptx_instruction *ptx_thread_info::get_inst( addr_t pc ) const$/;"	f	class:ptx_thread_info
get_inst	src/cuda-sim/ptx_sim.cc	/^const ptx_instruction *ptx_thread_info::get_inst() const$/;"	f	class:ptx_thread_info
get_inst	src/gpgpu-sim/mem_fetch.h	/^   const warp_inst_t &get_inst() { return m_inst; }$/;"	f	class:mem_fetch
get_inst_c_accesses	src/gpgpu-sim/power_stat.h	/^    unsigned get_inst_c_accesses(){$/;"	f	class:power_stat_t
get_inst_c_hits	src/gpgpu-sim/power_stat.h	/^    unsigned get_inst_c_hits(){$/;"	f	class:power_stat_t
get_inst_c_misses	src/gpgpu-sim/power_stat.h	/^    unsigned get_inst_c_misses(){$/;"	f	class:power_stat_t
get_instruction	src/cuda-sim/ptx_ir.h	/^   const ptx_instruction *get_instruction( unsigned PC ) const$/;"	f	class:function_info
get_int	src/cuda-sim/ptx_ir.h	/^   int get_int() const { return m_value.m_int;}$/;"	f	class:operand_info
get_intdiv_accessess	src/gpgpu-sim/power_stat.h	/^    unsigned get_intdiv_accessess(){$/;"	f	class:power_stat_t
get_interval	src/gpgpu-sim/stat-tool.h	/^   const unsigned long long & get_interval() const { return m_snap_shot_interval;}$/;"	f	class:snap_shot_trigger
get_intmul24_accessess	src/gpgpu-sim/power_stat.h	/^    unsigned get_intmul24_accessess(){$/;"	f	class:power_stat_t
get_intmul32_accessess	src/gpgpu-sim/power_stat.h	/^    unsigned get_intmul32_accessess(){$/;"	f	class:power_stat_t
get_intmul_accessess	src/gpgpu-sim/power_stat.h	/^    unsigned get_intmul_accessess(){$/;"	f	class:power_stat_t
get_is_write	src/gpgpu-sim/mem_fetch.h	/^   bool     get_is_write() const { return m_access.is_write(); }$/;"	f	class:mem_fetch
get_kain_stream_id	common/kernel_info_t.h	/^    unsigned get_kain_stream_id()$/;"	f	class:kernel_info_t
get_kernel	launcher/simulator.h	/^    function_info *get_kernel(const char *hostFun) {$/;"	f	struct:Simulator::CUctx_st
get_kernel	src/cuda-sim/ptx_sim.h	/^   kernel_info_t* get_kernel() { return &m_kernel; }$/;"	f	class:ptx_thread_info
get_kernel	src/gpgpu-sim/shader.h	/^    kernel_info_t *get_kernel() { return m_kernel; }$/;"	f	class:shader_core_ctx
get_kernel	src/stream_manager.h	/^    kernel_info_t *get_kernel() { return m_kernel; }$/;"	f	class:stream_operation
get_kernel_code_size	src/cuda-sim/cuda-sim.cc	/^size_t get_kernel_code_size( class function_info *entry )$/;"	f
get_kernel_info	src/abstract_hardware_model.h	/^        kernel_info_t * get_kernel_info(){ return m_kernel;}$/;"	f	class:core_t
get_kernel_info	src/cuda-sim/ptx_ir.h	/^   const struct gpgpu_ptx_sim_kernel_info* get_kernel_info () const$/;"	f	class:function_info
get_key	src/cuda-sim/ptx_ir.h	/^   const type_info_key &get_key() const { return m_type_info;}$/;"	f	class:type_info
get_l1d_read_accesses	src/gpgpu-sim/power_stat.h	/^    unsigned get_l1d_read_accesses(){$/;"	f	class:power_stat_t
get_l1d_read_hits	src/gpgpu-sim/power_stat.h	/^    unsigned get_l1d_read_hits(){$/;"	f	class:power_stat_t
get_l1d_read_misses	src/gpgpu-sim/power_stat.h	/^    unsigned get_l1d_read_misses(){$/;"	f	class:power_stat_t
get_l1d_write_accesses	src/gpgpu-sim/power_stat.h	/^    unsigned get_l1d_write_accesses(){$/;"	f	class:power_stat_t
get_l1d_write_hits	src/gpgpu-sim/power_stat.h	/^    unsigned get_l1d_write_hits(){$/;"	f	class:power_stat_t
get_l1d_write_misses	src/gpgpu-sim/power_stat.h	/^    unsigned get_l1d_write_misses(){$/;"	f	class:power_stat_t
get_l2_read_accesses	src/gpgpu-sim/power_stat.h	/^    unsigned get_l2_read_accesses(){$/;"	f	class:power_stat_t
get_l2_read_hits	src/gpgpu-sim/power_stat.h	/^    unsigned get_l2_read_hits(){$/;"	f	class:power_stat_t
get_l2_read_misses	src/gpgpu-sim/power_stat.h	/^    unsigned get_l2_read_misses(){$/;"	f	class:power_stat_t
get_l2_write_accesses	src/gpgpu-sim/power_stat.h	/^    unsigned get_l2_write_accesses(){$/;"	f	class:power_stat_t
get_l2_write_hits	src/gpgpu-sim/power_stat.h	/^    unsigned get_l2_write_hits(){$/;"	f	class:power_stat_t
get_l2_write_misses	src/gpgpu-sim/power_stat.h	/^    unsigned get_l2_write_misses(){$/;"	f	class:power_stat_t
get_label	src/cuda-sim/ptx_ir.h	/^   const symbol *get_label() const { return m_label;}$/;"	f	class:ptx_instruction
get_length	src/gpgpu-sim/delayqueue.h	/^   unsigned get_length() const { return m_length; }$/;"	f	class:fifo_pipeline
get_line_sz	src/gpgpu-sim/gpu-cache.h	/^    unsigned get_line_sz() const$/;"	f	class:cache_config
get_lines	src/ramulator_sim/Cache.h	/^  std::list<Line>& get_lines(long addr) {$/;"	f	class:Cache
get_literal_value	src/cuda-sim/ptx_ir.h	/^   ptx_reg_t get_literal_value() const$/;"	f	class:operand_info
get_local_mem_stack_pointer	src/cuda-sim/ptx_sim.h	/^   unsigned get_local_mem_stack_pointer() const { return m_local_mem_stack_pointer; }$/;"	f	class:ptx_thread_info
get_local_next	src/cuda-sim/ptx_ir.h	/^   addr_t get_local_next() { return m_local_next;}$/;"	f	class:symbol_table
get_location	src/cuda-sim/ptx_sim.cc	/^std::string ptx_thread_info::get_location() const$/;"	f	class:ptx_thread_info
get_m_instr_mem_index	src/cuda-sim/ptx_ir.h	/^   unsigned get_m_instr_mem_index() { return m_instr_mem_index;}$/;"	f	class:ptx_instruction
get_max_concurrent_kernel	src/gpgpu-sim/gpu-sim.h	/^    unsigned get_max_concurrent_kernel() const { return max_concurrent_kernel; }$/;"	f	class:gpgpu_sim_config
get_max_cta_per_shader	common/kernel_info_t.h	/^   unsigned get_max_cta_per_shader(const unsigned shader_id) const { return cta_per_shader[shader_id]; }$/;"	f	class:kernel_info_t
get_max_cta_reason	common/kernel_info_t.h	/^   limitCause get_max_cta_reason() const { return max_cta_per_shader_reason; }$/;"	f	class:kernel_info_t
get_max_delay_before_decoder	src/gpuwattch/cacti/decoder.cc	/^pair<double, double> Predec::get_max_delay_before_decoder($/;"	f	class:Predec
get_max_len	src/gpgpu-sim/delayqueue.h	/^   unsigned get_max_len() const { return m_max_len; }$/;"	f	class:fifo_pipeline
get_max_remaining_cycle_for_shader	common/kernel_info_t.cc	/^kernel_info_t::get_max_remaining_cycle_for_shader(unsigned shader_id) const$/;"	f	class:kernel_info_t
get_mem_accessess	src/gpgpu-sim/power_stat.h	/^    unsigned get_mem_accessess(){$/;"	f	class:power_stat_t
get_mem_committed_inst	src/gpgpu-sim/power_stat.h	/^    unsigned get_mem_committed_inst(){$/;"	f	class:power_stat_t
get_mem_config	src/gpgpu-sim/mem_fetch.h	/^   const memory_config *get_mem_config(){return m_mem_config;}$/;"	f	class:mem_fetch
get_mem_tick	src/ramulator_sim/Config.h	/^  int get_mem_tick() const {return mem_tick;}$/;"	f	class:Config
get_membar	common/shd_warp_t.h	/^    bool get_membar() const { return m_membar; }$/;"	f	class:shd_warp_t
get_memory_space	src/cuda-sim/ptx_ir.h	/^   memory_space_t get_memory_space() const { return m_space_spec; }$/;"	f	class:type_info_key
get_message_header	launcher/child_process.h	/^  MULTIKERNEL_MESSAGES get_message_header()$/;"	f	class:ChildProcess
get_mk_scheduler	src/gpgpu-sim/shader.h	/^    MKScheduler* get_mk_scheduler() { return mk_scheduler; }$/;"	f	class:shader_core_ctx
get_more_cta_left	src/gpgpu-sim/gpu-sim.cc	/^bool gpgpu_sim::get_more_cta_left() const$/;"	f	class:gpgpu_sim
get_mpid	src/gpgpu-sim/l2cache.h	/^   unsigned get_mpid() const { return m_id; }$/;"	f	class:memory_partition_unit
get_mshr_entries	src/gpgpu-sim/gpu-cache.h	/^    unsigned get_mshr_entries() const { return m_mshr_entries; }$/;"	f	class:cache_config
get_n_active_cta	src/gpgpu-sim/shader.cc	/^unsigned simt_core_cluster::get_n_active_cta() const$/;"	f	class:simt_core_cluster
get_n_active_cta	src/gpgpu-sim/shader.h	/^    unsigned get_n_active_cta() const { return m_n_active_cta; }$/;"	f	class:shader_core_ctx
get_n_active_sms	src/gpgpu-sim/shader.cc	/^unsigned simt_core_cluster::get_n_active_sms() const$/;"	f	class:simt_core_cluster
get_n_atomic	common/shd_warp_t.h	/^    unsigned get_n_atomic() const { return m_n_atomic; }$/;"	f	class:shd_warp_t
get_n_completed	common/shd_warp_t.h	/^    unsigned get_n_completed() const { return n_completed; }$/;"	f	class:shd_warp_t
get_n_element	src/gpgpu-sim/delayqueue.h	/^   unsigned get_n_element() const { return m_n_element; }$/;"	f	class:fifo_pipeline
get_name	src/cuda-sim/ptx_ir.h	/^   std::string get_name() const { assert(m_valid); return m_name; }$/;"	f	class:param_info
get_name	src/cuda-sim/ptx_ir.h	/^   std::string get_name() const$/;"	f	class:function_info
get_next	src/ramulator_sim/DRAM.h	/^long DRAM<T>::get_next(typename T::Command cmd, const int* addr)$/;"	f	class:DRAM
get_next_bogus_kernel_and_rotate	launcher/child_process.cc	/^ChildProcess::get_next_bogus_kernel_and_rotate()$/;"	f	class:ChildProcess
get_next_cta_id	common/kernel_info_t.cc	/^kernel_info_t::get_next_cta_id(unsigned core_id) const$/;"	f	class:kernel_info_t
get_next_thread_id	common/kernel_info_t.h	/^   unsigned get_next_thread_id() const$/;"	f	class:kernel_info_t
get_next_thread_id_3d	common/kernel_info_t.h	/^   dim3 get_next_thread_id_3d() const  { return m_next_tid; }$/;"	f	class:kernel_info_t
get_non_idempotent_vector	launcher/mk-sched/mk_scheduler.h	/^    const std::vector<std::bitset<MAX_CTA_PER_SHADER> >& get_non_idempotent_vector() const  { return cta_non_idempotent; }$/;"	f	class:DynamicScheduler::SM_info
get_non_regfile_operands	src/gpgpu-sim/power_stat.h	/^    unsigned get_non_regfile_operands(){$/;"	f	class:power_stat_t
get_not_completed	src/gpgpu-sim/shader.cc	/^unsigned simt_core_cluster::get_not_completed() const$/;"	f	class:simt_core_cluster
get_not_completed	src/gpgpu-sim/shader.h	/^    unsigned get_not_completed() const { return m_not_completed; }$/;"	f	class:shader_core_ctx
get_num_bits_per_dram_unit	src/gpgpu-sim/addrdec.cc	/^unsigned linear_to_raw_address_translation::get_num_bits_per_dram_unit(new_addr_type addr)$/;"	f	class:linear_to_raw_address_translation
get_num_cancel_remove_required	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::get_num_cancel_remove_required(kernel_info_t* kernel) const$/;"	f	class:DynamicScheduler
get_num_cancel_remove_required	launcher/mk-sched/mk_scheduler.h	/^  virtual unsigned get_num_cancel_remove_required(kernel_info_t* kernel) const { return 0; }$/;"	f	class:StaticScheduler
get_num_fat_binary	launcher/child_process.h	/^  unsigned get_num_fat_binary() const { return fat_binary_count; }$/;"	f	class:ChildProcess
get_num_flits	src/gpgpu-sim/mem_fetch.cc	/^unsigned mem_fetch::get_num_flits(bool simt_to_mem){$/;"	f	class:mem_fetch
get_num_lines	src/gpgpu-sim/gpu-cache.h	/^    unsigned get_num_lines() const$/;"	f	class:cache_config
get_num_operands	src/abstract_hardware_model.h	/^    unsigned get_num_operands() const {return num_operands;}$/;"	f	class:inst_t
get_num_operands	src/cuda-sim/ptx_ir.h	/^   unsigned get_num_operands() const { return m_operands.size();}$/;"	f	class:ptx_instruction
get_num_operands	src/gpgpu-sim/shader.h	/^      unsigned get_num_operands() const{$/;"	f	class:opndcoll_rfu_t::collector_unit_t
get_num_reconvergence_pairs	src/cuda-sim/ptx_ir.cc	/^unsigned function_info::get_num_reconvergence_pairs()$/;"	f	class:function_info
get_num_regs	src/abstract_hardware_model.h	/^    unsigned get_num_regs() const {return num_regs;}$/;"	f	class:inst_t
get_num_regs	src/gpgpu-sim/shader.h	/^      unsigned get_num_regs() const{$/;"	f	class:opndcoll_rfu_t::collector_unit_t
get_num_remove_required	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::get_num_remove_required(kernel_info_t* kernel) const$/;"	f	class:DynamicScheduler
get_num_remove_required	launcher/mk-sched/mk_scheduler.h	/^  virtual unsigned get_num_remove_required(kernel_info_t* kernel) const { return 0; }$/;"	f	class:StaticScheduler
get_num_simulated_cycles	launcher/child_process.h	/^  unsigned long long get_num_simulated_cycles() const  { return num_simulated_cycles; }$/;"	f	class:ChildProcess
get_num_simulated_insts	common/kernel_info_t.h	/^   unsigned long long get_num_simulated_insts() const { return m_num_simulated_insts; }$/;"	f	class:kernel_info_t
get_num_simulated_insts	launcher/child_process.h	/^  unsigned long long get_num_simulated_insts() const  { return num_simulated_insts; }$/;"	f	class:ChildProcess
get_num_wasted_insts	launcher/child_process.h	/^  unsigned long long get_num_wasted_insts() const  { return num_wasted_insts; }$/;"	f	class:ChildProcess
get_oc_id	src/gpgpu-sim/shader.h	/^      unsigned get_oc_id() const { return m_cu->get_id(); }$/;"	f	class:opndcoll_rfu_t::op_t
get_occupied_vector	launcher/mk-sched/mk_scheduler.h	/^    const std::vector<bool>& get_occupied_vector() const$/;"	f	class:DynamicScheduler::SM_info
get_offending_subarray	src/ramulator_sim/Controller.cpp	/^static vector<int> get_offending_subarray(DRAM<SALP>* channel, vector<int> & addr_vec) {$/;"	f	file:
get_offset	src/cuda-sim/ptx_ir.h	/^   unsigned get_offset() { assert(m_valid); return m_offset; }$/;"	f	class:param_info
get_opcode	src/cuda-sim/ptx_ir.h	/^   int get_opcode() const { return m_opcode;}$/;"	f	class:ptx_instruction
get_opcode_cstr	src/cuda-sim/ptx_ir.h	/^   const char *get_opcode_cstr() const $/;"	f	class:ptx_instruction
get_operand	src/gpgpu-sim/shader.h	/^      unsigned get_operand() const { return m_operand; }$/;"	f	class:opndcoll_rfu_t::op_t
get_operand_lohi	src/cuda-sim/ptx_ir.h	/^   int get_operand_lohi() const { return m_operand_lohi; }$/;"	f	class:operand_info
get_operand_nbits	src/cuda-sim/instructions.cc	/^unsigned get_operand_nbits( const operand_info &op )$/;"	f
get_operand_neg	src/cuda-sim/ptx_ir.h	/^   bool get_operand_neg() const { return m_operand_neg; }$/;"	f	class:operand_info
get_operand_value	src/cuda-sim/instructions.cc	/^ptx_reg_t ptx_thread_info::get_operand_value( const operand_info &op, operand_info dstInfo, unsigned opType, ptx_thread_info *thread, int derefFlag )$/;"	f	class:ptx_thread_info
get_operands	src/gpgpu-sim/shader.h	/^      const op_t *get_operands() const { return m_src_op; }$/;"	f	class:opndcoll_rfu_t::collector_unit_t
get_padded_cta_size	src/gpgpu-sim/shader.cc	/^shader_core_config::get_padded_cta_size(unsigned cta_size) const$/;"	f	class:shader_core_config
get_param_buffer	src/cuda-sim/ptx_ir.h	/^   const void *get_param_buffer() const$/;"	f	class:arg_buffer_t
get_param_buffer_size	src/cuda-sim/ptx_ir.h	/^   size_t get_param_buffer_size() const$/;"	f	class:arg_buffer_t
get_param_memory	common/kernel_info_t.h	/^   class memory_space *get_param_memory() { return m_param_mem; }$/;"	f	class:kernel_info_t
get_param_memory	src/cuda-sim/ptx_sim.h	/^   memory_space *get_param_memory() { return m_kernel.get_param_memory(); }$/;"	f	class:ptx_thread_info
get_parent_process	common/kernel_info_t.h	/^   ChildProcess* get_parent_process() { return m_parent; }$/;"	f	class:kernel_info_t
get_partition_addr	src/gpgpu-sim/mem_fetch.h	/^   new_addr_type get_partition_addr() const { return m_partition_addr; }$/;"	f	class:mem_fetch
get_pc	common/shd_warp_t.h	/^    address_type get_pc() const { return m_next_pc; }$/;"	f	class:shd_warp_t
get_pc	src/cuda-sim/ptx_ir.h	/^   function_info *get_pc() const$/;"	f	class:symbol
get_pc	src/cuda-sim/ptx_sim.h	/^   unsigned get_pc() const$/;"	f	class:ptx_thread_info
get_pc	src/gpgpu-sim/mem_fetch.h	/^   address_type get_pc() const { return m_inst.empty()?-1:m_inst.pc; }$/;"	f	class:mem_fetch
get_pdom_stack_top_info	src/abstract_hardware_model.cc	/^void core_t::get_pdom_stack_top_info( unsigned warpId, unsigned *pc, unsigned *rpc ) const$/;"	f	class:core_t
get_pdom_stack_top_info	src/abstract_hardware_model.cc	/^void simt_stack::get_pdom_stack_top_info( unsigned *pc, unsigned *rpc ) const$/;"	f	class:simt_stack
get_pdom_stack_top_info	src/gpgpu-sim/shader.cc	/^void gpgpu_sim::get_pdom_stack_top_info( unsigned sid, unsigned tid, unsigned *pc, unsigned *rpc )$/;"	f	class:gpgpu_sim
get_pdom_stack_top_info	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::get_pdom_stack_top_info( unsigned tid, unsigned *pc, unsigned *rpc ) const$/;"	f	class:shader_core_ctx
get_pdom_stack_top_info	src/gpgpu-sim/shader.cc	/^void simt_core_cluster::get_pdom_stack_top_info( unsigned sid, unsigned tid, unsigned *pc, unsigned *rpc ) const$/;"	f	class:simt_core_cluster
get_pid	common/kernel_info_t.h	/^   unsigned get_pid() const { return m_parent->getID(); }$/;"	f	class:kernel_info_t
get_pipe	launcher/child_process.h	/^  Communicate* get_pipe()$/;"	f	class:ChildProcess
get_pipeline_duty	src/gpgpu-sim/power_stat.h	/^    float get_pipeline_duty(){$/;"	f	class:power_stat_t
get_pred	src/cuda-sim/ptx_ir.h	/^   operand_info get_pred() const { return operand_info( m_pred );}$/;"	f	class:ptx_instruction
get_pred_mod	src/cuda-sim/ptx_ir.h	/^   int get_pred_mod() const { return m_pred_mod;}$/;"	f	class:ptx_instruction
get_pred_neg	src/cuda-sim/ptx_ir.h	/^   bool get_pred_neg() const { return m_neg_pred;}$/;"	f	class:ptx_instruction
get_preempting_ctas	common/preemption_info.h	/^    unsigned get_preempting_ctas() const { return m_techniques.size(); }$/;"	f	class:preemption_info_t
get_prop	launcher/simulator.h	/^    const struct cudaDeviceProp *get_prop() const {$/;"	f	struct:Simulator::_cuda_device_id
get_prop	src/gpgpu-sim/gpu-sim.cc	/^const struct cudaDeviceProp *gpgpu_sim::get_prop() const$/;"	f	class:gpgpu_sim
get_ptx_inst_debug_file	src/abstract_hardware_model.h	/^    FILE* get_ptx_inst_debug_file() { return ptx_inst_debug_file; }$/;"	f	class:gpgpu_t
get_ptx_inst_debug_file	src/abstract_hardware_model.h	/^    const char* get_ptx_inst_debug_file() const  { return g_ptx_inst_debug_file; }$/;"	f	class:gpgpu_functional_sim_config
get_ptx_inst_debug_thread_uid	src/abstract_hardware_model.h	/^    int         get_ptx_inst_debug_thread_uid() const { return g_ptx_inst_debug_thread_uid; }$/;"	f	class:gpgpu_functional_sim_config
get_ptx_inst_debug_to_file	src/abstract_hardware_model.h	/^    int         get_ptx_inst_debug_to_file() const { return g_ptx_inst_debug_to_file; }$/;"	f	class:gpgpu_functional_sim_config
get_ptx_version	src/cuda-sim/ptx_ir.cc	/^const ptx_version &symbol_table::get_ptx_version() const $/;"	f	class:symbol_table
get_ptx_version	src/cuda-sim/ptx_ir.h	/^   const ptx_version &get_ptx_version() const { return m_symtab->get_ptx_version(); }$/;"	f	class:function_info
get_ptx_version	src/cuda-sim/ptx_sim.cc	/^const ptx_version &ptx_thread_info::get_ptx_version() const $/;"	f	class:ptx_thread_info
get_ptxinfo_kinfo	src/cuda-sim/cuda-sim.cc	/^struct gpgpu_ptx_sim_kernel_info get_ptxinfo_kinfo()$/;"	f
get_ptxinfo_kname	src/cuda-sim/cuda-sim.cc	/^const char *get_ptxinfo_kname() $/;"	f
get_queue	src/ramulator_sim/Controller.h	/^    Queue& get_queue(Request::Type type)$/;"	f	class:Controller
get_ranks	src/ramulator_sim/Config.h	/^  int get_ranks() const {return ranks;}$/;"	f	class:Config
get_raw_addr	src/gpgpu-sim/addrdec.cc	/^new_addr_type linear_to_raw_address_translation::get_raw_addr(new_addr_type addr) const$/;"	f	class:linear_to_raw_address_translation
get_rdOp_dynamic_E	src/gpuwattch/cacti/decoder.cc	/^double PredecBlkDrv::get_rdOp_dynamic_E(int num_act_mats_hor_dir)$/;"	f	class:PredecBlkDrv
get_ready	src/abstract_hardware_model.h	/^	warp_inst_t** get_ready(){$/;"	f	class:register_set
get_ready_for_launch_or_terminate	launcher/simulator.cc	/^Simulator::get_ready_for_launch_or_terminate(ChildProcess* process)$/;"	f	class:Simulator
get_reconvergence_pairs	src/cuda-sim/ptx_ir.cc	/^void function_info::get_reconvergence_pairs(gpgpu_recon_t* recon_points)$/;"	f	class:function_info
get_reg	src/cuda-sim/instructions.cc	/^ptx_reg_t ptx_thread_info::get_reg( const symbol *reg )$/;"	f	class:ptx_thread_info
get_reg	src/cuda-sim/ptx_ir.h	/^   ptx_reg_t get_reg() const $/;"	f	class:arg_buffer_t
get_reg	src/gpgpu-sim/shader.h	/^      unsigned get_reg() const$/;"	f	class:opndcoll_rfu_t::op_t
get_reg_string	src/gpgpu-sim/shader.h	/^      std::string get_reg_string() const$/;"	f	class:opndcoll_rfu_t::op_t
get_regfile_reads	src/gpgpu-sim/power_stat.h	/^    unsigned get_regfile_reads(){$/;"	f	class:power_stat_t
get_regfile_writes	src/gpgpu-sim/power_stat.h	/^    unsigned get_regfile_writes(){$/;"	f	class:power_stat_t
get_regs_written	src/gpgpu-sim/shader.cc	/^std::list<unsigned> shader_core_ctx::get_regs_written( const inst_t &fvt ) const$/;"	f	class:shader_core_ctx
get_request_uid	src/gpgpu-sim/mem_fetch.h	/^   unsigned get_request_uid() const { return m_request_uid; }$/;"	f	class:mem_fetch
get_required_shaders	common/kernel_info_t.cc	/^kernel_info_t::get_required_shaders() const$/;"	f	class:kernel_info_t
get_result	launcher/stats/stats.h	/^  T get_result() const  { return storage.result(); }$/;"	f	class:Stats::ScalarBase
get_return_PC	src/cuda-sim/ptx_sim.h	/^   unsigned get_return_PC()$/;"	f	class:ptx_thread_info
get_return_pc	src/cuda-sim/cuda-sim.cc	/^address_type get_return_pc( void *thd )$/;"	f
get_return_timestamp	src/gpgpu-sim/mem_fetch.h	/^   unsigned get_return_timestamp() const { return m_timestamp2; }$/;"	f	class:mem_fetch
get_return_var	src/cuda-sim/ptx_ir.h	/^   const symbol *get_return_var() const$/;"	f	class:function_info
get_rightmost_bit	src/gpgpu-sim/addrdec.cc	/^static new_addr_type get_rightmost_bit(unsigned k, new_addr_type mask)$/;"	f	file:
get_router_area	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::get_router_area()$/;"	f	class:MCPAT_Router
get_router_delay	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::get_router_delay ()$/;"	f	class:MCPAT_Router
get_router_power	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::get_router_power()$/;"	f	class:MCPAT_Router
get_rp	src/abstract_hardware_model.cc	/^unsigned simt_stack::get_rp() const $/;"	f	class:simt_stack
get_rpc	src/cuda-sim/ptx_sim.h	/^   unsigned get_rpc() const { return m_RPC; }$/;"	f	class:ptx_thread_info
get_scheduled_ctas	common/kernel_info_t.h	/^   unsigned get_scheduled_ctas(const unsigned shader_id) const { return scheduled_cta_per_shader[shader_id]; }$/;"	f	class:kernel_info_t
get_scheduler	src/gpgpu-sim/gpu-sim.h	/^   MKScheduler* get_scheduler() { return scheduler; }$/;"	f	class:gpgpu_sim
get_scope_name	src/cuda-sim/ptx_ir.h	/^   std::string get_scope_name() const { return m_scope_name; }$/;"	f	class:symbol_table
get_sfu_accessess	src/gpgpu-sim/power_stat.h	/^    unsigned get_sfu_accessess(){$/;"	f	class:power_stat_t
get_sfu_active_lanes	src/gpgpu-sim/power_stat.h	/^    float get_sfu_active_lanes(){$/;"	f	class:power_stat_t
get_sfu_committed_inst	src/gpgpu-sim/power_stat.h	/^    unsigned get_sfu_committed_inst(){$/;"	f	class:power_stat_t
get_shader_constant_cache_id	src/gpgpu-sim/stat-tool.cc	/^int get_shader_constant_cache_id() { return CONSTANT; }$/;"	f
get_shader_instruction_cache_id	src/gpgpu-sim/stat-tool.cc	/^int get_shader_instruction_cache_id() { return INSTRUCTION; }$/;"	f
get_shader_normal_cache_id	src/gpgpu-sim/stat-tool.cc	/^int get_shader_normal_cache_id() { return NORMAL; }$/;"	f
get_shader_texture_cache_id	src/gpgpu-sim/stat-tool.cc	/^int get_shader_texture_cache_id() { return TEXTURE; }$/;"	f
get_shared_next	src/cuda-sim/ptx_ir.h	/^   addr_t get_shared_next() { return m_shared_next;}$/;"	f	class:symbol_table
get_shmem_read_access	src/gpgpu-sim/power_stat.h	/^    unsigned get_shmem_read_access(){$/;"	f	class:power_stat_t
get_sid	common/preemption_info.h	/^    unsigned get_sid() const { return m_sid; }$/;"	f	class:preemption_info_t
get_sid	src/gpgpu-sim/mem_fetch.h	/^   unsigned get_sid() const { return m_sid; }$/;"	f	class:mem_fetch
get_sid	src/gpgpu-sim/scoreboard.h	/^    int get_sid() const { return m_sid; }$/;"	f	class:Scoreboard
get_sid	src/gpgpu-sim/shader.h	/^    unsigned get_sid() const {return m_sid;}$/;"	f	class:shader_core_ctx
get_sid	src/gpgpu-sim/shader.h	/^inline int scheduler_unit::get_sid() const { return m_shader->get_sid(); }$/;"	f	class:scheduler_unit
get_size	src/abstract_hardware_model.h	/^   unsigned get_size() const { return m_req_size; }$/;"	f	class:mem_access_t
get_size	src/cuda-sim/ptx_ir.h	/^   size_t get_size() const { assert(m_valid); return m_size; }$/;"	f	class:param_info
get_size_in_bytes	src/cuda-sim/ptx_ir.h	/^   unsigned get_size_in_bytes() const$/;"	f	class:symbol
get_sm_idx	src/cuda-sim/ptx_sim.cc	/^unsigned ptx_cta_info::get_sm_idx() const$/;"	f	class:ptx_cta_info
get_sm_target	src/cuda-sim/ptx_ir.cc	/^unsigned symbol_table::get_sm_target() const $/;"	f	class:symbol_table
get_sm_target	src/cuda-sim/ptx_ir.h	/^   unsigned get_sm_target() const { return m_symtab->get_sm_target(); }$/;"	f	class:function_info
get_source	src/cuda-sim/ptx_ir.h	/^   const char *get_source() const { return m_source.c_str();}$/;"	f	class:ptx_instruction
get_sp_accessess	src/gpgpu-sim/power_stat.h	/^    unsigned get_sp_accessess(){$/;"	f	class:power_stat_t
get_sp_active_lanes	src/gpgpu-sim/power_stat.h	/^    float get_sp_active_lanes(){$/;"	f	class:power_stat_t
get_sp_committed_inst	src/gpgpu-sim/power_stat.h	/^    unsigned get_sp_committed_inst(){$/;"	f	class:power_stat_t
get_sp_op	src/gpgpu-sim/shader.h	/^      unsigned get_sp_op() const { return m_warp->sp_op; }$/;"	f	class:opndcoll_rfu_t::collector_unit_t
get_sp_op	src/gpgpu-sim/shader.h	/^      unsigned get_sp_op() const$/;"	f	class:opndcoll_rfu_t::op_t
get_space	src/cuda-sim/ptx_ir.h	/^   memory_space_t get_space() const { return m_space_spec;}$/;"	f	class:ptx_instruction
get_start_PC	src/cuda-sim/ptx_ir.h	/^   addr_t get_start_PC() const$/;"	f	class:function_info
get_started_cycle	common/cta_stat_context.cc	/^cta_stat_context_t::get_started_cycle() const$/;"	f	class:cta_stat_context_t
get_stat	src/ramulator_sim/Statistics.h	/^  const StatType* get_stat() const {$/;"	f	class:StatBase
get_stat_context	common/kernel_info_t.h	/^   const cta_stat_context_t& get_stat_context(unsigned sid, unsigned hw_cta_id) { return m_cta_statistics[sid][hw_cta_id]; }$/;"	f	class:kernel_info_t
get_stats	src/gpgpu-sim/gpu-cache.cc	/^unsigned cache_stats::get_stats(enum mem_access_type *access_type, unsigned num_access_type, enum cache_request_status *access_status, unsigned num_access_status) const{$/;"	f	class:cache_stats
get_stats	src/gpgpu-sim/gpu-cache.cc	/^void tag_array::get_stats(unsigned &total_access, unsigned &total_misses, unsigned &total_hit_res, unsigned &total_res_fail) const{$/;"	f	class:tag_array
get_stats	src/gpgpu-sim/gpu-cache.h	/^    const cache_stats &get_stats() const {$/;"	f	class:baseline_cache
get_stats	src/gpgpu-sim/gpu-cache.h	/^    const cache_stats &get_stats() const {$/;"	f	class:tex_cache
get_stats	src/gpgpu-sim/gpu-cache.h	/^    unsigned get_stats(enum mem_access_type *access_type, unsigned num_access_type, enum cache_request_status *access_status, unsigned num_access_status)  const{$/;"	f	class:baseline_cache
get_stats	src/gpgpu-sim/gpu-cache.h	/^    unsigned get_stats(enum mem_access_type *access_type, unsigned num_access_type, enum cache_request_status *access_status, unsigned num_access_status) const{$/;"	f	class:tex_cache
get_status	src/gpgpu-sim/mem_fetch.h	/^   enum mem_fetch_status get_status() const { return m_status; }$/;"	f	class:mem_fetch
get_stream	common/kernel_config.h	/^  struct CUstream_st *get_stream() { return m_stream; }$/;"	f	class:kernel_config
get_stream	src/stream_manager.h	/^    struct CUstream_st *get_stream() { return m_stream; }$/;"	f	class:stream_operation
get_sub_partition	src/gpgpu-sim/l2cache.h	/^   class memory_sub_partition * get_sub_partition(int sub_partition_id) $/;"	f	class:memory_partition_unit
get_sub_partition_id	src/gpgpu-sim/mem_fetch.h	/^   unsigned get_sub_partition_id() const { return m_raw_addr.sub_partition; }$/;"	f	class:mem_fetch
get_sub_stats	src/gpgpu-sim/gpu-cache.cc	/^void cache_stats::get_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:cache_stats
get_sub_stats	src/gpgpu-sim/gpu-cache.h	/^    void get_sub_stats(struct cache_sub_stats &css) const {$/;"	f	class:baseline_cache
get_sub_stats	src/gpgpu-sim/gpu-cache.h	/^    void get_sub_stats(struct cache_sub_stats &css) const{$/;"	f	class:tex_cache
get_sub_stats_kain	src/gpgpu-sim/gpu-cache.cc	/^void cache_stats::get_sub_stats_kain(unsigned cluster_id,struct cache_sub_stats &css) const{$/;"	f	class:cache_stats
get_sub_stats_kain	src/gpgpu-sim/gpu-cache.h	/^	void get_sub_stats_kain(unsigned cluster_id,struct cache_sub_stats &css) const {$/;"	f	class:baseline_cache
get_subarrays	src/ramulator_sim/Config.h	/^  int get_subarrays() const {return subarrays;}$/;"	f	class:Config
get_surf_memory	src/abstract_hardware_model.h	/^    class memory_space *get_surf_memory() { return m_surf_mem; }$/;"	f	class:gpgpu_t
get_surf_memory	src/cuda-sim/ptx_sim.h	/^   memory_space *get_surf_memory() { return m_gpu->get_surf_memory(); }$/;"	f	class:ptx_thread_info
get_switchable_vector	launcher/mk-sched/mk_scheduler.h	/^    const std::vector<bool> get_switchable_vector() const$/;"	f	class:DynamicScheduler::SM_info
get_switching_overhead_latency_for_shader	common/kernel_info_t.cc	/^kernel_info_t::get_switching_overhead_latency_for_shader(unsigned shader_id) const$/;"	f	class:kernel_info_t
get_switching_throughput_overhead	common/kernel_info_t.h	/^   unsigned long long get_switching_throughput_overhead(unsigned sid, unsigned hw_tbid) const$/;"	f	class:kernel_info_t
get_switching_throughput_overhead_for_shader	common/kernel_info_t.cc	/^kernel_info_t::get_switching_throughput_overhead_for_shader(unsigned shader_id) const$/;"	f	class:kernel_info_t
get_symbol	src/cuda-sim/ptx_ir.h	/^   const symbol *get_symbol() const { return m_value.m_symbolic;}$/;"	f	class:operand_info
get_symtab	src/cuda-sim/ptx_ir.h	/^   symbol_table *get_symtab()$/;"	f	class:function_info
get_tag	src/ramulator_sim/Cache.h	/^  long get_tag(long addr) {$/;"	f	class:Cache
get_tex_datasize	src/cuda-sim/cuda-sim.cc	/^static unsigned get_tex_datasize( const ptx_instruction *pI, ptx_thread_info *thread )$/;"	f	file:
get_tex_inst	src/gpgpu-sim/power_stat.h	/^    unsigned get_tex_inst(){$/;"	f	class:power_stat_t
get_tex_memory	src/abstract_hardware_model.h	/^    class memory_space *get_tex_memory() { return m_tex_mem; }$/;"	f	class:gpgpu_t
get_tex_memory	src/cuda-sim/ptx_sim.h	/^   memory_space *get_tex_memory() { return m_gpu->get_tex_memory(); }$/;"	f	class:ptx_thread_info
get_tex_next	src/cuda-sim/ptx_ir.h	/^   addr_t get_tex_next() { return m_tex_next;}$/;"	f	class:symbol_table
get_texarray	src/abstract_hardware_model.h	/^    const struct cudaArray* get_texarray( const struct textureReference *texref ) const$/;"	f	class:gpgpu_t
get_texattr	src/abstract_hardware_model.h	/^    const struct textureReferenceAttr* get_texattr( const struct textureReference *texref ) const$/;"	f	class:gpgpu_t
get_texcache_linesize	src/abstract_hardware_model.h	/^    unsigned    get_texcache_linesize() const { return m_texcache_linesize; }$/;"	f	class:gpgpu_functional_sim_config
get_texinfo	src/abstract_hardware_model.h	/^    const struct textureInfo* get_texinfo( const struct textureReference *texref ) const$/;"	f	class:gpgpu_t
get_texref	src/abstract_hardware_model.h	/^    const struct textureReference* get_texref(const std::string &texname) const$/;"	f	class:gpgpu_t
get_texture_c_accesses	src/gpgpu-sim/power_stat.h	/^    unsigned get_texture_c_accesses(){$/;"	f	class:power_stat_t
get_texture_c_hits	src/gpgpu-sim/power_stat.h	/^    unsigned get_texture_c_hits(){$/;"	f	class:power_stat_t
get_texture_c_misses	src/gpgpu-sim/power_stat.h	/^    unsigned get_texture_c_misses(){$/;"	f	class:power_stat_t
get_tid	src/cuda-sim/ptx_sim.h	/^   dim3 get_tid() const { return m_tid; }$/;"	f	class:ptx_thread_info
get_timestamp	src/gpgpu-sim/mem_fetch.h	/^   unsigned get_timestamp() const { return m_timestamp; }$/;"	f	class:mem_fetch
get_tlx_addr	src/gpgpu-sim/mem_fetch.h	/^   const addrdec_t &get_tlx_addr() const { return m_raw_addr; }$/;"	f	class:mem_fetch
get_tot_fpu_accessess	src/gpgpu-sim/power_stat.h	/^    unsigned get_tot_fpu_accessess(){$/;"	f	class:power_stat_t
get_tot_sfu_accessess	src/gpgpu-sim/power_stat.h	/^    unsigned get_tot_sfu_accessess(){$/;"	f	class:power_stat_t
get_total_cell_area	src/gpuwattch/cacti/subarray.cc	/^double Subarray::get_total_cell_area()$/;"	f	class:Subarray
get_total_fp_inst	src/gpgpu-sim/power_stat.h	/^    unsigned get_total_fp_inst(){$/;"	f	class:power_stat_t
get_total_inst	src/gpgpu-sim/power_stat.h	/^    unsigned get_total_inst(){$/;"	f	class:power_stat_t
get_total_int_inst	src/gpgpu-sim/power_stat.h	/^    unsigned get_total_int_inst(){$/;"	f	class:power_stat_t
get_total_load_inst	src/gpgpu-sim/power_stat.h	/^    unsigned get_total_load_inst(){$/;"	f	class:power_stat_t
get_total_store_inst	src/gpgpu-sim/power_stat.h	/^    unsigned get_total_store_inst(){$/;"	f	class:power_stat_t
get_tpc	src/gpgpu-sim/mem_fetch.h	/^   unsigned get_tpc() const { return m_tpc; }$/;"	f	class:mem_fetch
get_tpc_id	src/gpgpu-sim/shader.h	/^    unsigned get_tpc_id() const {return m_tpc;}$/;"	f	class:shader_core_ctx
get_tpc_id	src/gpgpu-sim/shader.h	/^inline int scheduler_unit::get_tpc_id() const { return m_shader->get_tpc_id(); }$/;"	f	class:scheduler_unit
get_trans_accessess	src/gpgpu-sim/power_stat.h	/^    unsigned get_trans_accessess(){$/;"	f	class:power_stat_t
get_type	src/abstract_hardware_model.h	/^   enum _memory_space_t get_type() const { return m_type; }$/;"	f	class:memory_space_t
get_type	src/abstract_hardware_model.h	/^   enum mem_access_type get_type() const { return m_type; }$/;"	f	class:mem_access_t
get_type	src/cuda-sim/ptx_ir.h	/^   enum operand_type get_type() const {$/;"	f	class:operand_info
get_type	src/cuda-sim/ptx_ir.h	/^   int get_type() const $/;"	f	class:ptx_instruction
get_type	src/cuda-sim/ptx_ir.h	/^   int get_type() const { assert(m_valid);  return m_type; }$/;"	f	class:param_info
get_type	src/gpgpu-sim/mem_fetch.h	/^   enum mf_type get_type() const { return m_type; }$/;"	f	class:mem_fetch
get_type2	src/cuda-sim/ptx_ir.h	/^   int get_type2() const $/;"	f	class:ptx_instruction
get_uid	common/cu_event_st.h	/^   int get_uid() const { return m_uid; }$/;"	f	class:CUevent_st
get_uid	common/kernel_info_t.h	/^   unsigned get_uid() const { return m_uid; }$/;"	f	class:kernel_info_t
get_uid	src/abstract_hardware_model.h	/^    unsigned get_uid() const { return m_uid; }$/;"	f	class:warp_inst_t
get_uid	src/cuda-sim/ptx_ir.cc	/^unsigned operand_info::get_uid()$/;"	f	class:operand_info
get_uid	src/cuda-sim/ptx_ir.cc	/^unsigned symbol::get_uid()$/;"	f	class:symbol
get_uid	src/cuda-sim/ptx_sim.h	/^   unsigned get_uid() const$/;"	f	class:ptx_thread_info
get_uid	src/stream_manager.h	/^    unsigned get_uid() const { return m_uid; }$/;"	f	struct:CUstream_st
get_unique_pointer	launcher/child_process.cc	/^ChildProcess::get_unique_pointer(void* p)$/;"	f	class:ChildProcess
get_value	src/cuda-sim/ptx_ir.h	/^   param_t get_value() const { assert(m_value_set); return m_value; }$/;"	f	class:param_info
get_value	src/debug.h	/^   unsigned get_value() const { return m_value; }$/;"	f	class:brk_pt
get_vect_nelem	src/cuda-sim/ptx_ir.h	/^   unsigned get_vect_nelem() const$/;"	f	class:operand_info
get_vector	src/cuda-sim/ptx_ir.h	/^   unsigned get_vector() const { return m_vector_spec;}$/;"	f	class:ptx_instruction
get_vector_operand_values	src/cuda-sim/instructions.cc	/^void ptx_thread_info::get_vector_operand_values( const operand_info &op, ptx_reg_t* ptx_regs, unsigned num_elements )$/;"	f	class:ptx_thread_info
get_victim	src/ramulator_sim/Scheduler.h	/^    vector<int> get_victim(typename T::Command cmd)$/;"	f	class:RowPolicy
get_w	src/gpuwattch/cacti/area.h	/^  double get_w() const { return w; }$/;"	f	class:Area
get_warp_id	common/shd_warp_t.h	/^    unsigned get_warp_id() const { return m_warp_id; }$/;"	f	class:shd_warp_t
get_warp_id	src/gpgpu-sim/shader.h	/^      unsigned get_warp_id() const { return m_warp_id; }$/;"	f	class:opndcoll_rfu_t::collector_unit_t
get_warp_mask	src/abstract_hardware_model.h	/^   const active_mask_t &get_warp_mask() const { return m_warp_mask; }$/;"	f	class:mem_access_t
get_warp_size	src/abstract_hardware_model.h	/^        unsigned get_warp_size() const { return m_warp_size; }$/;"	f	class:core_t
get_warp_slot_issue	src/gpgpu-sim/shader.h	/^    const std::vector< std::vector<unsigned> >& get_warp_slot_issue() const$/;"	f	class:shader_core_stats
get_warps_active	src/gpgpu-sim/shader.cc	/^barrier_set_t::get_warps_active(unsigned cta_id)$/;"	f	class:barrier_set_t
get_warps_at_barrier	src/gpgpu-sim/shader.cc	/^barrier_set_t::get_warps_at_barrier(unsigned cta_id)$/;"	f	class:barrier_set_t
get_warps_mapped	src/gpgpu-sim/shader.cc	/^barrier_set_t::get_warps_mapped(unsigned cta_id)$/;"	f	class:barrier_set_t
get_wid	src/gpgpu-sim/mem_fetch.h	/^   unsigned get_wid() const { return m_wid; }$/;"	f	class:mem_fetch
get_wid	src/gpgpu-sim/shader.h	/^      unsigned get_wid() const$/;"	f	class:opndcoll_rfu_t::op_t
glbmap_entry	libcuda/cuda_runtime_api.cc	/^struct glbmap_entry {$/;"	s	file:
glbmap_entry_t	libcuda/cuda_runtime_api.cc	/^typedef struct glbmap_entry glbmap_entry_t;$/;"	t	typeref:struct:glbmap_entry	file:
global	src/gpuwattch/cacti/wire.cc	/^    Component Wire::global;$/;"	m	class:Wire	file:
global	src/gpuwattch/cacti/wire.h	/^    static Component global;$/;"	m	class:Wire
globalBPT	src/gpuwattch/core.h	/^	ArrayST * globalBPT;$/;"	m	class:BranchPredictor
globalCheckpoint	src/gpuwattch/basic_components.h	/^    int  perThreadState, globalCheckpoint, instruction_length, pc_width, opcode_length, micro_opcode_length;$/;"	m	class:CoreDynParam
globalCtrBits	src/gpuwattch/arch_const.h	/^const int globalCtrBits=2;$/;"	v
globalHistoryBits	src/gpuwattch/arch_const.h	/^const int globalHistoryBits=13;$/;"	v
globalPredictorSize	src/gpuwattch/arch_const.h	/^const int globalPredictorSize=8192;$/;"	v
global_10	src/gpuwattch/cacti/wire.cc	/^    Component Wire::global_10;$/;"	m	class:Wire	file:
global_10	src/gpuwattch/cacti/wire.h	/^    static Component global_10;$/;"	m	class:Wire
global_20	src/gpuwattch/cacti/wire.cc	/^    Component Wire::global_20;$/;"	m	class:Wire	file:
global_20	src/gpuwattch/cacti/wire.h	/^    static Component global_20;$/;"	m	class:Wire
global_30	src/gpuwattch/cacti/wire.cc	/^    Component Wire::global_30;$/;"	m	class:Wire	file:
global_30	src/gpuwattch/cacti/wire.h	/^    static Component global_30;$/;"	m	class:Wire
global_5	src/gpuwattch/cacti/wire.cc	/^    Component Wire::global_5;$/;"	m	class:Wire	file:
global_5	src/gpuwattch/cacti/wire.h	/^    static Component global_5;$/;"	m	class:Wire
global_iterator_begin	src/cuda-sim/ptx_ir.h	/^   iterator global_iterator_begin() { return m_globals.begin();}$/;"	f	class:symbol_table
global_iterator_end	src/cuda-sim/ptx_ir.h	/^   iterator global_iterator_end() { return m_globals.end();}$/;"	f	class:symbol_table
global_linked_ports	src/gpuwattch/basic_components.h	/^    int    input_ports, output_ports, min_ports, global_linked_ports;$/;"	m	class:NoCParam
global_predictor_bits	src/gpuwattch/XML_Parse.h	/^	int global_predictor_bits;$/;"	m	struct:__anon9
global_predictor_entries	src/gpuwattch/XML_Parse.h	/^	int global_predictor_entries;$/;"	m	struct:__anon9
global_routing_table	src/intersim2/networks/anynet.cpp	/^map<int, int>* global_routing_table;$/;"	v
global_space	src/abstract_hardware_model.h	/^   global_space,$/;"	e	enum:_memory_space_t
global_sub_partition_id_to_local_id	src/gpgpu-sim/l2cache.cc	/^int memory_partition_unit::global_sub_partition_id_to_local_id(int global_sub_partition_id) const$/;"	f	class:memory_partition_unit
global_to_generic	src/cuda-sim/cuda-sim.cc	/^addr_t global_to_generic( addr_t addr )$/;"	f
glue_buf	src/intersim/interconnect_interface.h	/^struct glue_buf {$/;"	s
gm_sense_amp_latch	src/gpuwattch/cacti/parameter.h	/^  double gm_sense_amp_latch;$/;"	m	class:TechnologyParameter
gmem_n_access_total	src/cuda-sim/ptx-stats.cc	/^    unsigned long long gmem_n_access_total; \/\/ number of uncoalesced access in total from this instruction$/;"	m	class:ptx_file_line_stats	file:
gmem_skip_L1D	src/gpgpu-sim/shader.h	/^    bool gmem_skip_L1D; \/\/ on = global memory access always skip the L1 cache $/;"	m	struct:shader_core_config
gmem_warp_count	src/cuda-sim/ptx-stats.cc	/^    unsigned long gmem_warp_count;          \/\/ number of warps causing these uncoalesced access$/;"	m	class:ptx_file_line_stats	file:
gpgpu_L2_queue_config	src/gpgpu-sim/gpu-sim.h	/^   char *gpgpu_L2_queue_config;$/;"	m	struct:memory_config
gpgpu_cache_constl1_linesize	src/abstract_hardware_model.h	/^    unsigned gpgpu_cache_constl1_linesize;$/;"	m	struct:core_config
gpgpu_cache_texl1_linesize	src/abstract_hardware_model.h	/^    unsigned gpgpu_cache_texl1_linesize;$/;"	m	struct:core_config
gpgpu_cflog_interval	src/gpgpu-sim/gpu-sim.h	/^    int   gpgpu_cflog_interval;$/;"	m	class:gpgpu_sim_config
gpgpu_clock_domains	src/gpgpu-sim/gpu-sim.h	/^    char * gpgpu_clock_domains;$/;"	m	class:gpgpu_sim_config
gpgpu_clock_gated_lanes	src/gpgpu-sim/shader.h	/^    bool gpgpu_clock_gated_lanes;$/;"	m	struct:shader_core_config
gpgpu_clock_gated_lanes	src/gpuwattch/XML_Parse.h	/^	bool gpgpu_clock_gated_lanes;$/;"	m	struct:__anon15
gpgpu_clock_gated_reg_file	src/gpgpu-sim/shader.h	/^    bool gpgpu_clock_gated_reg_file;$/;"	m	struct:shader_core_config
gpgpu_coalesce_arch	src/abstract_hardware_model.h	/^    int gpgpu_coalesce_arch;$/;"	m	struct:core_config
gpgpu_cuda_ptx_sim_init_grid	launcher/simulator.cc	/^static kernel_info_t *gpgpu_cuda_ptx_sim_init_grid( const char *hostFun, $/;"	f	file:
gpgpu_cuda_ptx_sim_main_func	src/cuda-sim/cuda-sim.cc	/^void gpgpu_cuda_ptx_sim_main_func( kernel_info_t &kernel, bool openCL )$/;"	f
gpgpu_debug	src/debug.cc	/^void gpgpu_sim::gpgpu_debug()$/;"	f	class:gpgpu_sim
gpgpu_dram_return_queue_size	src/gpgpu-sim/gpu-sim.h	/^   unsigned gpgpu_dram_return_queue_size;$/;"	m	struct:memory_config
gpgpu_dram_timing_opt	src/gpgpu-sim/gpu-sim.h	/^   char *gpgpu_dram_timing_opt;$/;"	m	struct:memory_config
gpgpu_dwf_reg_bankconflict	src/gpgpu-sim/shader.h	/^    bool gpgpu_dwf_reg_bankconflict;$/;"	m	struct:shader_core_config
gpgpu_flush_l1_cache	src/gpgpu-sim/gpu-sim.h	/^    bool  gpgpu_flush_l1_cache;$/;"	m	class:gpgpu_sim_config
gpgpu_flush_l2_cache	src/gpgpu-sim/gpu-sim.h	/^    bool  gpgpu_flush_l2_cache;$/;"	m	class:gpgpu_sim_config
gpgpu_frfcfs_dram_sched_queue_size	src/gpgpu-sim/gpu-sim.h	/^    int   gpgpu_frfcfs_dram_sched_queue_size; $/;"	m	class:gpgpu_sim_config
gpgpu_frfcfs_dram_sched_queue_size	src/gpgpu-sim/gpu-sim.h	/^   unsigned gpgpu_frfcfs_dram_sched_queue_size;$/;"	m	struct:memory_config
gpgpu_functional_sim_config	src/abstract_hardware_model.h	/^class gpgpu_functional_sim_config $/;"	c
gpgpu_local_mem_map	src/gpgpu-sim/shader.h	/^    bool gpgpu_local_mem_map;$/;"	m	struct:shader_core_config
gpgpu_max_insn_issue_per_warp	src/abstract_hardware_model.h	/^	unsigned gpgpu_max_insn_issue_per_warp;$/;"	m	struct:core_config
gpgpu_max_insn_issue_per_warp	src/gpgpu-sim/shader.h	/^    int gpgpu_max_insn_issue_per_warp;$/;"	m	struct:shader_core_config
gpgpu_mem_address_mask	src/gpgpu-sim/addrdec.h	/^   int gpgpu_mem_address_mask;$/;"	m	class:linear_to_raw_address_translation
gpgpu_memlatency_stat	src/gpgpu-sim/gpu-sim.h	/^   bool gpgpu_memlatency_stat;$/;"	m	struct:memory_config
gpgpu_most_para_bit	src/gpgpu-sim/addrdec.h	/^   unsigned gpgpu_most_para_bit;$/;"	m	class:linear_to_raw_address_translation
gpgpu_n_cache_bkconflict	src/gpgpu-sim/shader.h	/^    unsigned gpgpu_n_cache_bkconflict;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_cmem_portconflict	src/gpgpu-sim/shader.h	/^    unsigned gpgpu_n_cmem_portconflict;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_const_insn	src/gpgpu-sim/shader.h	/^    unsigned gpgpu_n_const_insn;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_intrawarp_mshr_merge	src/gpgpu-sim/shader.h	/^    int      gpgpu_n_intrawarp_mshr_merge;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_load_insn	src/gpgpu-sim/shader.h	/^    unsigned gpgpu_n_load_insn;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_mem_const	src/gpgpu-sim/shader.h	/^    int gpgpu_n_mem_const;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_mem_l1_write_allocate	src/gpgpu-sim/shader.h	/^    int gpgpu_n_mem_l1_write_allocate; $/;"	m	struct:shader_core_stats_pod
gpgpu_n_mem_l2_write_allocate	src/gpgpu-sim/shader.h	/^    int gpgpu_n_mem_l2_write_allocate;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_mem_l2_writeback	src/gpgpu-sim/shader.h	/^    int gpgpu_n_mem_l2_writeback;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_mem_read_global	src/gpgpu-sim/shader.h	/^    int gpgpu_n_mem_read_global;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_mem_read_inst	src/gpgpu-sim/shader.h	/^    int gpgpu_n_mem_read_inst;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_mem_read_local	src/gpgpu-sim/shader.h	/^    int gpgpu_n_mem_read_local;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_mem_texture	src/gpgpu-sim/shader.h	/^    int gpgpu_n_mem_texture;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_mem_write_global	src/gpgpu-sim/shader.h	/^    int gpgpu_n_mem_write_global;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_mem_write_local	src/gpgpu-sim/shader.h	/^    int gpgpu_n_mem_write_local;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_param_insn	src/gpgpu-sim/shader.h	/^    unsigned gpgpu_n_param_insn;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_shmem_bank_access	src/gpgpu-sim/shader.h	/^    unsigned *gpgpu_n_shmem_bank_access;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_shmem_bkconflict	src/gpgpu-sim/shader.h	/^    unsigned gpgpu_n_shmem_bkconflict;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_shmem_insn	src/gpgpu-sim/shader.h	/^    unsigned gpgpu_n_shmem_insn;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_stall_shd_mem	src/gpgpu-sim/shader.h	/^    unsigned gpgpu_n_stall_shd_mem;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_store_insn	src/gpgpu-sim/shader.h	/^    unsigned gpgpu_n_store_insn;$/;"	m	struct:shader_core_stats_pod
gpgpu_n_tex_insn	src/gpgpu-sim/shader.h	/^    unsigned gpgpu_n_tex_insn;$/;"	m	struct:shader_core_stats_pod
gpgpu_num_mem_units	src/gpgpu-sim/shader.h	/^    int gpgpu_num_mem_units;$/;"	m	struct:shader_core_config
gpgpu_num_reg_banks	src/gpgpu-sim/shader.h	/^    unsigned gpgpu_num_reg_banks;$/;"	m	struct:shader_core_config
gpgpu_num_sched_per_core	src/gpgpu-sim/shader.h	/^    int gpgpu_num_sched_per_core;$/;"	m	struct:shader_core_config
gpgpu_num_sfu_units	src/gpgpu-sim/shader.h	/^    int gpgpu_num_sfu_units;$/;"	m	struct:shader_core_config
gpgpu_num_sp_units	src/gpgpu-sim/shader.h	/^    int gpgpu_num_sp_units;$/;"	m	struct:shader_core_config
gpgpu_opencl_ptx_sim_init_grid	src/cuda-sim/cuda-sim.cc	/^kernel_info_t *gpgpu_opencl_ptx_sim_init_grid(class function_info *entry,$/;"	f
gpgpu_operand_collector_num_in_ports_gen	src/gpgpu-sim/shader.h	/^    unsigned int gpgpu_operand_collector_num_in_ports_gen;$/;"	m	struct:shader_core_config
gpgpu_operand_collector_num_in_ports_mem	src/gpgpu-sim/shader.h	/^    unsigned int gpgpu_operand_collector_num_in_ports_mem;$/;"	m	struct:shader_core_config
gpgpu_operand_collector_num_in_ports_sfu	src/gpgpu-sim/shader.h	/^    unsigned int gpgpu_operand_collector_num_in_ports_sfu;$/;"	m	struct:shader_core_config
gpgpu_operand_collector_num_in_ports_sp	src/gpgpu-sim/shader.h	/^    unsigned int gpgpu_operand_collector_num_in_ports_sp;$/;"	m	struct:shader_core_config
gpgpu_operand_collector_num_out_ports_gen	src/gpgpu-sim/shader.h	/^    unsigned int gpgpu_operand_collector_num_out_ports_gen;$/;"	m	struct:shader_core_config
gpgpu_operand_collector_num_out_ports_mem	src/gpgpu-sim/shader.h	/^    unsigned int gpgpu_operand_collector_num_out_ports_mem;$/;"	m	struct:shader_core_config
gpgpu_operand_collector_num_out_ports_sfu	src/gpgpu-sim/shader.h	/^    unsigned int gpgpu_operand_collector_num_out_ports_sfu;$/;"	m	struct:shader_core_config
gpgpu_operand_collector_num_out_ports_sp	src/gpgpu-sim/shader.h	/^    unsigned int gpgpu_operand_collector_num_out_ports_sp;$/;"	m	struct:shader_core_config
gpgpu_operand_collector_num_units_gen	src/gpgpu-sim/shader.h	/^    int gpgpu_operand_collector_num_units_gen;$/;"	m	struct:shader_core_config
gpgpu_operand_collector_num_units_mem	src/gpgpu-sim/shader.h	/^    int gpgpu_operand_collector_num_units_mem;$/;"	m	struct:shader_core_config
gpgpu_operand_collector_num_units_sfu	src/gpgpu-sim/shader.h	/^    int gpgpu_operand_collector_num_units_sfu;$/;"	m	struct:shader_core_config
gpgpu_operand_collector_num_units_sp	src/gpgpu-sim/shader.h	/^    int gpgpu_operand_collector_num_units_sp;$/;"	m	struct:shader_core_config
gpgpu_param_num_shaders	src/cuda-sim/cuda-sim.cc	/^unsigned gpgpu_param_num_shaders = 0;$/;"	v
gpgpu_perfect_mem	src/gpgpu-sim/shader.h	/^    bool gpgpu_perfect_mem;$/;"	m	struct:shader_core_config
gpgpu_ptx_assemble	src/cuda-sim/ptx_ir.cc	/^void gpgpu_ptx_assemble( std::string kname, void *kinfo )$/;"	f
gpgpu_ptx_instruction_classification	src/cuda-sim/cuda-sim.cc	/^int gpgpu_ptx_instruction_classification;$/;"	v
gpgpu_ptx_sim_arg	common/gpgpu_ptx_sim_arg.h	/^   gpgpu_ptx_sim_arg() { m_start=NULL; }$/;"	f	struct:gpgpu_ptx_sim_arg
gpgpu_ptx_sim_arg	common/gpgpu_ptx_sim_arg.h	/^   gpgpu_ptx_sim_arg(const void *arg, size_t size, size_t offset)$/;"	f	struct:gpgpu_ptx_sim_arg
gpgpu_ptx_sim_arg	common/gpgpu_ptx_sim_arg.h	/^struct gpgpu_ptx_sim_arg {$/;"	s
gpgpu_ptx_sim_arg_list_t	common/gpgpu_ptx_sim_arg.h	/^typedef std::list<gpgpu_ptx_sim_arg> gpgpu_ptx_sim_arg_list_t;$/;"	t
gpgpu_ptx_sim_bindNameToTexture	src/cuda-sim/cuda-sim.cc	/^void gpgpu_t::gpgpu_ptx_sim_bindNameToTexture(const char* name, const struct textureReference* texref, int dim, int readmode, int ext)$/;"	f	class:gpgpu_t
gpgpu_ptx_sim_bindTextureToArray	src/cuda-sim/cuda-sim.cc	/^void gpgpu_t::gpgpu_ptx_sim_bindTextureToArray(const struct textureReference* texref, const struct cudaArray* array)$/;"	f	class:gpgpu_t
gpgpu_ptx_sim_convert_ptx_and_sass_to_ptxplus	src/cuda-sim/ptx_loader.cc	/^char* gpgpu_ptx_sim_convert_ptx_and_sass_to_ptxplus(const std::string ptxfilename, const std::string elffilename, const std::string sassfilename)$/;"	f
gpgpu_ptx_sim_findNamefromTexture	src/cuda-sim/cuda-sim.cc	/^const char* gpgpu_t::gpgpu_ptx_sim_findNamefromTexture(const struct textureReference* texref)$/;"	f	class:gpgpu_t
gpgpu_ptx_sim_init_perf	src/gpgpusim_entrypoint.cc	/^gpgpu_sim *gpgpu_ptx_sim_init_perf()$/;"	f
gpgpu_ptx_sim_kernel_info	src/abstract_hardware_model.h	/^struct gpgpu_ptx_sim_kernel_info $/;"	s
gpgpu_ptx_sim_load_ptx_from_string	src/cuda-sim/ptx_loader.cc	/^symbol_table *gpgpu_ptx_sim_load_ptx_from_string( const char *p, unsigned source_num )$/;"	f
gpgpu_ptx_sim_memcpy_symbol	src/cuda-sim/cuda-sim.cc	/^void gpgpu_ptx_sim_memcpy_symbol(const char *hostVar, const void *src, size_t count, size_t offset, int to, gpgpu_t *gpu )$/;"	f
gpgpu_ptx_sim_register_const_variable	src/cuda-sim/cuda-sim.cc	/^void gpgpu_ptx_sim_register_const_variable(void *hostVar, const char *deviceName, size_t size )$/;"	f
gpgpu_ptx_sim_register_global_variable	src/cuda-sim/cuda-sim.cc	/^void gpgpu_ptx_sim_register_global_variable(void *hostVar, const char *deviceName, size_t size )$/;"	f
gpgpu_ptxinfo_load_from_string	src/cuda-sim/ptx_loader.cc	/^void gpgpu_ptxinfo_load_from_string( const char *p_for_info, unsigned source_num )$/;"	f
gpgpu_recon_t	src/cuda-sim/ptx_ir.h	/^struct gpgpu_recon_t {$/;"	s
gpgpu_reg_bank_use_warp_id	src/gpgpu-sim/shader.h	/^    bool gpgpu_reg_bank_use_warp_id;$/;"	m	struct:shader_core_config
gpgpu_runtime_stat	src/gpgpu-sim/gpu-sim.h	/^    char *gpgpu_runtime_stat;$/;"	m	class:gpgpu_sim_config
gpgpu_scheduler_string	src/gpgpu-sim/shader.h	/^    char * gpgpu_scheduler_string;$/;"	m	struct:shader_core_config
gpgpu_shader_core_pipeline_opt	src/gpgpu-sim/shader.h	/^    char *gpgpu_shader_core_pipeline_opt;$/;"	m	struct:shader_core_config
gpgpu_shader_registers	src/gpgpu-sim/shader.h	/^    unsigned gpgpu_shader_registers;$/;"	m	struct:shader_core_config
gpgpu_shader_registers_kain	src/gpgpu-sim/shader.h	/^    unsigned gpgpu_shader_registers_kain(unsigned core_sid) const$/;"	f	struct:shader_core_config
gpgpu_shmem_size	src/abstract_hardware_model.h	/^    mutable unsigned gpgpu_shmem_size;$/;"	m	struct:core_config
gpgpu_shmem_sizeDefault	src/abstract_hardware_model.h	/^    unsigned gpgpu_shmem_sizeDefault;$/;"	m	struct:core_config
gpgpu_shmem_sizePrefL1	src/abstract_hardware_model.h	/^    unsigned gpgpu_shmem_sizePrefL1;$/;"	m	struct:core_config
gpgpu_shmem_sizePrefShared	src/abstract_hardware_model.h	/^    unsigned gpgpu_shmem_sizePrefShared;$/;"	m	struct:core_config
gpgpu_shmem_size_kain	src/gpgpu-sim/shader.h	/^    unsigned gpgpu_shmem_size_kain(unsigned core_sid) const$/;"	f	struct:shader_core_config
gpgpu_sim	src/gpgpu-sim/gpu-sim.cc	/^gpgpu_sim::gpgpu_sim( const gpgpu_sim_config &config ) $/;"	f	class:gpgpu_sim
gpgpu_sim	src/gpgpu-sim/gpu-sim.h	/^class gpgpu_sim : public gpgpu_t {$/;"	c
gpgpu_sim_config	src/gpgpu-sim/gpu-sim.h	/^    gpgpu_sim_config() { m_valid = false; }$/;"	f	class:gpgpu_sim_config
gpgpu_sim_config	src/gpgpu-sim/gpu-sim.h	/^class gpgpu_sim_config : public power_config, public gpgpu_functional_sim_config {$/;"	c
gpgpu_sim_progress	src/gpgpusim_entrypoint.cc	/^gpgpu_sim_progress(LauncherOptionParser* opt)$/;"	f
gpgpu_sim_wrapper	src/gpgpu-sim/gpu-sim.cc	/^class  gpgpu_sim_wrapper {};$/;"	c	file:
gpgpu_sim_wrapper	src/gpuwattch/gpgpu_sim_wrapper.cc	/^gpgpu_sim_wrapper::gpgpu_sim_wrapper( bool power_simulation_enabled, char* xmlfile) {$/;"	f	class:gpgpu_sim_wrapper
gpgpu_sim_wrapper	src/gpuwattch/gpgpu_sim_wrapper.h	/^class gpgpu_sim_wrapper {$/;"	c
gpgpu_t	src/abstract_hardware_model.cc	/^gpgpu_t::gpgpu_t( const gpgpu_functional_sim_config &config )$/;"	f	class:gpgpu_t
gpgpu_t	src/abstract_hardware_model.h	/^class gpgpu_t {$/;"	c
gpgpu_warp_issue_shader	src/gpgpu-sim/shader.h	/^    int gpgpu_warp_issue_shader;$/;"	m	struct:shader_core_config
gpgpu_warpdistro_shader	src/gpgpu-sim/shader.h	/^    int gpgpu_warpdistro_shader;$/;"	m	struct:shader_core_config
gpgpusim_cuda_vprintf	src/cuda-sim/cuda_device_printf.cc	/^void gpgpusim_cuda_vprintf(const ptx_instruction * pI, ptx_thread_info * thread, const function_info * target_func ) $/;"	f
gpgpusim_ptx_assert	launcher/simulator.cc	56;"	d	file:
gpgpusim_ptx_assert_impl	launcher/simulator.cc	/^gpgpusim_ptx_assert_impl( int test_value, const char *func, const char *file, unsigned line, const char *msg, ... )$/;"	f	file:
gpgpusim_ptx_error	launcher/simulator.cc	55;"	d	file:
gpgpusim_ptx_error_impl	launcher/simulator.cc	/^gpgpusim_ptx_error_impl( const char *func, const char *file, unsigned line, const char *msg, ... )$/;"	f	file:
gpu_deadlock	src/gpgpu-sim/gpu-sim.h	/^   bool gpu_deadlock;$/;"	m	class:gpgpu_sim
gpu_deadlock_detect	src/gpgpu-sim/gpu-sim.h	/^    bool  gpu_deadlock_detect;$/;"	m	class:gpgpu_sim_config
gpu_idle_core_power	src/gpgpu-sim/gpu-sim.h	/^    double gpu_idle_core_power;$/;"	m	struct:power_config
gpu_malloc	src/cuda-sim/cuda-sim.cc	/^void* gpgpu_t::gpu_malloc( size_t size )$/;"	f	class:gpgpu_t
gpu_mallocarray	src/cuda-sim/cuda-sim.cc	/^void* gpgpu_t::gpu_mallocarray( size_t size )$/;"	f	class:gpgpu_t
gpu_max_cta_opt	src/gpgpu-sim/gpu-sim.h	/^    unsigned gpu_max_cta_opt;$/;"	m	class:gpgpu_sim_config
gpu_max_cycle_opt	src/gpgpu-sim/gpu-sim.h	/^    unsigned gpu_max_cycle_opt;$/;"	m	class:gpgpu_sim_config
gpu_max_insn_opt	src/gpgpu-sim/gpu-sim.h	/^    unsigned gpu_max_insn_opt;$/;"	m	class:gpgpu_sim_config
gpu_memset	src/cuda-sim/cuda-sim.cc	/^void gpgpu_t::gpu_memset( size_t dst_start_addr, int c, size_t count )$/;"	f	class:gpgpu_t
gpu_min_inc_per_active_sm	src/gpgpu-sim/gpu-sim.h	/^    double gpu_min_inc_per_active_sm;$/;"	m	struct:power_config
gpu_n_mem_per_ctrlr	src/gpgpu-sim/gpu-sim.h	/^   unsigned gpu_n_mem_per_ctrlr;$/;"	m	struct:memory_config
gpu_nonlinear_model_config	src/gpgpu-sim/gpu-sim.h	/^    char * gpu_nonlinear_model_config;$/;"	m	struct:power_config
gpu_print_stat	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::gpu_print_stat() $/;"	f	class:gpgpu_sim
gpu_reg_bank_conflict_stalls	src/gpgpu-sim/shader.h	/^    unsigned gpu_reg_bank_conflict_stalls;$/;"	m	struct:shader_core_stats_pod
gpu_runtime_stat_flag	src/gpgpu-sim/gpu-sim.h	/^    int gpu_runtime_stat_flag;$/;"	m	class:gpgpu_sim_config
gpu_sim_cycle	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long  gpu_sim_cycle = 0;$/;"	v
gpu_sim_insn	src/gpgpu-sim/gpu-sim.h	/^   unsigned long long  gpu_sim_insn;$/;"	m	class:gpgpu_sim
gpu_sim_insn_last_update	src/gpgpu-sim/gpu-sim.h	/^   unsigned long long  gpu_sim_insn_last_update;$/;"	m	class:gpgpu_sim
gpu_sim_insn_last_update_sid	src/gpgpu-sim/gpu-sim.h	/^   unsigned gpu_sim_insn_last_update_sid;$/;"	m	class:gpgpu_sim
gpu_stall_dramfull	src/gpgpu-sim/gpu-sim.cc	/^unsigned int gpu_stall_dramfull = 0; $/;"	v
gpu_stall_icnt2sh	src/gpgpu-sim/gpu-sim.cc	/^unsigned int gpu_stall_icnt2sh = 0;$/;"	v
gpu_stall_shd_mem_breakdown	src/gpgpu-sim/shader.h	/^    unsigned gpu_stall_shd_mem_breakdown[N_MEM_STAGE_ACCESS_TYPE][N_MEM_STAGE_STALL_TYPE];$/;"	m	struct:shader_core_stats_pod
gpu_stat_sample_freq	src/gpgpu-sim/gpu-sim.h	/^    int gpu_stat_sample_freq;$/;"	m	class:gpgpu_sim_config
gpu_stat_sample_freq	src/gpuwattch/gpgpu_sim_wrapper.h	/^    int gpu_stat_sample_freq;$/;"	m	class:gpgpu_sim_wrapper
gpu_stat_sample_frequency	src/gpuwattch/gpgpu_sim_wrapper.h	/^    double gpu_stat_sample_frequency;$/;"	m	class:gpgpu_sim_wrapper
gpu_steady_min_period	src/gpgpu-sim/gpu-sim.h	/^    double gpu_steady_min_period;$/;"	m	struct:power_config
gpu_steady_min_period	src/gpuwattch/gpgpu_sim_wrapper.h	/^	double   gpu_steady_min_period;$/;"	m	class:gpgpu_sim_wrapper
gpu_steady_power_deviation	src/gpgpu-sim/gpu-sim.h	/^    double gpu_steady_power_deviation;$/;"	m	struct:power_config
gpu_steady_power_deviation	src/gpuwattch/gpgpu_sim_wrapper.h	/^	double   gpu_steady_power_deviation;$/;"	m	class:gpgpu_sim_wrapper
gpu_steady_state_definition	src/gpgpu-sim/gpu-sim.h	/^    char * gpu_steady_state_definition;$/;"	m	struct:power_config
gpu_tot_issued_cta	src/gpgpu-sim/gpu-sim.h	/^   unsigned long long  gpu_tot_issued_cta;$/;"	m	class:gpgpu_sim
gpu_tot_power	src/gpuwattch/gpgpu_sim_wrapper.h	/^    avg_max_min_counters<double> gpu_tot_power; \/\/ Global GPU power avg\/max\/min values (across kernels)$/;"	m	class:gpgpu_sim_wrapper
gpu_tot_sim_cycle	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long  gpu_tot_sim_cycle = 0;$/;"	v
gpu_tot_sim_insn	src/gpgpu-sim/gpu-sim.h	/^   unsigned long long  gpu_tot_sim_insn;$/;"	m	class:gpgpu_sim
grid_dim	common/kernel_config.h	/^  dim3 grid_dim() const { return m_GridDim; }$/;"	f	class:kernel_config
grow_convert	src/ramulator_sim/StatType.cpp	/^Histogram::grow_convert()$/;"	f	class:Stats_Ram::Histogram
grow_out	src/ramulator_sim/StatType.cpp	/^Histogram::grow_out()$/;"	f	class:Stats_Ram::Histogram
grow_up	src/ramulator_sim/StatType.cpp	/^Histogram::grow_up()$/;"	f	class:Stats_Ram::Histogram
gs_min2	src/gpgpu-sim/gpu-misc.h	38;"	d
gto_scheduler	src/gpgpu-sim/shader.h	/^	gto_scheduler ( shader_core_stats* stats, shader_core_ctx* shader,$/;"	f	class:gto_scheduler
gto_scheduler	src/gpgpu-sim/shader.h	/^class gto_scheduler : public scheduler_unit {$/;"	c
guessCharEncoding	src/gpuwattch/xmlParser.cc	/^XMLNode::XMLCharEncoding XMLNode::guessCharEncoding(void *buf,int l, char useXMLEncodingAttribute)$/;"	f	class:XMLNode
guessWideCharChars	src/gpuwattch/xmlParser.cc	/^static char guessWideCharChars=1, dropWhiteSpace=1, removeCommentsInMiddleOfText=1;$/;"	v	file:
h	src/gpuwattch/cacti/area.h	/^  double h;$/;"	m	class:Area
h_dec	src/gpuwattch/cacti/parameter.h	/^  uint64_t h_dec;$/;"	m	class:TechnologyParameter
h_wire	src/gpuwattch/cacti/nuca.h	/^    Wire *h_wire;$/;"	m	class:nuca_org_t
hardware_done	common/shd_warp_t.cc	/^shd_warp_t::hardware_done() const$/;"	f	class:shd_warp_t
has	launcher/mk-sched/named_info.cc	/^NamedInfo<T>::has(std::string str) const$/;"	f	class:NamedInfo
hasTextureReference	launcher/child_process.h	/^  bool hasTextureReference(const void* hostVar) const { return cudaTextureReferences.find(hostVar) != cudaTextureReferences.end(); }$/;"	f	class:ChildProcess
hasVarName	launcher/child_process.h	/^  bool hasVarName(const void* hostVar) const { return cudaVarNames.find(hostVar) != cudaVarNames.end();  }$/;"	f	class:ChildProcess
has_atomic	common/kernel_info_t.h	/^   bool has_atomic() const { return m_has_atomic; }$/;"	f	class:kernel_info_t
has_callback	src/abstract_hardware_model.h	/^    bool has_callback( unsigned n ) const$/;"	f	class:warp_inst_t
has_context_switching_core	src/gpgpu-sim/gpu-sim.cc	/^gpgpu_sim::has_context_switching_core() const$/;"	f	class:gpgpu_sim
has_core_caches	src/ramulator_sim/Config.h	/^  bool has_core_caches() const {$/;"	f	class:Config
has_credits	src/gpgpu-sim/l2cache.cc	/^bool memory_partition_unit::arbitration_metadata::has_credits(int inner_sub_partition_id) const $/;"	f	class:memory_partition_unit::arbitration_metadata
has_dispatch_delay	src/abstract_hardware_model.h	/^    bool has_dispatch_delay(){$/;"	f	class:warp_inst_t
has_free	src/abstract_hardware_model.h	/^	bool has_free(){$/;"	f	class:register_set
has_global_link	src/gpuwattch/XML_Parse.h	/^	bool has_global_link;$/;"	m	struct:__anon21
has_global_link	src/gpuwattch/basic_components.h	/^    bool   has_global_link, type;$/;"	m	class:NoCParam
has_initializer	src/cuda-sim/ptx_ir.h	/^   bool has_initializer() const $/;"	f	class:symbol
has_l3_cache	src/ramulator_sim/Config.h	/^  bool has_l3_cache() const {$/;"	f	class:Config
has_launched_kernel	launcher/child_process.h	/^  bool has_launched_kernel() const { return launched_kernel; }$/;"	f	class:ChildProcess
has_memory_read	src/cuda-sim/ptx_ir.h	/^   bool has_memory_read() const {$/;"	f	class:ptx_instruction
has_memory_write	src/cuda-sim/ptx_ir.h	/^   bool has_memory_write() const {$/;"	f	class:ptx_instruction
has_no_remaining_inst	src/gpgpu-sim/shader.cc	/^ldst_unit::has_no_remaining_inst() const$/;"	f	class:ldst_unit
has_packet	src/intersim/interconnect_interface.cpp	/^   bool has_packet() {$/;"	f	class:boundary_buf
has_pending_warps	src/gpgpu-sim/shader.cc	/^shader_core_ctx::has_pending_warps() const$/;"	f	class:shader_core_ctx
has_pred	src/cuda-sim/ptx_ir.h	/^   bool has_pred() const { return m_pred != NULL;}$/;"	f	class:ptx_instruction
has_ready	src/abstract_hardware_model.h	/^	bool has_ready(){$/;"	f	class:register_set
has_return	src/cuda-sim/ptx_ir.h	/^   bool has_return() const$/;"	f	class:function_info
has_return	src/cuda-sim/ptx_ir.h	/^   bool has_return() const$/;"	f	class:ptx_instruction
has_run_until_inst_finished	launcher/launcher_option_parser.cc	/^LauncherOptionParser::has_run_until_inst_finished() const$/;"	f	class:LauncherOptionParser
has_special_cache_config	src/gpgpu-sim/gpu-sim.cc	/^bool gpgpu_sim::has_special_cache_config(std::string kernel_name)$/;"	f	class:gpgpu_sim
has_written_avg	src/gpuwattch/gpgpu_sim_wrapper.h	/^    bool has_written_avg;$/;"	m	class:gpgpu_sim_wrapper
hash_addrdec_t	src/gpgpu-sim/addrdec.cc	/^class hash_addrdec_t$/;"	c	file:
hash_ptx_file_line	src/cuda-sim/ptx-stats.cc	/^struct hash_ptx_file_line$/;"	s	file:
head	src/intersim/credit.hpp	/^   bool head, tail;$/;"	m	class:Credit
head	src/intersim/event_router.hpp	/^      bool head;$/;"	m	struct:EventRouter::tArrivalEvent
head	src/intersim/flit.hpp	/^   bool head;$/;"	m	struct:Flit
head	src/intersim2/credit.hpp	/^  bool head, tail;$/;"	m	class:Credit
head	src/intersim2/flit.hpp	/^  bool head;$/;"	m	class:Flit
head	src/intersim2/routers/event_router.hpp	/^    bool head;$/;"	m	struct:EventRouter::tArrivalEvent
height	common/cuda_array.h	/^   int height;$/;"	m	struct:cudaArray
height	libcuda/cuda_runtime_api.cc	/^	int height;$/;"	m	struct:cudaArray	file:
height	src/gpuwattch/cacti/cacti_interface.h	/^  double height;$/;"	m	class:mem_array
height_sense_amplifier	src/gpuwattch/cacti/component.cc	/^double Component::height_sense_amplifier(double pitch_sense_amp)$/;"	f	class:Component
high	src/cuda-sim/ptx_sim.h	/^       unsigned int high;$/;"	m	struct:ptx_reg_t::__anon3
higher_cache	src/ramulator_sim/Cache.h	/^  std::vector<Cache*> higher_cache;$/;"	m	class:Cache
highest	src/cuda-sim/ptx_sim.h	/^       unsigned int highest;$/;"	m	struct:ptx_reg_t::__anon3
hit	src/gpuwattch/basic_components.h	/^    double hit;$/;"	m	class:statsComponents
hit_list	src/ramulator_sim/Cache.h	/^  std::list<std::pair<long, Request> > hit_list;$/;"	m	class:CacheSystem
hit_mshr	src/ramulator_sim/Cache.h	/^  hit_mshr(long addr) {$/;"	f	class:Cache
hit_watchpoint	src/debug.cc	/^void hit_watchpoint( unsigned watchpoint_num, ptx_thread_info *thd, const ptx_instruction *pI )$/;"	f
hits	src/ramulator_sim/Scheduler.h	/^        int hits;$/;"	m	struct:RowTable::Entry
holding	launcher/mk-sched/fixed_scheduler.h	/^    unsigned holding;$/;"	m	struct:FixedScheduler::SM_alloc
holding_SMs	launcher/mk-sched/even_scheduler.h	/^  std::map<kernel_info_t*, unsigned> holding_SMs;$/;"	m	class:EvenScheduler
holding_shaders	launcher/mk-sched/mk_scheduler.h	/^    unsigned holding_shaders;$/;"	m	class:DynamicScheduler::SM_info
homenode_read_accesses	src/gpuwattch/XML_Parse.h	/^	double homenode_read_accesses;$/;"	m	struct:__anon18
homenode_read_accesses	src/gpuwattch/XML_Parse.h	/^	double homenode_read_accesses;$/;"	m	struct:__anon19
homenode_read_hits	src/gpuwattch/XML_Parse.h	/^	double homenode_read_hits;$/;"	m	struct:__anon18
homenode_read_hits	src/gpuwattch/XML_Parse.h	/^	double homenode_read_hits;$/;"	m	struct:__anon19
homenode_read_misses	src/gpuwattch/XML_Parse.h	/^	double homenode_read_misses;$/;"	m	struct:__anon18
homenode_read_misses	src/gpuwattch/XML_Parse.h	/^	double homenode_read_misses;$/;"	m	struct:__anon19
homenode_rtp_stats	src/gpuwattch/sharedcache.h	/^    statsDef   homenode_rtp_stats;$/;"	m	class:SharedCache
homenode_stats_t	src/gpuwattch/sharedcache.h	/^    statsDef   homenode_stats_t;$/;"	m	class:SharedCache
homenode_tdp_stats	src/gpuwattch/sharedcache.h	/^    statsDef   homenode_tdp_stats;$/;"	m	class:SharedCache
homenode_write_accesses	src/gpuwattch/XML_Parse.h	/^	double homenode_write_accesses;$/;"	m	struct:__anon18
homenode_write_accesses	src/gpuwattch/XML_Parse.h	/^	double homenode_write_accesses;$/;"	m	struct:__anon19
homenode_write_hits	src/gpuwattch/XML_Parse.h	/^	double homenode_write_hits;$/;"	m	struct:__anon18
homenode_write_hits	src/gpuwattch/XML_Parse.h	/^	double homenode_write_hits;$/;"	m	struct:__anon19
homenode_write_misses	src/gpuwattch/XML_Parse.h	/^	double homenode_write_misses;$/;"	m	struct:__anon18
homenode_write_misses	src/gpuwattch/XML_Parse.h	/^	double homenode_write_misses;$/;"	m	struct:__anon19
homoCore	src/gpuwattch/basic_components.h	/^    bool homoCore, homoL2, homoL3, homoNOC, homoL1Dir, homoL2Dir;$/;"	m	class:ProcParam
homoL1Dir	src/gpuwattch/basic_components.h	/^    bool homoCore, homoL2, homoL3, homoNOC, homoL1Dir, homoL2Dir;$/;"	m	class:ProcParam
homoL2	src/gpuwattch/basic_components.h	/^    bool homoCore, homoL2, homoL3, homoNOC, homoL1Dir, homoL2Dir;$/;"	m	class:ProcParam
homoL2Dir	src/gpuwattch/basic_components.h	/^    bool homoCore, homoL2, homoL3, homoNOC, homoL1Dir, homoL2Dir;$/;"	m	class:ProcParam
homoL3	src/gpuwattch/basic_components.h	/^    bool homoCore, homoL2, homoL3, homoNOC, homoL1Dir, homoL2Dir;$/;"	m	class:ProcParam
homoNOC	src/gpuwattch/basic_components.h	/^    bool homoCore, homoL2, homoL3, homoNOC, homoL1Dir, homoL2Dir;$/;"	m	class:ProcParam
homogeneous_L1Directories	src/gpuwattch/XML_Parse.h	/^	int homogeneous_L1Directories;$/;"	m	struct:__anon26
homogeneous_L2Directories	src/gpuwattch/XML_Parse.h	/^	int homogeneous_L2Directories;$/;"	m	struct:__anon26
homogeneous_L2s	src/gpuwattch/XML_Parse.h	/^	int homogeneous_L2s;$/;"	m	struct:__anon26
homogeneous_L2s	src/gpuwattch/arch_const.h	/^const bool	    	homogeneous_L2s	=	true;$/;"	v
homogeneous_L3s	src/gpuwattch/XML_Parse.h	/^	int homogeneous_L3s;$/;"	m	struct:__anon26
homogeneous_L3s	src/gpuwattch/arch_const.h	/^const bool 			homogeneous_L3s	=	true;$/;"	v
homogeneous_NoCs	src/gpuwattch/XML_Parse.h	/^	int homogeneous_NoCs;$/;"	m	struct:__anon26
homogeneous_ccs	src/gpuwattch/XML_Parse.h	/^	int homogeneous_ccs;$/;"	m	struct:__anon26
homogeneous_cores	src/gpuwattch/XML_Parse.h	/^	int homogeneous_cores;$/;"	m	struct:__anon26
homogeneous_cores	src/gpuwattch/arch_const.h	/^const bool 			homogeneous_cores	= 	true;$/;"	v
hop_count_based	src/intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_based, hop_count_based, sequence_based, none };$/;"	e	enum:TrafficManager::ePriority
hop_count_based	src/intersim2/vc.hpp	/^  enum ePrioType { local_age_based, queue_length_based, hop_count_based, none, other };$/;"	e	enum:VC::ePrioType
hops	src/intersim/flit.hpp	/^   int  hops;$/;"	m	struct:Flit
hops	src/intersim2/flit.hpp	/^  int  hops;$/;"	m	class:Flit
hor_bus	src/gpuwattch/cacti/highradix.h	/^    Wire *hor_bus, *ver_bus;$/;"	m	class:HighRadix
horiz_dielectric_constant	src/gpuwattch/cacti/parameter.h	/^    double horiz_dielectric_constant;$/;"	m	class:TechnologyParameter::InterconnectType
horizontal_nodes	src/gpuwattch/XML_Parse.h	/^	int horizontal_nodes;$/;"	m	struct:__anon21
horizontal_nodes	src/gpuwattch/basic_components.h	/^    int    horizontal_nodes,vertical_nodes, total_nodes;$/;"	m	class:NoCParam
horowitz	src/gpuwattch/cacti/basic_circuit.cc	/^double horowitz($/;"	f
hostFun	launcher/child_process.h	/^    const char* hostFun;$/;"	m	struct:ChildProcess::kernel_build_info
ht	src/gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router
htree_hnodes	src/gpuwattch/cacti/htree2.h	/^    double htree_hnodes;$/;"	m	class:Htree2
htree_in_add	src/gpuwattch/cacti/bank.h	/^    Htree2 *htree_in_add;$/;"	m	class:Bank
htree_in_add	src/gpuwattch/cacti/uca.h	/^    Htree2   * htree_in_add;$/;"	m	class:UCA
htree_in_data	src/gpuwattch/cacti/bank.h	/^    Htree2 *htree_in_data;$/;"	m	class:Bank
htree_in_data	src/gpuwattch/cacti/uca.h	/^    Htree2   * htree_in_data;$/;"	m	class:UCA
htree_in_search	src/gpuwattch/cacti/bank.h	/^    Htree2 *htree_in_search;$/;"	m	class:Bank
htree_in_search	src/gpuwattch/cacti/uca.h	/^    Htree2   * htree_in_search;$/;"	m	class:UCA
htree_out_data	src/gpuwattch/cacti/bank.h	/^    Htree2 *htree_out_data;$/;"	m	class:Bank
htree_out_data	src/gpuwattch/cacti/uca.h	/^    Htree2   * htree_out_data;$/;"	m	class:UCA
htree_out_search	src/gpuwattch/cacti/bank.h	/^    Htree2 *htree_out_search;$/;"	m	class:Bank
htree_out_search	src/gpuwattch/cacti/uca.h	/^    Htree2   * htree_out_search;$/;"	m	class:UCA
htree_vnodes	src/gpuwattch/cacti/htree2.h	/^    double htree_vnodes;$/;"	m	class:Htree2
hw_cta_id	common/preempt_overhead.h	/^  unsigned hw_cta_id;$/;"	m	class:cta_preempt_overhead
hw_tid_from_wid	src/gpgpu-sim/shader.h	/^inline unsigned hw_tid_from_wid(unsigned wid, unsigned warp_size, unsigned i){return wid * warp_size + i;};$/;"	f
iFRAT	src/gpuwattch/core.h	/^	ArrayST * iFRAT;$/;"	m	class:RENAMINGU
iRRAT	src/gpuwattch/core.h	/^	ArrayST * iRRAT;$/;"	m	class:RENAMINGU
iSLIP_Sparse	src/intersim/islip.cpp	/^iSLIP_Sparse::iSLIP_Sparse( const Configuration &config,$/;"	f	class:iSLIP_Sparse
iSLIP_Sparse	src/intersim/islip.hpp	/^class iSLIP_Sparse : public SparseAllocator {$/;"	c
iSLIP_Sparse	src/intersim2/allocators/islip.cpp	/^iSLIP_Sparse::iSLIP_Sparse( Module *parent, const string& name,$/;"	f	class:iSLIP_Sparse
iSLIP_Sparse	src/intersim2/allocators/islip.hpp	/^class iSLIP_Sparse : public SparseAllocator {$/;"	c
ialu_accesses	src/gpuwattch/XML_Parse.h	/^	double ialu_accesses;$/;"	m	struct:__anon15
ibuffer_empty	common/shd_warp_t.h	/^    bool ibuffer_empty() const$/;"	f	class:shd_warp_t
ibuffer_entry	common/shd_warp_t.h	/^       ibuffer_entry() { m_valid = false; m_inst = NULL; }$/;"	f	struct:shd_warp_t::ibuffer_entry
ibuffer_entry	common/shd_warp_t.h	/^    struct ibuffer_entry {$/;"	s	class:shd_warp_t
ibuffer_fill	common/shd_warp_t.h	/^    void ibuffer_fill( unsigned slot, const warp_inst_t *pI )$/;"	f	class:shd_warp_t
ibuffer_flush	common/shd_warp_t.h	/^    void ibuffer_flush()$/;"	f	class:shd_warp_t
ibuffer_free	common/shd_warp_t.h	/^    void ibuffer_free()$/;"	f	class:shd_warp_t
ibuffer_next_inst	common/shd_warp_t.h	/^    const warp_inst_t *ibuffer_next_inst() { return m_ibuffer[m_next].m_inst; }$/;"	f	class:shd_warp_t
ibuffer_next_valid	common/shd_warp_t.h	/^    bool ibuffer_next_valid() { return m_ibuffer[m_next].m_valid; }$/;"	f	class:shd_warp_t
ibuffer_step	common/shd_warp_t.h	/^    void ibuffer_step() { m_next = (m_next+1)%IBUFFER_SIZE; }$/;"	f	class:shd_warp_t
ic_proj_type	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int ic_proj_type;      \/\/ interconnect_projection_type$/;"	m	class:InputParameter
icache	src/gpuwattch/XML_Parse.h	/^	icache_systemcore icache;$/;"	m	struct:__anon15
icache	src/gpuwattch/core.h	/^	InstCache icache;$/;"	m	class:InstFetchU
icache_config	src/gpuwattch/XML_Parse.h	/^	double icache_config[20];$/;"	m	struct:__anon11
icache_systemcore	src/gpuwattch/XML_Parse.h	/^} icache_systemcore;$/;"	t	typeref:struct:__anon11
icache_write_buffers	src/gpuwattch/arch_const.h	/^const int icache_write_buffers=8;$/;"	v
icacheassoc	src/gpuwattch/arch_const.h	/^const int icacheassoc=4;$/;"	v
icacheblocksize	src/gpuwattch/arch_const.h	/^const int icacheblocksize=32;$/;"	v
icachesize	src/gpuwattch/arch_const.h	/^const int icachesize=32768;$/;"	v
icnt2mem_lat_table	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned icnt2mem_lat_table[24];$/;"	m	class:memory_stats_t
icnt2sh_lat_table	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned icnt2sh_lat_table[24];$/;"	m	class:memory_stats_t
icnt_busy	src/gpgpu-sim/icnt_wrapper.cc	/^icnt_busy_p                  icnt_busy;$/;"	v
icnt_busy_p	src/gpgpu-sim/icnt_wrapper.h	/^typedef bool (*icnt_busy_p)( );$/;"	t
icnt_config	src/intersim/interconnect_interface.cpp	/^BookSimConfig icnt_config; $/;"	v
icnt_create	src/gpgpu-sim/icnt_wrapper.cc	/^icnt_create_p                icnt_create;$/;"	v
icnt_create_p	src/gpgpu-sim/icnt_wrapper.h	/^typedef void (*icnt_create_p)(unsigned n_shader,  unsigned n_mem);$/;"	t
icnt_cycle	src/gpgpu-sim/shader.cc	/^void simt_core_cluster::icnt_cycle()$/;"	f	class:simt_core_cluster
icnt_display_overall_stats	src/gpgpu-sim/icnt_wrapper.cc	/^icnt_display_overall_stats_p icnt_display_overall_stats;$/;"	v
icnt_display_overall_stats_p	src/gpgpu-sim/icnt_wrapper.h	/^typedef void (*icnt_display_overall_stats_p)( );$/;"	t
icnt_display_state	src/gpgpu-sim/icnt_wrapper.cc	/^icnt_display_state_p         icnt_display_state;$/;"	v
icnt_display_state_p	src/gpgpu-sim/icnt_wrapper.h	/^typedef void (*icnt_display_state_p)(FILE* fp);$/;"	t
icnt_display_stats	src/gpgpu-sim/icnt_wrapper.cc	/^icnt_display_stats_p         icnt_display_stats;$/;"	v
icnt_display_stats_p	src/gpgpu-sim/icnt_wrapper.h	/^typedef void (*icnt_display_stats_p)( );$/;"	t
icnt_drain_p	src/gpgpu-sim/icnt_wrapper.h	/^typedef void (*icnt_drain_p)( );$/;"	t
icnt_flit_size	src/gpgpu-sim/gpu-sim.h	/^   unsigned icnt_flit_size;$/;"	m	struct:memory_config
icnt_flit_size	src/gpgpu-sim/mem_fetch.h	/^   unsigned icnt_flit_size;$/;"	m	class:mem_fetch
icnt_freq	src/gpgpu-sim/gpu-sim.h	/^    double icnt_freq;$/;"	m	class:gpgpu_sim_config
icnt_get_flit_size	src/gpgpu-sim/icnt_wrapper.cc	/^icnt_get_flit_size_p         icnt_get_flit_size;$/;"	v
icnt_get_flit_size_p	src/gpgpu-sim/icnt_wrapper.h	/^typedef unsigned (*icnt_get_flit_size_p)();$/;"	t
icnt_has_buffer	src/gpgpu-sim/icnt_wrapper.cc	/^icnt_has_buffer_p            icnt_has_buffer;$/;"	v
icnt_has_buffer_p	src/gpgpu-sim/icnt_wrapper.h	/^typedef bool (*icnt_has_buffer_p)(unsigned input, unsigned int size);$/;"	t
icnt_init	src/gpgpu-sim/icnt_wrapper.cc	/^icnt_init_p                  icnt_init;$/;"	v
icnt_init_grid	src/intersim/interconnect_interface.cpp	/^void icnt_init_grid (){$/;"	f
icnt_init_p	src/gpgpu-sim/icnt_wrapper.h	/^typedef void (*icnt_init_p)( );$/;"	t
icnt_inject_request_packet	src/gpgpu-sim/shader.cc	/^void simt_core_cluster::icnt_inject_request_packet(class mem_fetch *mf)$/;"	f	class:simt_core_cluster
icnt_injection_buffer_full	src/gpgpu-sim/shader.cc	/^bool simt_core_cluster::icnt_injection_buffer_full(unsigned size, bool write)$/;"	f	class:simt_core_cluster
icnt_overal_stat	src/intersim/interconnect_interface.cpp	/^void icnt_overal_stat() \/\/should be called upon simulation exit to give an overal stat$/;"	f
icnt_period	src/gpgpu-sim/gpu-sim.h	/^    double icnt_period;$/;"	m	class:gpgpu_sim_config
icnt_pop	src/gpgpu-sim/icnt_wrapper.cc	/^icnt_pop_p                   icnt_pop;$/;"	v
icnt_pop_p	src/gpgpu-sim/icnt_wrapper.h	/^typedef void* (*icnt_pop_p)(unsigned output);$/;"	t
icnt_push	src/gpgpu-sim/icnt_wrapper.cc	/^icnt_push_p                  icnt_push;$/;"	v
icnt_push_p	src/gpgpu-sim/icnt_wrapper.h	/^typedef void (*icnt_push_p)(unsigned input, unsigned output, void* data, unsigned int size);$/;"	t
icnt_reg_options	src/gpgpu-sim/icnt_wrapper.cc	/^void icnt_reg_options( class OptionParser * opp )$/;"	f
icnt_time	src/gpgpu-sim/gpu-sim.h	/^   double icnt_time;$/;"	m	class:gpgpu_sim
icnt_transfer	src/gpgpu-sim/icnt_wrapper.cc	/^icnt_transfer_p              icnt_transfer;$/;"	v
icnt_transfer_p	src/gpgpu-sim/icnt_wrapper.h	/^typedef void (*icnt_transfer_p)( );$/;"	t
icnt_wrapper_init	src/gpgpu-sim/icnt_wrapper.cc	/^void icnt_wrapper_init()$/;"	f
id	src/intersim/credit.hpp	/^   int  id;$/;"	m	class:Credit
id	src/intersim/event_router.hpp	/^      int  id;    \/\/ debug$/;"	m	struct:EventRouter::tArrivalEvent
id	src/intersim/event_router.hpp	/^      int  id;    \/\/ debug$/;"	m	struct:EventRouter::tTransportEvent
id	src/intersim/event_router.hpp	/^      int  id;$/;"	m	struct:EventNextVCState::tWaiting
id	src/intersim/flit.hpp	/^   int  id;$/;"	m	struct:Flit
id	src/intersim2/arbiters/arbiter.hpp	/^    int id ;$/;"	m	struct:Arbiter::__anon1
id	src/intersim2/credit.hpp	/^  int  id;$/;"	m	class:Credit
id	src/intersim2/flit.hpp	/^  int  id;$/;"	m	class:Flit
id	src/intersim2/routers/event_router.hpp	/^    int  id;    \/\/ debug$/;"	m	struct:EventRouter::tArrivalEvent
id	src/intersim2/routers/event_router.hpp	/^    int  id;    \/\/ debug$/;"	m	struct:EventRouter::tTransportEvent
id	src/intersim2/routers/event_router.hpp	/^    int  id;$/;"	m	struct:EventNextVCState::tWaiting
id	src/ramulator_sim/DRAM.h	/^    int id;$/;"	m	class:DRAM
idata	src/option_parser.cc	/^   int idata;$/;"	m	class:testtype	file:
idcl	src/gpuwattch/core.h	/^	dep_resource_conflict_check * idcl;$/;"	m	class:RENAMINGU
idd0	src/gpuwattch/basic_components.h	/^	int idd0;$/;"	m	class:DRAMParam
idd1	src/gpuwattch/basic_components.h	/^	int idd1;$/;"	m	class:DRAMParam
idd2n	src/gpuwattch/basic_components.h	/^	int idd2n;$/;"	m	class:DRAMParam
idd2p	src/gpuwattch/basic_components.h	/^	int idd2p;$/;"	m	class:DRAMParam
idd3n	src/gpuwattch/basic_components.h	/^	int idd3n;$/;"	m	class:DRAMParam
idd3p	src/gpuwattch/basic_components.h	/^	int idd3p;$/;"	m	class:DRAMParam
idd4r	src/gpuwattch/basic_components.h	/^	int idd4r;$/;"	m	class:DRAMParam
idd4w	src/gpuwattch/basic_components.h	/^	int idd4w;$/;"	m	class:DRAMParam
idd5	src/gpuwattch/basic_components.h	/^	int idd5;$/;"	m	class:DRAMParam
idd6	src/gpuwattch/basic_components.h	/^	int idd6;$/;"	m	class:DRAMParam
idd7	src/gpuwattch/basic_components.h	/^	int idd7;$/;"	m	class:DRAMParam
identifier	libcuda/cuda_runtime_api.cc	/^    std::string identifier;$/;"	m	class:cuobjdumpSection	file:
identifier_list	src/cuda-sim/ptx.y	/^identifier_list: identifier_spec$/;"	l
identifier_spec	src/cuda-sim/ptx.y	/^identifier_spec: IDENTIFIER { add_identifier($1,0,NON_ARRAY_IDENTIFIER); func_header_info($1);}$/;"	l
idle	src/intersim/event_router.hpp	/^      idle, busy, tail_pending$/;"	e	enum:EventNextVCState::eNextVCState
idle	src/intersim/vc.hpp	/^      idle, routing, vc_alloc, active$/;"	e	enum:VC::eVCState
idle	src/intersim2/routers/event_router.hpp	/^  enum eNextVCState { idle, busy, tail_pending };$/;"	e	enum:EventNextVCState::eNextVCState
idle	src/intersim2/vc.hpp	/^  enum eVCState { state_min = 0, idle = state_min, routing, vc_alloc, active, $/;"	e	enum:VC::eVCState
idle_core_power	src/gpuwattch/XML_Parse.h	/^	double idle_core_power;$/;"	m	struct:__anon26
idle_core_power	src/gpuwattch/processor.h	/^	double idle_core_power;$/;"	m	class:Processor
idle_cycles	src/gpuwattch/XML_Parse.h	/^	double idle_cycles;$/;"	m	struct:__anon15
idle_cycles	src/gpuwattch/basic_components.h	/^    double pipeline_duty_cycle, total_cycles, busy_cycles, idle_cycles;$/;"	m	class:CoreDynParam
ifb	src/gpuwattch/array.h	/^  ArrayST* ifb;$/;"	m	class:InstCache
ifetch_buffer_t	src/gpgpu-sim/shader.h	/^    ifetch_buffer_t( address_type pc, unsigned nbytes, unsigned warp_id ) $/;"	f	struct:ifetch_buffer_t
ifetch_buffer_t	src/gpgpu-sim/shader.h	/^    ifetch_buffer_t() { m_valid=false; }$/;"	f	struct:ifetch_buffer_t
ifetch_buffer_t	src/gpgpu-sim/shader.h	/^struct ifetch_buffer_t {$/;"	s
ifreeL	src/gpuwattch/core.h	/^	ArrayST * ifreeL;$/;"	m	class:RENAMINGU
ifu	src/gpuwattch/core.h	/^	InstFetchU * ifu;$/;"	m	class:Core
ild_thickness	src/gpuwattch/cacti/parameter.h	/^    double ild_thickness;$/;"	m	class:TechnologyParameter::InterconnectType
imiss_pending	common/shd_warp_t.h	/^    bool imiss_pending() const { return m_imiss_pending; }$/;"	f	class:shd_warp_t
immediatedominator_id	src/cuda-sim/ptx_ir.h	/^   int immediatedominator_id;$/;"	m	struct:basic_block_t
immediatepostdominator_id	src/cuda-sim/ptx_ir.h	/^   int immediatepostdominator_id;$/;"	m	struct:basic_block_t
in	src/abstract_hardware_model.h	/^    unsigned in[4];$/;"	m	class:inst_t
in	src/intersim/arbiter.hpp	/^      int in;$/;"	m	struct:Arbiter::sRequest
in	src/intersim2/arbiters/prio_arb.hpp	/^    int in;$/;"	m	struct:PriorityArbiter::sRequest
in_htree	src/gpuwattch/cacti/htree2.cc	/^Htree2::in_htree()$/;"	f	class:Htree2
in_pri	src/intersim/allocator.hpp	/^      int in_pri;$/;"	m	struct:Allocator::sRequest
in_pri	src/intersim2/allocators/allocator.hpp	/^    int in_pri;$/;"	m	struct:Allocator::sRequest
in_queue_read_req_num_avg	src/ramulator_sim/Memory.h	/^    ScalarStat in_queue_read_req_num_avg;$/;"	m	class:Memory
in_queue_read_req_num_sum	src/ramulator_sim/Memory.h	/^    ScalarStat in_queue_read_req_num_sum;$/;"	m	class:Memory
in_queue_req_num_avg	src/ramulator_sim/Memory.h	/^    ScalarStat in_queue_req_num_avg;$/;"	m	class:Memory
in_queue_req_num_sum	src/ramulator_sim/Memory.h	/^    ScalarStat in_queue_req_num_sum;$/;"	m	class:Memory
in_queue_write_req_num_avg	src/ramulator_sim/Memory.h	/^    ScalarStat in_queue_write_req_num_avg;$/;"	m	class:Memory
in_queue_write_req_num_sum	src/ramulator_sim/Memory.h	/^    ScalarStat in_queue_write_req_num_sum;$/;"	m	class:Memory
in_rise_time	src/gpuwattch/cacti/htree2.h	/^    double in_rise_time, out_rise_time;$/;"	m	class:Htree2
in_rise_time	src/gpuwattch/cacti/wire.h	/^    double in_rise_time, out_rise_time;$/;"	m	class:Wire
in_rise_time	src/gpuwattch/interconnect.h	/^    double in_rise_time, out_rise_time;$/;"	m	class:interconnect
inactive_lanes_accesses_nonsfu	src/gpgpu-sim/shader.h	/^	 unsigned inactive_lanes_accesses_nonsfu(unsigned active_count,double latency){$/;"	f	class:shader_core_ctx
inactive_lanes_accesses_sfu	src/gpgpu-sim/shader.h	/^	 unsigned inactive_lanes_accesses_sfu(unsigned active_count,double latency){$/;"	f	class:shader_core_ctx
inc	launcher/stats/stats.h	/^  virtual void inc(uint64_t val) {$/;"	f	class:Stats::AverageScalarStorage
inc	launcher/stats/stats.h	/^  virtual void inc(uint64_t val) {$/;"	f	class:Stats::CountScalarStorage
inc	launcher/stats/stats.h	/^  virtual void inc(uint64_t val) {$/;"	f	class:Stats::MaxScalarStorage
inc	src/ramulator_sim/StatType.h	/^  void inc(Counter val) {$/;"	f	class:Stats_Ram::Average
inc_SM_for_kernel	launcher/mk-sched/even_scheduler.cc	/^EvenScheduler::inc_SM_for_kernel(kernel_info_t* kernel, unsigned linear_shader_id)$/;"	f	class:EvenScheduler
inc_SM_for_kernel	launcher/mk-sched/fixed_scheduler.cc	/^FixedScheduler::inc_SM_for_kernel(kernel_info_t* kernel, unsigned linear_shader_id)$/;"	f	class:FixedScheduler
inc_SM_for_kernel	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::inc_SM_for_kernel(kernel_info_t* kernel, unsigned linear_shader_id)$/;"	f	class:DynamicScheduler
inc_cta_inst	common/kernel_info_t.cc	/^kernel_info_t::inc_cta_inst(unsigned shader_id, unsigned hw_cta_id)$/;"	f	class:kernel_info_t
inc_cycles	launcher/child_process.cc	/^ChildProcess::inc_cycles()$/;"	f	class:ChildProcess
inc_executed_insts	common/cta_stat_context.h	/^    void inc_executed_insts() { ++m_executed_insts; }$/;"	f	class:cta_stat_context_t
inc_fat_binary	launcher/child_process.h	/^  void inc_fat_binary()           { ++fat_binary_count; }$/;"	f	class:ChildProcess
inc_head	src/gpgpu-sim/gpu-cache.h	/^        void inc_head() { m_head = (m_head+1)%m_size; m_num++;}$/;"	f	class:tex_cache::fifo
inc_inst_in_pipeline	common/shd_warp_t.h	/^    void inc_inst_in_pipeline() { ++m_inst_in_pipeline; }$/;"	f	class:shd_warp_t
inc_n_atomic	common/shd_warp_t.h	/^    void inc_n_atomic() { m_n_atomic++; }$/;"	f	class:shd_warp_t
inc_num_simulated_insts	common/kernel_info_t.cc	/^kernel_info_t::inc_num_simulated_insts(unsigned active_count)$/;"	f	class:kernel_info_t
inc_num_simulated_insts	launcher/child_process.cc	/^ChildProcess::inc_num_simulated_insts(unsigned active_count)$/;"	f	class:ChildProcess
inc_running	common/kernel_info_t.h	/^   void inc_running(unsigned shader_id) { m_num_cores_running++; }$/;"	f	class:kernel_info_t
inc_running_ctas	common/kernel_info_t.h	/^   void inc_running_ctas() { ++m_running_ctas; }$/;"	f	class:kernel_info_t
inc_scheduled_cta	common/kernel_info_t.cc	/^kernel_info_t::inc_scheduled_cta(const unsigned shader_id)$/;"	f	class:kernel_info_t
inc_simt_to_mem	src/gpgpu-sim/shader.h	/^	 void inc_simt_to_mem(unsigned n_flits){ m_stats->n_simt_to_mem[m_sid] += n_flits; }$/;"	f	class:shader_core_ctx
inc_simulated_insts_for_SM	src/gpgpu-sim/gpu-sim.cc	/^gpgpu_sim::inc_simulated_insts_for_SM(unsigned sid, unsigned num_insts)$/;"	f	class:gpgpu_sim
inc_stats	src/gpgpu-sim/gpu-cache.cc	/^void cache_stats::inc_stats(int access_type, int access_outcome){$/;"	f	class:cache_stats
inc_stats_kain	src/gpgpu-sim/gpu-cache.cc	/^void cache_stats::inc_stats_kain(mem_fetch *mf, int access_type, int access_outcome){$/;"	f	class:cache_stats
inc_store_req	common/shd_warp_t.h	/^    void inc_store_req() { m_stores_outstanding++; }$/;"	f	class:shd_warp_t
inc_store_req	src/gpgpu-sim/shader.h	/^    void inc_store_req( unsigned warp_id) { m_warp[warp_id].inc_store_req(); }$/;"	f	class:shader_core_ctx
inc_tail	src/gpgpu-sim/gpu-cache.h	/^        void inc_tail() { assert(m_num>0); m_tail = (m_tail+1)%m_size; m_num--;}$/;"	f	class:tex_cache::fifo
incexecstat	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::incexecstat(warp_inst_t *&inst)$/;"	f	class:shader_core_ctx
incfpalu_stat	src/gpgpu-sim/shader.h	/^	 void incfpalu_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx
incfpdiv_stat	src/gpgpu-sim/shader.h	/^	 void incfpdiv_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx
incfpmul_stat	src/gpgpu-sim/shader.h	/^	 void incfpmul_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx
incfuactivelanes_stat	src/gpgpu-sim/shader.h	/^	 void incfuactivelanes_stat(unsigned active_count) {m_stats->m_active_fu_lanes[m_sid]=m_stats->m_active_fu_lanes[m_sid]+active_count;}$/;"	f	class:shader_core_ctx
incfumemactivelanes_stat	src/gpgpu-sim/shader.h	/^	 void incfumemactivelanes_stat(unsigned active_count) {m_stats->m_active_fu_mem_lanes[m_sid]=m_stats->m_active_fu_mem_lanes[m_sid]+active_count;}$/;"	f	class:shader_core_ctx
incialu_stat	src/gpgpu-sim/shader.h	/^    void incialu_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx
incidiv_stat	src/gpgpu-sim/shader.h	/^	 void incidiv_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx
incimul24_stat	src/gpgpu-sim/shader.h	/^    void incimul24_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx
incimul32_stat	src/gpgpu-sim/shader.h	/^	 void incimul32_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx
incimul_stat	src/gpgpu-sim/shader.h	/^    void incimul_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx
incload_stat	src/gpgpu-sim/shader.h	/^    void incload_stat() {m_stats->m_num_loadqueued_insn[m_sid]++;}$/;"	f	class:shader_core_ctx
incmem_stat	src/gpgpu-sim/shader.h	/^	 void incmem_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx
incnon_rf_operands	src/gpgpu-sim/shader.h	/^	 void incnon_rf_operands(unsigned active_count){m_stats->m_non_rf_operands[m_sid]=m_stats->m_non_rf_operands[m_sid]+active_count;}$/;"	f	class:shader_core_ctx
incoming_read_reqs_per_channel	src/ramulator_sim/Memory.h	/^    VectorStat incoming_read_reqs_per_channel;$/;"	m	class:Memory
incoming_requests_per_channel	src/ramulator_sim/Memory.h	/^    VectorStat incoming_requests_per_channel;$/;"	m	class:Memory
incregfile_reads	src/gpgpu-sim/shader.h	/^	 void incregfile_reads(unsigned active_count) {m_stats->m_read_regfile_acesses[m_sid]=m_stats->m_read_regfile_acesses[m_sid]+active_count;}$/;"	f	class:shader_core_ctx
incregfile_writes	src/gpgpu-sim/shader.h	/^	 void incregfile_writes(unsigned active_count){m_stats->m_write_regfile_acesses[m_sid]=m_stats->m_write_regfile_acesses[m_sid]+active_count;}$/;"	f	class:shader_core_ctx
increment_cta_id	common/kernel_info_t.cc	/^kernel_info_t::increment_cta_id(unsigned core_id) $/;"	f	class:kernel_info_t
increment_thread_id	common/kernel_info_t.cc	/^kernel_info_t::increment_thread_id()$/;"	f	class:kernel_info_t
increment_x_then_y_then_z	common/kernel_info_t.cc	/^increment_x_then_y_then_z( dim3 &i, const dim3 &bound)$/;"	f	file:
incsfu_stat	src/gpgpu-sim/shader.h	/^	 void incsfu_stat(unsigned active_count,double latency) {m_stats->m_num_sfu_acesses[m_sid]=m_stats->m_num_sfu_acesses[m_sid]+active_count*latency;}$/;"	f	class:shader_core_ctx
incsfuactivelanes_stat	src/gpgpu-sim/shader.h	/^	 void incsfuactivelanes_stat(unsigned active_count) {m_stats->m_active_sfu_lanes[m_sid]=m_stats->m_active_sfu_lanes[m_sid]+active_count;}$/;"	f	class:shader_core_ctx
incsp_stat	src/gpgpu-sim/shader.h	/^	 void incsp_stat(unsigned active_count,double latency) {m_stats->m_num_sp_acesses[m_sid]=m_stats->m_num_sp_acesses[m_sid]+active_count*latency;}$/;"	f	class:shader_core_ctx
incspactivelanes_stat	src/gpgpu-sim/shader.h	/^	 void incspactivelanes_stat(unsigned active_count) {m_stats->m_active_sp_lanes[m_sid]=m_stats->m_active_sp_lanes[m_sid]+active_count;}$/;"	f	class:shader_core_ctx
incstore_stat	src/gpgpu-sim/shader.h	/^    void incstore_stat() {m_stats->m_num_storequeued_insn[m_sid]++;}$/;"	f	class:shader_core_ctx
inctex_stat	src/gpgpu-sim/shader.h	/^    void inctex_stat(unsigned active_count,double latency){$/;"	f	class:shader_core_ctx
inctrans_stat	src/gpgpu-sim/shader.h	/^	 void inctrans_stat(unsigned active_count,double latency) {$/;"	f	class:shader_core_ctx
index	src/intersim2/power/buffer_monitor.cpp	/^int BufferMonitor::index( int input, int cl ) const {$/;"	f	class:BufferMonitor
index	src/intersim2/power/switch_monitor.cpp	/^int SwitchMonitor::index( int input, int output, int cl ) const {$/;"	f	class:SwitchMonitor
indexClear	src/gpuwattch/xmlParser.cc	/^int XMLNode::indexClear(XMLCSTR lpszValue) const$/;"	f	class:XMLNode
indexText	src/gpuwattch/xmlParser.cc	/^int XMLNode::indexText(XMLCSTR lpszValue) const$/;"	f	class:XMLNode
index_mask	src/ramulator_sim/Cache.h	/^  unsigned int index_mask;$/;"	m	class:Cache
index_offset	src/ramulator_sim/Cache.h	/^  unsigned int index_offset;$/;"	m	class:Cache
inflight_mem_tracker	src/cuda-sim/ptx-stats.cc	/^static ptx_inflight_memory_insn_tracker *inflight_mem_tracker = NULL;$/;"	v	file:
info	src/cuda-sim/ptxinfo.y	/^info: 	  USED INT_OPERAND REGS { ptxinfo_regs($2); }$/;"	l
init	common/shd_warp_t.h	/^    void init( address_type start_pc,$/;"	f	class:shd_warp_t
init	src/abstract_hardware_model.h	/^   void init() $/;"	f	class:mem_access_t
init	src/cuda-sim/ptx_ir.h	/^   void init()$/;"	f	class:operand_info
init	src/cuda-sim/ptx_sim.h	/^   void init(gpgpu_t *gpu, core_t *core, unsigned sid, unsigned cta_id, unsigned wid, unsigned tid, bool fsim) $/;"	f	class:ptx_thread_info
init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::init(unsigned int n_channel, unsigned int n_sub_partition_in_channel) $/;"	f	class:linear_to_raw_address_translation
init	src/gpgpu-sim/gpu-cache.cc	/^void l2_cache_config::init(linear_to_raw_address_translation *address_mapping){$/;"	f	class:l2_cache_config
init	src/gpgpu-sim/gpu-cache.cc	/^void tag_array::init( int core_id, int type_id )$/;"	f	class:tag_array
init	src/gpgpu-sim/gpu-cache.h	/^    virtual void init( mem_fetch_allocator *mfcreator )$/;"	f	class:data_cache
init	src/gpgpu-sim/gpu-cache.h	/^    void init( const char *name,$/;"	f	class:baseline_cache
init	src/gpgpu-sim/gpu-cache.h	/^    void init(char * config, FuncCache status)$/;"	f	class:cache_config
init	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::init()$/;"	f	class:gpgpu_sim
init	src/gpgpu-sim/gpu-sim.h	/^	void init()$/;"	f	struct:power_config
init	src/gpgpu-sim/gpu-sim.h	/^    void init() $/;"	f	class:gpgpu_sim_config
init	src/gpgpu-sim/gpu-sim.h	/^   void init()$/;"	f	struct:memory_config
init	src/gpgpu-sim/power_stat.cc	/^void power_core_stat_t::init()$/;"	f	class:power_core_stat_t
init	src/gpgpu-sim/power_stat.cc	/^void power_mem_stat_t::init(){$/;"	f	class:power_mem_stat_t
init	src/gpgpu-sim/shader.cc	/^void ldst_unit::init( mem_fetch_interface *icnt,$/;"	f	class:ldst_unit
init	src/gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::collector_unit_t::init( unsigned n, $/;"	f	class:opndcoll_rfu_t::collector_unit_t
init	src/gpgpu-sim/shader.cc	/^void opndcoll_rfu_t::init( unsigned num_banks, shader_core_ctx *shader )$/;"	f	class:opndcoll_rfu_t
init	src/gpgpu-sim/shader.h	/^      void init( unsigned num_cu, unsigned num_banks ) $/;"	f	class:opndcoll_rfu_t::arbiter_t
init	src/gpgpu-sim/shader.h	/^    void init()$/;"	f	struct:shader_core_config
init	src/intersim/buffer_state.cpp	/^void BufferState::init( const Configuration& config ) $/;"	f	class:BufferState
init	src/intersim/event_router.cpp	/^void EventNextVCState::init( const Configuration& config ) $/;"	f	class:EventNextVCState
init	src/intersim/vc.cpp	/^void VC::init( const Configuration& config, int outputs ) $/;"	f	class:VC
init	src/ramulator_sim/StatType.h	/^  void init(Counter min, Counter max, Counter bkt) {$/;"	f	class:Stats_Ram::Distribution
init	src/ramulator_sim/StatType.h	/^  void init(size_type __buckets) {$/;"	f	class:Stats_Ram::Histogram
init	src/ramulator_sim/StatType.h	/^  void init(size_type __size) {$/;"	f	class:Stats_Ram::VectorBase
init	src/ramulator_sim/StatType.h	/^const uint16_t init      = 0x00000001;$/;"	m	namespace:Stats_Ram
init	src/ramulator_sim/Statistics.h	/^  DistributionStat & init(Stats_Ram::Counter min, Stats_Ram::Counter max, Stats_Ram::Counter bkt) {$/;"	f	class:DistributionStat
init	src/ramulator_sim/Statistics.h	/^  HistogramStat & init(Stats_Ram::size_type size) {$/;"	f	class:HistogramStat
init	src/ramulator_sim/Statistics.h	/^  VectorStatBase<StatType, Element> & init(Stats_Ram::size_type size) {$/;"	f	class:VectorStatBase
init	src/trace.cc	/^    void init()$/;"	f	namespace:Trace
init_clock_domains	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim_config::init_clock_domains(void ) $/;"	f	class:gpgpu_sim_config
init_cont	src/gpuwattch/cacti/nuca.cc	/^Nuca::init_cont()$/;"	f	class:Nuca
init_directive_state	src/cuda-sim/ptx_parser.cc	/^void init_directive_state()$/;"	f
init_inst_classification_stat	src/cuda-sim/cuda-sim.cc	/^void init_inst_classification_stat() $/;"	f
init_inst_val	src/gpuwattch/gpgpu_sim_wrapper.h	/^    double init_inst_val;$/;"	m	class:gpgpu_sim_wrapper
init_instruction_state	src/cuda-sim/ptx_parser.cc	/^void init_instruction_state()$/;"	f
init_interconnect	src/intersim/interconnect_interface.cpp	/^void init_interconnect (char* config_file,$/;"	f
init_interface	src/gpuwattch/cacti/io.cc	/^uca_org_t init_interface(InputParameter* const local_interface)$/;"	f
init_lambda	src/ramulator_sim/ALDRAM.cpp	/^void ALDRAM::init_lambda()$/;"	f	class:ALDRAM
init_lambda	src/ramulator_sim/DDR3.cpp	/^void DDR3::init_lambda()$/;"	f	class:DDR3
init_lambda	src/ramulator_sim/DDR4.cpp	/^void DDR4::init_lambda()$/;"	f	class:DDR4
init_lambda	src/ramulator_sim/DSARP.cpp	/^void DSARP::init_lambda()$/;"	f	class:DSARP
init_lambda	src/ramulator_sim/GDDR5.cpp	/^void GDDR5::init_lambda()$/;"	f	class:GDDR5
init_lambda	src/ramulator_sim/HBM.cpp	/^void HBM::init_lambda()$/;"	f	class:HBM
init_lambda	src/ramulator_sim/LPDDR3.cpp	/^void LPDDR3::init_lambda()$/;"	f	class:LPDDR3
init_lambda	src/ramulator_sim/LPDDR4.cpp	/^void LPDDR4::init_lambda()$/;"	f	class:LPDDR4
init_lambda	src/ramulator_sim/SALP.cpp	/^void SALP::init_lambda()$/;"	f	class:SALP
init_lambda	src/ramulator_sim/TLDRAM.cpp	/^void TLDRAM::init_lambda()$/;"	f	class:TLDRAM
init_lambda	src/ramulator_sim/WideIO.cpp	/^void WideIO::init_lambda()$/;"	f	class:WideIO
init_lambda	src/ramulator_sim/WideIO2.cpp	/^void WideIO2::init_lambda()$/;"	f	class:WideIO2
init_link_bus	src/gpuwattch/noc.cc	/^void NoC ::init_link_bus(double link_len_)$/;"	f	class:NoC
init_max_cta_per_shader	common/kernel_info_t.h	/^   unsigned init_max_cta_per_shader;$/;"	m	class:kernel_info_t
init_mcpat	src/gpgpu-sim/power_interface.cc	/^void init_mcpat(const gpgpu_sim_config &config, class gpgpu_sim_wrapper *wrapper, unsigned stat_sample_freq, unsigned tot_inst, unsigned inst){$/;"	f
init_mcpat	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::init_mcpat(char* xmlfile, char* powerfilename, char* power_trace_filename,char* metric_trace_filename,$/;"	f	class:gpgpu_sim_wrapper
init_parser	src/cuda-sim/ptx_parser.cc	/^symbol_table *init_parser( const char *ptx_filename )$/;"	f
init_prereq	src/ramulator_sim/ALDRAM.cpp	/^void ALDRAM::init_prereq()$/;"	f	class:ALDRAM
init_prereq	src/ramulator_sim/DDR3.cpp	/^void DDR3::init_prereq()$/;"	f	class:DDR3
init_prereq	src/ramulator_sim/DDR4.cpp	/^void DDR4::init_prereq()$/;"	f	class:DDR4
init_prereq	src/ramulator_sim/DSARP.cpp	/^void DSARP::init_prereq()$/;"	f	class:DSARP
init_prereq	src/ramulator_sim/GDDR5.cpp	/^void GDDR5::init_prereq()$/;"	f	class:GDDR5
init_prereq	src/ramulator_sim/HBM.cpp	/^void HBM::init_prereq()$/;"	f	class:HBM
init_prereq	src/ramulator_sim/LPDDR3.cpp	/^void LPDDR3::init_prereq()$/;"	f	class:LPDDR3
init_prereq	src/ramulator_sim/LPDDR4.cpp	/^void LPDDR4::init_prereq()$/;"	f	class:LPDDR4
init_prereq	src/ramulator_sim/SALP.cpp	/^void SALP::init_prereq()$/;"	f	class:SALP
init_prereq	src/ramulator_sim/TLDRAM.cpp	/^void TLDRAM::init_prereq()$/;"	f	class:TLDRAM
init_prereq	src/ramulator_sim/WideIO.cpp	/^void WideIO::init_prereq()$/;"	f	class:WideIO
init_prereq	src/ramulator_sim/WideIO2.cpp	/^void WideIO2::init_prereq()$/;"	f	class:WideIO2
init_router	src/gpuwattch/noc.cc	/^void NoC::init_router()$/;"	f	class:NoC
init_rowhit	src/ramulator_sim/ALDRAM.cpp	/^void ALDRAM::init_rowhit()$/;"	f	class:ALDRAM
init_rowhit	src/ramulator_sim/DDR3.cpp	/^void DDR3::init_rowhit()$/;"	f	class:DDR3
init_rowhit	src/ramulator_sim/DDR4.cpp	/^void DDR4::init_rowhit()$/;"	f	class:DDR4
init_rowhit	src/ramulator_sim/DSARP.cpp	/^void DSARP::init_rowhit()$/;"	f	class:DSARP
init_rowhit	src/ramulator_sim/GDDR5.cpp	/^void GDDR5::init_rowhit()$/;"	f	class:GDDR5
init_rowhit	src/ramulator_sim/HBM.cpp	/^void HBM::init_rowhit()$/;"	f	class:HBM
init_rowhit	src/ramulator_sim/LPDDR3.cpp	/^void LPDDR3::init_rowhit()$/;"	f	class:LPDDR3
init_rowhit	src/ramulator_sim/LPDDR4.cpp	/^void LPDDR4::init_rowhit()$/;"	f	class:LPDDR4
init_rowhit	src/ramulator_sim/SALP.cpp	/^void SALP::init_rowhit()$/;"	f	class:SALP
init_rowhit	src/ramulator_sim/TLDRAM.cpp	/^void TLDRAM::init_rowhit()$/;"	f	class:TLDRAM
init_rowhit	src/ramulator_sim/WideIO.cpp	/^void WideIO::init_rowhit()$/;"	f	class:WideIO
init_rowhit	src/ramulator_sim/WideIO2.cpp	/^void WideIO2::init_rowhit()$/;"	f	class:WideIO2
init_rowopen	src/ramulator_sim/DDR3.cpp	/^void DDR3::init_rowopen()$/;"	f	class:DDR3
init_rowopen	src/ramulator_sim/DDR4.cpp	/^void DDR4::init_rowopen()$/;"	f	class:DDR4
init_rowopen	src/ramulator_sim/DSARP.cpp	/^void DSARP::init_rowopen()$/;"	f	class:DSARP
init_rowopen	src/ramulator_sim/GDDR5.cpp	/^void GDDR5::init_rowopen()$/;"	f	class:GDDR5
init_rowopen	src/ramulator_sim/HBM.cpp	/^void HBM::init_rowopen()$/;"	f	class:HBM
init_rowopen	src/ramulator_sim/LPDDR3.cpp	/^void LPDDR3::init_rowopen()$/;"	f	class:LPDDR3
init_rowopen	src/ramulator_sim/LPDDR4.cpp	/^void LPDDR4::init_rowopen()$/;"	f	class:LPDDR4
init_rowopen	src/ramulator_sim/SALP.cpp	/^void SALP::init_rowopen()$/;"	f	class:SALP
init_rowopen	src/ramulator_sim/TLDRAM.cpp	/^void TLDRAM::init_rowopen()$/;"	f	class:TLDRAM
init_rowopen	src/ramulator_sim/WideIO.cpp	/^void WideIO::init_rowopen()$/;"	f	class:WideIO
init_rowopen	src/ramulator_sim/WideIO2.cpp	/^void WideIO2::init_rowopen()$/;"	f	class:WideIO2
init_speed	src/ramulator_sim/ALDRAM.cpp	/^void ALDRAM::init_speed()$/;"	f	class:ALDRAM
init_speed	src/ramulator_sim/DDR3.cpp	/^void DDR3::init_speed()$/;"	f	class:DDR3
init_speed	src/ramulator_sim/DDR4.cpp	/^void DDR4::init_speed()$/;"	f	class:DDR4
init_speed	src/ramulator_sim/DSARP.cpp	/^void DSARP::init_speed()$/;"	f	class:DSARP
init_speed	src/ramulator_sim/GDDR5.cpp	/^void GDDR5::init_speed()$/;"	f	class:GDDR5
init_speed	src/ramulator_sim/HBM.cpp	/^void HBM::init_speed()$/;"	f	class:HBM
init_speed	src/ramulator_sim/LPDDR3.cpp	/^void LPDDR3::init_speed()$/;"	f	class:LPDDR3
init_speed	src/ramulator_sim/LPDDR4.cpp	/^void LPDDR4::init_speed()$/;"	f	class:LPDDR4
init_speed	src/ramulator_sim/SALP.cpp	/^void SALP::init_speed()$/;"	f	class:SALP
init_speed	src/ramulator_sim/TLDRAM.cpp	/^void TLDRAM::init_speed()$/;"	f	class:TLDRAM
init_speed	src/ramulator_sim/WideIO.cpp	/^void WideIO::init_speed()$/;"	f	class:WideIO
init_tech_params	src/gpuwattch/cacti/technology.cc	/^void init_tech_params(double technology, bool is_tag)$/;"	f
init_tech_params	src/gpuwattch/technology_xeon_core.cc	/^void init_tech_params(double technology, bool is_tag)$/;"	f
init_timing	src/ramulator_sim/ALDRAM.cpp	/^void ALDRAM::init_timing(SpeedEntry speed_entry)$/;"	f	class:ALDRAM
init_timing	src/ramulator_sim/DDR3.cpp	/^void DDR3::init_timing()$/;"	f	class:DDR3
init_timing	src/ramulator_sim/DDR4.cpp	/^void DDR4::init_timing()$/;"	f	class:DDR4
init_timing	src/ramulator_sim/DSARP.cpp	/^void DSARP::init_timing()$/;"	f	class:DSARP
init_timing	src/ramulator_sim/GDDR5.cpp	/^void GDDR5::init_timing()$/;"	f	class:GDDR5
init_timing	src/ramulator_sim/HBM.cpp	/^void HBM::init_timing()$/;"	f	class:HBM
init_timing	src/ramulator_sim/LPDDR3.cpp	/^void LPDDR3::init_timing()$/;"	f	class:LPDDR3
init_timing	src/ramulator_sim/LPDDR4.cpp	/^void LPDDR4::init_timing()$/;"	f	class:LPDDR4
init_timing	src/ramulator_sim/SALP.cpp	/^void SALP::init_timing()$/;"	f	class:SALP
init_timing	src/ramulator_sim/TLDRAM.cpp	/^void TLDRAM::init_timing()$/;"	f	class:TLDRAM
init_timing	src/ramulator_sim/WideIO.cpp	/^void WideIO::init_timing()$/;"	f	class:WideIO
init_timing	src/ramulator_sim/WideIO2.cpp	/^void WideIO2::init_timing()$/;"	f	class:WideIO2
init_warps	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::init_warps( unsigned cta_id, unsigned start_thread, unsigned end_thread )$/;"	f	class:shader_core_ctx
init_wire	src/gpuwattch/cacti/wire.cc	/^Wire::init_wire(){$/;"	f	class:Wire
init_wire_bw	src/gpuwattch/cacti/htree2.h	/^    double init_wire_bw;  \/\/ bus width at root$/;"	m	class:Htree2
init_wire_bw	src/gpuwattch/interconnect.h	/^    double init_wire_bw;  \/\/ bus width at root$/;"	m	class:interconnect
initialize	launcher/mk-sched/mk_scheduler.h	/^    void initialize(const unsigned _num_shaders)$/;"	f	class:DynamicScheduler::SM_info
initialize	src/gpuwattch/XML_Parse.cc	/^void ParseXML::initialize() \/\/Initialize all$/;"	f	class:ParseXML
initializeCTA	src/cuda-sim/cuda-sim.cc	/^void functionalCoreSim::initializeCTA()$/;"	f	class:functionalCoreSim
initialize_for_child	launcher/communicate.cc	/^Communicate::initialize_for_child() {$/;"	f	class:Communicate
initialize_for_parent	launcher/communicate.cc	/^Communicate::initialize_for_parent() {$/;"	f	class:Communicate
initialize_scheduler	launcher/simulator.cc	/^Simulator::initialize_scheduler(MKScheduler* mk_sched)$/;"	f	class:Simulator
initialize_streams	launcher/simulator.cc	/^Simulator::initialize_streams(const unsigned numProcesses)$/;"	f	class:Simulator
initialize_with_num_shaders	common/kernel_info_t.cc	/^kernel_info_t::initialize_with_num_shaders(const unsigned num_shader, const unsigned num_cta_per_shader)$/;"	f	class:kernel_info_t
initialized	src/gpuwattch/cacti/wire.cc	/^    int Wire::initialized;$/;"	m	class:Wire	file:
initialized	src/gpuwattch/cacti/wire.h	/^    static int initialized;$/;"	m	class:Wire
initializer_list	src/cuda-sim/ptx.y	/^initializer_list: LEFT_BRACE literal_list RIGHT_BRACE { add_array_initializer(); } $/;"	l
initiation_interval	src/abstract_hardware_model.h	/^    unsigned initiation_interval;$/;"	m	class:inst_t
initilizeSIMTStack	src/abstract_hardware_model.cc	/^void core_t::initilizeSIMTStack(unsigned warp_count, unsigned warp_size)$/;"	f	class:core_t
initpower_coeff	src/gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector<double> initpower_coeff;$/;"	m	class:gpgpu_sim_wrapper
inject_refresh	src/ramulator_sim/Refresh.cpp	/^void Refresh<DSARP>::inject_refresh(bool b_ref_rank) {$/;"	f	class:Refresh
inject_refresh	src/ramulator_sim/Refresh.h	/^  void inject_refresh(bool b_ref_rank) {$/;"	f	class:Refresh
inp_buff	src/gpuwattch/cacti/highradix.h	/^    Mat *inp_buff, *r_buff, *c_buff;$/;"	m	class:HighRadix
input	src/cuda-sim/ptx.y	/^input:	\/* empty *\/$/;"	l
input	src/cuda-sim/ptxinfo.y	/^input:	\/* empty *\/$/;"	l
input	src/intersim/event_router.hpp	/^      int  input;$/;"	m	struct:EventNextVCState::tWaiting
input	src/intersim/event_router.hpp	/^      int  input;$/;"	m	struct:EventRouter::tArrivalEvent
input	src/intersim/event_router.hpp	/^      int  input;$/;"	m	struct:EventRouter::tTransportEvent
input	src/intersim2/routers/event_router.hpp	/^    int  input;$/;"	m	struct:EventNextVCState::tWaiting
input	src/intersim2/routers/event_router.hpp	/^    int  input;$/;"	m	struct:EventRouter::tArrivalEvent
input	src/intersim2/routers/event_router.hpp	/^    int  input;$/;"	m	struct:EventRouter::tTransportEvent
inputArea	src/intersim2/power/power_module.hpp	/^  double inputArea;$/;"	m	class:Power_Module
inputLeakagePower	src/intersim2/power/power_module.hpp	/^  double inputLeakagePower;$/;"	m	class:Power_Module
inputReadPower	src/intersim2/power/power_module.hpp	/^  double inputReadPower;$/;"	m	class:Power_Module
inputWritePower	src/intersim2/power/power_module.hpp	/^  double inputWritePower;$/;"	m	class:Power_Module
input_buffer_capacity	src/intersim/interconnect_interface.cpp	/^unsigned int input_buffer_capacity ;$/;"	v
input_buffer_entries_per_port	src/gpuwattch/XML_Parse.h	/^	int input_buffer_entries_per_port;$/;"	m	struct:__anon20
input_buffer_entries_per_vc	src/gpuwattch/XML_Parse.h	/^	int input_buffer_entries_per_vc;$/;"	m	struct:__anon21
input_buffer_entries_per_vc	src/gpuwattch/basic_components.h	/^    int    virtual_channel_per_port,input_buffer_entries_per_vc;$/;"	m	class:NoCParam
input_nand	src/gpuwattch/cacti/htree2.cc	/^void Htree2::input_nand(double s1, double s2, double l_eff)$/;"	f	class:Htree2
input_port_t	src/gpgpu-sim/shader.h	/^       input_port_t(port_vector_t & input, port_vector_t & output, uint_vector_t cu_sets)$/;"	f	class:opndcoll_rfu_t::input_port_t
input_port_t	src/gpgpu-sim/shader.h	/^   class input_port_t {$/;"	c	class:opndcoll_rfu_t
input_ports	src/gpuwattch/XML_Parse.h	/^	int input_ports;$/;"	m	struct:__anon21
input_ports	src/gpuwattch/basic_components.h	/^    int    input_ports, output_ports, min_ports, global_linked_ports;$/;"	m	class:NoCParam
insert	src/ramulator_sim/DRAM.h	/^void DRAM<T>::insert(DRAM<T>* child)$/;"	f	class:DRAM
inside_mat	src/gpuwattch/cacti/basic_circuit.h	/^    inside_mat,$/;"	e	enum:Wire_placement
insn_count_map	src/cuda-sim/ptx-stats.cc	/^    typedef std::map<const ptx_instruction *, int> insn_count_map;$/;"	t	class:ptx_inflight_memory_insn_tracker	file:
insn_latency_info	src/gpgpu-sim/shader.h	/^struct insn_latency_info {$/;"	s
insn_warp_occ_create	src/gpgpu-sim/stat-tool.cc	/^void insn_warp_occ_create( int n_loggers, int simd_width )$/;"	f
insn_warp_occ_log	src/gpgpu-sim/stat-tool.cc	/^void insn_warp_occ_log( int logger_id, address_type pc, int warp_occ)$/;"	f
insn_warp_occ_logger	src/gpgpu-sim/stat-tool.h	/^   insn_warp_occ_logger(const insn_warp_occ_logger& other)$/;"	f	class:insn_warp_occ_logger
insn_warp_occ_logger	src/gpgpu-sim/stat-tool.h	/^   insn_warp_occ_logger(int simd_width)$/;"	f	class:insn_warp_occ_logger
insn_warp_occ_logger	src/gpgpu-sim/stat-tool.h	/^class insn_warp_occ_logger {$/;"	c
insn_warp_occ_print	src/gpgpu-sim/stat-tool.cc	/^void insn_warp_occ_print( FILE *fout )$/;"	f
inst	src/debug.cc	/^   const ptx_instruction *inst() const { return m_inst; }$/;"	f	class:watchpoint_event
inst_decoder	src/gpuwattch/logic.cc	/^inst_decoder::inst_decoder($/;"	f	class:inst_decoder
inst_decoder	src/gpuwattch/logic.h	/^class inst_decoder: public Component{$/;"	c
inst_decoder_delay_power	src/gpuwattch/logic.cc	/^void inst_decoder::inst_decoder_delay_power()$/;"	f	class:inst_decoder
inst_in_pipeline	common/shd_warp_t.h	/^    bool inst_in_pipeline() const { return m_inst_in_pipeline > 0; }$/;"	f	class:shd_warp_t
inst_in_threads	src/gpgpu-sim/shader.h	/^      uint64_t inst_in_threads;$/;"	m	struct:shader_core_ctx::executed_insts_st
inst_in_warps	src/gpgpu-sim/shader.h	/^      uint64_t inst_in_warps;$/;"	m	struct:shader_core_ctx::executed_insts_st
inst_not_implemented	src/cuda-sim/instructions.cc	/^void inst_not_implemented( const ptx_instruction * pI ) $/;"	f
inst_size	src/cuda-sim/ptx_ir.h	/^   unsigned inst_size() const { return m_inst_size; }$/;"	f	class:ptx_instruction
inst_t	src/abstract_hardware_model.h	/^    inst_t()$/;"	f	class:inst_t
inst_t	src/abstract_hardware_model.h	/^class inst_t {$/;"	c
inst_window_reads	src/gpuwattch/XML_Parse.h	/^	double inst_window_reads;$/;"	m	struct:__anon15
inst_window_selections	src/gpuwattch/XML_Parse.h	/^	double inst_window_selections;$/;"	m	struct:__anon15
inst_window_wakeup_accesses	src/gpuwattch/XML_Parse.h	/^	double inst_window_wakeup_accesses;$/;"	m	struct:__anon15
inst_window_writes	src/gpuwattch/XML_Parse.h	/^	double inst_window_writes;$/;"	m	struct:__anon15
instruction	src/abstract_hardware_model.h	/^   const class inst_t* instruction;$/;"	m	struct:dram_callback_t	typeref:class:dram_callback_t::inst_t
instruction	src/cuda-sim/ptx.y	/^instruction: opcode_spec LEFT_PAREN operand RIGHT_PAREN { set_return(); } COMMA operand COMMA LEFT_PAREN operand_list RIGHT_PAREN$/;"	l
instruction_buffer_reads	src/gpuwattch/XML_Parse.h	/^	double instruction_buffer_reads;$/;"	m	struct:__anon15
instruction_buffer_size	src/gpuwattch/XML_Parse.h	/^	int instruction_buffer_size;$/;"	m	struct:__anon15
instruction_buffer_write	src/gpuwattch/XML_Parse.h	/^	double instruction_buffer_write;$/;"	m	struct:__anon15
instruction_length	src/gpuwattch/XML_Parse.h	/^	int instruction_length;$/;"	m	struct:__anon15
instruction_length	src/gpuwattch/arch_const.h	/^const int instruction_length	=	32;\/\/Niagara$/;"	v
instruction_length	src/gpuwattch/basic_components.h	/^    int  perThreadState, globalCheckpoint, instruction_length, pc_width, opcode_length, micro_opcode_length;$/;"	m	class:CoreDynParam
instruction_selection	src/gpuwattch/core.h	/^    selection_logic * instruction_selection;$/;"	m	class:SchedulerU
instruction_space	src/abstract_hardware_model.h	/^   instruction_space$/;"	e	enum:_memory_space_t
instruction_statement	src/cuda-sim/ptx.y	/^instruction_statement:  instruction SEMI_COLON$/;"	l
instruction_window_scheme	src/gpuwattch/XML_Parse.h	/^	int instruction_window_scheme;$/;"	m	struct:__anon15
instruction_window_size	src/gpuwattch/XML_Parse.h	/^	int instruction_window_size;$/;"	m	struct:__anon15
instructions_h_included	build/src/cuda-sim/instructions.h	4;"	d
int4	src/cuda-sim/cuda-math.h	/^   struct int4 {$/;"	s	namespace:cuda_math
int4	src/cuda-sim/cuda-math.h	/^   typedef struct int4 int4;$/;"	t	namespace:cuda_math	typeref:struct:cuda_math::int4
intLOGB2	src/cuda-sim/cuda-sim.cc	/^unsigned int intLOGB2( unsigned int v ) {$/;"	f
intTagBypass	src/gpuwattch/core.h	/^	interconnect * intTagBypass;$/;"	m	class:EXECU
intTag_mul_Bypass	src/gpuwattch/core.h	/^	interconnect * intTag_mul_Bypass;$/;"	m	class:EXECU
int_bypass	src/gpuwattch/core.h	/^	interconnect * int_bypass;$/;"	m	class:EXECU
int_data_width	src/gpuwattch/basic_components.h	/^    int  int_data_width, fp_data_width,v_address_width, p_address_width;$/;"	m	class:CoreDynParam
int_inst_window	src/gpuwattch/core.h	/^	ArrayST         * int_inst_window;$/;"	m	class:SchedulerU
int_instructions	src/gpuwattch/XML_Parse.h	/^	double int_instructions;$/;"	m	struct:__anon15
int_mul_bypass	src/gpuwattch/core.h	/^	interconnect * int_mul_bypass;$/;"	m	class:EXECU
int_prefetch_w	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int int_prefetch_w;$/;"	m	class:InputParameter
int_regfile_height	src/gpuwattch/core.h	/^	double int_regfile_height, fp_regfile_height;$/;"	m	class:RegFU
int_regfile_reads	src/gpuwattch/XML_Parse.h	/^	double int_regfile_reads;$/;"	m	struct:__anon15
int_regfile_writes	src/gpuwattch/XML_Parse.h	/^	double int_regfile_writes;$/;"	m	struct:__anon15
int_t	src/cuda-sim/ptx_ir.h	/^   reg_t, vector_t, builtin_t, address_t, memory_t, float_op_t, double_op_t, int_t, $/;"	e	enum:operand_type
int_value	build/src/cuda-sim/ptx.tab.c	/^  int    int_value;$/;"	m	union:YYSTYPE	file:
int_value	build/src/cuda-sim/ptx.tab.h	/^  int    int_value;$/;"	m	union:YYSTYPE
int_value	build/src/cuda-sim/ptxinfo.tab.c	/^  int    int_value;$/;"	m	union:YYSTYPE	file:
int_value	build/src/cuda-sim/ptxinfo.tab.h	/^  int    int_value;$/;"	m	union:YYSTYPE
integer_rounding_mode	src/cuda-sim/ptx.y	/^integer_rounding_mode: RNI_OPTION { add_option(RNI_OPTION); } $/;"	l
interconnect	src/gpuwattch/interconnect.cc	/^interconnect::interconnect($/;"	f	class:interconnect
interconnect	src/gpuwattch/interconnect.h	/^class interconnect : public Component$/;"	c
interconnect_busy	src/intersim/interconnect_interface.cpp	/^unsigned interconnect_busy()$/;"	f
interconnect_get_flit_size	src/intersim/interconnect_interface.cpp	/^unsigned interconnect_get_flit_size(){$/;"	f
interconnect_has_buffer	src/intersim/interconnect_interface.cpp	/^bool interconnect_has_buffer(unsigned int input_node, unsigned int tot_req_size) $/;"	f
interconnect_latency	src/gpuwattch/interconnect.h	/^    double  interconnect_latency;$/;"	m	class:interconnect
interconnect_pop	src/intersim/interconnect_interface.cpp	/^void* interconnect_pop(unsigned int output_node) $/;"	f
interconnect_projection_type	src/gpuwattch/XML_Parse.h	/^	int interconnect_projection_type;$/;"	m	struct:__anon26
interconnect_projection_type	src/gpuwattch/arch_const.h	/^const int			interconnect_projection_type	=	0;$/;"	v
interconnect_push	src/intersim/interconnect_interface.cpp	/^void interconnect_push ( unsigned int input_node, unsigned int output_node, $/;"	f
interconnect_stats	src/intersim/interconnect_interface.cpp	/^void interconnect_stats()$/;"	f
interconnect_throughput	src/gpuwattch/interconnect.h	/^    double  interconnect_throughput;$/;"	m	class:interconnect
interface_ip	src/gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:BranchPredictor
interface_ip	src/gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:Core
interface_ip	src/gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:EXECU
interface_ip	src/gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:InstFetchU
interface_ip	src/gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:LoadStoreU
interface_ip	src/gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:MemManU
interface_ip	src/gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:RENAMINGU
interface_ip	src/gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:RegFU
interface_ip	src/gpuwattch/core.h	/^	InputParameter interface_ip;$/;"	m	class:SchedulerU
interface_ip	src/gpuwattch/iocontrollers.h	/^	InputParameter interface_ip;$/;"	m	class:FlashController
interface_ip	src/gpuwattch/iocontrollers.h	/^	InputParameter interface_ip;$/;"	m	class:NIUController
interface_ip	src/gpuwattch/iocontrollers.h	/^	InputParameter interface_ip;$/;"	m	class:PCIeController
interface_ip	src/gpuwattch/logic.h	/^	InputParameter interface_ip;$/;"	m	class:FunctionalUnit
interface_ip	src/gpuwattch/logic.h	/^	InputParameter interface_ip;$/;"	m	class:UndiffCore
interface_ip	src/gpuwattch/memoryctrl.h	/^	InputParameter interface_ip;$/;"	m	class:DRAM
interface_ip	src/gpuwattch/memoryctrl.h	/^	InputParameter interface_ip;$/;"	m	class:MCFrontEnd
interface_ip	src/gpuwattch/memoryctrl.h	/^	InputParameter interface_ip;$/;"	m	class:MemoryController
interface_ip	src/gpuwattch/noc.h	/^	InputParameter interface_ip;$/;"	m	class:NoC
interface_ip	src/gpuwattch/processor.h	/^    InputParameter interface_ip;$/;"	m	class:Processor
interface_ip	src/gpuwattch/sharedcache.h	/^	InputParameter interface_ip;$/;"	m	class:CCdir
interface_ip	src/gpuwattch/sharedcache.h	/^	InputParameter interface_ip;$/;"	m	class:SharedCache
internal_datapath_width	src/gpuwattch/XML_Parse.h	/^	int internal_datapath_width;$/;"	m	struct:__anon15
internal_prefetch_of_DRAM_chip	src/gpuwattch/XML_Parse.h	/^	int internal_prefetch_of_DRAM_chip;$/;"	m	struct:__anon22
intersect	src/cuda-sim/ptx_ir.cc	/^void intersect( std::set<int> &A, const std::set<int> &B )$/;"	f
intersim2_busy	src/gpgpu-sim/icnt_wrapper.cc	/^static bool intersim2_busy()$/;"	f	file:
intersim2_create	src/gpgpu-sim/icnt_wrapper.cc	/^static void intersim2_create(unsigned int n_shader, unsigned int n_mem)$/;"	f	file:
intersim2_display_overall_stats	src/gpgpu-sim/icnt_wrapper.cc	/^static void intersim2_display_overall_stats()$/;"	f	file:
intersim2_display_state	src/gpgpu-sim/icnt_wrapper.cc	/^static void intersim2_display_state(FILE *fp)$/;"	f	file:
intersim2_display_stats	src/gpgpu-sim/icnt_wrapper.cc	/^static void intersim2_display_stats()$/;"	f	file:
intersim2_get_flit_size	src/gpgpu-sim/icnt_wrapper.cc	/^static unsigned intersim2_get_flit_size()$/;"	f	file:
intersim2_has_buffer	src/gpgpu-sim/icnt_wrapper.cc	/^static bool intersim2_has_buffer(unsigned input, unsigned int size)$/;"	f	file:
intersim2_init	src/gpgpu-sim/icnt_wrapper.cc	/^static void intersim2_init()$/;"	f	file:
intersim2_pop	src/gpgpu-sim/icnt_wrapper.cc	/^static void* intersim2_pop(unsigned output)$/;"	f	file:
intersim2_push	src/gpgpu-sim/icnt_wrapper.cc	/^static void intersim2_push(unsigned input, unsigned output, void* data, unsigned int size)$/;"	f	file:
intersim2_transfer	src/gpgpu-sim/icnt_wrapper.cc	/^static void intersim2_transfer()$/;"	f	file:
intfloat	src/cuda-sim/instructions.cc	/^union intfloat {$/;"	u	file:
intm	src/intersim/flit.hpp	/^   mutable int intm;$/;"	m	struct:Flit
intm	src/intersim2/flit.hpp	/^  mutable int intm;$/;"	m	class:Flit
inv	src/gpuwattch/cacti/basic_circuit.h	/^	inv,$/;"	e	enum:Gate_type
invalidate	src/ramulator_sim/Cache.cpp	/^std::pair<long, bool> Cache::invalidate(long addr) {$/;"	f	class:Cache
ipc	src/gpgpu-sim/gpu-sim.h	/^	float ipc[2];$/;"	m	struct:KAIN_IPC
isAttributeSet	src/gpuwattch/xmlParser.cc	/^char XMLNode::isAttributeSet(XMLCSTR lpszAttrib) const$/;"	f	class:XMLNode
isDeclaration	src/gpuwattch/xmlParser.cc	/^char         XMLNode::isDeclaration    (     ) const { if (!d) return 0;             return d->isDeclaration; }$/;"	f	class:XMLNode
isDeclaration	src/gpuwattch/xmlParser.h	/^          char                   isDeclaration;   \/\/ Whether node is an XML declaration - '<?xml ?>'$/;"	m	struct:XMLNode::XMLNodeDataTag
isEmpty	src/gpuwattch/xmlParser.cc	/^char         XMLNode::isEmpty          (     ) const { return (d==NULL); }$/;"	f	class:XMLNode
isFlag	src/option_parser.cc	/^   virtual bool isFlag() { return false; }$/;"	f	class:OptionRegistry
isFlag	src/option_parser.cc	/^bool OptionRegistry<bool>::isFlag() { return true; }$/;"	f	class:OptionRegistry
isFloat	src/cuda-sim/instructions.cc	/^bool isFloat(int type) $/;"	f
isInFunctionalSimulationMode	src/cuda-sim/ptx_sim.h	/^   bool isInFunctionalSimulationMode(){ return m_functionalSimulationMode;}$/;"	f	class:ptx_thread_info
isL1cache	src/gpgpu-sim/gpu-cache.h	/^    bool isL1cache() const { return m_cache_type == CACHE_TYPE_L1; }$/;"	f	class:baseline_cache
isL2cache	src/gpgpu-sim/gpu-cache.h	/^    bool isL2cache() const { return m_cache_type == CACHE_TYPE_L2; }$/;"	f	class:baseline_cache
isNaN	src/cuda-sim/instructions.cc	/^bool isNaN(double x)$/;"	f
isNaN	src/cuda-sim/instructions.cc	/^bool isNaN(float x)$/;"	f
isParsed	src/option_parser.cc	/^   const bool isParsed() { return m_isParsed; }$/;"	f	class:OptionRegistryInterface
is_abs	src/cuda-sim/ptx_ir.h	/^   bool is_abs() const { return m_abs;}$/;"	f	class:ptx_instruction
is_accessing	src/ramulator_sim/ALDRAM.h	/^    bool is_accessing(Command cmd)$/;"	f	class:ALDRAM
is_accessing	src/ramulator_sim/DDR3.h	/^    bool is_accessing(Command cmd)$/;"	f	class:DDR3
is_accessing	src/ramulator_sim/DDR4.h	/^    bool is_accessing(Command cmd)$/;"	f	class:DDR4
is_accessing	src/ramulator_sim/DSARP.h	/^    bool is_accessing(Command cmd)$/;"	f	class:DSARP
is_accessing	src/ramulator_sim/GDDR5.h	/^    bool is_accessing(Command cmd)$/;"	f	class:GDDR5
is_accessing	src/ramulator_sim/HBM.h	/^    bool is_accessing(Command cmd)$/;"	f	class:HBM
is_accessing	src/ramulator_sim/LPDDR3.h	/^    bool is_accessing(Command cmd)$/;"	f	class:LPDDR3
is_accessing	src/ramulator_sim/LPDDR4.h	/^    bool is_accessing(Command cmd)$/;"	f	class:LPDDR4
is_accessing	src/ramulator_sim/SALP.h	/^    bool is_accessing(Command cmd)$/;"	f	class:SALP
is_accessing	src/ramulator_sim/TLDRAM.h	/^    bool is_accessing(Command cmd)$/;"	f	class:TLDRAM
is_accessing	src/ramulator_sim/WideIO.h	/^    bool is_accessing(Command cmd)$/;"	f	class:WideIO
is_accessing	src/ramulator_sim/WideIO2.h	/^    bool is_accessing(Command cmd)$/;"	f	class:WideIO2
is_active	src/ramulator_sim/Controller.h	/^    bool is_active() {$/;"	f	class:Controller
is_being_removed	launcher/mk-sched/mk_scheduler.h	/^      bool is_being_removed;$/;"	m	struct:DynamicScheduler::SM_info::remove_status_st
is_builtin	src/cuda-sim/ptx_ir.h	/^   bool is_builtin() const { return m_type == builtin_t;}$/;"	f	class:operand_info
is_cache	src/gpuwattch/cacti/cacti_interface.h	/^    bool     is_cache;$/;"	m	class:InputParameter
is_cdf	src/ramulator_sim/StatType.h	/^  bool is_cdf() const {return flags & cdf;}$/;"	f	class:Stats_Ram::Flags
is_closing	src/ramulator_sim/ALDRAM.h	/^    bool is_closing(Command cmd)$/;"	f	class:ALDRAM
is_closing	src/ramulator_sim/DDR3.h	/^    bool is_closing(Command cmd)$/;"	f	class:DDR3
is_closing	src/ramulator_sim/DDR4.h	/^    bool is_closing(Command cmd)$/;"	f	class:DDR4
is_closing	src/ramulator_sim/DSARP.h	/^    bool is_closing(Command cmd)$/;"	f	class:DSARP
is_closing	src/ramulator_sim/GDDR5.h	/^    bool is_closing(Command cmd)$/;"	f	class:GDDR5
is_closing	src/ramulator_sim/HBM.h	/^    bool is_closing(Command cmd)$/;"	f	class:HBM
is_closing	src/ramulator_sim/LPDDR3.h	/^    bool is_closing(Command cmd)$/;"	f	class:LPDDR3
is_closing	src/ramulator_sim/LPDDR4.h	/^    bool is_closing(Command cmd)$/;"	f	class:LPDDR4
is_closing	src/ramulator_sim/SALP.h	/^    bool is_closing(Command cmd)$/;"	f	class:SALP
is_closing	src/ramulator_sim/TLDRAM.h	/^    bool is_closing(Command cmd)$/;"	f	class:TLDRAM
is_closing	src/ramulator_sim/WideIO.h	/^    bool is_closing(Command cmd)$/;"	f	class:WideIO
is_closing	src/ramulator_sim/WideIO2.h	/^    bool is_closing(Command cmd)$/;"	f	class:WideIO2
is_const	src/abstract_hardware_model.h	/^   bool is_const() const { return (m_type == const_space) || (m_type == param_space_kernel); }$/;"	f	class:memory_space_t
is_const	src/cuda-sim/ptx_ir.h	/^   bool is_const() const { return m_is_const;}$/;"	f	class:symbol
is_const	src/cuda-sim/ptx_ir.h	/^   bool is_const() const { return m_space_spec.get_type() == const_space;}$/;"	f	class:type_info_key
is_const	src/cuda-sim/ptx_ir.h	/^   bool is_const() const { return m_value.m_symbolic->is_const();}$/;"	f	class:operand_info
is_context_loading	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::SM_info::is_context_loading(const unsigned linear_shader_id) const$/;"	f	class:DynamicScheduler::SM_info
is_context_loading	src/gpgpu-sim/shader.h	/^    bool is_context_loading() const { return core_context_loading; }$/;"	f	class:shader_core_ctx
is_context_saving	launcher/mk-sched/mk_scheduler.h	/^      bool is_context_saving() const { return status == REMOVE_SWITCHING; }$/;"	f	struct:DynamicScheduler::SM_info::remove_status_st
is_context_saving	launcher/mk-sched/mk_scheduler.h	/^    bool is_context_saving(const unsigned linear_shader_id) const { return to_remove[linear_shader_id].is_context_saving(); }$/;"	f	class:DynamicScheduler::SM_info
is_context_saving	src/gpgpu-sim/shader.h	/^    bool is_context_saving() const { return core_context_saving; }$/;"	f	class:shader_core_ctx
is_context_switching_cta	common/kernel_info_t.cc	/^kernel_info_t::is_context_switching_cta(const dim3& cta_id) const$/;"	f	class:kernel_info_t
is_core_pipeline	src/gpuwattch/logic.h	/^	bool is_core_pipeline, is_default;$/;"	m	class:Pipeline
is_cta_draining	common/preemption_info.h	/^    bool is_cta_draining(unsigned hw_cta_id) const$/;"	f	class:preemption_info_t
is_cta_flushing	common/preemption_info.h	/^    bool is_cta_flushing(unsigned hw_cta_id) const$/;"	f	class:preemption_info_t
is_cta_running	launcher/mk-sched/mk_scheduler.h	/^    bool is_cta_running(unsigned sid, unsigned hw_cta_id) const   { return cta_running[sid][hw_cta_id]; }$/;"	f	class:DynamicScheduler::SM_info
is_cta_switching	common/preemption_info.h	/^    bool is_cta_switching(unsigned hw_cta_id) const$/;"	f	class:preemption_info_t
is_default	src/gpuwattch/array.h	/^  bool           is_default;$/;"	m	class:ArrayST
is_default	src/gpuwattch/logic.h	/^	bool   is_default;$/;"	m	class:UndiffCore
is_default	src/gpuwattch/logic.h	/^	bool  is_default;$/;"	m	class:FunctionalUnit
is_default	src/gpuwattch/logic.h	/^	bool is_core_pipeline, is_default;$/;"	m	class:Pipeline
is_default	src/gpuwattch/logic.h	/^	bool is_default;$/;"	m	class:dep_resource_conflict_check
is_default	src/gpuwattch/logic.h	/^	bool is_default;$/;"	m	class:inst_decoder
is_default	src/gpuwattch/logic.h	/^	bool is_default;$/;"	m	class:selection_logic
is_display	src/ramulator_sim/StatType.h	/^  bool is_display() const {return flags & display;}$/;"	f	class:Stats_Ram::Flags
is_display	src/ramulator_sim/StatType.h	/^  virtual bool is_display() const {$/;"	f	class:Stats_Ram::Stat
is_done	src/cuda-sim/ptx_sim.h	/^   bool is_done() { return m_thread_done;}$/;"	f	class:ptx_thread_info
is_done	src/stream_manager.h	/^    bool is_done() const { return m_done; }$/;"	f	class:stream_operation
is_draining	launcher/mk-sched/mk_scheduler.h	/^      bool is_draining() const  { return status == REMOVE_DRAINING;  }$/;"	f	struct:DynamicScheduler::SM_info::remove_status_st
is_draining	launcher/mk-sched/mk_scheduler.h	/^    bool is_draining(const unsigned linear_shader_id) const       { return to_remove[linear_shader_id].is_draining(); }$/;"	f	class:DynamicScheduler::SM_info
is_draining	src/gpgpu-sim/shader.h	/^    bool is_draining() const { return core_draining; }$/;"	f	class:shader_core_ctx
is_dram	src/gpuwattch/cacti/decoder.h	/^    bool   is_dram;$/;"	m	class:Decoder
is_dram	src/gpuwattch/cacti/mat.h	/^    bool     is_dram,is_fa, pure_cam, camFlag;$/;"	m	class:Mat
is_dram	src/gpuwattch/cacti/parameter.h	/^    bool is_dram;$/;"	m	class:DynamicParameter
is_dram	src/gpuwattch/logic.h	/^	bool is_dram;$/;"	m	class:DFFCell
is_dram_	src/gpuwattch/cacti/decoder.h	/^  bool   is_dram_;$/;"	m	class:Driver
is_dram_	src/gpuwattch/cacti/decoder.h	/^  bool  is_dram_;$/;"	m	class:PredecBlkDrv
is_dram_	src/gpuwattch/cacti/decoder.h	/^  bool is_dram_;$/;"	m	class:PredecBlk
is_early_exit	src/ramulator_sim/Config.h	/^  bool is_early_exit() const {$/;"	f	class:Config
is_entry	src/cuda-sim/ptx_ir.h	/^   bool is_entry;$/;"	m	struct:basic_block_t
is_entry_point	src/cuda-sim/ptx_ir.h	/^   bool is_entry_point() const { return m_entry_point; }$/;"	f	class:function_info
is_equal	src/cuda-sim/ptx_ir.cc	/^bool is_equal( const std::set<int> &A, const std::set<int> &B )$/;"	f
is_equal	src/debug.h	/^   bool is_equal( const std::string &fileline, unsigned uid ) const$/;"	f	class:brk_pt
is_exit	src/cuda-sim/ptx_ir.h	/^   bool is_exit() const { return m_exit;}$/;"	f	class:ptx_instruction
is_exit	src/cuda-sim/ptx_ir.h	/^   bool is_exit;$/;"	m	struct:basic_block_t
is_extern	src/cuda-sim/ptx_ir.h	/^   bool is_extern() const { return m_extern; }$/;"	f	class:function_info
is_fa	src/gpuwattch/cacti/mat.h	/^    bool     is_dram,is_fa, pure_cam, camFlag;$/;"	m	class:Mat
is_fa	src/gpuwattch/cacti/subarray.h	/^    bool    is_fa;$/;"	m	class:Subarray
is_first_command	src/ramulator_sim/Request.h	/^    bool is_first_command;$/;"	m	class:Request
is_first_level	src/ramulator_sim/Cache.h	/^  bool is_first_level;$/;"	m	class:Cache
is_first_run_done	launcher/child_process.h	/^  bool is_first_run_done() const { return first_run_done; }$/;"	f	class:ChildProcess
is_first_run_done	launcher/launcher_option_parser.h	/^  bool is_first_run_done() const$/;"	f	class:LauncherOptionParser
is_flushing	launcher/mk-sched/mk_scheduler.h	/^      bool is_flushing() const  { return status == REMOVE_FLUSHING;  }$/;"	f	struct:DynamicScheduler::SM_info::remove_status_st
is_flushing	launcher/mk-sched/mk_scheduler.h	/^    bool is_flushing(const unsigned linear_shader_id) const       { return to_remove[linear_shader_id].is_flushing(); }$/;"	f	class:DynamicScheduler::SM_info
is_flushing	src/gpgpu-sim/shader.h	/^    bool is_flushing() const { return core_flushing; }$/;"	f	class:shader_core_ctx
is_free	src/gpgpu-sim/shader.h	/^      bool is_free() const {return m_allocation==NO_ALLOC; }$/;"	f	class:opndcoll_rfu_t::allocation_t
is_free	src/gpgpu-sim/shader.h	/^      bool is_free(){return m_free;}$/;"	f	class:opndcoll_rfu_t::collector_unit_t
is_full	src/intersim/interconnect_interface.cpp	/^   bool is_full(void){$/;"	f	class:boundary_buf
is_func_addr	src/cuda-sim/ptx_ir.h	/^   bool is_func_addr() const { return m_is_func_addr; }$/;"	f	class:symbol
is_func_addr	src/cuda-sim/ptx_ir.h	/^   bool is_func_addr() const { return m_is_function?true:false; }$/;"	f	class:type_info_key
is_function_address	src/cuda-sim/ptx_ir.h	/^   bool is_function_address() const$/;"	f	class:operand_info
is_global	src/abstract_hardware_model.h	/^   bool is_global() const { return (m_type == global_space); }$/;"	f	class:memory_space_t
is_global	src/cuda-sim/ptx_ir.h	/^   bool is_global() const { return m_is_global;}$/;"	f	class:symbol
is_global	src/cuda-sim/ptx_ir.h	/^   bool is_global() const { return m_space_spec == global_space;}$/;"	f	class:type_info_key
is_global	src/cuda-sim/ptx_ir.h	/^   bool is_global() const { return m_value.m_symbolic->is_global();}$/;"	f	class:operand_info
is_hi	src/cuda-sim/ptx_ir.h	/^   bool is_hi() const { return m_hi;}$/;"	f	class:ptx_instruction
is_hit	src/ramulator_sim/Cache.cpp	/^bool Cache::is_hit(std::list<Line>& lines, long addr,$/;"	f	class:Cache
is_idempotent	src/cuda-sim/ptx_sim.h	/^   bool is_idempotent() const { return !passed_non_idempotent_point; }$/;"	f	class:ptx_cta_info
is_immediate_address	src/cuda-sim/ptx_ir.h	/^   bool is_immediate_address() const {$/;"	f	class:operand_info
is_kernel	src/stream_manager.h	/^    bool is_kernel() const { return m_type == stream_kernel_launch; }$/;"	f	class:stream_operation
is_label	src/cuda-sim/ptx_ir.h	/^   bool is_label() const { if(m_label){ assert(m_opcode==-1);return true;} return false;}$/;"	f	class:ptx_instruction
is_label	src/cuda-sim/ptx_ir.h	/^   bool is_label() const { return m_is_label;}$/;"	f	class:symbol
is_label	src/cuda-sim/ptx_ir.h	/^   bool is_label() const { return m_type == label_t;}$/;"	f	class:operand_info
is_last_level	src/ramulator_sim/Cache.h	/^  bool is_last_level;$/;"	m	class:Cache
is_literal	src/cuda-sim/ptx_ir.h	/^   bool is_literal() const { return m_type == int_t ||$/;"	f	class:operand_info
is_lo	src/cuda-sim/ptx_ir.h	/^   bool is_lo() const { return m_lo;}$/;"	f	class:ptx_instruction
is_load	src/abstract_hardware_model.h	/^    bool is_load() const { return (op == LOAD_OP || memory_op == memory_load); }$/;"	f	class:inst_t
is_local	src/abstract_hardware_model.h	/^   bool is_local() const { return (m_type == local_space) || (m_type == param_space_local); }$/;"	f	class:memory_space_t
is_local	src/cuda-sim/ptx_ir.h	/^   bool is_local() const { return m_is_local;}$/;"	f	class:symbol
is_local	src/cuda-sim/ptx_ir.h	/^   bool is_local() const { return m_space_spec == local_space;}$/;"	f	class:type_info_key
is_local	src/cuda-sim/ptx_ir.h	/^   bool is_local() const { return m_value.m_symbolic->is_local();}$/;"	f	class:operand_info
is_main_mem	src/gpuwattch/cacti/Ucache.h	/^  bool     is_main_mem;$/;"	m	struct:calc_time_mt_wrapper_struct
is_main_mem	src/gpuwattch/cacti/cacti_interface.h	/^    bool     is_main_mem;$/;"	m	class:InputParameter
is_main_mem	src/gpuwattch/cacti/parameter.h	/^    bool   is_main_mem;$/;"	m	class:DynamicParameter
is_mem	src/intersim/interconnect_interface.cpp	/^static inline bool is_mem(int node)$/;"	f	file:
is_mem	src/stream_manager.h	/^    bool is_mem() const {$/;"	f	class:stream_operation
is_memory_operand	src/cuda-sim/ptx_ir.h	/^   bool is_memory_operand() const { return m_type == memory_t;}$/;"	f	class:operand_info
is_memory_operand2	src/cuda-sim/ptx_ir.h	/^   bool is_memory_operand2() const { $/;"	f	class:operand_info
is_neg	src/cuda-sim/ptx_ir.h	/^   bool is_neg() const { return m_neg;}$/;"	f	class:ptx_instruction
is_neg_pred	src/cuda-sim/ptx_ir.h	/^   bool is_neg_pred() const { return m_neg_pred; }$/;"	f	class:operand_info
is_non_arch_reg	src/cuda-sim/ptx_ir.h	/^   bool is_non_arch_reg() const { return m_is_non_arch_reg; }$/;"	f	class:operand_info
is_non_arch_reg	src/cuda-sim/ptx_ir.h	/^   bool is_non_arch_reg() const { return m_is_non_arch_reg; }$/;"	f	class:type_info_key
is_non_arch_reg	src/cuda-sim/ptx_ir.h	/^   bool is_non_arch_reg() const$/;"	f	class:symbol
is_nonan	src/ramulator_sim/StatType.h	/^  bool is_nonan() const {return flags & nonan;}$/;"	f	class:Stats_Ram::Flags
is_noop	src/stream_manager.h	/^    bool is_noop() const { return m_type == stream_no_op; }$/;"	f	class:stream_operation
is_nozero	src/ramulator_sim/StatType.h	/^  bool is_nozero() const {return flags & nozero;}$/;"	f	class:Stats_Ram::Flags
is_nozero	src/ramulator_sim/StatType.h	/^  virtual bool is_nozero() const {$/;"	f	class:Stats_Ram::Stat
is_occupying	launcher/mk-sched/mk_scheduler.h	/^    bool is_occupying(const unsigned linear_shader_id) const      { return occupied[linear_shader_id]; }$/;"	f	class:DynamicScheduler::SM_info
is_odd	src/intersim/rng.cpp	52;"	d	file:
is_odd	src/intersim/rng_double.cpp	51;"	d	file:
is_odd	src/intersim2/rng-double.c	50;"	d	file:
is_odd	src/intersim2/rng.c	51;"	d	file:
is_opening	src/ramulator_sim/ALDRAM.h	/^    bool is_opening(Command cmd)$/;"	f	class:ALDRAM
is_opening	src/ramulator_sim/DDR3.h	/^    bool is_opening(Command cmd)$/;"	f	class:DDR3
is_opening	src/ramulator_sim/DDR4.h	/^    bool is_opening(Command cmd)$/;"	f	class:DDR4
is_opening	src/ramulator_sim/DSARP.h	/^    bool is_opening(Command cmd)$/;"	f	class:DSARP
is_opening	src/ramulator_sim/GDDR5.h	/^    bool is_opening(Command cmd)$/;"	f	class:GDDR5
is_opening	src/ramulator_sim/HBM.h	/^    bool is_opening(Command cmd)$/;"	f	class:HBM
is_opening	src/ramulator_sim/LPDDR3.h	/^    bool is_opening(Command cmd)$/;"	f	class:LPDDR3
is_opening	src/ramulator_sim/LPDDR4.h	/^    bool is_opening(Command cmd)$/;"	f	class:LPDDR4
is_opening	src/ramulator_sim/SALP.h	/^    bool is_opening(Command cmd)$/;"	f	class:SALP
is_opening	src/ramulator_sim/TLDRAM.h	/^    bool is_opening(Command cmd)$/;"	f	class:TLDRAM
is_opening	src/ramulator_sim/WideIO.h	/^    bool is_opening(Command cmd)$/;"	f	class:WideIO
is_opening	src/ramulator_sim/WideIO2.h	/^    bool is_opening(Command cmd)$/;"	f	class:WideIO2
is_param_kernel	src/cuda-sim/ptx_ir.h	/^   bool is_param_kernel() const { return m_space_spec == param_space_kernel;}$/;"	f	class:type_info_key
is_param_local	src/cuda-sim/ptx_ir.h	/^   bool is_param_local() const { return m_is_param_local; }$/;"	f	class:symbol
is_param_local	src/cuda-sim/ptx_ir.h	/^   bool is_param_local() const { return m_space_spec == param_space_local; }$/;"	f	class:type_info_key
is_param_local	src/cuda-sim/ptx_ir.h	/^   bool is_param_local() const$/;"	f	class:operand_info
is_param_unclassified	src/cuda-sim/ptx_ir.h	/^   bool is_param_unclassified() const { return m_space_spec == param_space_unclassified; }$/;"	f	class:type_info_key
is_pdf	src/ramulator_sim/StatType.h	/^  bool is_pdf() const {return flags & pdf;}$/;"	f	class:Stats_Ram::Flags
is_pending_for_migration	common/shd_warp_t.h	/^    bool is_pending_for_migration() const { return !stores_done() || inst_in_pipeline() || imiss_pending(); }$/;"	f	class:shd_warp_t
is_pending_for_migration	src/gpgpu-sim/shader.h	/^    bool is_pending_for_migration(unsigned warp_id) const { return m_warp[warp_id].is_pending_for_migration(); }$/;"	f	class:shader_core_ctx
is_pow2	src/gpuwattch/cacti/basic_circuit.cc	/^bool is_pow2(int64_t val)$/;"	f
is_preempting	src/gpgpu-sim/shader.h	/^    bool is_preempting() const { return is_draining() || is_context_saving() || is_flushing();}$/;"	f	class:shader_core_ctx
is_ptr_shared	src/cuda-sim/ptx_ir.h	/^   bool is_ptr_shared() const { assert(m_valid); return (m_is_ptr and m_ptr_space == shared_space); }$/;"	f	class:param_info
is_read	src/gpgpu-sim/shader.h	/^      bool is_read() const { return m_allocation==READ_ALLOC; }$/;"	f	class:opndcoll_rfu_t::allocation_t
is_ready	src/ramulator_sim/Controller.cpp	/^bool Controller<SALP>::is_ready(list<Request>::iterator req) {$/;"	f	class:Controller
is_ready	src/ramulator_sim/Controller.h	/^    bool is_ready(list<Request>::iterator req)$/;"	f	class:Controller
is_ready	src/ramulator_sim/Controller.h	/^    bool is_ready(typename T::Command cmd, const vector<int>& addr_vec)$/;"	f	class:Controller
is_ready_for_execute	src/cuda-sim/ptx_sim.cc	/^ptx_cta_info::is_ready_for_execute() const$/;"	f	class:ptx_cta_info
is_ready_for_finish	src/cuda-sim/ptx_sim.cc	/^ptx_cta_info::is_ready_for_finish() const$/;"	f	class:ptx_cta_info
is_real_run	common/kernel_info_t.h	/^   bool is_real_run() const { return m_real_run; }$/;"	f	class:kernel_info_t
is_refresh	src/ramulator_sim/Controller.h	/^    bool is_refresh() {$/;"	f	class:Controller
is_refreshing	src/ramulator_sim/ALDRAM.h	/^    bool is_refreshing(Command cmd)$/;"	f	class:ALDRAM
is_refreshing	src/ramulator_sim/DDR3.h	/^    bool is_refreshing(Command cmd)$/;"	f	class:DDR3
is_refreshing	src/ramulator_sim/DDR4.h	/^    bool is_refreshing(Command cmd)$/;"	f	class:DDR4
is_refreshing	src/ramulator_sim/DSARP.h	/^    bool is_refreshing(Command cmd)$/;"	f	class:DSARP
is_refreshing	src/ramulator_sim/GDDR5.h	/^    bool is_refreshing(Command cmd)$/;"	f	class:GDDR5
is_refreshing	src/ramulator_sim/HBM.h	/^    bool is_refreshing(Command cmd)$/;"	f	class:HBM
is_refreshing	src/ramulator_sim/LPDDR3.h	/^    bool is_refreshing(Command cmd)$/;"	f	class:LPDDR3
is_refreshing	src/ramulator_sim/LPDDR4.h	/^    bool is_refreshing(Command cmd)$/;"	f	class:LPDDR4
is_refreshing	src/ramulator_sim/SALP.h	/^    bool is_refreshing(Command cmd)$/;"	f	class:SALP
is_refreshing	src/ramulator_sim/TLDRAM.h	/^    bool is_refreshing(Command cmd)$/;"	f	class:TLDRAM
is_refreshing	src/ramulator_sim/WideIO.h	/^    bool is_refreshing(Command cmd)$/;"	f	class:WideIO
is_refreshing	src/ramulator_sim/WideIO2.h	/^    bool is_refreshing(Command cmd)$/;"	f	class:WideIO2
is_reg	src/cuda-sim/ptx_ir.h	/^   bool is_reg() const { return m_is_reg; }$/;"	f	class:arg_buffer_t
is_reg	src/cuda-sim/ptx_ir.h	/^   bool is_reg() const { return m_space_spec == reg_space;} $/;"	f	class:type_info_key
is_reg	src/cuda-sim/ptx_ir.h	/^   bool is_reg() const$/;"	f	class:operand_info
is_reg	src/cuda-sim/ptx_ir.h	/^   bool is_reg() const$/;"	f	class:symbol
is_return_var	src/cuda-sim/ptx_ir.h	/^   bool is_return_var() const { return m_is_return_var; }$/;"	f	class:operand_info
is_row_hit	src/ramulator_sim/Controller.h	/^    bool is_row_hit(list<Request>::iterator req)$/;"	f	class:Controller
is_row_hit	src/ramulator_sim/Controller.h	/^    bool is_row_hit(typename T::Command cmd, const vector<int>& addr_vec)$/;"	f	class:Controller
is_row_hit	src/ramulator_sim/SpeedyController.h	/^    bool is_row_hit(Request& req)$/;"	f	class:SpeedyController
is_row_open	src/ramulator_sim/Controller.h	/^    bool is_row_open(list<Request>::iterator req)$/;"	f	class:Controller
is_row_open	src/ramulator_sim/Controller.h	/^    bool is_row_open(typename T::Command cmd, const vector<int>& addr_vec)$/;"	f	class:Controller
is_seq_acc	src/gpuwattch/cacti/cacti_interface.h	/^    bool     is_seq_acc;$/;"	m	class:InputParameter
is_shared	src/cuda-sim/ptx_ir.h	/^   bool is_shared() const { return m_is_shared;}$/;"	f	class:symbol
is_shared	src/cuda-sim/ptx_ir.h	/^   bool is_shared() const { return m_space_spec == shared_space;}$/;"	f	class:type_info_key
is_shared	src/cuda-sim/ptx_ir.h	/^   bool is_shared() const {$/;"	f	class:operand_info
is_shd	src/intersim/interconnect_interface.cpp	/^static inline bool is_shd(int node)$/;"	f	file:
is_store	src/abstract_hardware_model.h	/^    bool is_store() const { return (op == STORE_OP || memory_op == memory_store); }$/;"	f	class:inst_t
is_switching	src/gpgpu-sim/shader.h	/^    bool is_switching() const { return core_context_saving || core_context_loading; }$/;"	f	class:shader_core_ctx
is_tag	src/gpuwattch/cacti/Ucache.h	/^  bool     is_tag;$/;"	m	struct:calc_time_mt_wrapper_struct
is_tag	src/gpuwattch/cacti/parameter.h	/^    bool is_tag;$/;"	m	class:DynamicParameter
is_tex	src/cuda-sim/ptx_ir.h	/^   bool is_tex() const { return m_is_tex;}$/;"	f	class:symbol
is_tex	src/cuda-sim/ptx_ir.h	/^   bool is_tex() const { return m_space_spec == tex_space;}$/;"	f	class:type_info_key
is_tex	src/cuda-sim/ptx_ir.h	/^   bool is_tex() const { return m_value.m_symbolic->is_tex();}$/;"	f	class:operand_info
is_thread_done	src/cuda-sim/ptx_sim.cc	/^ptx_cta_info::is_thread_done( ptx_thread_info * thd ) const$/;"	f	class:ptx_cta_info
is_thread_done	src/cuda-sim/ptx_sim.h	/^   bool is_thread_done()$/;"	f	class:ptx_thread_info
is_to	src/cuda-sim/ptx_ir.h	/^   bool is_to() const { return m_to_option; }$/;"	f	class:ptx_instruction
is_to_be_removed	launcher/mk-sched/mk_scheduler.h	/^    bool is_to_be_removed(const unsigned linear_shader_id) const  { return to_remove[linear_shader_id].is_being_removed; }$/;"	f	class:DynamicScheduler::SM_info
is_total	src/ramulator_sim/StatType.h	/^  bool is_total() const {return flags & total;}$/;"	f	class:Stats_Ram::Flags
is_uni	src/cuda-sim/ptx_ir.h	/^   bool is_uni() const { return m_uni;}$/;"	f	class:ptx_instruction
is_valid	common/cta_stat_context.h	/^    bool is_valid() const { return m_valid; }$/;"	f	class:cta_stat_context_t
is_valid	src/cuda-sim/ptx_ir.h	/^   bool is_valid() const { return m_valid; }$/;"	f	class:operand_info
is_valid	src/debug.h	/^   bool is_valid() const { return m_valid; }$/;"	f	class:brk_pt
is_valid	src/gpuwattch/cacti/parameter.h	/^    bool   is_valid;$/;"	m	class:DynamicParameter
is_vector	src/cuda-sim/ptx_ir.h	/^   bool is_vector() const$/;"	f	class:operand_info
is_vectorin	src/abstract_hardware_model.h	/^    unsigned char is_vectorin;$/;"	m	class:inst_t
is_vectorout	src/abstract_hardware_model.h	/^    unsigned char is_vectorout;$/;"	m	class:inst_t
is_watchpoint	src/debug.h	/^   bool is_watchpoint() const { return m_watch; }$/;"	f	class:brk_pt
is_wide	src/cuda-sim/ptx_ir.h	/^   bool is_wide() const { return m_wide;}$/;"	f	class:ptx_instruction
is_wl_tr	src/gpuwattch/cacti/decoder.h	/^    bool   is_wl_tr;$/;"	m	class:Decoder
is_write	src/abstract_hardware_model.h	/^   bool is_write() const { $/;"	f	class:mem_access_t
is_write	src/gpgpu-sim/mem_fetch.h	/^   bool is_write() {return m_access.is_write();}$/;"	f	class:mem_fetch
is_write	src/gpgpu-sim/shader.h	/^      bool is_write() const {return m_allocation==WRITE_ALLOC; }$/;"	f	class:opndcoll_rfu_t::allocation_t
isactive	src/gpgpu-sim/shader.h	/^    unsigned isactive() const {if(m_n_active_cta>0) return 1; else return 0;}$/;"	f	class:shader_core_ctx
isatomic	src/abstract_hardware_model.h	/^    bool isatomic() const { return m_isatomic; }$/;"	f	class:warp_inst_t
isatomic	src/gpgpu-sim/mem_fetch.cc	/^bool mem_fetch::isatomic() const$/;"	f	class:mem_fetch
isconst	src/gpgpu-sim/mem_fetch.cc	/^bool mem_fetch::isconst() const$/;"	f	class:mem_fetch
isize	src/abstract_hardware_model.h	/^    unsigned isize;         \/\/ size of instruction in bytes $/;"	m	class:inst_t
islongop	src/gpgpu-sim/scoreboard.cc	/^const bool Scoreboard::islongop (unsigned warp_id,unsigned regnum) {$/;"	f	class:Scoreboard
isnanf	src/cuda-sim/cuda-math.h	/^int isnanf(float a) $/;"	f
isspace_global	src/cuda-sim/cuda-sim.cc	/^bool isspace_global( addr_t addr )$/;"	f
isspace_local	src/cuda-sim/cuda-sim.cc	/^bool isspace_local( unsigned smid, unsigned hwtid, addr_t addr )$/;"	f
isspace_shared	src/cuda-sim/cuda-sim.cc	/^bool isspace_shared( unsigned smid, addr_t addr )$/;"	f
isspacep_impl	src/cuda-sim/instructions.cc	/^void isspacep_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
issue	src/abstract_hardware_model.h	/^    void issue( const active_mask_t &mask, unsigned warp_id, unsigned long long cycle, int dynamic_warp_id ) $/;"	f	class:warp_inst_t
issue	src/gpgpu-sim/shader.cc	/^void ldst_unit::issue( register_set &reg_set )$/;"	f	class:ldst_unit
issue	src/gpgpu-sim/shader.cc	/^void pipelined_simd_unit::issue( register_set& source_reg )$/;"	f	class:pipelined_simd_unit
issue	src/gpgpu-sim/shader.cc	/^void sfu::issue( register_set& source_reg )$/;"	f	class:sfu
issue	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::issue(){$/;"	f	class:shader_core_ctx
issue	src/gpgpu-sim/shader.cc	/^void sp_unit :: issue(register_set& source_reg)$/;"	f	class:sp_unit
issue	src/gpgpu-sim/shader.h	/^    virtual void issue( register_set& source_reg )$/;"	f	class:simd_function_unit
issueW	src/gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_decodeW;$/;"	m	class:CoreDynParam
issueWidth	src/gpuwattch/arch_const.h	/^const int issueWidth=1;$/;"	v
issue_block2core	src/gpgpu-sim/gpu-sim.cc	/^unsigned shader_core_ctx::issue_block2core( kernel_info_t &kernel ) $/;"	f	class:shader_core_ctx
issue_block2core	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::issue_block2core()$/;"	f	class:gpgpu_sim
issue_block2core	src/gpgpu-sim/shader.cc	/^unsigned simt_core_cluster::issue_block2core()$/;"	f	class:simt_core_cluster
issue_cmd	src/ramulator_sim/Controller.h	/^    void issue_cmd(typename T::Command cmd, const vector<int>& addr_vec)$/;"	f	class:Controller
issue_cmd	src/ramulator_sim/SpeedyController.h	/^    void issue_cmd(typename T::Command cmd, int* addr_vec)$/;"	f	class:SpeedyController
issue_cycle	src/abstract_hardware_model.h	/^    unsigned long long issue_cycle;$/;"	m	class:warp_inst_t
issue_warp	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::issue_warp( register_set& pipe_reg_set, const warp_inst_t* next_inst, const active_mask_t &active_mask, unsigned warp_id )$/;"	f	class:shader_core_ctx
issue_width	src/gpuwattch/XML_Parse.h	/^	int issue_width;$/;"	m	struct:__anon15
issue_width	src/gpuwattch/logic.h	/^	double pipeline_stage,num_hthreads,issue_width;$/;"	m	class:UndiffCore
issue_width	src/gpuwattch/logic.h	/^	int issue_width;$/;"	m	class:selection_logic
issued_count	src/abstract_hardware_model.h	/^    unsigned issued_count() const { assert(m_empty == false); return m_warp_issued_mask.count(); }  \/\/ for instruction counting $/;"	f	class:warp_inst_t
istexture	src/gpgpu-sim/mem_fetch.cc	/^bool mem_fetch::istexture() const$/;"	f	class:mem_fetch
iterator	common/preemption_info.h	/^    typedef std::map<unsigned, PREEMPTION_TECHNIQUE_ENUM>::iterator       iterator;$/;"	t	class:preemption_info_t
iterator	launcher/launcher_option_parser.h	/^  typedef std::vector<ChildProcess*>::iterator        iterator;$/;"	t	class:LauncherOptionParser
iterator	src/cuda-sim/ptx_ir.h	/^   typedef std::list<symbol*>::iterator iterator;$/;"	t	class:symbol_table
ithCache	src/gpuwattch/sharedcache.h	/^    int ithCache;$/;"	m	class:CCdir
ithCache	src/gpuwattch/sharedcache.h	/^    int ithCache;$/;"	m	class:SharedCache
ithCore	src/gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:BranchPredictor
ithCore	src/gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:Core
ithCore	src/gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:EXECU
ithCore	src/gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:InstFetchU
ithCore	src/gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:LoadStoreU
ithCore	src/gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:MemManU
ithCore	src/gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:RENAMINGU
ithCore	src/gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:RegFU
ithCore	src/gpuwattch/core.h	/^	int  ithCore;$/;"	m	class:SchedulerU
ithCore	src/gpuwattch/logic.h	/^	int  ithCore;$/;"	m	class:FunctionalUnit
ithCore	src/gpuwattch/logic.h	/^	int  ithCore;$/;"	m	class:UndiffCore
ithNoC	src/gpuwattch/noc.h	/^	int  ithNoC;$/;"	m	class:NoC
itime	src/intersim2/flit.hpp	/^  int  itime;$/;"	m	class:Flit
itlb	src/gpuwattch/XML_Parse.h	/^	itlb_systemcore itlb;$/;"	m	struct:__anon15
itlb	src/gpuwattch/core.h	/^	ArrayST * itlb;$/;"	m	class:MemManU
itlb_systemcore	src/gpuwattch/XML_Parse.h	/^} itlb_systemcore;$/;"	t	typeref:struct:__anon10
itlbassoc	src/gpuwattch/arch_const.h	/^const int itlbassoc=0;\/\/fully$/;"	v
itlbblocksize	src/gpuwattch/arch_const.h	/^const int itlbblocksize=8;$/;"	v
itlbsize	src/gpuwattch/arch_const.h	/^const int itlbsize=512;$/;"	v
itrs_hp	src/gpuwattch/cacti/const.h	/^  itrs_hp   = 0,$/;"	e	enum:ram_cell_tech_type_num
itrs_lop	src/gpuwattch/cacti/const.h	/^  itrs_lop  = 2,$/;"	e	enum:ram_cell_tech_type_num
itrs_lstp	src/gpuwattch/cacti/const.h	/^  itrs_lstp = 1,$/;"	e	enum:ram_cell_tech_type_num
iwo_logger	src/gpgpu-sim/stat-tool.cc	/^static std::vector<insn_warp_occ_logger> iwo_logger;$/;"	v	file:
jasonjk_dbg_cond	src/cuda-sim/cuda-sim.cc	/^bool jasonjk_dbg_cond()$/;"	f
jasonjk_dbg_fp	src/cuda-sim/cuda-sim.cc	/^FILE** jasonjk_dbg_fp = NULL;$/;"	v
jasonjk_dbg_init	src/cuda-sim/cuda-sim.cc	/^void jasonjk_dbg_init()$/;"	f
kain	src/gpgpu-sim/addrdec.cc	/^unsigned long long kain = 0;$/;"	v
kain_Cluster0_CTA_record_K1	src/gpgpu-sim/gpu-sim.cc	/^std::vector<dim3> kain_Cluster0_CTA_record_K1;$/;"	v
kain_Cluster0_CTA_record_K2	src/gpgpu-sim/gpu-sim.cc	/^std::vector<dim3> kain_Cluster0_CTA_record_K2;$/;"	v
kain_HBM_Cache_hit_miss	src/gpgpu-sim/mem_fetch.h	/^   int kain_HBM_Cache_hit_miss;\/\/1 hit, 0 miss$/;"	m	class:mem_fetch
kain_HBM_cache_channel	src/gpgpu-sim/mem_fetch.h	/^   int kain_HBM_cache_channel;$/;"	m	class:mem_fetch
kain_Use_Drain_Not_Context_Switch_K1	src/gpgpu-sim/gpu-sim.cc	/^int kain_Use_Drain_Not_Context_Switch_K1= 0;$/;"	v
kain_Use_Drain_Not_Context_Switch_K2	src/gpgpu-sim/gpu-sim.cc	/^int kain_Use_Drain_Not_Context_Switch_K2= 0;$/;"	v
kain_addrdec_tlx	src/gpgpu-sim/addrdec.cc	/^new_addr_type linear_to_raw_address_translation::kain_addrdec_tlx(new_addr_type p_addr, mem_fetch *mf) const$/;"	f	class:linear_to_raw_address_translation
kain_all_com_cycles_app1	src/gpgpu-sim/shader.cc	/^unsigned long long kain_all_com_cycles_app1 = 0;$/;"	v
kain_all_com_cycles_app2	src/gpgpu-sim/shader.cc	/^unsigned long long kain_all_com_cycles_app2 = 0;$/;"	v
kain_all_cycles_app1	src/gpgpu-sim/shader.cc	/^unsigned long long kain_all_cycles_app1 = 0;$/;"	v
kain_all_cycles_app2	src/gpgpu-sim/shader.cc	/^unsigned long long kain_all_cycles_app2 = 0;$/;"	v
kain_all_mem_cycles_app1	src/gpgpu-sim/shader.cc	/^unsigned long long kain_all_mem_cycles_app1 = 0;$/;"	v
kain_all_mem_cycles_app2	src/gpgpu-sim/shader.cc	/^unsigned long long kain_all_mem_cycles_app2 = 0;$/;"	v
kain_app1_row_locality	src/gpgpu-sim/mem_latency_stat.cc	/^float memory_stats_t::kain_app1_row_locality( )$/;"	f	class:memory_stats_t
kain_app2_row_locality	src/gpgpu-sim/mem_latency_stat.cc	/^float memory_stats_t::kain_app2_row_locality( )$/;"	f	class:memory_stats_t
kain_begin_load_cycle	src/gpgpu-sim/shader.h	/^	unsigned long long kain_begin_load_cycle;$/;"	m	class:shader_core_ctx
kain_cache	src/gpgpu-sim/l2cache.cc	/^new_addr_type *kain_cache[4];$/;"	v
kain_cycle	src/gpgpu-sim/mem_fetch.h	/^   new_addr_type kain_cycle;$/;"	m	class:mem_fetch
kain_cycle2	src/gpgpu-sim/mem_fetch.h	/^   new_addr_type kain_cycle2;$/;"	m	class:mem_fetch
kain_cycle_used	src/ramulator_sim/Controller.h	/^    long kain_cycle_used;$/;"	m	class:Controller
kain_cycle_used_V2	src/ramulator_sim/Controller.h	/^    long kain_cycle_used_V2;$/;"	m	class:Controller
kain_cycles_HBM_app1	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long kain_cycles_HBM_app1 = 0;$/;"	v
kain_cycles_HBM_app2	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long kain_cycles_HBM_app2 = 0;$/;"	v
kain_cycles_HBM_total	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long kain_cycles_HBM_total= 0;$/;"	v
kain_dram_frequency	src/gpgpu-sim/gpu-sim.cc	/^double kain_dram_frequency;$/;"	v
kain_flit_use	src/gpgpu-sim/gpu-sim.cc	/^bool kain_flit_use = false;$/;"	v
kain_get_addr	src/gpgpu-sim/mem_fetch.h	/^   new_addr_type kain_get_addr()$/;"	f	class:mem_fetch
kain_id	common/kernel_info_t.h	/^	unsigned long long kain_id;$/;"	m	class:kernel_info_t
kain_init	src/gpgpu-sim/l2cache.cc	/^static int kain_init = 0;$/;"	v	file:
kain_is_preempting	src/gpgpu-sim/shader.h	/^    bool kain_is_preempting() const { return is_draining() || is_context_saving() || is_flushing() || is_context_loading(); }$/;"	f	class:shader_core_ctx
kain_kernel1_cache	src/gpgpu-sim/gpu-cache.h	/^    cache_block_t *kain_kernel1_cache;$/;"	m	class:tag_array
kain_kernel2_cache	src/gpgpu-sim/gpu-cache.h	/^    cache_block_t kain_kernel2_cache[768];$/;"	m	class:tag_array
kain_load_cluster_id	src/gpgpu-sim/shader.h	/^	unsigned int kain_load_cluster_id;$/;"	m	class:shader_core_ctx
kain_m_next_cta	common/kernel_info_t.h	/^   std::list<dim3> kain_m_next_cta[4];\/\/ 4-chiplet$/;"	m	class:kernel_info_t
kain_memory_page_count	src/gpgpu-sim/l2cache.cc	/^int kain_memory_page_count[4];$/;"	v
kain_memory_page_create_count	src/gpgpu-sim/addrdec.cc	/^long long kain_memory_page_create_count[4];$/;"	v
kain_miss_HBM_cache	src/gpgpu-sim/mem_fetch.h	/^   unsigned kain_miss_HBM_cache;$/;"	m	class:mem_fetch
kain_new_addr	src/gpgpu-sim/mem_fetch.h	/^   new_addr_type kain_new_addr;$/;"	m	class:mem_fetch
kain_new_addr_back	src/gpgpu-sim/mem_fetch.h	/^   new_addr_type kain_new_addr_back;$/;"	m	class:mem_fetch
kain_next_thread_block_to_schedule	launcher/mk-sched/mk_scheduler.h	/^  kernel_info_t * kain_next_thread_block_to_schedule(unsigned shader_id)$/;"	f	class:MKScheduler
kain_one_flit_contention_stall	src/gpgpu-sim/gpu-sim.cc	/^int kain_one_flit_contention_stall = 0; $/;"	v
kain_one_flit_count	src/gpgpu-sim/gpu-sim.cc	/^int kain_one_flit_count = 0; $/;"	v
kain_pae_HBM_mtx_29	src/gpgpu-sim/addrdec.cc	/^unsigned kain_pae_HBM_mtx_29[][28] = {$/;"	v
kain_page_count	src/gpgpu-sim/addrdec.cc	/^long long kain_page_count[2];$/;"	v
kain_page_cycle	src/gpgpu-sim/addrdec.cc	/^std::vector<new_addr_type *> kain_page_cycle[2];$/;"	v
kain_reply_flit	src/gpgpu-sim/gpu-sim.cc	/^int kain_reply_flit;$/;"	v
kain_request_flit	src/gpgpu-sim/gpu-sim.cc	/^int kain_request_flit;$/;"	v
kain_request_number1	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long kain_request_number1 = 0;$/;"	v
kain_return_m_dev_malloc	src/gpgpu-sim/gpu-sim.h	/^   unsigned long long kain_return_m_dev_malloc()$/;"	f	class:gpgpu_sim
kain_row_hit_app1	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long kain_row_hit_app1 = 0;$/;"	v
kain_row_hit_app2	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long kain_row_hit_app2 = 0;$/;"	v
kain_row_miss_app1	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long kain_row_miss_app1 = 0;$/;"	v
kain_row_miss_app2	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long kain_row_miss_app2 = 0;$/;"	v
kain_send_packet	src/gpgpu-sim/shader.cc	/^unsigned long long kain_send_packet=0;$/;"	v
kain_send_request	src/gpgpu-sim/shader.cc	/^unsigned long long kain_send_request=0;$/;"	v
kain_set_tpc	src/gpgpu-sim/mem_fetch.h	/^   void kain_set_tpc(unsigned tpc) { m_tpc = tpc; }$/;"	f	class:mem_fetch
kain_set_write	src/gpgpu-sim/mem_fetch.h	/^   void kain_set_write()$/;"	f	class:mem_fetch
kain_stall_cycles_app1	src/gpgpu-sim/shader.cc	/^unsigned long long kain_stall_cycles_app1= 0;$/;"	v
kain_stall_cycles_app2	src/gpgpu-sim/shader.cc	/^unsigned long long kain_stall_cycles_app2= 0;$/;"	v
kain_stream_id	common/kernel_info_t.h	/^    unsigned kain_stream_id;$/;"	m	class:kernel_info_t
kain_stream_id	src/gpgpu-sim/mem_fetch.h	/^   unsigned kain_stream_id;$/;"	m	class:mem_fetch
kain_total_byte	src/ramulator_sim/Controller.h	/^    long kain_total_byte()$/;"	f	class:Controller
kain_total_byte_READ	src/ramulator_sim/Controller.h	/^    long kain_total_byte_READ()$/;"	f	class:Controller
kain_total_byte_WRITE	src/ramulator_sim/Controller.h	/^    long kain_total_byte_WRITE()$/;"	f	class:Controller
kain_total_row_access	src/ramulator_sim/Controller.h	/^    long kain_total_row_access()$/;"	f	class:Controller
kain_total_row_access_READ	src/ramulator_sim/Controller.h	/^    long kain_total_row_access_READ()$/;"	f	class:Controller
kain_total_row_access_WRITE	src/ramulator_sim/Controller.h	/^    long kain_total_row_access_WRITE()$/;"	f	class:Controller
kain_total_row_hit	src/ramulator_sim/Controller.h	/^    long kain_total_row_hit()$/;"	f	class:Controller
kain_total_row_hit_READ	src/ramulator_sim/Controller.h	/^    long kain_total_row_hit_READ()$/;"	f	class:Controller
kain_total_row_hit_WRITE	src/ramulator_sim/Controller.h	/^    long kain_total_row_hit_WRITE()$/;"	f	class:Controller
kain_total_used_cycle	src/ramulator_sim/Controller.h	/^    long kain_total_used_cycle()$/;"	f	class:Controller
kain_transform_back_kain_address	src/gpgpu-sim/mem_fetch.h	/^   void kain_transform_back_kain_address()$/;"	f	class:mem_fetch
kain_transform_to_HBM_Cache_address	src/gpgpu-sim/mem_fetch.h	/^   void kain_transform_to_HBM_Cache_address()$/;"	f	class:mem_fetch
kain_traverse_max_flit_reply	src/intersim2/trafficmanager.cpp	/^int kain_traverse_max_flit_reply = 0;$/;"	v
kain_traverse_max_flit_request	src/intersim2/trafficmanager.cpp	/^int kain_traverse_max_flit_request = 0;$/;"	v
kain_type	src/gpgpu-sim/mem_fetch.h	/^   enum context_type kain_type;$/;"	m	class:mem_fetch	typeref:enum:mem_fetch::context_type
kain_warp_all_available_count_app1	src/gpgpu-sim/shader.cc	/^unsigned long long kain_warp_all_available_count_app1 = 0;$/;"	v
kain_warp_all_available_count_app2	src/gpgpu-sim/shader.cc	/^unsigned long long kain_warp_all_available_count_app2 = 0;$/;"	v
kain_warp_all_count_app1	src/gpgpu-sim/shader.cc	/^unsigned long long kain_warp_all_count_app1= 0;$/;"	v
kain_warp_all_count_app2	src/gpgpu-sim/shader.cc	/^unsigned long long kain_warp_all_count_app2= 0;$/;"	v
kain_warp_inst_app1	common/kernel_info_t.cc	/^long long kain_warp_inst_app1 = 0;$/;"	v
kain_warp_inst_app2	common/kernel_info_t.cc	/^long long kain_warp_inst_app2 = 0;$/;"	v
kain_warp_mem_stall_count_app1	src/gpgpu-sim/shader.cc	/^unsigned long long kain_warp_mem_stall_count_app1= 0;$/;"	v
kain_warp_mem_stall_count_app2	src/gpgpu-sim/shader.cc	/^unsigned long long kain_warp_mem_stall_count_app2= 0;$/;"	v
kain_warp_unit_stall_count_app1	src/gpgpu-sim/shader.cc	/^unsigned long long kain_warp_unit_stall_count_app1= 0;$/;"	v
kain_warp_unit_stall_count_app2	src/gpgpu-sim/shader.cc	/^unsigned long long kain_warp_unit_stall_count_app2= 0;$/;"	v
kain_write_back_cycles	src/gpgpu-sim/gpu-sim.cc	/^unsigned long long kain_write_back_cycles = 0;$/;"	v
keep_intermediate_files	src/cuda-sim/ptx_loader.cc	/^bool keep_intermediate_files() {return g_keep_intermediate_files;}$/;"	f
kernel_build_info	launcher/child_process.h	/^    kernel_build_info(const char* _hostFun, const kernel_config& _config)$/;"	f	struct:ChildProcess::kernel_build_info
kernel_build_info	launcher/child_process.h	/^  struct kernel_build_info {$/;"	s	class:ChildProcess
kernel_cmp_perf_counters	src/gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector< avg_max_min_counters<double> > kernel_cmp_perf_counters; \/\/ Per-kernel component avg\/max\/min performance counters$/;"	m	class:gpgpu_sim_wrapper
kernel_cmp_pwr	src/gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector< avg_max_min_counters<double> > kernel_cmp_pwr; \/\/ Per-kernel component power avg\/max\/min values$/;"	m	class:gpgpu_sim_wrapper
kernel_config	common/kernel_config.h	/^  kernel_config( dim3 GridDim, dim3 BlockDim, size_t sharedMem, struct CUstream_st *stream )$/;"	f	class:kernel_config
kernel_config	common/kernel_config.h	/^class kernel_config {$/;"	c
kernel_info_t	common/kernel_info_t.h	/^class kernel_info_t {$/;"	c
kernel_info_t	src/abstract_hardware_model.cc	/^kernel_info_t::kernel_info_t( dim3 gridDim, dim3 blockDim, class function_info *entry, bool real_run )$/;"	f	class:kernel_info_t
kernel_max_cta_per_shader	src/gpgpu-sim/shader.h	/^    unsigned kernel_max_cta_per_shader;$/;"	m	class:shader_core_ctx
kernel_padded_threads_per_cta	src/gpgpu-sim/shader.h	/^    unsigned kernel_padded_threads_per_cta;$/;"	m	class:shader_core_ctx
kernel_power	src/gpuwattch/gpgpu_sim_wrapper.h	/^    avg_max_min_counters<double> kernel_power; \/\/ Per-kernel power avg\/max\/min values$/;"	m	class:gpgpu_sim_wrapper
kernel_sample_count	src/gpuwattch/gpgpu_sim_wrapper.h	/^    int kernel_sample_count; \/\/ # of samples per kernel$/;"	m	class:gpgpu_sim_wrapper
kernel_tot_power	src/gpuwattch/gpgpu_sim_wrapper.h	/^    double kernel_tot_power; \/\/ Total per-kernel power$/;"	m	class:gpgpu_sim_wrapper
kernels	launcher/mk-sched/mk_scheduler.h	/^  std::list<kernel_info_t*> kernels;$/;"	m	class:MKScheduler
kinv	src/gpuwattch/cacti/parameter.h	/^  double kinv;$/;"	m	class:TechnologyParameter
l	src/gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR s; int l; XMLCHAR c;} XMLCharacterEntity;$/;"	m	struct:__anon7	file:
l1_cache	src/gpgpu-sim/gpu-cache.h	/^    l1_cache( const char *name,$/;"	f	class:l1_cache
l1_cache	src/gpgpu-sim/gpu-cache.h	/^    l1_cache(const char *name, cache_config &config,$/;"	f	class:l1_cache
l1_cache	src/gpgpu-sim/gpu-cache.h	/^class l1_cache : public data_cache {$/;"	c
l1d_cache_config	src/gpgpu-sim/gpu-cache.h	/^    l1d_cache_config() : cache_config(){}$/;"	f	class:l1d_cache_config
l1d_cache_config	src/gpgpu-sim/gpu-cache.h	/^class l1d_cache_config : public cache_config{$/;"	c
l1dir	src/gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor
l1dirarray	src/gpuwattch/processor.h	/^    vector<SharedCache *> l1dirarray;$/;"	m	class:Processor
l2	src/gpuwattch/XML_Parse.h	/^    system_L2 l2;$/;"	m	struct:__anon26
l2	src/gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor
l2_cache	src/gpgpu-sim/gpu-cache.h	/^    l2_cache(const char *name,  cache_config &config,$/;"	f	class:l2_cache
l2_cache	src/gpgpu-sim/gpu-cache.h	/^class l2_cache : public data_cache {$/;"	c
l2_cache_config	src/gpgpu-sim/gpu-cache.h	/^	l2_cache_config() : cache_config(){}$/;"	f	class:l2_cache_config
l2_cache_config	src/gpgpu-sim/gpu-cache.h	/^class l2_cache_config : public cache_config {$/;"	c
l2_cache_cycle	launcher/mk-sched/mk_scheduler.h	/^  virtual void l2_cache_cycle()                                               {}$/;"	f	class:MKScheduler
l2_cache_stats	src/gpgpu-sim/power_stat.h	/^    class cache_stats l2_cache_stats[NUM_STAT_IDX]; \/\/ Total L2 partition stats$/;"	m	struct:mem_power_stats_pod	typeref:class:mem_power_stats_pod::cache_stats
l2_freq	src/gpgpu-sim/gpu-sim.h	/^    double l2_freq;$/;"	m	class:gpgpu_sim_config
l2_ideal	src/gpgpu-sim/gpu-sim.h	/^   bool l2_ideal;$/;"	m	struct:memory_config
l2_period	src/gpgpu-sim/gpu-sim.h	/^    double l2_period;$/;"	m	class:gpgpu_sim_config
l2_power	src/gpuwattch/processor.h	/^    double l2_power;$/;"	m	class:Processor
l2_time	src/gpgpu-sim/gpu-sim.h	/^   double l2_time;$/;"	m	class:gpgpu_sim
l2array	src/gpuwattch/processor.h	/^    vector<SharedCache *> l2array;$/;"	m	class:Processor
l2cache	src/gpuwattch/core.h	/^    SharedCache * l2cache;$/;"	m	class:Core
l2cacheassoc	src/gpuwattch/arch_const.h	/^const int l2cacheassoc=16;$/;"	v
l2cacheblocksize	src/gpuwattch/arch_const.h	/^const int l2cacheblocksize=64;$/;"	v
l2cachesize	src/gpuwattch/arch_const.h	/^const int l2cachesize=262144;$/;"	v
l2dir	src/gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor
l2dirarray	src/gpuwattch/processor.h	/^    vector<SharedCache *> l2dirarray;$/;"	m	class:Processor
l2dirassoc	src/gpuwattch/arch_const.h	/^const int l2dirassoc=0;$/;"	v
l2dirblocksize	src/gpuwattch/arch_const.h	/^const int l2dirblocksize=2;$/;"	v
l2dirsize	src/gpuwattch/arch_const.h	/^const int l2dirsize=1024;$/;"	v
l3	src/gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor
l3array	src/gpuwattch/processor.h	/^    vector<SharedCache *> l3array;$/;"	m	class:Processor
l_elec	src/gpuwattch/cacti/parameter.h	/^    double l_elec;$/;"	m	class:TechnologyParameter::DeviceType
l_ip	src/gpuwattch/array.h	/^  InputParameter l_ip;$/;"	m	class:ArrayST
l_ip	src/gpuwattch/interconnect.h	/^	InputParameter l_ip;$/;"	m	class:interconnect
l_ip	src/gpuwattch/logic.h	/^	InputParameter l_ip;$/;"	m	class:DFFCell
l_ip	src/gpuwattch/logic.h	/^	InputParameter l_ip;$/;"	m	class:Pipeline
l_ip	src/gpuwattch/logic.h	/^	InputParameter l_ip;$/;"	m	class:dep_resource_conflict_check
l_ip	src/gpuwattch/logic.h	/^	InputParameter l_ip;$/;"	m	class:inst_decoder
l_ip	src/gpuwattch/logic.h	/^	InputParameter l_ip;$/;"	m	class:selection_logic
l_ip	src/gpuwattch/memoryctrl.h	/^    InputParameter l_ip;$/;"	m	class:MCBackend
l_ip	src/gpuwattch/memoryctrl.h	/^    InputParameter l_ip;$/;"	m	class:MCPHY
l_phy	src/gpuwattch/cacti/parameter.h	/^    double l_phy;$/;"	m	class:TechnologyParameter::DeviceType
l_wire	src/gpuwattch/cacti/wire.h	/^    Component l_wire;$/;"	m	class:Wire
la2pa_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool la2pa_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
la2pa_mask	src/gpgpu-sim/addrdec.h	/^   new_addr_type la2pa_mask; \/\/ linear address to physical address maskt$/;"	m	class:linear_to_raw_address_translation
la2pa_mask_option	src/gpgpu-sim/addrdec.h	/^   const char *la2pa_mask_option;$/;"	m	class:linear_to_raw_address_translation
la_route_set	src/intersim2/flit.hpp	/^  OutputSet la_route_set;$/;"	m	class:Flit
label	src/intersim/allocator.hpp	/^      int label;$/;"	m	struct:Allocator::sRequest
label	src/intersim/arbiter.hpp	/^      int label;$/;"	m	struct:Arbiter::sRequest
label	src/intersim2/allocators/allocator.hpp	/^    int label;$/;"	m	struct:Allocator::sRequest
label	src/intersim2/arbiters/prio_arb.hpp	/^    int label;$/;"	m	struct:PriorityArbiter::sRequest
label_t	src/cuda-sim/ptx_ir.h	/^   unsigned_t, symbolic_t, label_t, v_reg_t, v_float_op_t, v_double_op_t,$/;"	e	enum:operand_type
labels	src/cuda-sim/ptx_ir.h	/^   std::map<std::string,unsigned> labels;$/;"	m	class:function_info
lambda	src/ramulator_sim/ALDRAM.h	/^    function<void(DRAM<ALDRAM>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ALDRAM
lambda	src/ramulator_sim/DDR3.h	/^    function<void(DRAM<DDR3>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:DDR3
lambda	src/ramulator_sim/DDR4.h	/^    function<void(DRAM<DDR4>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:DDR4
lambda	src/ramulator_sim/DRAM.h	/^    function<void(DRAM<T>*, int)>* lambda;$/;"	m	class:DRAM
lambda	src/ramulator_sim/DSARP.h	/^    function<void(DRAM<DSARP>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:DSARP
lambda	src/ramulator_sim/GDDR5.h	/^    function<void(DRAM<GDDR5>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:GDDR5
lambda	src/ramulator_sim/HBM.h	/^    function<void(DRAM<HBM>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:HBM
lambda	src/ramulator_sim/LPDDR3.h	/^    function<void(DRAM<LPDDR3>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:LPDDR3
lambda	src/ramulator_sim/LPDDR4.h	/^    function<void(DRAM<LPDDR4>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:LPDDR4
lambda	src/ramulator_sim/SALP.h	/^    function<void(DRAM<SALP>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:SALP
lambda	src/ramulator_sim/TLDRAM.h	/^    function<void(DRAM<TLDRAM>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:TLDRAM
lambda	src/ramulator_sim/WideIO.h	/^    function<void(DRAM<WideIO>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:WideIO
lambda	src/ramulator_sim/WideIO2.h	/^    function<void(DRAM<WideIO2>*, int)> lambda[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:WideIO2
last	src/ramulator_sim/StatType.h	/^  Tick last;$/;"	m	class:Stats_Ram::Average
lastReset	src/ramulator_sim/StatType.h	/^  Tick lastReset;$/;"	m	class:Stats_Ram::Average
last_borrower	src/gpgpu-sim/l2cache.h	/^      int last_borrower() const { return m_last_borrower; } $/;"	f	class:memory_partition_unit::arbitration_metadata
last_callback	src/cuda-sim/ptx_sim.h	/^   dram_callback_t last_callback() const { return m_last_dram_callback;}$/;"	f	class:ptx_thread_info
last_cycle	launcher/stats/stats.h	/^  uint64_t last_cycle;$/;"	m	class:Stats::AverageScalarStorage
last_eaddr	src/cuda-sim/ptx_sim.h	/^   addr_t last_eaddr() const { return m_last_effective_address;}$/;"	f	class:ptx_thread_info
last_gpu_sim_insn	src/gpgpu-sim/gpu-sim.h	/^   unsigned long long  last_gpu_sim_insn;$/;"	m	class:gpgpu_sim
last_level	src/ramulator_sim/Cache.h	/^  Cache::Level last_level;$/;"	m	class:CacheSystem
last_liveness_message_time	src/gpgpu-sim/gpu-sim.h	/^   unsigned long long  last_liveness_message_time; $/;"	m	class:gpgpu_sim
last_shader_cycle_distro	src/gpgpu-sim/shader.h	/^    unsigned *last_shader_cycle_distro;$/;"	m	struct:shader_core_stats_pod
last_space	src/cuda-sim/ptx_sim.h	/^   memory_space_t last_space() const { return m_last_memory_space;}$/;"	f	class:ptx_thread_info
last_value	launcher/stats/stats.h	/^  uint64_t last_value;$/;"	m	class:Stats::AverageScalarStorage
last_value	launcher/stats/stats.h	/^  uint64_t last_value;$/;"	m	class:Stats::MaxScalarStorage
last_was_call	src/cuda-sim/ptx_sim.h	/^   bool last_was_call() const { return m_last_was_call; }$/;"	f	class:ptx_thread_info
latency	src/abstract_hardware_model.h	/^    unsigned latency; \/\/ operation latency $/;"	m	class:inst_t
latency	src/cuda-sim/ptx-stats.cc	/^    unsigned long long latency;$/;"	m	class:ptx_file_line_stats	file:
latency	src/gpgpu-sim/shader.h	/^   unsigned long latency;$/;"	m	struct:insn_latency_info
latency	src/gpuwattch/basic_components.h	/^    double throughput, latency;$/;"	m	class:CacheDynParam
latency	src/gpuwattch/cacti/cacti_interface.h	/^  double latency;$/;"	m	class:InputParameter
latency	src/gpuwattch/interconnect.h	/^    double latency, throughput;$/;"	m	class:interconnect
latency	src/intersim/trafficmanager.hpp	/^      latency, throughput$/;"	e	enum:TrafficManager::eSimMode
latency	src/ramulator_sim/Cache.h	/^  int latency[int(Level::MAX)] = {4, 4 + 12, 4 + 12 + 31};$/;"	m	class:Cache
latency_each	src/ramulator_sim/Cache.h	/^  int latency_each[int(Level::MAX)] = {4, 12, 31};$/;"	m	class:Cache
latency_overflow	src/gpuwattch/interconnect.h	/^    bool  latency_overflow;$/;"	m	class:interconnect
latency_overhead	common/preempt_overhead.h	/^  unsigned long long latency_overhead;$/;"	m	class:cta_preempt_overhead
latency_overhead	common/preempt_overhead.h	/^  unsigned long long latency_overhead;$/;"	m	class:preempt_overhead_item
latency_overhead	common/preempt_overhead.h	/^  unsigned long long latency_overhead;$/;"	m	class:shader_preempt_overhead
launch	launcher/simulator.cc	/^Simulator::launch(LauncherOptionParser* opt)$/;"	f	class:Simulator
launch	src/abstract_hardware_model.cc	/^void simt_stack::launch( address_type start_pc, const simt_mask_t &active_mask )$/;"	f	class:simt_stack
launch	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::launch( kernel_info_t *kinfo )$/;"	f	class:gpgpu_sim
launch_bogus_kernel	launcher/simulator.cc	/^Simulator::launch_bogus_kernel(ChildProcess* process)$/;"	f	class:Simulator
launch_kernels	launcher/simulator.h	/^  std::list<std::pair<ChildProcess*, const char*> > launch_kernels;$/;"	m	class:Simulator
launched_kernel	launcher/child_process.h	/^  bool launched_kernel;$/;"	m	class:ChildProcess
launcherConfigFile	launcher/launcher_option_parser.h	/^  std::ifstream launcherConfigFile;$/;"	m	class:LauncherOptionParser
layer	src/gpgpu-sim/addrdec.h	/^   unsigned layer; \/\/ layer id; for each vault has multiple layers(or dies or hmc)$/;"	m	struct:addrdec_t
ld_exec	src/cuda-sim/instructions.cc	/^void ld_exec( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
ld_impl	src/cuda-sim/instructions.cc	/^void ld_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
ld_time_dist	src/gpgpu-sim/visualizer.cc	/^   std::vector<double>  ld_time_dist;$/;"	m	class:my_time_vector	file:
ld_time_map	src/gpgpu-sim/visualizer.cc	/^   std::map< unsigned int, std::vector<long int> > ld_time_map;$/;"	m	class:my_time_vector	file:
ld_vector_size	src/gpgpu-sim/visualizer.cc	/^   unsigned ld_vector_size;$/;"	m	class:my_time_vector	file:
ldst_unit	src/gpgpu-sim/shader.cc	/^ldst_unit::ldst_unit( mem_fetch_interface *icnt,$/;"	f	class:ldst_unit
ldst_unit	src/gpgpu-sim/shader.h	/^class ldst_unit: public pipelined_simd_unit {$/;"	c
ldst_unit_response_buffer_full	src/gpgpu-sim/shader.cc	/^bool shader_core_ctx::ldst_unit_response_buffer_full() const$/;"	f	class:shader_core_ctx
ldst_unit_response_queue_size	src/gpgpu-sim/shader.h	/^    unsigned ldst_unit_response_queue_size;$/;"	m	struct:shader_core_config
ldu_impl	src/cuda-sim/instructions.cc	/^void ldu_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
leak_power_request_and_reply_networks	src/gpuwattch/cacti/cacti_interface.h	/^  double leak_power_request_and_reply_networks;$/;"	m	struct:__anon5
leak_power_request_and_reply_networks	src/gpuwattch/cacti/cacti_interface.h	/^  leak_power_request_and_reply_networks;$/;"	m	class:mem_array
leak_power_request_and_reply_networks	src/gpuwattch/cacti/uca.h	/^    double leak_power_request_and_reply_networks;$/;"	m	class:UCA
leak_power_sense_amps_closed_page_state	src/gpuwattch/cacti/mat.h	/^    double   leak_power_sense_amps_closed_page_state;$/;"	m	class:Mat
leak_power_sense_amps_open_page_state	src/gpuwattch/cacti/mat.h	/^    double   leak_power_sense_amps_open_page_state;$/;"	m	class:Mat
leak_power_subbank_closed_page	src/gpuwattch/cacti/cacti_interface.h	/^  double leak_power_subbank_closed_page;$/;"	m	struct:__anon5
leak_power_subbank_closed_page	src/gpuwattch/cacti/cacti_interface.h	/^  refresh_power, leak_power_subbank_closed_page, leak_power_subbank_open_page,$/;"	m	class:mem_array
leak_power_subbank_closed_page	src/gpuwattch/cacti/uca.h	/^    double leak_power_subbank_closed_page;$/;"	m	class:UCA
leak_power_subbank_open_page	src/gpuwattch/cacti/cacti_interface.h	/^  double leak_power_subbank_open_page;$/;"	m	struct:__anon5
leak_power_subbank_open_page	src/gpuwattch/cacti/cacti_interface.h	/^  refresh_power, leak_power_subbank_closed_page, leak_power_subbank_open_page,$/;"	m	class:mem_array
leak_power_subbank_open_page	src/gpuwattch/cacti/uca.h	/^    double leak_power_subbank_open_page;$/;"	m	class:UCA
leak_power_with_sleep_transistors_in_mats	src/gpuwattch/cacti/cacti_interface.h	/^    double leak_power_with_sleep_transistors_in_mats;$/;"	m	class:uca_org_t
leakage	src/gpuwattch/cacti/cacti_interface.h	/^    double leakage;$/;"	m	class:powerComponents
leakage	src/gpuwattch/logic.h	/^	double energy, base_energy,per_access_energy, leakage, gate_leakage;$/;"	m	class:FunctionalUnit
leakage_feedback	src/gpuwattch/array.cc	/^void ArrayST::leakage_feedback(double temperature)$/;"	f	class:ArrayST
leakage_feedback	src/gpuwattch/cacti/decoder.cc	/^void Decoder::leakage_feedback(double temperature)$/;"	f	class:Decoder
leakage_feedback	src/gpuwattch/cacti/decoder.cc	/^void Predec::leakage_feedback(double temperature)$/;"	f	class:Predec
leakage_feedback	src/gpuwattch/cacti/decoder.cc	/^void PredecBlk::leakage_feedback(double temperature)$/;"	f	class:PredecBlk
leakage_feedback	src/gpuwattch/cacti/decoder.cc	/^void PredecBlkDrv::leakage_feedback(double temperature)$/;"	f	class:PredecBlkDrv
leakage_feedback	src/gpuwattch/interconnect.cc	/^void interconnect::leakage_feedback(double temperature)$/;"	f	class:interconnect
leakage_feedback	src/gpuwattch/logic.cc	/^void FunctionalUnit::leakage_feedback(double temperature)$/;"	f	class:FunctionalUnit
leakage_feedback	src/gpuwattch/logic.cc	/^void dep_resource_conflict_check::leakage_feedback(double temperature)$/;"	f	class:dep_resource_conflict_check
leakage_feedback	src/gpuwattch/logic.cc	/^void inst_decoder::leakage_feedback(double temperature)$/;"	f	class:inst_decoder
leakage_power_dev	src/gpuwattch/cacti/cacti_interface.h	/^    int delay_dev, dynamic_power_dev, leakage_power_dev,$/;"	m	class:InputParameter
leakage_power_dev_nuca	src/gpuwattch/cacti/cacti_interface.h	/^    int delay_dev_nuca, dynamic_power_dev_nuca, leakage_power_dev_nuca,$/;"	m	class:InputParameter
leakage_power_wt	src/gpuwattch/cacti/cacti_interface.h	/^    int delay_wt, dynamic_power_wt, leakage_power_wt,$/;"	m	class:InputParameter
leakage_power_wt_nuca	src/gpuwattch/cacti/cacti_interface.h	/^    int delay_wt_nuca, dynamic_power_wt_nuca, leakage_power_wt_nuca,$/;"	m	class:InputParameter
leaving	src/intersim2/routers/chaos_router.hpp	/^    leaving,       \/\/    T***>   input avail$/;"	e	enum:ChaosRouter::eQState
length	src/gpuwattch/interconnect.h	/^    double length;$/;"	m	class:interconnect
lengthXMLString	src/gpuwattch/xmlParser.cc	/^int ToXMLStringTool::lengthXMLString(XMLCSTR source)$/;"	f	class:ToXMLStringTool
level	src/ramulator_sim/Cache.h	/^  } level;$/;"	m	class:Cache	typeref:class:Cache::Level
level	src/ramulator_sim/DRAM.h	/^    typename T::Level level;$/;"	m	class:DRAM
level_bank	src/ramulator_sim/Refresh.h	/^  int level_chan, level_rank, level_bank, level_sa;$/;"	m	class:Refresh
level_chan	src/ramulator_sim/Refresh.h	/^  int level_chan, level_rank, level_bank, level_sa;$/;"	m	class:Refresh
level_rank	src/ramulator_sim/Refresh.h	/^  int level_chan, level_rank, level_bank, level_sa;$/;"	m	class:Refresh
level_sa	src/ramulator_sim/Refresh.h	/^  int level_chan, level_rank, level_bank, level_sa;$/;"	m	class:Refresh
level_string	src/ramulator_sim/Cache.h	/^  std::string level_string;$/;"	m	class:Cache
lg2_impl	src/cuda-sim/instructions.cc	/^void lg2_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
libSectionList	libcuda/cuda_runtime_api.cc	/^std::list<cuobjdumpSection*> libSectionList;$/;"	v
libramulator_is_present	src/ramulator_sim/MemoryFactory.cpp	/^    void libramulator_is_present(void)$/;"	f
limitCause	common/kernel_info_t.h	/^   enum limitCause {$/;"	g	class:kernel_info_t
limited_adapt_mesh	src/intersim/routefunc.cpp	/^void limited_adapt_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
limited_adapt_mesh_old	src/intersim/routefunc.cpp	/^void limited_adapt_mesh_old( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
line	src/cuda-sim/ptx-stats.cc	/^    unsigned line;$/;"	m	class:ptx_file_line	file:
line	src/cuda-sim/ptxinfo.y	/^line: 	HEADER INFO COLON line_info$/;"	l
line_info	src/cuda-sim/ptxinfo.y	/^line_info: function_name$/;"	l
line_size_based_tag_func	src/abstract_hardware_model.cc	/^address_type line_size_based_tag_func(new_addr_type address, new_addr_type line_size)$/;"	f
line_sz	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int line_sz;$/;"	m	class:InputParameter
linear_histogram	src/gpgpu-sim/histogram.cc	/^linear_histogram::linear_histogram (int stride, const char *name, int nbins, int* bins) $/;"	f	class:linear_histogram
linear_histogram	src/gpgpu-sim/histogram.h	/^class linear_histogram : public binned_histogram {$/;"	c
linear_histogram_logger	src/gpgpu-sim/stat-tool.cc	/^linear_histogram_logger::linear_histogram_logger(const linear_histogram_logger& other) $/;"	f	class:linear_histogram_logger
linear_histogram_logger	src/gpgpu-sim/stat-tool.cc	/^linear_histogram_logger::linear_histogram_logger(int n_bins, $/;"	f	class:linear_histogram_logger
linear_histogram_logger	src/gpgpu-sim/stat-tool.h	/^class linear_histogram_logger : public snap_shot_trigger, public spill_log_interface {$/;"	c
linear_histogram_snapshot	src/gpgpu-sim/stat-tool.h	/^   linear_histogram_snapshot(const linear_histogram_snapshot& other) $/;"	f	class:linear_histogram_snapshot
linear_histogram_snapshot	src/gpgpu-sim/stat-tool.h	/^   linear_histogram_snapshot(int n_bins, unsigned long long  cycle) $/;"	f	class:linear_histogram_snapshot
linear_histogram_snapshot	src/gpgpu-sim/stat-tool.h	/^class linear_histogram_snapshot {$/;"	c
linear_to_raw_address_translation	src/gpgpu-sim/addrdec.cc	/^linear_to_raw_address_translation::linear_to_raw_address_translation()$/;"	f	class:linear_to_raw_address_translation
linear_to_raw_address_translation	src/gpgpu-sim/addrdec.h	/^class linear_to_raw_address_translation {$/;"	c
linebuf	build/src/cuda-sim/lex.ptx_.c	/^char linebuf[1024];$/;"	v
lineno	src/intersim2/lex.yy.c	/^static unsigned int lineno = 1;$/;"	v	file:
link_bus	src/gpuwattch/noc.h	/^	interconnect * link_bus;$/;"	m	class:NoC
link_bus_exist	src/gpuwattch/noc.h	/^	bool link_bus_exist;$/;"	m	class:NoC
link_bus_tot_per_Router	src/gpuwattch/noc.h	/^	Component      link_bus_tot_per_Router;$/;"	m	class:NoC
link_latency	src/gpuwattch/XML_Parse.h	/^	int link_latency;$/;"	m	struct:__anon21
link_latency	src/gpuwattch/basic_components.h	/^    double executionTime, total_access, link_throughput,link_latency,$/;"	m	class:NoCParam
link_len	src/gpuwattch/noc.h	/^	double link_len;$/;"	m	class:NoC
link_name	src/gpuwattch/noc.h	/^	string name, link_name;$/;"	m	class:NoC
link_throughput	src/gpuwattch/XML_Parse.h	/^	int link_throughput;$/;"	m	struct:__anon21
link_throughput	src/gpuwattch/basic_components.h	/^    double executionTime, total_access, link_throughput,link_latency,$/;"	m	class:NoCParam
list	src/ramulator_sim/StatType.h	/^  std::vector<StatBase*> list;$/;"	m	class:Stats_Ram::StatList
list_param	src/cuda-sim/cuda-sim.cc	/^void function_info::list_param( FILE *fout ) const$/;"	f	class:function_info
list_spill_log	src/gpgpu-sim/stat-tool.cc	/^static std::list<spill_log_interface*> list_spill_log;$/;"	v	file:
list_ss_trigger	src/gpgpu-sim/stat-tool.cc	/^static std::list<snap_shot_trigger*> list_ss_trigger;$/;"	v	file:
literal_list	src/cuda-sim/ptx.y	/^literal_list: literal_operand$/;"	l
literal_operand	src/cuda-sim/ptx.y	/^literal_operand : INT_OPERAND { add_literal_int($1); }$/;"	l
liveness_message_freq	src/gpgpu-sim/gpu-sim.h	/^    unsigned long long liveness_message_freq; $/;"	m	class:gpgpu_sim_config
llcBlockSize	src/gpuwattch/basic_components.h	/^    int	   llcBlockSize, dataBusWidth, addressBusWidth;$/;"	m	class:MCParam
llc_line_length	src/gpuwattch/XML_Parse.h	/^    int llc_line_length;$/;"	m	struct:__anon23
lmem	src/abstract_hardware_model.h	/^   int lmem;$/;"	m	struct:gpgpu_ptx_sim_kernel_info
loadSIMTStack	src/abstract_hardware_model.cc	/^void core_t::loadSIMTStack(unsigned wid, simt_stack* loading_stack)$/;"	f	class:core_t
load_barrier	src/gpgpu-sim/shader.cc	/^barrier_set_t::load_barrier( unsigned cta_id, warp_set_t warps_mapped, warp_set_t warps_active, warp_set_t warps_at_barrier)$/;"	f	class:barrier_set_t
load_barrier	src/gpgpu-sim/shader.cc	/^shader_core_ctx::load_barrier(unsigned cta_id, warp_set_t warps_mapped, warp_set_t warps_active, warp_set_t warps_at_barrier)$/;"	f	class:shader_core_ctx
load_barrier_context	src/cuda-sim/cuda-sim.cc	/^SimulationInitializer::load_barrier_context( kernel_info_t& kernel,$/;"	f	class:SimulationInitializer
load_buffer_cams	src/gpuwattch/XML_Parse.h	/^	double load_buffer_cams;$/;"	m	struct:__anon15
load_buffer_reads	src/gpuwattch/XML_Parse.h	/^	double load_buffer_reads;$/;"	m	struct:__anon15
load_buffer_size	src/gpuwattch/XML_Parse.h	/^	int load_buffer_size;$/;"	m	struct:__anon15
load_buffer_writes	src/gpuwattch/XML_Parse.h	/^	double load_buffer_writes;$/;"	m	struct:__anon15
load_constants	launcher/simulator.cc	/^load_constants( symbol_table *symtab, addr_t min_gaddr, gpgpu_t *gpu ) $/;"	f	file:
load_context	common/cta_stat_context.cc	/^cta_stat_context_t::load_context(const cta_stat_context_t& to_load)$/;"	f	class:cta_stat_context_t
load_context	src/cuda-sim/cuda-sim.cc	/^SimulationInitializer::load_context(kernel_info_t& kernel,$/;"	f	class:SimulationInitializer
load_cta_stat_context	src/cuda-sim/cuda-sim.cc	/^SimulationInitializer::load_cta_stat_context(kernel_info_t& kernel,$/;"	f	class:SimulationInitializer
load_instructions	src/gpuwattch/XML_Parse.h	/^	double load_instructions;$/;"	m	struct:__anon15
load_per_pipeline_stage	src/gpuwattch/logic.h	/^	double load_per_pipeline_stage;$/;"	m	class:Pipeline
load_static_globals	launcher/simulator.cc	/^load_static_globals( symbol_table *symtab, unsigned min_gaddr, unsigned max_gaddr, gpgpu_t *gpu ) $/;"	f	file:
load_warp	src/gpgpu-sim/shader.cc	/^shader_core_ctx::load_warp(warp_context_t* ctx, unsigned hw_cta_id, unsigned hw_wid)$/;"	f	class:shader_core_ctx
load_warp_context	src/cuda-sim/cuda-sim.cc	/^SimulationInitializer::load_warp_context( kernel_info_t& kernel,$/;"	f	class:SimulationInitializer
load_warp_context	src/gpgpu-sim/shader.cc	/^shd_warp_t::load_warp_context(warp_context_t* loading_ctx, unsigned cta_id, unsigned wid)$/;"	f	class:shd_warp_t
localBPT	src/gpuwattch/core.h	/^	ArrayST * localBPT;$/;"	m	class:BranchPredictor
localCtrBits	src/gpuwattch/arch_const.h	/^const int localCtrBits=2;$/;"	v
localHistoryBits	src/gpuwattch/arch_const.h	/^const int localHistoryBits=11;$/;"	v
localHistoryTableSize	src/gpuwattch/arch_const.h	/^const int localHistoryTableSize=2048;$/;"	v
localPredictorSize	src/gpuwattch/arch_const.h	/^const int localPredictorSize=2048;$/;"	v
local_age_based	src/intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_based, hop_count_based, sequence_based, none };$/;"	e	enum:TrafficManager::ePriority
local_age_based	src/intersim2/vc.hpp	/^  enum ePrioType { local_age_based, queue_length_based, hop_count_based, none, other };$/;"	e	enum:VC::ePrioType
local_mask	src/gpgpu-sim/addrdec.h	/^   new_addr_type local_mask;$/;"	m	class:linear_to_raw_address_translation
local_mem_framesize	src/cuda-sim/ptx_ir.h	/^   unsigned local_mem_framesize() const $/;"	f	class:function_info
local_memory_lookup	src/cuda-sim/cuda-sim.cc	/^std::map<unsigned, std::map<unsigned,std::map<unsigned,memory_space*> > > SimulationInitializer::local_memory_lookup;$/;"	m	class:SimulationInitializer	file:
local_memory_lookup	src/cuda-sim/cuda-sim.h	/^  static std::map<unsigned, std::map<unsigned, std::map<unsigned,memory_space*> > > local_memory_lookup;$/;"	m	class:SimulationInitializer
local_memory_saved	src/cuda-sim/cuda-sim.cc	/^std::map<unsigned, std::map<unsigned, std::map<unsigned,memory_space*> > > SimulationInitializer::local_memory_saved;$/;"	m	class:SimulationInitializer	file:
local_memory_saved	src/cuda-sim/cuda-sim.h	/^  static std::map<unsigned, std::map<unsigned, std::map<unsigned, memory_space*> > > local_memory_saved;$/;"	m	class:SimulationInitializer
local_predictor_entries	src/gpuwattch/XML_Parse.h	/^	int local_predictor_entries;$/;"	m	struct:__anon9
local_predictor_size	src/gpuwattch/XML_Parse.h	/^	int local_predictor_size[20];$/;"	m	struct:__anon9
local_result	src/gpuwattch/array.h	/^  uca_org_t      local_result;$/;"	m	class:ArrayST
local_result	src/gpuwattch/interconnect.h	/^	uca_org_t local_result;$/;"	m	class:interconnect
local_result	src/gpuwattch/iocontrollers.h	/^    uca_org_t local_result;$/;"	m	class:FlashController
local_result	src/gpuwattch/iocontrollers.h	/^    uca_org_t local_result;$/;"	m	class:NIUController
local_result	src/gpuwattch/iocontrollers.h	/^    uca_org_t local_result;$/;"	m	class:PCIeController
local_result	src/gpuwattch/logic.h	/^	uca_org_t local_result;$/;"	m	class:Pipeline
local_result	src/gpuwattch/logic.h	/^	uca_org_t local_result;$/;"	m	class:dep_resource_conflict_check
local_result	src/gpuwattch/logic.h	/^	uca_org_t local_result;$/;"	m	class:inst_decoder
local_result	src/gpuwattch/logic.h	/^	uca_org_t local_result;$/;"	m	class:selection_logic
local_result	src/gpuwattch/memoryctrl.h	/^    uca_org_t local_result;$/;"	m	class:MCBackend
local_result	src/gpuwattch/memoryctrl.h	/^    uca_org_t local_result;$/;"	m	class:MCPHY
local_result	src/gpuwattch/noc.h	/^	uca_org_t local_result;$/;"	m	class:NoC
local_space	src/abstract_hardware_model.h	/^   local_space,$/;"	e	enum:_memory_space_t
local_to_generic	src/cuda-sim/cuda-sim.cc	/^addr_t local_to_generic( unsigned smid, unsigned hwtid, addr_t addr )$/;"	f
local_wires	src/gpuwattch/cacti/basic_circuit.h	/^    local_wires$/;"	e	enum:Wire_placement
location	src/debug.h	/^   std::string location() const$/;"	f	class:brk_pt
lock	src/ramulator_sim/Cache.h	/^    bool lock; \/\/ When the lock is on, the value is not valid yet.$/;"	m	struct:Cache::Line
log	src/gpgpu-sim/stat-tool.h	/^   void log(address_type pc, int warp_occ) {$/;"	f	class:insn_warp_occ_logger
log	src/gpgpu-sim/stat-tool.h	/^   void log(int pos) { m_curr_lin_hist.addsample(pos); }$/;"	f	class:linear_histogram_logger
log_two	src/intersim/misc_utils.cpp	/^int log_two( int x )$/;"	f
log_two	src/intersim2/misc_utils.cpp	/^int log_two( int x )$/;"	f
logic_scaling_co_eff	src/gpuwattch/cacti/parameter.h	/^    double logic_scaling_co_eff;$/;"	m	class:TechnologyParameter::ScalingFactor
logical_effort	src/gpuwattch/cacti/component.cc	/^int Component::logical_effort($/;"	f	class:Component
logs	src/ramulator_sim/StatType.h	/^  Counter logs;$/;"	m	class:Stats_Ram::Histogram
logtwo	src/gpuwattch/cacti/basic_circuit.cc	/^double logtwo (double x)$/;"	f
long_channel_leakage_reduction	src/gpuwattch/cacti/parameter.h	/^    double long_channel_leakage_reduction;$/;"	m	class:TechnologyParameter::DeviceType
long_channel_leakage_reduction	src/gpuwattch/cacti/parameter.h	/^    double long_channel_leakage_reduction;$/;"	m	class:TechnologyParameter::ScalingFactor
longer_channel_device	src/gpuwattch/XML_Parse.h	/^	bool longer_channel_device;$/;"	m	struct:__anon26
longer_channel_device_reduction	src/gpuwattch/basic_components.cc	/^double longer_channel_device_reduction($/;"	f
longer_channel_leakage	src/gpuwattch/cacti/cacti_interface.h	/^    double longer_channel_leakage;$/;"	m	class:powerComponents
longopregs	src/gpgpu-sim/scoreboard.h	/^    std::vector< std::set<unsigned> > longopregs;$/;"	m	class:Scoreboard
lookup	src/cuda-sim/ptx_ir.cc	/^symbol *symbol_table::lookup( const char *identifier ) $/;"	f	class:symbol_table
low	src/cuda-sim/ptx_sim.h	/^       unsigned int low;$/;"	m	struct:ptx_reg_t::__anon3
low_swing	src/gpuwattch/cacti/wire.cc	/^    Component Wire::low_swing;$/;"	m	class:Wire	file:
low_swing	src/gpuwattch/cacti/wire.h	/^    static Component low_swing;$/;"	m	class:Wire
low_swing_model	src/gpuwattch/cacti/wire.cc	/^Wire::low_swing_model()$/;"	f	class:Wire
lower_cache	src/ramulator_sim/Cache.h	/^  Cache* lower_cache;$/;"	m	class:Cache
lowest	src/cuda-sim/ptx_sim.h	/^       unsigned int lowest;$/;"	m	struct:ptx_reg_t::__anon3
lpEndTag	src/gpuwattch/xmlParser.cc	/^    XMLCSTR                lpEndTag;$/;"	m	struct:XML	file:
lpNewElement	src/gpuwattch/xmlParser.cc	/^    XMLCSTR                lpNewElement;$/;"	m	struct:XML	file:
lpXML	src/gpuwattch/xmlParser.cc	/^    XMLCSTR                lpXML;$/;"	m	struct:XML	file:
lp_dram	src/gpuwattch/cacti/const.h	/^  lp_dram   = 3,$/;"	e	enum:ram_cell_tech_type_num
lpszClose	src/gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR lpszOpen; int openTagLen; XMLCSTR lpszClose;} ALLXMLClearTag;$/;"	m	struct:__anon6	file:
lpszCloseTag	src/gpuwattch/xmlParser.h	/^    XMLCSTR lpszValue; XMLCSTR lpszOpenTag; XMLCSTR lpszCloseTag;$/;"	m	struct:XMLClear
lpszName	src/gpuwattch/xmlParser.h	/^          XMLCSTR                lpszName;        \/\/ Element name (=NULL if root)$/;"	m	struct:XMLNode::XMLNodeDataTag
lpszName	src/gpuwattch/xmlParser.h	/^    XMLCSTR lpszName; XMLCSTR lpszValue;$/;"	m	struct:XMLAttribute
lpszOpen	src/gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR lpszOpen; int openTagLen; XMLCSTR lpszClose;} ALLXMLClearTag;$/;"	m	struct:__anon6	file:
lpszOpenTag	src/gpuwattch/xmlParser.h	/^    XMLCSTR lpszValue; XMLCSTR lpszOpenTag; XMLCSTR lpszCloseTag;$/;"	m	struct:XMLClear
lpszText	src/gpuwattch/xmlParser.cc	/^    XMLCSTR                lpszText;$/;"	m	struct:XML	file:
lpszValue	src/gpuwattch/xmlParser.h	/^    XMLCSTR lpszName; XMLCSTR lpszValue;$/;"	m	struct:XMLAttribute
lpszValue	src/gpuwattch/xmlParser.h	/^    XMLCSTR lpszValue; XMLCSTR lpszOpenTag; XMLCSTR lpszCloseTag;$/;"	m	struct:XMLClear
lrand	src/ramulator_sim/Memory.h	/^    long lrand(void) {$/;"	f	class:Memory
lrr_scheduler	src/gpgpu-sim/shader.h	/^	lrr_scheduler ( shader_core_stats* stats, shader_core_ctx* shader,$/;"	f	class:lrr_scheduler
lrr_scheduler	src/gpgpu-sim/shader.h	/^class lrr_scheduler : public scheduler_unit {$/;"	c
ls	src/cuda-sim/ptx_sim.h	/^      unsigned ls;$/;"	m	struct:ptx_reg_t::__anon2
lsq_height	src/gpuwattch/core.h	/^	double lsq_height;$/;"	m	class:EXECU
lsq_height	src/gpuwattch/core.h	/^	double lsq_height;$/;"	m	class:LoadStoreU
lsqassoc	src/gpuwattch/arch_const.h	/^const int lsqassoc=0;$/;"	v
lsqblocksize	src/gpuwattch/arch_const.h	/^const int lsqblocksize=8;$/;"	v
lsqsize	src/gpuwattch/arch_const.h	/^const int lsqsize=512;$/;"	v
lsu	src/gpuwattch/core.h	/^	LoadStoreU * lsu;$/;"	m	class:Core
lt	src/gpuwattch/cacti/cacti_interface.cc	/^bool mem_array::lt(const mem_array * m1, const mem_array * m2)$/;"	f	class:mem_array
m_BlockDim	common/kernel_config.h	/^  dim3 m_BlockDim;$/;"	m	class:kernel_config
m_GridDim	common/kernel_config.h	/^  dim3 m_GridDim;$/;"	m	class:kernel_config
m_L1C	src/gpgpu-sim/shader.h	/^   read_only_cache *m_L1C; \/\/ constant cache$/;"	m	class:ldst_unit
m_L1C_config	src/gpgpu-sim/shader.h	/^    mutable cache_config m_L1C_config;$/;"	m	struct:shader_core_config
m_L1D	src/gpgpu-sim/shader.h	/^   l1_cache *m_L1D; \/\/ data cache$/;"	m	class:ldst_unit
m_L1D_config	src/gpgpu-sim/shader.h	/^    mutable l1d_cache_config m_L1D_config;$/;"	m	struct:shader_core_config
m_L1I	src/gpgpu-sim/shader.h	/^    read_only_cache *m_L1I; \/\/ instruction cache$/;"	m	class:shader_core_ctx
m_L1I_config	src/gpgpu-sim/shader.h	/^    mutable cache_config m_L1I_config;$/;"	m	struct:shader_core_config
m_L1T	src/gpgpu-sim/shader.h	/^   tex_cache *m_L1T; \/\/ texture cache$/;"	m	class:ldst_unit
m_L1T_config	src/gpgpu-sim/shader.h	/^    mutable cache_config m_L1T_config;$/;"	m	struct:shader_core_config
m_L2_config	src/gpgpu-sim/gpu-sim.h	/^   mutable l2_cache_config m_L2_config;$/;"	m	struct:memory_config
m_L2_dram_queue	src/gpgpu-sim/l2cache.h	/^   fifo_pipeline<mem_fetch> *m_L2_dram_queue;$/;"	m	class:memory_sub_partition
m_L2_icnt_queue	src/gpgpu-sim/l2cache.h	/^   fifo_pipeline<mem_fetch> *m_L2_icnt_queue; \/\/ L2 cache hit response queue$/;"	m	class:memory_sub_partition
m_L2_texure_only	src/gpgpu-sim/gpu-sim.h	/^   bool m_L2_texure_only;$/;"	m	struct:memory_config
m_L2cache	src/gpgpu-sim/l2cache.h	/^   class l2_cache *m_L2cache;$/;"	m	class:memory_sub_partition	typeref:class:memory_sub_partition::l2_cache
m_L2interface	src/gpgpu-sim/l2cache.h	/^   class L2interface *m_L2interface;$/;"	m	class:memory_sub_partition	typeref:class:memory_sub_partition::L2interface
m_NPC	src/cuda-sim/ptx_sim.h	/^   unsigned m_NPC;$/;"	m	class:ptx_thread_info
m_NameToTextureRef	src/abstract_hardware_model.h	/^    std::map<std::string, const struct textureReference*> m_NameToTextureRef;$/;"	m	class:gpgpu_t
m_PC	src/cuda-sim/ptx_ir.h	/^   addr_t            m_PC;$/;"	m	class:ptx_instruction
m_PC	src/cuda-sim/ptx_sim.h	/^   unsigned       m_PC;$/;"	m	struct:stack_entry
m_PC	src/cuda-sim/ptx_sim.h	/^   unsigned m_PC;$/;"	m	class:ptx_thread_info
m_RPC	src/cuda-sim/ptx_sim.h	/^   unsigned       m_RPC;$/;"	m	struct:stack_entry
m_RPC	src/cuda-sim/ptx_sim.h	/^   unsigned m_RPC;$/;"	m	class:ptx_thread_info
m_RPC_updated	src/cuda-sim/ptx_sim.h	/^   bool m_RPC_updated;$/;"	m	class:ptx_thread_info
m_TextureRefToAttribute	src/abstract_hardware_model.h	/^    std::map<const struct textureReference*, const struct textureReferenceAttr*> m_TextureRefToAttribute;$/;"	m	class:gpgpu_t
m_TextureRefToCudaArray	src/abstract_hardware_model.h	/^    std::map<const struct textureReference*,const struct cudaArray*> m_TextureRefToCudaArray;$/;"	m	class:gpgpu_t
m_TextureRefToTexureInfo	src/abstract_hardware_model.h	/^    std::map<const struct textureReference*, const struct textureInfo*> m_TextureRefToTexureInfo;$/;"	m	class:gpgpu_t
m_abs	src/cuda-sim/ptx_ir.h	/^   bool                m_abs;$/;"	m	class:ptx_instruction
m_access	src/gpgpu-sim/gpu-cache.h	/^    unsigned m_access;$/;"	m	class:tag_array
m_access	src/gpgpu-sim/mem_fetch.h	/^   mem_access_t m_access;$/;"	m	class:mem_fetch
m_accessq	src/abstract_hardware_model.h	/^    std::list<mem_access_t> m_accessq;$/;"	m	class:warp_inst_t
m_active	src/gpgpu-sim/shader.h	/^   bool m_active; $/;"	m	class:thread_ctx_t
m_active_fu_lanes	src/gpgpu-sim/shader.h	/^    unsigned *m_active_fu_lanes;$/;"	m	struct:shader_core_stats_pod
m_active_fu_mem_lanes	src/gpgpu-sim/shader.h	/^    unsigned *m_active_fu_mem_lanes;$/;"	m	struct:shader_core_stats_pod
m_active_mask	src/abstract_hardware_model.h	/^        simt_mask_t m_active_mask;$/;"	m	struct:simt_stack::simt_stack_entry
m_active_sfu_lanes	src/gpgpu-sim/power_stat.h	/^    unsigned *m_active_sfu_lanes[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_active_sfu_lanes	src/gpgpu-sim/shader.h	/^    unsigned *m_active_sfu_lanes;$/;"	m	struct:shader_core_stats_pod
m_active_sms	src/gpgpu-sim/power_stat.h	/^   float * m_active_sms;$/;"	m	class:power_stat_t
m_active_sp_lanes	src/gpgpu-sim/power_stat.h	/^    unsigned *m_active_sp_lanes[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_active_sp_lanes	src/gpgpu-sim/shader.h	/^    unsigned *m_active_sp_lanes;$/;"	m	struct:shader_core_stats_pod
m_active_threads	common/kernel_info_t.h	/^   std::list<class ptx_thread_info *> m_active_threads;$/;"	m	class:kernel_info_t
m_active_threads	common/shd_warp_t.h	/^    std::bitset<MAX_WARP_SIZE> m_active_threads;$/;"	m	class:shd_warp_t
m_active_threads	common/warp_context.h	/^    std::bitset<MAX_WARP_SIZE> m_active_threads;$/;"	m	class:warp_context_t
m_active_threads	src/gpgpu-sim/shader.h	/^    std::bitset<MAX_THREAD_PER_SM> m_active_threads;$/;"	m	class:shader_core_ctx
m_addr	src/abstract_hardware_model.h	/^   new_addr_type m_addr;     \/\/ request address$/;"	m	class:mem_access_t
m_addr	src/debug.h	/^   unsigned     m_addr;$/;"	m	class:brk_pt
m_addr_offset	src/cuda-sim/ptx_ir.h	/^   int m_addr_offset;$/;"	m	class:operand_info
m_addr_space	src/cuda-sim/ptx_ir.h	/^   enum _memory_space_t m_addr_space;$/;"	m	class:operand_info	typeref:enum:operand_info::_memory_space_t
m_address	src/cuda-sim/ptx_ir.h	/^   unsigned m_address;$/;"	m	class:symbol
m_address_mapping	src/gpgpu-sim/gpu-cache.h	/^	linear_to_raw_address_translation *m_address_mapping;$/;"	m	class:l2_cache_config
m_address_mapping	src/gpgpu-sim/gpu-sim.h	/^   linear_to_raw_address_translation m_address_mapping;$/;"	m	struct:memory_config
m_address_valid	src/cuda-sim/ptx_ir.h	/^   bool m_address_valid;$/;"	m	class:symbol
m_alignment_spec	src/cuda-sim/ptx_ir.h	/^   int m_alignment_spec;$/;"	m	class:type_info_key
m_alloc_policy	src/gpgpu-sim/gpu-cache.h	/^    enum allocation_policy_t m_alloc_policy;        \/\/ 'm' = allocate on miss, 'f' = allocate on fill$/;"	m	class:cache_config	typeref:enum:cache_config::allocation_policy_t
m_alloc_time	src/gpgpu-sim/gpu-cache.h	/^    unsigned         m_alloc_time;$/;"	m	struct:cache_block_t
m_allocated_bank	src/gpgpu-sim/shader.h	/^      allocation_t *m_allocated_bank; \/\/ bank # -> register that wins$/;"	m	class:opndcoll_rfu_t::arbiter_t
m_allocation	src/gpgpu-sim/shader.h	/^      enum alloc_t m_allocation;$/;"	m	class:opndcoll_rfu_t::allocation_t	typeref:enum:opndcoll_rfu_t::allocation_t::alloc_t
m_allocator_rr_head	src/gpgpu-sim/shader.h	/^      unsigned *m_allocator_rr_head; \/\/ cu # -> next bank to check for request (rr-arb)$/;"	m	class:opndcoll_rfu_t::arbiter_t
m_arbiter	src/gpgpu-sim/shader.h	/^   arbiter_t m_arbiter;$/;"	m	class:opndcoll_rfu_t
m_arbitration_metadata	src/gpgpu-sim/l2cache.h	/^   arbitration_metadata m_arbitration_metadata; $/;"	m	class:memory_partition_unit
m_arch_reg_num	src/cuda-sim/ptx_ir.h	/^   unsigned m_arch_reg_num; $/;"	m	class:symbol
m_args	common/kernel_config.h	/^  gpgpu_ptx_sim_arg_list_t m_args;$/;"	m	class:kernel_config
m_args	src/cuda-sim/ptx_ir.h	/^   std::vector<const symbol*> m_args;$/;"	m	class:function_info
m_array_dim	src/cuda-sim/ptx_ir.h	/^   int m_array_dim;$/;"	m	class:type_info_key
m_assembled	src/cuda-sim/ptx_ir.h	/^   bool m_assembled;$/;"	m	class:function_info
m_assoc	src/gpgpu-sim/gpu-cache.h	/^    unsigned m_assoc;$/;"	m	class:cache_config
m_at_barrier	src/cuda-sim/ptx_sim.h	/^   bool m_at_barrier;$/;"	m	class:ptx_thread_info
m_atomic_spec	src/cuda-sim/ptx_ir.h	/^   int m_atomic_spec;$/;"	m	class:ptx_instruction
m_average_pipeline_duty_cycle	src/gpgpu-sim/power_stat.h	/^   float * m_average_pipeline_duty_cycle;$/;"	m	class:power_stat_t
m_back_edges	src/cuda-sim/ptx_ir.h	/^   std::list<std::pair<unsigned, unsigned> > m_back_edges;$/;"	m	class:function_info
m_bandwidth_management	src/gpgpu-sim/gpu-cache.h	/^    bandwidth_management m_bandwidth_management;$/;"	m	class:baseline_cache
m_bank	src/abstract_hardware_model.h	/^   unsigned m_bank; \/\/ n in ".const[n]"; note .const == .const[0] (see PTX 2.1 manual, sec. 5.1.3)$/;"	m	class:memory_space_t
m_bank	src/gpgpu-sim/shader.h	/^      unsigned  m_bank;$/;"	m	class:opndcoll_rfu_t::op_t
m_bank_warp_shift	src/gpgpu-sim/shader.h	/^      unsigned m_bank_warp_shift;$/;"	m	class:opndcoll_rfu_t::collector_unit_t
m_bank_warp_shift	src/gpgpu-sim/shader.h	/^   unsigned m_bank_warp_shift;$/;"	m	class:opndcoll_rfu_t
m_barrier_num	src/cuda-sim/ptx_sim.h	/^   int m_barrier_num;$/;"	m	class:ptx_thread_info
m_barriers	src/gpgpu-sim/shader.h	/^    barrier_set_t             m_barriers;$/;"	m	class:shader_core_ctx
m_basic_block	src/cuda-sim/ptx_ir.h	/^   basic_block_t        *m_basic_block;$/;"	m	class:ptx_instruction
m_basic_blocks	src/cuda-sim/ptx_ir.h	/^   std::vector<basic_block_t*> m_basic_blocks;$/;"	m	class:function_info
m_bin_cnts	src/gpgpu-sim/histogram.h	/^   int *m_bin_cnts;    \/\/ counters$/;"	m	class:binned_histogram
m_bins	src/gpgpu-sim/histogram.h	/^   int *m_bins;        \/\/ bin boundaries$/;"	m	class:binned_histogram
m_block_addr	src/gpgpu-sim/gpu-cache.h	/^        new_addr_type m_block_addr;$/;"	m	struct:baseline_cache::extra_mf_fields
m_block_addr	src/gpgpu-sim/gpu-cache.h	/^        new_addr_type m_block_addr;$/;"	m	struct:tex_cache::data_block
m_block_addr	src/gpgpu-sim/gpu-cache.h	/^        new_addr_type m_block_addr;$/;"	m	struct:tex_cache::rob_entry
m_block_addr	src/gpgpu-sim/gpu-cache.h	/^    new_addr_type    m_block_addr;$/;"	m	struct:cache_block_t
m_block_dim	common/kernel_info_t.h	/^   dim3 m_block_dim;$/;"	m	class:kernel_info_t
m_blocking	common/cu_event_st.h	/^   bool m_blocking;$/;"	m	class:CUevent_st
m_branch_div_cycle	src/abstract_hardware_model.h	/^        unsigned long long m_branch_div_cycle;$/;"	m	struct:simt_stack::simt_stack_entry
m_branch_taken	src/cuda-sim/ptx_sim.h	/^   bool        m_branch_taken;$/;"	m	class:ptx_thread_info
m_breakaddrs	src/cuda-sim/ptx_sim.h	/^   std::stack<class operand_info> m_breakaddrs;$/;"	m	class:ptx_thread_info
m_bufferObj	libcuda/cuda_runtime_api.cc	/^	GLuint m_bufferObj;$/;"	m	struct:glbmap_entry	file:
m_byte_mask	src/abstract_hardware_model.h	/^   mem_access_byte_mask_t m_byte_mask;$/;"	m	class:mem_access_t
m_cache	src/gpgpu-sim/gpu-cache.h	/^    data_block             *m_cache;$/;"	m	class:tex_cache
m_cache_data_port_busy_cycles	src/gpgpu-sim/gpu-cache.h	/^    unsigned long long m_cache_data_port_busy_cycles; $/;"	m	class:cache_stats
m_cache_fill_port_busy_cycles	src/gpgpu-sim/gpu-cache.h	/^    unsigned long long m_cache_fill_port_busy_cycles; $/;"	m	class:cache_stats
m_cache_hit	src/abstract_hardware_model.h	/^    bool m_cache_hit;$/;"	m	class:warp_inst_t
m_cache_index	src/gpgpu-sim/gpu-cache.h	/^        unsigned   m_cache_index; \/\/ where to look for data$/;"	m	struct:tex_cache::fragment_entry
m_cache_index	src/gpgpu-sim/gpu-cache.h	/^        unsigned m_cache_index;$/;"	m	struct:baseline_cache::extra_mf_fields
m_cache_option	src/cuda-sim/ptx_ir.h	/^   unsigned            m_cache_option;$/;"	m	class:ptx_instruction
m_cache_port_available_cycles	src/gpgpu-sim/gpu-cache.h	/^    unsigned long long m_cache_port_available_cycles; $/;"	m	class:cache_stats
m_cache_type	src/gpgpu-sim/gpu-cache.h	/^    enum CacheType m_cache_type;$/;"	m	class:baseline_cache	typeref:enum:baseline_cache::CacheType
m_call_uid	src/cuda-sim/ptx_sim.h	/^   unsigned       m_call_uid;$/;"	m	struct:stack_entry
m_calldepth	src/abstract_hardware_model.h	/^        unsigned int m_calldepth;$/;"	m	struct:simt_stack::simt_stack_entry
m_callstack	src/cuda-sim/ptx_sim.h	/^   std::list<stack_entry> m_callstack;$/;"	m	class:ptx_thread_info
m_cluster	src/gpgpu-sim/gpu-sim.h	/^   class simt_core_cluster **m_cluster;$/;"	m	class:gpgpu_sim	typeref:class:gpgpu_sim::simt_core_cluster
m_cluster	src/gpgpu-sim/shader.h	/^    class simt_core_cluster *m_cluster;$/;"	m	class:shader_core_ctx	typeref:class:shader_core_ctx::simt_core_cluster
m_cluster	src/gpgpu-sim/shader.h	/^    simt_core_cluster *m_cluster;$/;"	m	class:perfect_memory_interface
m_cluster	src/gpgpu-sim/shader.h	/^    simt_core_cluster *m_cluster;$/;"	m	class:shader_memory_interface
m_cluster_id	src/gpgpu-sim/shader.h	/^    unsigned m_cluster_id;$/;"	m	class:shader_core_mem_fetch_allocator
m_cluster_id	src/gpgpu-sim/shader.h	/^    unsigned m_cluster_id;$/;"	m	class:simt_core_cluster
m_cnt	src/stream_manager.h	/^    size_t      m_cnt;$/;"	m	class:stream_operation
m_code	launcher/simulator.h	/^    std::map<unsigned,symbol_table*> m_code; \/\/ fat binary handle => global symbol table$/;"	m	struct:Simulator::CUctx_st
m_collector_units	src/gpgpu-sim/shader.h	/^      std::vector<collector_unit_t>* m_collector_units;$/;"	m	class:opndcoll_rfu_t::dispatch_unit_t
m_compare_op	src/cuda-sim/ptx_ir.h	/^   unsigned            m_compare_op;$/;"	m	class:ptx_instruction
m_config	src/abstract_hardware_model.h	/^    const core_config *m_config; $/;"	m	class:warp_inst_t
m_config	src/gpgpu-sim/gpu-cache.h	/^        const cache_config &m_config; $/;"	m	class:baseline_cache::bandwidth_management
m_config	src/gpgpu-sim/gpu-cache.h	/^    cache_config &m_config;$/;"	m	class:baseline_cache
m_config	src/gpgpu-sim/gpu-cache.h	/^    cache_config &m_config;$/;"	m	class:tag_array
m_config	src/gpgpu-sim/gpu-cache.h	/^    const cache_config &m_config;$/;"	m	class:tex_cache
m_config	src/gpgpu-sim/gpu-sim.h	/^   const gpgpu_sim_config &m_config;$/;"	m	class:gpgpu_sim
m_config	src/gpgpu-sim/l2cache.h	/^   const struct memory_config *m_config;$/;"	m	class:memory_partition_unit	typeref:struct:memory_partition_unit::memory_config
m_config	src/gpgpu-sim/l2cache.h	/^   const struct memory_config *m_config;$/;"	m	class:memory_sub_partition	typeref:struct:memory_sub_partition::memory_config
m_config	src/gpgpu-sim/power_stat.h	/^   const memory_config *m_config;$/;"	m	class:power_mem_stat_t
m_config	src/gpgpu-sim/power_stat.h	/^   const shader_core_config *m_config;$/;"	m	class:power_core_stat_t
m_config	src/gpgpu-sim/power_stat.h	/^   const shader_core_config *m_config;$/;"	m	class:power_stat_t
m_config	src/gpgpu-sim/shader.h	/^    const shader_core_config *m_config;$/;"	m	class:shader_core_ctx
m_config	src/gpgpu-sim/shader.h	/^    const shader_core_config *m_config;$/;"	m	class:shader_core_stats
m_config	src/gpgpu-sim/shader.h	/^    const shader_core_config *m_config;$/;"	m	class:simd_function_unit
m_config	src/gpgpu-sim/shader.h	/^    const shader_core_config *m_config;$/;"	m	class:simt_core_cluster
m_config_string	src/gpgpu-sim/gpu-cache.h	/^    char *m_config_string;$/;"	m	class:cache_config
m_config_stringPrefL1	src/gpgpu-sim/gpu-cache.h	/^    char *m_config_stringPrefL1;$/;"	m	class:cache_config
m_config_stringPrefShared	src/gpgpu-sim/gpu-cache.h	/^    char *m_config_stringPrefShared;$/;"	m	class:cache_config
m_const_mem_offset	src/cuda-sim/ptx_ir.h	/^   addr_t m_const_mem_offset;$/;"	m	class:operand_info
m_const_next	src/cuda-sim/ptx_ir.h	/^   unsigned m_const_next;$/;"	m	class:symbol_table
m_consts	src/cuda-sim/ptx_ir.h	/^   std::list<symbol*> m_consts;$/;"	m	class:symbol_table
m_core	src/cuda-sim/ptx_sim.h	/^   core_t *m_core;$/;"	m	class:ptx_thread_info
m_core	src/gpgpu-sim/shader.h	/^    class shader_core_ctx *m_core;$/;"	m	class:pipelined_simd_unit	typeref:class:pipelined_simd_unit::shader_core_ctx
m_core	src/gpgpu-sim/shader.h	/^    shader_core_ctx **m_core;$/;"	m	class:simt_core_cluster
m_core	src/gpgpu-sim/shader.h	/^    shader_core_ctx *m_core;$/;"	m	class:perfect_memory_interface
m_core	src/gpgpu-sim/shader.h	/^    shader_core_ctx *m_core;$/;"	m	class:shader_memory_interface
m_core	src/gpgpu-sim/shader.h	/^   class shader_core_ctx *m_core;$/;"	m	class:ldst_unit	typeref:class:ldst_unit::shader_core_ctx
m_core_config	src/gpgpu-sim/power_stat.h	/^   const shader_core_config *m_core_config;$/;"	m	class:power_mem_stat_t
m_core_id	src/gpgpu-sim/gpu-cache.h	/^    int m_core_id; \/\/ which shader core is using this$/;"	m	class:tag_array
m_core_id	src/gpgpu-sim/shader.h	/^    unsigned m_core_id;$/;"	m	class:shader_core_mem_fetch_allocator
m_core_sim_order	src/gpgpu-sim/shader.h	/^    std::list<unsigned> m_core_sim_order;$/;"	m	class:simt_core_cluster
m_core_stats	src/gpgpu-sim/power_stat.h	/^   shader_core_stats * m_core_stats;$/;"	m	class:power_core_stat_t
m_core_stats	src/gpgpu-sim/power_stat.h	/^   shader_core_stats * m_core_stats;$/;"	m	class:power_mem_stat_t
m_cta_avg_cycle	common/kernel_info_t.h	/^   double m_cta_avg_cycle;$/;"	m	class:kernel_info_t
m_cta_id	common/shd_warp_t.h	/^    unsigned m_cta_id;$/;"	m	class:shd_warp_t
m_cta_id	src/gpgpu-sim/shader.h	/^   unsigned m_cta_id; \/\/ hardware CTA this thread belongs$/;"	m	class:thread_ctx_t
m_cta_info	src/cuda-sim/ptx_sim.h	/^   ptx_cta_info   *m_cta_info;$/;"	m	class:ptx_thread_info
m_cta_issue_next_core	src/gpgpu-sim/shader.h	/^    unsigned m_cta_issue_next_core;$/;"	m	class:simt_core_cluster
m_cta_num_insts	common/kernel_info_t.h	/^   unsigned long long m_cta_num_insts;$/;"	m	class:kernel_info_t
m_cta_statistics	common/kernel_info_t.h	/^   std::vector<std::vector<cta_stat_context_t> > m_cta_statistics;$/;"	m	class:kernel_info_t
m_cta_status	src/gpgpu-sim/shader.h	/^    unsigned m_cta_status[MAX_CTA_PER_SHADER]; \/\/ CTAs status $/;"	m	class:shader_core_ctx
m_cta_to_warps	src/gpgpu-sim/shader.h	/^   cta_to_warp_t m_cta_to_warps; $/;"	m	class:barrier_set_t
m_ctaid	src/cuda-sim/ptx_sim.h	/^   dim3   m_ctaid;$/;"	m	class:ptx_thread_info
m_ctrl_size	src/gpgpu-sim/mem_fetch.h	/^   unsigned m_ctrl_size; \/\/ how big would all this meta data be in hardware (does not necessarily match actual size of mem_fetch)$/;"	m	class:mem_fetch
m_cu	src/gpgpu-sim/shader.h	/^      collector_unit_t  *m_cu; $/;"	m	class:opndcoll_rfu_t::op_t
m_cu	src/gpgpu-sim/shader.h	/^   std::vector<collector_unit_t *> m_cu;$/;"	m	class:opndcoll_rfu_t
m_cu_sets	src/gpgpu-sim/shader.h	/^       uint_vector_t m_cu_sets;$/;"	m	class:opndcoll_rfu_t::input_port_t
m_cuda_launch_blocking	src/stream_manager.h	/^    bool m_cuda_launch_blocking;$/;"	m	class:stream_manager
m_cuda_properties	src/gpgpu-sim/gpu-sim.h	/^   const struct cudaDeviceProp     *m_cuda_properties;$/;"	m	class:gpgpu_sim	typeref:struct:gpgpu_sim::cudaDeviceProp
m_cuid	src/gpgpu-sim/shader.h	/^      unsigned m_cuid; \/\/ collector unit hw id$/;"	m	class:opndcoll_rfu_t::collector_unit_t
m_curr_lin_hist	src/gpgpu-sim/stat-tool.h	/^   linear_histogram_snapshot m_curr_lin_hist;$/;"	m	class:linear_histogram_logger
m_current_response	src/gpgpu-sim/gpu-cache.h	/^    std::list<new_addr_type> m_current_response;$/;"	m	class:mshr_table
m_current_response_ready	src/gpgpu-sim/gpu-cache.h	/^    bool m_current_response_ready;$/;"	m	class:mshr_table
m_cus	src/gpgpu-sim/shader.h	/^   cu_sets_t m_cus;$/;"	m	class:opndcoll_rfu_t
m_cycle	src/gpgpu-sim/stat-tool.h	/^   unsigned long long  m_cycle;$/;"	m	class:linear_histogram_logger
m_cycle	src/gpgpu-sim/stat-tool.h	/^   unsigned long long  m_cycle;$/;"	m	class:linear_histogram_snapshot
m_cycle	src/gpgpu-sim/stat-tool.h	/^   unsigned long long  m_cycle;$/;"	m	class:thread_CFlocality
m_cycle	src/gpgpu-sim/stat-tool.h	/^   unsigned long long  m_cycle;$/;"	m	class:thread_insn_span
m_cycle_done	src/cuda-sim/ptx_sim.h	/^   unsigned m_cycle_done;$/;"	m	class:ptx_thread_info
m_data	src/cuda-sim/memory.h	/^   map_t m_data;$/;"	m	class:memory_space_impl
m_data	src/cuda-sim/memory.h	/^   unsigned char *m_data;$/;"	m	class:mem_storage
m_data	src/gpgpu-sim/delayqueue.h	/^   T *m_data;$/;"	m	struct:fifo_data
m_data	src/gpgpu-sim/gpu-cache.h	/^        T         *m_data;$/;"	m	class:tex_cache::fifo
m_data	src/gpgpu-sim/gpu-cache.h	/^    table m_data;$/;"	m	class:mshr_table
m_data_port_occupied_cycles	src/gpgpu-sim/gpu-cache.h	/^        int m_data_port_occupied_cycles; \/\/< Number of cycle that the data port remains used $/;"	m	class:baseline_cache::bandwidth_management
m_data_port_width	src/gpgpu-sim/gpu-cache.h	/^    unsigned m_data_port_width; \/\/< number of byte the cache can access per cycle $/;"	m	class:cache_config
m_data_size	src/gpgpu-sim/gpu-cache.h	/^        unsigned   m_data_size;$/;"	m	struct:tex_cache::fragment_entry
m_data_size	src/gpgpu-sim/gpu-cache.h	/^        unsigned m_data_size;$/;"	m	struct:baseline_cache::extra_mf_fields
m_data_size	src/gpgpu-sim/mem_fetch.h	/^   unsigned m_data_size; \/\/ how much data is being written$/;"	m	class:mem_fetch
m_debug_trace_regs_modified	src/cuda-sim/ptx_sim.h	/^   std::list<reg_map_t> m_debug_trace_regs_modified;$/;"	m	class:ptx_thread_info
m_debug_trace_regs_read	src/cuda-sim/ptx_sim.h	/^   std::list<reg_map_t> m_debug_trace_regs_read;$/;"	m	class:ptx_thread_info
m_decl_location	src/cuda-sim/ptx_ir.h	/^   std::string m_decl_location;$/;"	m	class:symbol
m_decoded	src/abstract_hardware_model.h	/^    bool m_decoded;$/;"	m	class:inst_t
m_devPtr	libcuda/cuda_runtime_api.cc	/^	void *m_devPtr;$/;"	m	struct:glbmap_entry	file:
m_dev_malloc	src/abstract_hardware_model.h	/^    unsigned long long m_dev_malloc;$/;"	m	class:gpgpu_t
m_device_address_dst	src/stream_manager.h	/^    size_t      m_device_address_dst;$/;"	m	class:stream_operation
m_device_address_src	src/stream_manager.h	/^    size_t      m_device_address_src;$/;"	m	class:stream_operation
m_dim	src/abstract_hardware_model.h	/^    int m_dim; $/;"	m	struct:textureReferenceAttr
m_disabled	src/gpgpu-sim/gpu-cache.h	/^    bool m_disabled;$/;"	m	class:cache_config
m_dispatch_port	src/gpgpu-sim/shader.h	/^    std::vector<pipeline_stage_name_t> m_dispatch_port;$/;"	m	class:shader_core_ctx
m_dispatch_reg	src/gpgpu-sim/shader.h	/^    warp_inst_t *m_dispatch_reg;$/;"	m	class:simd_function_unit
m_dispatch_units	src/gpgpu-sim/shader.h	/^   std::vector<dispatch_unit_t> m_dispatch_units;$/;"	m	class:opndcoll_rfu_t
m_done	common/cu_event_st.h	/^   bool m_done;$/;"	m	class:CUevent_st
m_done	src/stream_manager.h	/^    bool m_done;$/;"	m	class:stream_operation
m_done_exit	common/shd_warp_t.h	/^    bool m_done_exit; \/\/ true once thread exit has been registered for threads in this warp$/;"	m	class:shd_warp_t
m_done_exit	common/warp_context.h	/^    bool m_done_exit; \/\/ true once thread exit has been registered for threads in this warp$/;"	m	class:warp_context_t
m_double	src/cuda-sim/ptx_ir.h	/^      double          m_double;$/;"	m	union:operand_info::__anon4
m_double_operand_type	src/cuda-sim/ptx_ir.h	/^   int m_double_operand_type;$/;"	m	class:operand_info
m_dram_L2_queue	src/gpgpu-sim/l2cache.h	/^   fifo_pipeline<mem_fetch> *m_dram_L2_queue;$/;"	m	class:memory_sub_partition
m_dram_latency_queue	src/gpgpu-sim/l2cache.h	/^   std::list<dram_delay_t> m_dram_latency_queue;$/;"	m	class:memory_partition_unit
m_dram_r	src/gpgpu-sim/l2cache.h	/^	class GpuWrapper *m_dram_r;$/;"	m	class:memory_partition_unit	typeref:class:memory_partition_unit::GpuWrapper
m_dst	src/cuda-sim/ptx_ir.h	/^   const symbol *m_dst;$/;"	m	class:arg_buffer_t
m_dynamic_warp_id	common/shd_warp_t.h	/^    unsigned m_dynamic_warp_id;$/;"	m	class:shd_warp_t
m_dynamic_warp_id	common/warp_context.h	/^    unsigned m_dynamic_warp_id;$/;"	m	class:warp_context_t
m_dynamic_warp_id	src/abstract_hardware_model.h	/^    unsigned m_dynamic_warp_id; $/;"	m	class:warp_inst_t
m_dynamic_warp_id	src/gpgpu-sim/shader.h	/^    unsigned m_dynamic_warp_id;$/;"	m	class:shader_core_ctx
m_empty	src/abstract_hardware_model.h	/^    mutable bool m_empty; \/\/ making this mutable is a hack to flush instructions$/;"	m	class:warp_inst_t
m_enable_debug_trace	src/cuda-sim/ptx_sim.h	/^   bool m_enable_debug_trace;$/;"	m	class:ptx_thread_info
m_entry_point	src/cuda-sim/ptx_ir.h	/^   bool m_entry_point;$/;"	m	class:function_info
m_event	src/stream_manager.h	/^    class CUevent_st *m_event;$/;"	m	class:stream_operation	typeref:class:stream_operation::CUevent_st
m_executed_cycles	common/cta_stat_context.h	/^      unsigned long long m_executed_cycles;$/;"	m	union:cta_stat_context_t::__anon34
m_executed_insts	common/cta_stat_context.h	/^    unsigned long long m_executed_insts;$/;"	m	class:cta_stat_context_t
m_executing_kernels	src/gpgpu-sim/gpu-sim.h	/^   std::set<kernel_info_t*> m_executing_kernels;$/;"	m	class:gpgpu_sim
m_exit	src/cuda-sim/ptx_ir.h	/^   bool                m_exit;$/;"	m	class:ptx_instruction
m_experimental_lib_support	src/abstract_hardware_model.h	/^    int m_experimental_lib_support;$/;"	m	class:gpgpu_functional_sim_config
m_ext	src/abstract_hardware_model.h	/^    int m_ext; $/;"	m	struct:textureReferenceAttr
m_extern	src/cuda-sim/ptx_ir.h	/^   bool m_extern;$/;"	m	class:function_info
m_extern_spec	src/cuda-sim/ptx_ir.h	/^   int m_extern_spec;$/;"	m	class:type_info_key
m_extra_mf_fields	src/gpgpu-sim/gpu-cache.h	/^    extra_mf_fields_lookup m_extra_mf_fields;$/;"	m	class:baseline_cache
m_extra_mf_fields	src/gpgpu-sim/gpu-cache.h	/^    extra_mf_fields_lookup m_extra_mf_fields;$/;"	m	class:tex_cache
m_fileline	src/debug.h	/^   std::string  m_fileline;$/;"	m	class:brk_pt
m_fill_port_occupied_cycles	src/gpgpu-sim/gpu-cache.h	/^        int m_fill_port_occupied_cycles; \/\/< Number of cycle that the fill port remains used $/;"	m	class:baseline_cache::bandwidth_management
m_fill_time	src/gpgpu-sim/gpu-cache.h	/^    unsigned         m_fill_time;$/;"	m	struct:cache_block_t
m_finished_ctas	common/kernel_info_t.h	/^   unsigned long long m_finished_ctas;$/;"	m	class:kernel_info_t
m_finished_kernel	src/gpgpu-sim/gpu-sim.h	/^   std::list<unsigned> m_finished_kernel;$/;"	m	class:gpgpu_sim
m_first_linear_sid	src/gpgpu-sim/gpu-cache.h	/^        unsigned m_first_linear_sid;$/;"	m	struct:mshr_table::mshr_entry
m_flat_cta_id	common/warp_context.h	/^    unsigned m_flat_cta_id;$/;"	m	class:warp_context_t
m_float	src/cuda-sim/ptx_ir.h	/^      float           m_float;$/;"	m	union:operand_info::__anon4
m_fragment_fifo	src/gpgpu-sim/gpu-cache.h	/^    fifo<fragment_entry>    m_fragment_fifo;$/;"	m	class:tex_cache
m_fragment_fifo_entries	src/gpgpu-sim/gpu-cache.h	/^        unsigned m_fragment_fifo_entries;$/;"	m	union:cache_config::__anon31
m_free	src/gpgpu-sim/shader.h	/^      bool m_free;$/;"	m	class:opndcoll_rfu_t::collector_unit_t
m_fu	src/gpgpu-sim/shader.h	/^    std::vector<simd_function_unit*> m_fu; \/\/ stallable pipelines should be last in this array$/;"	m	class:shader_core_ctx
m_func_info	src/cuda-sim/ptx_sim.h	/^   function_info *m_func_info;$/;"	m	class:ptx_thread_info
m_func_info	src/cuda-sim/ptx_sim.h	/^   function_info *m_func_info;$/;"	m	struct:stack_entry
m_function	src/cuda-sim/ptx_ir.h	/^   function_info *m_function; \/\/ used for function symbols$/;"	m	class:symbol
m_function_info_lookup	src/cuda-sim/ptx_ir.h	/^   std::map<std::string,function_info*> m_function_info_lookup;$/;"	m	class:symbol_table
m_function_model_config	src/abstract_hardware_model.h	/^    const gpgpu_functional_sim_config &m_function_model_config;$/;"	m	class:gpgpu_t
m_function_symtab_lookup	src/cuda-sim/ptx_ir.h	/^   std::map<std::string,symbol_table*> m_function_symtab_lookup;$/;"	m	class:symbol_table
m_functionalSimulationMode	src/cuda-sim/ptx_sim.h	/^   bool m_functionalSimulationMode; $/;"	m	class:ptx_thread_info
m_geom_spec	src/cuda-sim/ptx_ir.h	/^   int m_geom_spec;$/;"	m	class:ptx_instruction
m_global_load_memaddrs	src/gpgpu-sim/shader.h	/^   std::vector<std::unordered_set<new_addr_type> > m_global_load_memaddrs;$/;"	m	class:ldst_unit
m_global_load_memaddrs	src/gpgpu-sim/shader.h	/^   std::vector<std::unordered_set<new_addr_type> > m_global_load_memaddrs;$/;"	m	class:shader_core_ctx
m_global_mem	src/abstract_hardware_model.h	/^    class memory_space *m_global_mem;$/;"	m	class:gpgpu_t	typeref:class:gpgpu_t::memory_space
m_global_next	src/cuda-sim/ptx_ir.h	/^   unsigned m_global_next;$/;"	m	class:symbol_table
m_globals	src/cuda-sim/ptx_ir.h	/^   std::list<symbol*> m_globals;$/;"	m	class:symbol_table
m_gpgpu	launcher/simulator.h	/^    class gpgpu_sim *m_gpgpu;$/;"	m	struct:Simulator::_cuda_device_id	typeref:class:Simulator::_cuda_device_id::gpgpu_sim
m_gpgpusim_wrapper	src/gpgpu-sim/gpu-sim.h	/^   class gpgpu_sim_wrapper *m_gpgpusim_wrapper;$/;"	m	class:gpgpu_sim	typeref:class:gpgpu_sim::gpgpu_sim_wrapper
m_gpu	launcher/simulator.h	/^    _cuda_device_id *m_gpu; \/\/ selected gpu$/;"	m	struct:Simulator::CUctx_st
m_gpu	src/abstract_hardware_model.h	/^        class gpgpu_sim *m_gpu;$/;"	m	class:core_t	typeref:class:core_t::gpgpu_sim
m_gpu	src/cuda-sim/ptx_sim.h	/^   gpgpu_t *m_gpu;$/;"	m	class:ptx_thread_info
m_gpu	src/gpgpu-sim/shader.h	/^    gpgpu_sim *m_gpu;$/;"	m	class:simt_core_cluster
m_gpu	src/stream_manager.h	/^    gpgpu_sim *m_gpu;$/;"	m	class:stream_manager
m_gpu_tot_sim_cycle	common/cu_event_st.h	/^   double m_gpu_tot_sim_cycle;$/;"	m	class:CUevent_st
m_grid_dim	common/kernel_info_t.h	/^   dim3 m_grid_dim;$/;"	m	class:kernel_info_t
m_grid_id_to_stream	src/stream_manager.h	/^    std::map<unsigned,CUstream_st *> m_grid_id_to_stream;$/;"	m	class:stream_manager
m_gridid	src/cuda-sim/ptx_sim.h	/^   unsigned m_gridid;$/;"	m	class:ptx_thread_info
m_has_atomic	common/kernel_info_t.h	/^   bool m_has_atomic;$/;"	m	class:kernel_info_t
m_has_atomic	src/gpgpu-sim/gpu-cache.h	/^        bool m_has_atomic; $/;"	m	struct:mshr_table::mshr_entry
m_head	src/gpgpu-sim/delayqueue.h	/^   fifo_data<T> *m_head;$/;"	m	class:fifo_pipeline
m_head	src/gpgpu-sim/gpu-cache.h	/^        unsigned   m_head; \/\/ next entry goes here$/;"	m	class:tex_cache::fifo
m_hi	src/cuda-sim/ptx_ir.h	/^   bool                m_hi;$/;"	m	class:ptx_instruction
m_host_address_dst	src/stream_manager.h	/^    void       *m_host_address_dst;$/;"	m	class:stream_operation
m_host_address_src	src/stream_manager.h	/^    const void *m_host_address_src;$/;"	m	class:stream_operation
m_hw_ctaid	src/cuda-sim/ptx_sim.h	/^   unsigned m_hw_ctaid;$/;"	m	class:ptx_thread_info
m_hw_sid	src/cuda-sim/ptx_sim.h	/^   unsigned m_hw_sid;$/;"	m	class:ptx_thread_info
m_hw_tid	src/cuda-sim/ptx_sim.h	/^   unsigned m_hw_tid;$/;"	m	class:ptx_thread_info
m_hw_wid	src/cuda-sim/ptx_sim.h	/^   unsigned m_hw_wid;$/;"	m	class:ptx_thread_info
m_ibuffer	common/shd_warp_t.h	/^    ibuffer_entry m_ibuffer[IBUFFER_SIZE]; $/;"	m	class:shd_warp_t
m_icnt	src/gpgpu-sim/shader.h	/^    mem_fetch_interface *m_icnt;$/;"	m	class:shader_core_ctx
m_icnt	src/gpgpu-sim/shader.h	/^   class mem_fetch_interface *m_icnt;$/;"	m	class:ldst_unit	typeref:class:ldst_unit::mem_fetch_interface
m_icnt_L2_queue	src/gpgpu-sim/l2cache.h	/^   fifo_pipeline<mem_fetch> *m_icnt_L2_queue;$/;"	m	class:memory_sub_partition
m_icnt_receive_time	src/gpgpu-sim/mem_fetch.h	/^   unsigned m_icnt_receive_time; \/\/ set to gpu_sim_cycle + interconnect_latency when fixed icnt latency mode is enabled$/;"	m	class:mem_fetch
m_icount	src/cuda-sim/ptx_sim.h	/^   unsigned m_icount;$/;"	m	class:ptx_thread_info
m_id	launcher/simulator.h	/^    unsigned m_id;$/;"	m	struct:Simulator::_cuda_device_id
m_id	src/gpgpu-sim/l2cache.h	/^   unsigned m_id;  \/\/< the global sub partition ID$/;"	m	class:memory_sub_partition
m_id	src/gpgpu-sim/l2cache.h	/^   unsigned m_id;$/;"	m	class:memory_partition_unit
m_id	src/gpgpu-sim/shader.h	/^    int m_id;$/;"	m	class:scheduler_unit
m_id	src/gpgpu-sim/stat-tool.h	/^   int m_id;$/;"	m	class:insn_warp_occ_logger
m_id	src/gpgpu-sim/stat-tool.h	/^   int m_id;$/;"	m	class:linear_histogram_logger
m_imiss_pending	common/shd_warp_t.h	/^    bool m_imiss_pending;$/;"	m	class:shd_warp_t
m_immediate_address	src/cuda-sim/ptx_ir.h	/^   bool m_immediate_address;$/;"	m	class:operand_info
m_in	src/gpgpu-sim/shader.h	/^       port_vector_t m_in,m_out;$/;"	m	class:opndcoll_rfu_t::input_port_t
m_in_ports	src/gpgpu-sim/shader.h	/^   std::vector<input_port_t> m_in_ports;$/;"	m	class:opndcoll_rfu_t
m_incoming_traffic_stats	src/gpgpu-sim/shader.h	/^    traffic_breakdown *m_incoming_traffic_stats; \/\/ memory partition to core $/;"	m	class:shader_core_stats
m_index	src/gpgpu-sim/gpu-cache.h	/^        unsigned m_index; \/\/ where in cache should block be placed?$/;"	m	struct:tex_cache::rob_entry
m_init	src/cuda-sim/ptx_ir.h	/^   bool m_init;$/;"	m	class:type_info_key
m_initialized	src/gpgpu-sim/shader.h	/^   bool m_initialized;$/;"	m	class:opndcoll_rfu_t
m_initializer	src/cuda-sim/ptx_ir.h	/^   std::list<operand_info> m_initializer;$/;"	m	class:symbol
m_inner_level_prioritization	src/gpgpu-sim/shader.h	/^    scheduler_prioritization_type m_inner_level_prioritization;$/;"	m	class:two_level_active_scheduler
m_insn_span_count	src/gpgpu-sim/stat-tool.h	/^   span_count_map m_insn_span_count;$/;"	m	class:thread_insn_span
m_insn_warp_occ	src/gpgpu-sim/stat-tool.h	/^   std::vector<linear_histogram> m_insn_warp_occ;$/;"	m	class:insn_warp_occ_logger
m_inst	common/shd_warp_t.h	/^       const warp_inst_t *m_inst;$/;"	m	struct:shd_warp_t::ibuffer_entry
m_inst	src/debug.cc	/^   const ptx_instruction *m_inst;$/;"	m	class:watchpoint_event	file:
m_inst	src/gpgpu-sim/mem_fetch.h	/^   warp_inst_t m_inst;$/;"	m	class:mem_fetch
m_inst_fetch_buffer	src/gpgpu-sim/shader.h	/^    ifetch_buffer_t           m_inst_fetch_buffer;$/;"	m	class:shader_core_ctx
m_inst_in_pipeline	common/shd_warp_t.h	/^    unsigned m_inst_in_pipeline;$/;"	m	class:shd_warp_t
m_inst_size	src/cuda-sim/ptx_ir.h	/^   unsigned m_inst_size; \/\/ bytes$/;"	m	class:ptx_instruction
m_instr_mem	src/cuda-sim/ptx_ir.h	/^   ptx_instruction **m_instr_mem;$/;"	m	class:function_info
m_instr_mem_index	src/cuda-sim/ptx_ir.h	/^   int m_instr_mem_index; \/\/index into m_instr_mem array$/;"	m	class:ptx_instruction
m_instr_mem_size	src/cuda-sim/ptx_ir.h	/^   unsigned m_instr_mem_size;$/;"	m	class:function_info
m_instructions	src/cuda-sim/ptx_ir.h	/^   std::list<ptx_instruction*> m_instructions;$/;"	m	class:function_info
m_int	src/cuda-sim/ptx_ir.h	/^      int             m_int;$/;"	m	union:operand_info::__anon4
m_isParsed	src/option_parser.cc	/^   bool m_isParsed; \/\/ true if the target variable has been updated by fromString()$/;"	m	class:OptionRegistryInterface	file:
m_is_const	src/cuda-sim/ptx_ir.h	/^   bool m_is_const;$/;"	m	class:symbol
m_is_first_entry_served	src/gpgpu-sim/gpu-cache.h	/^        bool m_is_first_entry_served;$/;"	m	struct:mshr_table::mshr_entry
m_is_func_addr	src/cuda-sim/ptx_ir.h	/^   bool m_is_func_addr;$/;"	m	class:symbol
m_is_function	src/cuda-sim/ptx_ir.h	/^   int m_is_function;$/;"	m	class:type_info_key
m_is_global	src/cuda-sim/ptx_ir.h	/^   bool m_is_global;$/;"	m	class:symbol
m_is_label	src/cuda-sim/ptx_ir.h	/^   bool m_is_label;$/;"	m	class:symbol
m_is_local	src/cuda-sim/ptx_ir.h	/^   bool m_is_local;$/;"	m	class:symbol
m_is_non_arch_reg	src/cuda-sim/ptx_ir.h	/^   bool m_is_non_arch_reg;$/;"	m	class:operand_info
m_is_non_arch_reg	src/cuda-sim/ptx_ir.h	/^   bool m_is_non_arch_reg;$/;"	m	class:type_info_key
m_is_param	src/cuda-sim/ptx_ir.h	/^   bool m_is_param;$/;"	m	class:arg_buffer_t
m_is_param_local	src/cuda-sim/ptx_ir.h	/^   bool m_is_param_local;$/;"	m	class:symbol
m_is_printf	src/abstract_hardware_model.h	/^    bool m_is_printf;$/;"	m	class:warp_inst_t
m_is_ptr	src/cuda-sim/ptx_ir.h	/^   bool m_is_ptr; $/;"	m	class:param_info
m_is_reg	src/cuda-sim/ptx_ir.h	/^   bool m_is_reg;$/;"	m	class:arg_buffer_t
m_is_return_var	src/cuda-sim/ptx_ir.h	/^   bool m_is_return_var;$/;"	m	class:operand_info
m_is_shared	src/cuda-sim/ptx_ir.h	/^   bool m_is_shared;$/;"	m	class:symbol
m_is_tex	src/cuda-sim/ptx_ir.h	/^   bool m_is_tex;$/;"	m	class:symbol
m_isatomic	src/abstract_hardware_model.h	/^    bool m_isatomic;$/;"	m	class:warp_inst_t
m_issue_port	src/gpgpu-sim/shader.h	/^    std::vector<pipeline_stage_name_t> m_issue_port;$/;"	m	class:shader_core_ctx
m_kernel	src/abstract_hardware_model.h	/^        kernel_info_t *m_kernel;$/;"	m	class:core_t
m_kernel	src/cuda-sim/ptx_sim.h	/^   kernel_info_t &m_kernel;$/;"	m	class:ptx_thread_info
m_kernel	src/stream_manager.h	/^    kernel_info_t *m_kernel;$/;"	m	class:stream_operation
m_kernel_entry	common/kernel_info_t.h	/^   class function_info *m_kernel_entry;$/;"	m	class:kernel_info_t	typeref:class:kernel_info_t::function_info
m_kernel_info	src/cuda-sim/ptx_ir.h	/^   struct gpgpu_ptx_sim_kernel_info m_kernel_info;$/;"	m	class:function_info	typeref:struct:function_info::gpgpu_ptx_sim_kernel_info
m_kernel_lookup	launcher/simulator.h	/^    std::map<const void*,function_info*> m_kernel_lookup; \/\/ unique id (CUDA app function address) => kernel entry point$/;"	m	struct:Simulator::CUctx_st
m_kernel_params	src/cuda-sim/ptx_ir.h	/^   std::map<std::string,param_t> m_kernel_params;$/;"	m	class:function_info
m_label	src/cuda-sim/ptx_ir.h	/^   const symbol           *m_label;$/;"	m	class:ptx_instruction
m_last_access_time	src/gpgpu-sim/gpu-cache.h	/^    unsigned         m_last_access_time;$/;"	m	struct:cache_block_t
m_last_borrower	src/gpgpu-sim/l2cache.h	/^      int m_last_borrower; $/;"	m	class:memory_partition_unit::arbitration_metadata
m_last_cluster_issue	src/gpgpu-sim/gpu-sim.h	/^   unsigned m_last_cluster_issue;$/;"	m	class:gpgpu_sim
m_last_cu	src/gpgpu-sim/shader.h	/^      unsigned  m_last_cu; \/\/ first cu to check while arb-ing banks (rr)$/;"	m	class:opndcoll_rfu_t::arbiter_t
m_last_cu	src/gpgpu-sim/shader.h	/^      unsigned m_last_cu; \/\/ dispatch ready cu's rr$/;"	m	class:opndcoll_rfu_t::dispatch_unit_t
m_last_dram_callback	src/cuda-sim/ptx_sim.h	/^   dram_callback_t   m_last_dram_callback; $/;"	m	class:ptx_thread_info
m_last_effective_address	src/cuda-sim/ptx_sim.h	/^   addr_t         m_last_effective_address;$/;"	m	class:ptx_thread_info
m_last_fat_cubin_handle	launcher/simulator.h	/^    unsigned m_last_fat_cubin_handle;$/;"	m	struct:Simulator::CUctx_st
m_last_fetch	common/shd_warp_t.h	/^    unsigned long long m_last_fetch;$/;"	m	class:shd_warp_t
m_last_inst_gpu_sim_cycle	src/gpgpu-sim/shader.h	/^    unsigned long long m_last_inst_gpu_sim_cycle;$/;"	m	class:shader_core_ctx
m_last_inst_gpu_sim_cycle	src/gpgpu-sim/shader.h	/^   unsigned long long m_last_inst_gpu_sim_cycle;$/;"	m	class:ldst_unit
m_last_inst_gpu_tot_sim_cycle	src/gpgpu-sim/shader.h	/^    unsigned long long m_last_inst_gpu_tot_sim_cycle;$/;"	m	class:shader_core_ctx
m_last_inst_gpu_tot_sim_cycle	src/gpgpu-sim/shader.h	/^   unsigned long long m_last_inst_gpu_tot_sim_cycle;$/;"	m	class:ldst_unit
m_last_issued_kernel	src/gpgpu-sim/gpu-sim.h	/^   unsigned m_last_issued_kernel;$/;"	m	class:gpgpu_sim
m_last_memory_space	src/cuda-sim/ptx_sim.h	/^   memory_space_t m_last_memory_space;$/;"	m	class:ptx_thread_info
m_last_num_sim_insn	src/gpgpu-sim/shader.h	/^	unsigned *m_last_num_sim_insn;$/;"	m	struct:shader_core_stats_pod
m_last_num_sim_winsn	src/gpgpu-sim/shader.h	/^	unsigned *m_last_num_sim_winsn;$/;"	m	struct:shader_core_stats_pod
m_last_set_operand_value	src/cuda-sim/ptx_sim.h	/^   ptx_reg_t m_last_set_operand_value;$/;"	m	class:ptx_thread_info
m_last_shader_dynamic_warp_issue_distro	src/gpgpu-sim/shader.h	/^    std::vector<unsigned> m_last_shader_dynamic_warp_issue_distro;$/;"	m	class:shader_core_stats
m_last_shader_warp_slot_issue_distro	src/gpgpu-sim/shader.h	/^    std::vector<unsigned> m_last_shader_warp_slot_issue_distro;$/;"	m	class:shader_core_stats
m_last_supervised_issued	src/gpgpu-sim/shader.h	/^    std::vector< shd_warp_t* >::const_iterator m_last_supervised_issued;$/;"	m	class:scheduler_unit
m_last_warp_fetched	src/gpgpu-sim/shader.h	/^    int  m_last_warp_fetched;$/;"	m	class:shader_core_ctx
m_last_was_call	src/cuda-sim/ptx_sim.h	/^   bool m_last_was_call;$/;"	m	class:ptx_thread_info
m_ldst_unit	src/gpgpu-sim/shader.h	/^    ldst_unit *m_ldst_unit;$/;"	m	class:shader_core_ctx
m_length	src/gpgpu-sim/delayqueue.h	/^   unsigned int m_length;$/;"	m	class:fifo_pipeline
m_lin_hist_archive	src/gpgpu-sim/stat-tool.h	/^   std::list<linear_histogram_snapshot> m_lin_hist_archive;$/;"	m	class:linear_histogram_logger
m_line_sz	src/gpgpu-sim/gpu-cache.h	/^    unsigned m_line_sz;$/;"	m	class:cache_config
m_line_sz_log2	src/gpgpu-sim/gpu-cache.h	/^    unsigned m_line_sz_log2;$/;"	m	class:cache_config
m_linear_histogram	src/gpgpu-sim/stat-tool.h	/^   std::vector<int> m_linear_histogram;$/;"	m	class:linear_histogram_snapshot
m_lines	src/gpgpu-sim/gpu-cache.h	/^    cache_block_t *m_lines; \/* nbanks x nset x assoc lines in total *\/$/;"	m	class:tag_array
m_list	src/gpgpu-sim/gpu-cache.h	/^        std::list<mem_fetch*> m_list;$/;"	m	struct:mshr_table::mshr_entry
m_liveThreadCount	src/cuda-sim/cuda-sim.h	/^    unsigned * m_liveThreadCount;$/;"	m	class:functionalCoreSim
m_lo	src/cuda-sim/ptx_ir.h	/^   bool                m_lo;$/;"	m	class:ptx_instruction
m_local_mem	src/cuda-sim/ptx_sim.h	/^   memory_space   *m_local_mem;$/;"	m	class:ptx_thread_info
m_local_mem_framesize	src/cuda-sim/ptx_ir.h	/^   unsigned m_local_mem_framesize;$/;"	m	class:function_info
m_local_mem_stack_pointer	src/cuda-sim/ptx_sim.h	/^   unsigned m_local_mem_stack_pointer;$/;"	m	class:ptx_thread_info
m_local_next	src/cuda-sim/ptx_ir.h	/^   unsigned m_local_next;$/;"	m	class:symbol_table
m_lock	src/stream_manager.h	/^    pthread_mutex_t m_lock; \/\/ ensure only one host or gpu manipulates stream operation at one time$/;"	m	struct:CUstream_st
m_log2_block_size	src/cuda-sim/memory.h	/^   unsigned m_log2_block_size;$/;"	m	class:memory_space_impl
m_map_f64_to_f32	src/cuda-sim/ptx_sim.h	/^      bool     m_map_f64_to_f32; $/;"	m	class:ptx_version
m_max_active_warps	src/gpgpu-sim/shader.h	/^	unsigned m_max_active_warps;$/;"	m	class:two_level_active_scheduler
m_max_cta_per_core	src/gpgpu-sim/shader.h	/^   unsigned m_max_cta_per_core;$/;"	m	class:barrier_set_t
m_max_len	src/gpgpu-sim/delayqueue.h	/^   unsigned int m_max_len;$/;"	m	class:fifo_pipeline
m_max_merged	src/gpgpu-sim/gpu-cache.h	/^    const unsigned m_max_merged;$/;"	m	class:mshr_table
m_max_warps_per_core	src/gpgpu-sim/shader.h	/^   unsigned m_max_warps_per_core;$/;"	m	class:barrier_set_t
m_maximum	src/gpgpu-sim/histogram.h	/^   int m_maximum;      \/\/ the maximum sample$/;"	m	class:binned_histogram
m_mem_accesses_created	src/abstract_hardware_model.h	/^    bool m_mem_accesses_created;$/;"	m	class:warp_inst_t
m_mem_config	src/gpgpu-sim/mem_fetch.h	/^   const class memory_config *m_mem_config;$/;"	m	class:mem_fetch	typeref:class:mem_fetch::memory_config
m_mem_config	src/gpgpu-sim/power_stat.h	/^   const struct memory_config *m_mem_config;$/;"	m	class:power_stat_t	typeref:struct:power_stat_t::memory_config
m_mem_fetch_allocator	src/gpgpu-sim/shader.h	/^    shader_core_mem_fetch_allocator *m_mem_fetch_allocator;$/;"	m	class:shader_core_ctx
m_mem_out	src/gpgpu-sim/shader.h	/^    register_set* m_mem_out;$/;"	m	class:scheduler_unit
m_mem_rc	src/gpgpu-sim/shader.h	/^   enum mem_stage_stall_type m_mem_rc;$/;"	m	class:ldst_unit	typeref:enum:ldst_unit::mem_stage_stall_type
m_mem_stats	src/gpgpu-sim/power_stat.h	/^   memory_stats_t *m_mem_stats;$/;"	m	class:power_mem_stat_t
m_membar	common/shd_warp_t.h	/^    bool     m_membar;             \/\/ if true, warp is waiting at memory barrier$/;"	m	class:shd_warp_t
m_membar	common/warp_context.h	/^    bool     m_membar;             \/\/ if true, warp is waiting at memory barrier$/;"	m	class:warp_context_t
m_membar_level	src/cuda-sim/ptx_ir.h	/^   int m_membar_level;$/;"	m	class:ptx_instruction
m_memfetch_creator	src/gpgpu-sim/gpu-cache.h	/^    mem_fetch_allocator *m_memfetch_creator;$/;"	m	class:data_cache
m_memory_config	src/gpgpu-sim/gpu-sim.h	/^    memory_config m_memory_config;$/;"	m	class:gpgpu_sim_config
m_memory_config	src/gpgpu-sim/gpu-sim.h	/^   const struct memory_config      *m_memory_config;$/;"	m	class:gpgpu_sim	typeref:struct:gpgpu_sim::memory_config
m_memory_config	src/gpgpu-sim/l2cache.h	/^    const memory_config *m_memory_config;$/;"	m	class:partition_mf_allocator
m_memory_config	src/gpgpu-sim/mem_latency_stat.h	/^   const struct memory_config *m_memory_config;$/;"	m	class:memory_stats_t	typeref:struct:memory_stats_t::memory_config
m_memory_config	src/gpgpu-sim/shader.h	/^    const memory_config *m_memory_config;$/;"	m	class:shader_core_ctx
m_memory_config	src/gpgpu-sim/shader.h	/^    const memory_config *m_memory_config;$/;"	m	class:shader_core_mem_fetch_allocator
m_memory_config	src/gpgpu-sim/shader.h	/^   const memory_config *m_memory_config;$/;"	m	class:ldst_unit
m_memory_partition_unit	src/gpgpu-sim/gpu-sim.h	/^   class memory_partition_unit **m_memory_partition_unit;$/;"	m	class:gpgpu_sim	typeref:class:gpgpu_sim::memory_partition_unit
m_memory_partition_unit	src/ramulator_sim/gpu_wrapper.h	/^	class  memory_partition_unit *m_memory_partition_unit;$/;"	m	class:GpuWrapper	typeref:class:GpuWrapper::memory_partition_unit
m_memory_stats	src/gpgpu-sim/gpu-sim.h	/^   class memory_stats_t     *m_memory_stats;$/;"	m	class:gpgpu_sim	typeref:class:gpgpu_sim::memory_stats_t
m_memory_stats	src/gpgpu-sim/shader.h	/^    memory_stats_t *m_memory_stats;$/;"	m	class:simt_core_cluster
m_memory_sub_partition	src/gpgpu-sim/gpu-sim.h	/^   class memory_sub_partition **m_memory_sub_partition;$/;"	m	class:gpgpu_sim	typeref:class:gpgpu_sim::memory_sub_partition
m_memport	src/gpgpu-sim/gpu-cache.h	/^    mem_fetch_interface    *m_memport;$/;"	m	class:tex_cache
m_memport	src/gpgpu-sim/gpu-cache.h	/^    mem_fetch_interface *m_memport;$/;"	m	class:baseline_cache
m_mf_allocator	src/gpgpu-sim/l2cache.h	/^   partition_mf_allocator *m_mf_allocator;$/;"	m	class:memory_sub_partition
m_mf_allocator	src/gpgpu-sim/shader.h	/^   shader_core_mem_fetch_allocator *m_mf_allocator;$/;"	m	class:ldst_unit
m_min_len	src/gpgpu-sim/delayqueue.h	/^   unsigned int m_min_len;$/;"	m	class:fifo_pipeline
m_miss	src/gpgpu-sim/gpu-cache.h	/^        bool       m_miss;        \/\/ true if sent memory request$/;"	m	struct:tex_cache::fragment_entry
m_miss	src/gpgpu-sim/gpu-cache.h	/^    unsigned m_miss;$/;"	m	class:tag_array
m_miss_queue	src/gpgpu-sim/gpu-cache.h	/^    std::list<mem_fetch*> m_miss_queue;$/;"	m	class:baseline_cache
m_miss_queue_size	src/gpgpu-sim/gpu-cache.h	/^        unsigned m_miss_queue_size;$/;"	m	union:cache_config::__anon33
m_miss_queue_status	src/gpgpu-sim/gpu-cache.h	/^    enum mem_fetch_status m_miss_queue_status;$/;"	m	class:baseline_cache	typeref:enum:baseline_cache::mem_fetch_status
m_mk_sched	src/gpgpu-sim/gpu-cache.h	/^    MKScheduler* m_mk_sched;$/;"	m	class:baseline_cache
m_mk_sched	src/gpgpu-sim/gpu-cache.h	/^    MKScheduler* m_mk_sched;$/;"	m	class:mshr_table
m_mshr_entries	src/gpgpu-sim/gpu-cache.h	/^        unsigned m_mshr_entries;$/;"	m	union:cache_config::__anon31
m_mshr_max_merge	src/gpgpu-sim/gpu-cache.h	/^        unsigned m_mshr_max_merge;$/;"	m	union:cache_config::__anon32
m_mshr_type	src/gpgpu-sim/gpu-cache.h	/^    enum mshr_config_t m_mshr_type;$/;"	m	class:cache_config	typeref:enum:cache_config::mshr_config_t
m_mshrs	src/gpgpu-sim/gpu-cache.h	/^    mshr_table m_mshrs;$/;"	m	class:baseline_cache
m_n_active_cta	src/gpgpu-sim/shader.h	/^    unsigned m_n_active_cta; \/\/ number of Cooperative Thread Arrays (blocks) currently running on this shader.$/;"	m	class:shader_core_ctx
m_n_atomic	common/shd_warp_t.h	/^    unsigned m_n_atomic;           \/\/ number of outstanding atomic operations $/;"	m	class:shd_warp_t
m_n_atomic	common/warp_context.h	/^    unsigned m_n_atomic;           \/\/ number of outstanding atomic operations $/;"	m	class:warp_context_t
m_n_bins	src/gpgpu-sim/stat-tool.h	/^   int m_n_bins;$/;"	m	class:linear_histogram_logger
m_n_channel	src/gpgpu-sim/addrdec.h	/^   int m_n_channel;$/;"	m	class:linear_to_raw_address_translation
m_n_diverge	src/gpgpu-sim/shader.h	/^    unsigned *m_n_diverge;    \/\/ number of divergence occurring in this shader$/;"	m	struct:shader_core_stats_pod
m_n_element	src/gpgpu-sim/delayqueue.h	/^   unsigned int m_n_element;$/;"	m	class:fifo_pipeline
m_n_mem	src/gpgpu-sim/gpu-sim.h	/^   unsigned m_n_mem;$/;"	m	struct:memory_config
m_n_mem_sub_partition	src/gpgpu-sim/gpu-sim.h	/^   unsigned m_n_mem_sub_partition;$/;"	m	struct:memory_config
m_n_shader	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned m_n_shader;$/;"	m	class:memory_stats_t
m_n_sub_partition_in_channel	src/gpgpu-sim/addrdec.h	/^   int m_n_sub_partition_in_channel; $/;"	m	class:linear_to_raw_address_translation
m_n_sub_partition_per_memory_channel	src/gpgpu-sim/gpu-sim.h	/^   unsigned m_n_sub_partition_per_memory_channel;$/;"	m	struct:memory_config
m_name	launcher/stats/stats.h	/^  std::string m_name;$/;"	m	class:Stats::StatBase
m_name	src/abstract_hardware_model.h	/^	const char* m_name;$/;"	m	class:register_set
m_name	src/cuda-sim/memory.h	/^   std::string m_name;$/;"	m	class:memory_space_impl
m_name	src/cuda-sim/ptx_ir.h	/^   std::string m_name;$/;"	m	class:function_info
m_name	src/cuda-sim/ptx_ir.h	/^   std::string m_name;$/;"	m	class:param_info
m_name	src/cuda-sim/ptx_ir.h	/^   std::string m_name;$/;"	m	class:symbol
m_name	src/gpgpu-sim/delayqueue.h	/^   const char* m_name;$/;"	m	class:fifo_pipeline
m_name	src/gpgpu-sim/gpu-cache.h	/^    std::string m_name;$/;"	m	class:baseline_cache
m_name	src/gpgpu-sim/gpu-cache.h	/^    std::string m_name;$/;"	m	class:tex_cache
m_name	src/gpgpu-sim/histogram.h	/^   std::string m_name;$/;"	m	class:binned_histogram
m_name	src/gpgpu-sim/shader.h	/^    std::string m_name;$/;"	m	class:simd_function_unit
m_name	src/gpgpu-sim/stat-tool.h	/^   std::string m_name;$/;"	m	class:linear_histogram_logger
m_name	src/gpgpu-sim/stat-tool.h	/^   std::string m_name;$/;"	m	class:thread_CFlocality
m_nbins	src/gpgpu-sim/histogram.h	/^   int m_nbins;$/;"	m	class:binned_histogram
m_nbytes	common/gpgpu_ptx_sim_arg.h	/^   size_t m_nbytes;$/;"	m	struct:gpgpu_ptx_sim_arg
m_nbytes	src/cuda-sim/memory.h	/^   unsigned m_nbytes;$/;"	m	class:mem_storage
m_nbytes	src/gpgpu-sim/shader.h	/^    unsigned m_nbytes;$/;"	m	struct:ifetch_buffer_t
m_nctaid	src/cuda-sim/ptx_sim.h	/^   dim3   m_nctaid;$/;"	m	class:ptx_thread_info
m_neg	src/cuda-sim/ptx_ir.h	/^   bool                m_neg;$/;"	m	class:ptx_instruction
m_neg_pred	src/cuda-sim/ptx_ir.h	/^   bool                    m_neg_pred;$/;"	m	class:ptx_instruction
m_neg_pred	src/cuda-sim/ptx_ir.h	/^   bool m_neg_pred;$/;"	m	class:operand_info
m_network_name	src/gpgpu-sim/traffic_breakdown.h	/^   std::string m_network_name; $/;"	m	class:traffic_breakdown
m_next	common/shd_warp_t.h	/^    unsigned m_next;$/;"	m	class:shd_warp_t
m_next	launcher/simulator.h	/^    struct _cuda_device_id *m_next;$/;"	m	struct:Simulator::_cuda_device_id	typeref:struct:Simulator::_cuda_device_id::_cuda_device_id
m_next	libcuda/cuda_runtime_api.cc	/^	struct glbmap_entry *m_next;$/;"	m	struct:glbmap_entry	typeref:struct:glbmap_entry::glbmap_entry	file:
m_next	src/gpgpu-sim/delayqueue.h	/^   fifo_data *m_next;$/;"	m	struct:fifo_data
m_next_cta	common/kernel_info_t.h	/^   dim3 m_next_cta;$/;"	m	class:kernel_info_t
m_next_cu	src/gpgpu-sim/shader.h	/^      unsigned m_next_cu;  \/\/ for initialization$/;"	m	class:opndcoll_rfu_t::dispatch_unit_t
m_next_cycle_prioritized_warps	src/gpgpu-sim/shader.h	/^    std::vector< shd_warp_t* > m_next_cycle_prioritized_warps;$/;"	m	class:scheduler_unit
m_next_event_uid	common/cu_event_st.cc	/^int CUevent_st::m_next_event_uid = 0;$/;"	m	class:CUevent_st	file:
m_next_event_uid	common/cu_event_st.h	/^   static int m_next_event_uid;$/;"	m	class:CUevent_st
m_next_global	src/gpgpu-sim/shader.h	/^   mem_fetch *m_next_global;$/;"	m	class:ldst_unit
m_next_pc	common/shd_warp_t.h	/^    address_type m_next_pc;$/;"	m	class:shd_warp_t
m_next_pc	common/warp_context.h	/^    address_type m_next_pc;$/;"	m	class:warp_context_t
m_next_tid	common/kernel_info_t.h	/^   dim3 m_next_tid;$/;"	m	class:kernel_info_t
m_next_uid	common/kernel_info_t.cc	/^unsigned kernel_info_t::m_next_uid = 1;$/;"	m	class:kernel_info_t	file:
m_next_uid	common/kernel_info_t.h	/^   static unsigned m_next_uid;$/;"	m	class:kernel_info_t
m_next_wb	src/gpgpu-sim/shader.h	/^   warp_inst_t m_next_wb;$/;"	m	class:ldst_unit
m_non_rf_operands	src/gpgpu-sim/power_stat.h	/^    unsigned *m_non_rf_operands[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_non_rf_operands	src/gpgpu-sim/shader.h	/^    unsigned *m_non_rf_operands;$/;"	m	struct:shader_core_stats_pod
m_not_completed	src/gpgpu-sim/shader.h	/^    unsigned m_not_completed; \/\/ number of threads to be completed (==0 when all thread on this core completed) $/;"	m	class:shader_core_ctx
m_not_ready	src/gpgpu-sim/shader.h	/^      std::bitset<MAX_REG_OPERANDS*2> m_not_ready;$/;"	m	class:opndcoll_rfu_t::collector_unit_t
m_nset	src/gpgpu-sim/gpu-cache.h	/^    unsigned m_nset;$/;"	m	class:cache_config
m_nset_log2	src/gpgpu-sim/gpu-cache.h	/^    unsigned m_nset_log2;$/;"	m	class:cache_config
m_nthreads	src/gpgpu-sim/stat-tool.h	/^   int m_nthreads;$/;"	m	class:thread_CFlocality
m_ntid	src/cuda-sim/ptx_sim.h	/^   dim3   m_ntid;$/;"	m	class:ptx_thread_info
m_num	src/gpgpu-sim/gpu-cache.h	/^        unsigned   m_num;  \/\/ how many in fifo?$/;"	m	class:tex_cache::fifo
m_num_FPdecoded_insn	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_FPdecoded_insn[NUM_STAT_IDX]; \/\/ number of instructions committed by this shader core$/;"	m	struct:shader_core_power_stats_pod
m_num_FPdecoded_insn	src/gpgpu-sim/shader.h	/^    unsigned *m_num_FPdecoded_insn;$/;"	m	struct:shader_core_stats_pod
m_num_INTdecoded_insn	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_INTdecoded_insn[NUM_STAT_IDX]; \/\/ number of instructions committed by this shader core$/;"	m	struct:shader_core_power_stats_pod
m_num_INTdecoded_insn	src/gpgpu-sim/shader.h	/^    unsigned *m_num_INTdecoded_insn;$/;"	m	struct:shader_core_stats_pod
m_num_banks	src/gpgpu-sim/shader.h	/^      unsigned m_num_banks;$/;"	m	class:opndcoll_rfu_t::arbiter_t
m_num_banks	src/gpgpu-sim/shader.h	/^      unsigned m_num_banks;$/;"	m	class:opndcoll_rfu_t::collector_unit_t
m_num_banks	src/gpgpu-sim/shader.h	/^   unsigned m_num_banks;$/;"	m	class:opndcoll_rfu_t
m_num_collector_sets	src/gpgpu-sim/shader.h	/^   unsigned m_num_collector_sets;$/;"	m	class:opndcoll_rfu_t
m_num_collectors	src/gpgpu-sim/shader.h	/^      unsigned m_num_collectors;$/;"	m	class:opndcoll_rfu_t::arbiter_t
m_num_collectors	src/gpgpu-sim/shader.h	/^      unsigned m_num_collectors;$/;"	m	class:opndcoll_rfu_t::dispatch_unit_t
m_num_cores_running	common/kernel_info_t.h	/^   unsigned m_num_cores_running;$/;"	m	class:kernel_info_t
m_num_decoded_insn	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_decoded_insn[NUM_STAT_IDX]; \/\/ number of instructions committed by this shader core$/;"	m	struct:shader_core_power_stats_pod
m_num_decoded_insn	src/gpgpu-sim/shader.h	/^    unsigned *m_num_decoded_insn; \/\/ number of instructions decoded by this shader core$/;"	m	struct:shader_core_stats_pod
m_num_entries	src/gpgpu-sim/gpu-cache.h	/^    const unsigned m_num_entries;$/;"	m	class:mshr_table
m_num_fp_acesses	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_fp_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_fp_acesses	src/gpgpu-sim/shader.h	/^    unsigned *m_num_fp_acesses;$/;"	m	struct:shader_core_stats_pod
m_num_fpdiv_acesses	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_fpdiv_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_fpdiv_acesses	src/gpgpu-sim/shader.h	/^    unsigned *m_num_fpdiv_acesses;$/;"	m	struct:shader_core_stats_pod
m_num_fpmul_acesses	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_fpmul_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_fpmul_acesses	src/gpgpu-sim/shader.h	/^    unsigned *m_num_fpmul_acesses;$/;"	m	struct:shader_core_stats_pod
m_num_function_units	src/gpgpu-sim/shader.h	/^    unsigned m_num_function_units;$/;"	m	class:shader_core_ctx
m_num_ialu_acesses	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_ialu_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_ialu_acesses	src/gpgpu-sim/shader.h	/^    unsigned *m_num_ialu_acesses;$/;"	m	struct:shader_core_stats_pod
m_num_idiv_acesses	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_idiv_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_idiv_acesses	src/gpgpu-sim/shader.h	/^    unsigned *m_num_idiv_acesses;$/;"	m	struct:shader_core_stats_pod
m_num_imul24_acesses	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_imul24_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_imul24_acesses	src/gpgpu-sim/shader.h	/^    unsigned *m_num_imul24_acesses;$/;"	m	struct:shader_core_stats_pod
m_num_imul32_acesses	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_imul32_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_imul32_acesses	src/gpgpu-sim/shader.h	/^    unsigned *m_num_imul32_acesses;$/;"	m	struct:shader_core_stats_pod
m_num_imul_acesses	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_imul_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_imul_acesses	src/gpgpu-sim/shader.h	/^    unsigned *m_num_imul_acesses;$/;"	m	struct:shader_core_stats_pod
m_num_loadqueued_insn	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_loadqueued_insn[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_loadqueued_insn	src/gpgpu-sim/shader.h	/^    unsigned *m_num_loadqueued_insn;$/;"	m	struct:shader_core_stats_pod
m_num_mem_acesses	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_mem_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_mem_acesses	src/gpgpu-sim/shader.h	/^    unsigned *m_num_mem_acesses;$/;"	m	struct:shader_core_stats_pod
m_num_mem_committed	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_mem_committed[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_mem_committed	src/gpgpu-sim/shader.h	/^    unsigned *m_num_mem_committed;$/;"	m	struct:shader_core_stats_pod
m_num_sfu_acesses	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_sfu_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_sfu_acesses	src/gpgpu-sim/shader.h	/^    unsigned *m_num_sfu_acesses;$/;"	m	struct:shader_core_stats_pod
m_num_sfu_committed	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_sfu_committed[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_sfu_committed	src/gpgpu-sim/shader.h	/^    unsigned *m_num_sfu_committed;$/;"	m	struct:shader_core_stats_pod
m_num_sim_insn	src/gpgpu-sim/shader.h	/^    unsigned *m_num_sim_insn; \/\/ number of scalar thread instructions committed by this shader core$/;"	m	struct:shader_core_stats_pod
m_num_sim_winsn	src/gpgpu-sim/shader.h	/^    unsigned *m_num_sim_winsn; \/\/ number of warp instructions committed by this shader core$/;"	m	struct:shader_core_stats_pod
m_num_simulated_insts	common/kernel_info_t.h	/^   unsigned long long m_num_simulated_insts;$/;"	m	class:kernel_info_t
m_num_sp_acesses	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_sp_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_sp_acesses	src/gpgpu-sim/shader.h	/^    unsigned *m_num_sp_acesses;$/;"	m	struct:shader_core_stats_pod
m_num_sp_committed	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_sp_committed[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_sp_committed	src/gpgpu-sim/shader.h	/^    unsigned *m_num_sp_committed;$/;"	m	struct:shader_core_stats_pod
m_num_storequeued_insn	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_storequeued_insn[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_storequeued_insn	src/gpgpu-sim/shader.h	/^    unsigned *m_num_storequeued_insn;$/;"	m	struct:shader_core_stats_pod
m_num_tex_inst	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_tex_inst[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_tex_inst	src/gpgpu-sim/shader.h	/^    unsigned *m_num_tex_inst;$/;"	m	struct:shader_core_stats_pod
m_num_tlb_accesses	src/gpgpu-sim/shader.h	/^    unsigned *m_num_tlb_accesses;$/;"	m	struct:shader_core_stats_pod
m_num_tlb_hits	src/gpgpu-sim/shader.h	/^    unsigned *m_num_tlb_hits;$/;"	m	struct:shader_core_stats_pod
m_num_trans_acesses	src/gpgpu-sim/power_stat.h	/^    unsigned *m_num_trans_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_num_trans_acesses	src/gpgpu-sim/shader.h	/^    unsigned *m_num_trans_acesses;$/;"	m	struct:shader_core_stats_pod
m_num_warps_to_limit	src/gpgpu-sim/shader.h	/^    unsigned m_num_warps_to_limit;$/;"	m	class:swl_scheduler
m_num_writeback_clients	src/gpgpu-sim/shader.h	/^   unsigned m_num_writeback_clients;$/;"	m	class:ldst_unit
m_offset	common/gpgpu_ptx_sim_arg.h	/^   size_t m_offset;$/;"	m	struct:gpgpu_ptx_sim_arg
m_offset	src/cuda-sim/ptx_ir.h	/^   unsigned m_offset;$/;"	m	class:param_info
m_offset	src/stream_manager.h	/^    size_t m_offset;$/;"	m	class:stream_operation
m_op	src/gpgpu-sim/shader.h	/^      op_t m_op;$/;"	m	class:opndcoll_rfu_t::allocation_t
m_opcode	src/cuda-sim/ptx_ir.h	/^   int                     m_opcode;$/;"	m	class:ptx_instruction
m_operand	src/gpgpu-sim/shader.h	/^      unsigned  m_operand; \/\/ operand offset in instruction. e.g., add r1,r2,r3; r2 is oprd 0, r3 is 1 (r1 is dst)$/;"	m	class:opndcoll_rfu_t::op_t
m_operand_collector	src/gpgpu-sim/shader.h	/^    opndcoll_rfu_t            m_operand_collector;$/;"	m	class:shader_core_ctx
m_operand_collector	src/gpgpu-sim/shader.h	/^   opndcoll_rfu_t *m_operand_collector;$/;"	m	class:ldst_unit
m_operand_lohi	src/cuda-sim/ptx_ir.h	/^   int m_operand_lohi;$/;"	m	class:operand_info
m_operand_neg	src/cuda-sim/ptx_ir.h	/^   bool m_operand_neg;$/;"	m	class:operand_info
m_operands	src/cuda-sim/ptx_ir.h	/^   std::vector<operand_info> m_operands;$/;"	m	class:ptx_instruction
m_operations	src/stream_manager.h	/^    std::list<stream_operation> m_operations;$/;"	m	struct:CUstream_st
m_optionDesc	src/option_parser.cc	/^   string m_optionDesc;$/;"	m	class:OptionRegistryInterface	file:
m_optionMap	src/option_parser.cc	/^   OptionMap m_optionMap;$/;"	m	class:OptionParser	file:
m_optionName	src/option_parser.cc	/^   string m_optionName;$/;"	m	class:OptionRegistryInterface	file:
m_optionReg	src/option_parser.cc	/^   OptionCollection m_optionReg;$/;"	m	class:OptionParser	file:
m_options	src/cuda-sim/ptx_ir.h	/^   std::list<int>          m_options;$/;"	m	class:ptx_instruction
m_out	src/gpgpu-sim/shader.h	/^       port_vector_t m_in,m_out;$/;"	m	class:opndcoll_rfu_t::input_port_t
m_outer_level_prioritization	src/gpgpu-sim/shader.h	/^    scheduler_prioritization_type m_outer_level_prioritization;$/;"	m	class:two_level_active_scheduler
m_outgoing_traffic_stats	src/gpgpu-sim/shader.h	/^    traffic_breakdown *m_outgoing_traffic_stats; \/\/ core to memory partitions$/;"	m	class:shader_core_stats
m_output_register	src/gpgpu-sim/shader.h	/^      register_set* m_output_register; \/\/ pipeline register to issue to when ready$/;"	m	class:opndcoll_rfu_t::collector_unit_t
m_overwrites_input	common/kernel_info_t.h	/^   bool m_overwrites_input;$/;"	m	class:kernel_info_t
m_param_bytes	src/cuda-sim/ptx_ir.h	/^   unsigned  m_param_bytes;$/;"	m	class:arg_buffer_t
m_param_mem	common/kernel_info_t.h	/^   class memory_space *m_param_mem;$/;"	m	class:kernel_info_t	typeref:class:kernel_info_t::memory_space
m_param_value	src/cuda-sim/ptx_ir.h	/^   void     *m_param_value;$/;"	m	class:arg_buffer_t
m_parent	common/kernel_info_t.h	/^   ChildProcess* m_parent;$/;"	m	class:kernel_info_t
m_parent	src/cuda-sim/ptx_ir.h	/^   symbol_table *m_parent;$/;"	m	class:symbol_table
m_partition_addr	src/gpgpu-sim/mem_fetch.h	/^   new_addr_type m_partition_addr; \/\/ linear physical address *within* dram partition (partition bank select bits squeezed out)$/;"	m	class:mem_fetch
m_pc	src/abstract_hardware_model.h	/^        address_type m_pc;$/;"	m	struct:simt_stack::simt_stack_entry
m_pc	src/gpgpu-sim/shader.h	/^    address_type m_pc;$/;"	m	struct:ifetch_buffer_t
m_pending	src/stream_manager.h	/^    bool m_pending; \/\/ front operation has started but not yet completed$/;"	m	struct:CUstream_st
m_pending_hit	src/gpgpu-sim/gpu-cache.h	/^    unsigned m_pending_hit; \/\/ number of cache miss that hit a line that is allocated but not filled$/;"	m	class:tag_array
m_pending_warps	src/gpgpu-sim/shader.h	/^	std::deque< shd_warp_t* > m_pending_warps;$/;"	m	class:two_level_active_scheduler
m_pending_writes	src/gpgpu-sim/shader.h	/^   std::map<unsigned\/*warp_id*\/, std::map<unsigned\/*regnum*\/,unsigned\/*count*\/> > m_pending_writes;$/;"	m	class:ldst_unit
m_per_scalar_thread	src/abstract_hardware_model.h	/^    std::vector<per_thread_info> m_per_scalar_thread;$/;"	m	class:warp_inst_t
m_per_scalar_thread_valid	src/abstract_hardware_model.h	/^    bool m_per_scalar_thread_valid;$/;"	m	class:warp_inst_t
m_pid	src/cuda-sim/ptx_sim.h	/^   unsigned                   m_pid;$/;"	m	class:ptx_cta_info
m_pipeline_depth	src/gpgpu-sim/shader.h	/^    unsigned m_pipeline_depth;$/;"	m	class:pipelined_simd_unit
m_pipeline_duty_cycle	src/gpgpu-sim/power_stat.h	/^    float *m_pipeline_duty_cycle[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_pipeline_duty_cycle	src/gpgpu-sim/shader.h	/^    float *m_pipeline_duty_cycle;$/;"	m	struct:shader_core_stats_pod
m_pipeline_reg	src/gpgpu-sim/shader.h	/^    std::vector<register_set> m_pipeline_reg;$/;"	m	class:shader_core_ctx
m_pipeline_reg	src/gpgpu-sim/shader.h	/^    warp_inst_t **m_pipeline_reg;$/;"	m	class:pipelined_simd_unit
m_power_stats	src/gpgpu-sim/gpu-sim.h	/^   class power_stat_t *m_power_stats;$/;"	m	class:gpgpu_sim	typeref:class:gpgpu_sim::power_stat_t
m_pred	src/cuda-sim/ptx_ir.h	/^   const symbol           *m_pred;$/;"	m	class:ptx_instruction
m_pred_mod	src/cuda-sim/ptx_ir.h	/^   int                    m_pred_mod;$/;"	m	class:ptx_instruction
m_prev_snapshot_access	src/gpgpu-sim/gpu-cache.h	/^    unsigned m_prev_snapshot_access;$/;"	m	class:tag_array
m_prev_snapshot_miss	src/gpgpu-sim/gpu-cache.h	/^    unsigned m_prev_snapshot_miss;$/;"	m	class:tag_array
m_prev_snapshot_pending_hit	src/gpgpu-sim/gpu-cache.h	/^    unsigned m_prev_snapshot_pending_hit;$/;"	m	class:tag_array
m_prioritization	src/gpgpu-sim/shader.h	/^    scheduler_prioritization_type m_prioritization;$/;"	m	class:swl_scheduler
m_private_credit	src/gpgpu-sim/l2cache.h	/^      std::vector<int> m_private_credit; $/;"	m	class:memory_partition_unit::arbitration_metadata
m_private_credit_limit	src/gpgpu-sim/l2cache.h	/^      int m_private_credit_limit; $/;"	m	class:memory_partition_unit::arbitration_metadata
m_ptr_space	src/cuda-sim/ptx_ir.h	/^   memory_space_t m_ptr_space; $/;"	m	class:param_info
m_ptx_convert_to_ptxplus	src/abstract_hardware_model.h	/^    int m_ptx_convert_to_ptxplus;$/;"	m	class:gpgpu_functional_sim_config
m_ptx_extensions	src/cuda-sim/ptx_sim.h	/^      unsigned m_ptx_extensions;$/;"	m	class:ptx_version
m_ptx_force_max_capability	src/abstract_hardware_model.h	/^    unsigned m_ptx_force_max_capability;$/;"	m	class:gpgpu_functional_sim_config
m_ptx_kernel_param_info	src/cuda-sim/ptx_ir.h	/^   std::map<unsigned,param_info> m_ptx_kernel_param_info;$/;"	m	class:function_info
m_ptx_save_converted_ptxplus	src/cuda-sim/ptx_loader.cc	/^bool m_ptx_save_converted_ptxplus;$/;"	v
m_ptx_use_cuobjdump	src/abstract_hardware_model.h	/^    int m_ptx_use_cuobjdump;$/;"	m	class:gpgpu_functional_sim_config
m_ptx_version	src/cuda-sim/ptx_ir.h	/^   ptx_version m_ptx_version;$/;"	m	class:symbol_table
m_ptx_version	src/cuda-sim/ptx_sim.h	/^      float    m_ptx_version;$/;"	m	class:ptx_version
m_queue	src/gpgpu-sim/shader.h	/^      std::list<op_t> *m_queue;$/;"	m	class:opndcoll_rfu_t::arbiter_t
m_raw_addr	src/gpgpu-sim/mem_fetch.h	/^   addrdec_t m_raw_addr; \/\/ raw physical address (i.e., decoded DRAM chip-row-bank-column address)$/;"	m	class:mem_fetch
m_rd_hit	src/gpgpu-sim/gpu-cache.h	/^        (data_cache::*m_rd_hit)( new_addr_type addr,$/;"	m	class:data_cache	typeref:enum:data_cache::m_rd_hit
m_rd_miss	src/gpgpu-sim/gpu-cache.h	/^        (data_cache::*m_rd_miss)( new_addr_type addr,$/;"	m	class:data_cache	typeref:enum:data_cache::m_rd_miss
m_read_regfile_acesses	src/gpgpu-sim/power_stat.h	/^    unsigned *m_read_regfile_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_read_regfile_acesses	src/gpgpu-sim/shader.h	/^    unsigned *m_read_regfile_acesses;$/;"	m	struct:shader_core_stats_pod
m_readmode	src/abstract_hardware_model.h	/^    enum cudaTextureReadMode m_readmode; $/;"	m	struct:textureReferenceAttr	typeref:enum:textureReferenceAttr::cudaTextureReadMode
m_ready	src/gpgpu-sim/gpu-cache.h	/^        bool m_ready;$/;"	m	struct:tex_cache::rob_entry
m_real_run	common/kernel_info_t.h	/^   bool m_real_run;$/;"	m	class:kernel_info_t
m_recvg_pc	src/abstract_hardware_model.h	/^        address_type m_recvg_pc;$/;"	m	struct:simt_stack::simt_stack_entry
m_reg_allocator	src/cuda-sim/ptx_ir.h	/^   unsigned m_reg_allocator;$/;"	m	class:symbol_table
m_reg_num	src/cuda-sim/ptx_ir.h	/^   unsigned m_reg_num; $/;"	m	class:symbol
m_reg_num_valid	src/cuda-sim/ptx_ir.h	/^   bool m_reg_num_valid; $/;"	m	class:symbol
m_reg_value	src/cuda-sim/ptx_ir.h	/^   ptx_reg_t m_reg_value;$/;"	m	class:arg_buffer_t
m_register	src/gpgpu-sim/shader.h	/^      unsigned  m_register;$/;"	m	class:opndcoll_rfu_t::op_t
m_regs	src/cuda-sim/ptx_sim.h	/^   std::list<reg_map_t> m_regs;$/;"	m	class:ptx_thread_info
m_replacement_policy	src/gpgpu-sim/gpu-cache.h	/^    enum replacement_policy_t m_replacement_policy; \/\/ 'L' = LRU, 'F' = FIFO$/;"	m	class:cache_config	typeref:enum:cache_config::replacement_policy_t
m_req_size	src/abstract_hardware_model.h	/^   unsigned      m_req_size; \/\/ bytes$/;"	m	class:mem_access_t
m_request	src/gpgpu-sim/gpu-cache.h	/^        mem_fetch *m_request;     \/\/ request information$/;"	m	struct:tex_cache::fragment_entry
m_request	src/gpgpu-sim/gpu-cache.h	/^        mem_fetch *m_request;$/;"	m	struct:tex_cache::rob_entry
m_request_fifo	src/gpgpu-sim/gpu-cache.h	/^    fifo<mem_fetch*>        m_request_fifo;$/;"	m	class:tex_cache
m_request_fifo_entries	src/gpgpu-sim/gpu-cache.h	/^        unsigned m_request_fifo_entries;$/;"	m	union:cache_config::__anon32
m_request_queue_status	src/gpgpu-sim/gpu-cache.h	/^    enum mem_fetch_status   m_request_queue_status;$/;"	m	class:tex_cache	typeref:enum:tex_cache::mem_fetch_status
m_request_tracker	src/gpgpu-sim/l2cache.h	/^   std::set<mem_fetch*> m_request_tracker;$/;"	m	class:memory_sub_partition
m_request_uid	src/gpgpu-sim/mem_fetch.h	/^   unsigned m_request_uid;$/;"	m	class:mem_fetch
m_res_fail	src/gpgpu-sim/gpu-cache.h	/^    unsigned m_res_fail;$/;"	m	class:tag_array
m_reset_at_snap_shot	src/gpgpu-sim/stat-tool.h	/^   bool m_reset_at_snap_shot;$/;"	m	class:linear_histogram_logger
m_response_fifo	src/gpgpu-sim/shader.h	/^    std::list<mem_fetch*> m_response_fifo;$/;"	m	class:simt_core_cluster
m_response_fifo	src/gpgpu-sim/shader.h	/^   std::list<mem_fetch*> m_response_fifo;$/;"	m	class:ldst_unit
m_result_bus	src/gpgpu-sim/shader.h	/^    std::vector< std::bitset<MAX_ALU_LATENCY>* > m_result_bus;$/;"	m	class:shader_core_ctx
m_result_fifo	src/gpgpu-sim/gpu-cache.h	/^    fifo<mem_fetch*>        m_result_fifo; \/\/ next completed texture fetch$/;"	m	class:tex_cache
m_result_fifo_entries	src/gpgpu-sim/gpu-cache.h	/^    unsigned m_result_fifo_entries;$/;"	m	class:cache_config
m_result_port	src/gpgpu-sim/shader.h	/^    register_set *m_result_port;$/;"	m	class:pipelined_simd_unit
m_return_var	src/cuda-sim/ptx_ir.h	/^   operand_info m_return_var;$/;"	m	class:ptx_instruction
m_return_var_dst	src/cuda-sim/ptx_sim.h	/^   const symbol  *m_return_var_dst;$/;"	m	struct:stack_entry
m_return_var_src	src/cuda-sim/ptx_sim.h	/^   const symbol  *m_return_var_src;$/;"	m	struct:stack_entry
m_return_var_sym	src/cuda-sim/ptx_ir.h	/^   const symbol *m_return_var_sym;$/;"	m	class:function_info
m_rfu	src/gpgpu-sim/shader.h	/^      opndcoll_rfu_t *m_rfu;$/;"	m	class:opndcoll_rfu_t::collector_unit_t
m_rob	src/gpgpu-sim/gpu-cache.h	/^    fifo<rob_entry>         m_rob;$/;"	m	class:tex_cache
m_rob_entries	src/gpgpu-sim/gpu-cache.h	/^        unsigned m_rob_entries;$/;"	m	union:cache_config::__anon33
m_rob_index	src/gpgpu-sim/gpu-cache.h	/^        unsigned m_rob_index;$/;"	m	struct:tex_cache::extra_mf_fields
m_rob_status	src/gpgpu-sim/gpu-cache.h	/^    enum mem_fetch_status   m_rob_status;$/;"	m	class:tex_cache	typeref:enum:tex_cache::mem_fetch_status
m_rop	src/gpgpu-sim/l2cache.h	/^   std::queue<rop_delay_t> m_rop;$/;"	m	class:memory_sub_partition
m_rounding_mode	src/cuda-sim/ptx_ir.h	/^   unsigned            m_rounding_mode;$/;"	m	class:ptx_instruction
m_running_ctas	common/kernel_info_t.h	/^   unsigned m_running_ctas;$/;"	m	class:kernel_info_t
m_running_kernels	src/gpgpu-sim/gpu-sim.h	/^   std::vector<kernel_info_t*> m_running_kernels;$/;"	m	class:gpgpu_sim
m_saturation_mode	src/cuda-sim/ptx_ir.h	/^   unsigned            m_saturation_mode;$/;"	m	class:ptx_instruction
m_saved	common/cta_stat_context.h	/^    bool m_saved;$/;"	m	class:cta_stat_context_t
m_scalar_type	src/cuda-sim/ptx_ir.h	/^   std::list<int>          m_scalar_type;$/;"	m	class:ptx_instruction
m_scalar_type_spec	src/cuda-sim/ptx_ir.h	/^   int m_scalar_type_spec;$/;"	m	class:type_info_key
m_scope	src/cuda-sim/ptx_ir.h	/^   symbol_table *m_scope;$/;"	m	class:type_info
m_scope_name	src/cuda-sim/ptx_ir.h	/^   std::string m_scope_name;$/;"	m	class:symbol_table
m_scoreboard	src/gpgpu-sim/shader.h	/^    Scoreboard               *m_scoreboard;$/;"	m	class:shader_core_ctx
m_scoreboard	src/gpgpu-sim/shader.h	/^    Scoreboard* m_scoreboard; $/;"	m	class:scheduler_unit
m_scoreboard	src/gpgpu-sim/shader.h	/^   Scoreboard *m_scoreboard;$/;"	m	class:ldst_unit
m_service_stream_zero	src/stream_manager.h	/^    bool m_service_stream_zero;$/;"	m	class:stream_manager
m_set_index_function	src/gpgpu-sim/gpu-cache.h	/^	enum set_index_function m_set_index_function;$/;"	m	class:cache_config	typeref:enum:cache_config::set_index_function
m_sfu_out	src/gpgpu-sim/shader.h	/^    register_set* m_sfu_out;$/;"	m	class:scheduler_unit
m_shader	common/shd_warp_t.h	/^    class shader_core_ctx *m_shader;$/;"	m	class:shd_warp_t	typeref:class:shd_warp_t::shader_core_ctx
m_shader	src/gpgpu-sim/shader.h	/^    shader_core_ctx* m_shader;$/;"	m	class:scheduler_unit
m_shader	src/gpgpu-sim/shader.h	/^   shader_core_ctx                 *m_shader;$/;"	m	class:opndcoll_rfu_t
m_shader_config	src/gpgpu-sim/gpu-sim.h	/^    shader_core_config m_shader_config;$/;"	m	class:gpgpu_sim_config
m_shader_config	src/gpgpu-sim/gpu-sim.h	/^   const struct shader_core_config *m_shader_config;$/;"	m	class:gpgpu_sim	typeref:struct:gpgpu_sim::shader_core_config
m_shader_config	src/gpgpu-sim/mem_latency_stat.h	/^   const struct shader_core_config *m_shader_config;$/;"	m	class:memory_stats_t	typeref:struct:memory_stats_t::shader_core_config
m_shader_dynamic_warp_issue_distro	src/gpgpu-sim/shader.h	/^    std::vector< std::vector<unsigned> > m_shader_dynamic_warp_issue_distro;$/;"	m	class:shader_core_stats
m_shader_stats	src/gpgpu-sim/gpu-sim.h	/^   class shader_core_stats  *m_shader_stats;$/;"	m	class:gpgpu_sim	typeref:class:gpgpu_sim::shader_core_stats
m_shader_warp_slot_issue_distro	src/gpgpu-sim/shader.h	/^    std::vector< std::vector<unsigned> > m_shader_warp_slot_issue_distro;$/;"	m	class:shader_core_stats
m_sharedMem	common/kernel_config.h	/^  size_t m_sharedMem;$/;"	m	class:kernel_config
m_shared_credit	src/gpgpu-sim/l2cache.h	/^      int m_shared_credit; $/;"	m	class:memory_partition_unit::arbitration_metadata
m_shared_credit_limit	src/gpgpu-sim/l2cache.h	/^      int m_shared_credit_limit; $/;"	m	class:memory_partition_unit::arbitration_metadata
m_shared_mem	src/cuda-sim/ptx_sim.h	/^   memory_space   *m_shared_mem;$/;"	m	class:ptx_thread_info
m_shared_next	src/cuda-sim/ptx_ir.h	/^   unsigned m_shared_next;$/;"	m	class:symbol_table
m_sid	common/preemption_info.h	/^    unsigned m_sid; \/\/ shader id$/;"	m	class:preemption_info_t
m_sid	src/gpgpu-sim/mem_fetch.h	/^   unsigned m_sid;$/;"	m	class:mem_fetch
m_sid	src/gpgpu-sim/scoreboard.h	/^    unsigned m_sid;$/;"	m	class:Scoreboard
m_sid	src/gpgpu-sim/shader.h	/^    unsigned m_sid; \/\/ shader id$/;"	m	class:shader_core_ctx
m_sid	src/gpgpu-sim/shader.h	/^   unsigned m_sid;$/;"	m	class:ldst_unit
m_sim_mode	src/stream_manager.h	/^    bool m_sim_mode;$/;"	m	class:stream_operation
m_simd_width	src/gpgpu-sim/stat-tool.h	/^   int m_simd_width;$/;"	m	class:insn_warp_occ_logger
m_simt_stack	src/abstract_hardware_model.h	/^        simt_stack  **m_simt_stack; \/\/ pdom based reconvergence context for each warp$/;"	m	class:core_t
m_simt_stack	src/gpgpu-sim/shader.h	/^    simt_stack** m_simt_stack;$/;"	m	class:scheduler_unit
m_size	libcuda/cuda_runtime_api.cc	/^	size_t m_size;$/;"	m	struct:glbmap_entry	file:
m_size	src/cuda-sim/ptx_ir.h	/^   size_t m_size;$/;"	m	class:param_info
m_size	src/cuda-sim/ptx_ir.h	/^   unsigned m_size; \/\/ in bytes$/;"	m	class:symbol
m_size	src/gpgpu-sim/gpu-cache.h	/^        unsigned   m_size; \/\/ maximum number of entries in fifo$/;"	m	class:tex_cache::fifo
m_sm_idx	src/cuda-sim/ptx_sim.h	/^   unsigned                m_sm_idx;$/;"	m	class:ptx_cta_info
m_sm_version	src/cuda-sim/ptx_sim.h	/^      unsigned m_sm_version;$/;"	m	class:ptx_version
m_sm_version_str	src/cuda-sim/ptx_sim.h	/^      std::string m_sm_version_str;$/;"	m	class:ptx_version
m_sm_version_valid	src/cuda-sim/ptx_sim.h	/^      unsigned m_sm_version_valid;$/;"	m	class:ptx_version
m_snap_shot_interval	src/gpgpu-sim/stat-tool.h	/^   unsigned long long  m_snap_shot_interval;$/;"	m	class:snap_shot_trigger
m_source	src/cuda-sim/ptx_ir.h	/^   std::string          m_source;$/;"	m	class:ptx_instruction
m_source_file	src/cuda-sim/ptx_ir.h	/^   std::string             m_source_file;$/;"	m	class:ptx_instruction
m_source_line	src/cuda-sim/ptx_ir.h	/^   unsigned                m_source_line;$/;"	m	class:ptx_instruction
m_sp_out	src/gpgpu-sim/shader.h	/^    register_set* m_sp_out;$/;"	m	class:scheduler_unit
m_space_spec	src/cuda-sim/ptx_ir.h	/^   memory_space_t m_space_spec; $/;"	m	class:type_info_key
m_space_spec	src/cuda-sim/ptx_ir.h	/^   memory_space_t m_space_spec;$/;"	m	class:ptx_instruction
m_special_cache_config	src/gpgpu-sim/gpu-sim.h	/^   std::map<std::string, FuncCache> m_special_cache_config;$/;"	m	class:gpgpu_sim
m_src_op	src/cuda-sim/ptx_ir.h	/^   operand_info m_src_op;$/;"	m	class:arg_buffer_t
m_src_op	src/gpgpu-sim/shader.h	/^      op_t *m_src_op;$/;"	m	class:opndcoll_rfu_t::collector_unit_t
m_stack	src/abstract_hardware_model.h	/^    std::deque<simt_stack_entry> m_stack;$/;"	m	class:simt_stack
m_start	common/gpgpu_ptx_sim_arg.h	/^   const void *m_start;$/;"	m	struct:gpgpu_ptx_sim_arg
m_start_PC	src/cuda-sim/ptx_ir.h	/^   unsigned m_start_PC;$/;"	m	class:function_info
m_started_cycles	common/cta_stat_context.h	/^      unsigned long long m_started_cycles;$/;"	m	union:cta_stat_context_t::__anon34
m_stats	src/gpgpu-sim/gpu-cache.h	/^    cache_stats m_stats;$/;"	m	class:baseline_cache
m_stats	src/gpgpu-sim/gpu-cache.h	/^    cache_stats m_stats;$/;"	m	class:tex_cache
m_stats	src/gpgpu-sim/gpu-cache.h	/^    std::vector< std::vector<unsigned> > m_stats;$/;"	m	class:cache_stats
m_stats	src/gpgpu-sim/l2cache.h	/^   class memory_stats_t *m_stats;$/;"	m	class:memory_partition_unit	typeref:class:memory_partition_unit::memory_stats_t
m_stats	src/gpgpu-sim/l2cache.h	/^   class memory_stats_t *m_stats;$/;"	m	class:memory_sub_partition	typeref:class:memory_sub_partition::memory_stats_t
m_stats	src/gpgpu-sim/shader.h	/^    shader_core_stats *m_stats;$/;"	m	class:scheduler_unit
m_stats	src/gpgpu-sim/shader.h	/^    shader_core_stats *m_stats;$/;"	m	class:shader_core_ctx
m_stats	src/gpgpu-sim/shader.h	/^    shader_core_stats *m_stats;$/;"	m	class:simt_core_cluster
m_stats	src/gpgpu-sim/shader.h	/^   shader_core_stats *m_stats; $/;"	m	class:ldst_unit
m_stats	src/gpgpu-sim/traffic_breakdown.h	/^   traffic_stat_t m_stats; $/;"	m	class:traffic_breakdown
m_stats_kain	src/gpgpu-sim/gpu-cache.h	/^	std::vector< std::vector<unsigned> > m_stats_kain[384];\/\/KAIN currently only support 24 SMs$/;"	m	class:cache_stats
m_status	src/gpgpu-sim/gpu-cache.h	/^    cache_block_state    m_status;$/;"	m	struct:cache_block_t
m_status	src/gpgpu-sim/mem_fetch.h	/^   enum mem_fetch_status m_status;$/;"	m	class:mem_fetch	typeref:enum:mem_fetch::mem_fetch_status
m_status_change	src/gpgpu-sim/mem_fetch.h	/^   unsigned long long m_status_change;$/;"	m	class:mem_fetch
m_stores_outstanding	common/shd_warp_t.h	/^    unsigned m_stores_outstanding; \/\/ number of store requests sent but not yet acknowledged$/;"	m	class:shd_warp_t
m_stream	common/kernel_config.h	/^  struct CUstream_st *m_stream;$/;"	m	class:kernel_config	typeref:struct:kernel_config::CUstream_st
m_stream	src/stream_manager.h	/^    struct CUstream_st *m_stream;$/;"	m	class:stream_operation	typeref:struct:stream_operation::CUstream_st
m_stream_zero	src/stream_manager.h	/^    CUstream_st m_stream_zero;$/;"	m	class:stream_manager
m_streams	src/stream_manager.h	/^    std::list<CUstream_st *> m_streams;$/;"	m	class:stream_manager
m_stride	src/gpgpu-sim/histogram.h	/^   int m_stride;$/;"	m	class:linear_histogram
m_sub_partition	src/gpgpu-sim/l2cache.h	/^   class memory_sub_partition **m_sub_partition; $/;"	m	class:memory_partition_unit	typeref:class:memory_partition_unit::memory_sub_partition
m_sub_partition_id	src/gpgpu-sim/gpu-cache.h	/^    int m_sub_partition_id;$/;"	m	class:baseline_cache
m_sub_partition_id	src/gpgpu-sim/gpu-cache.h	/^    int m_sub_partition_id;$/;"	m	class:mshr_table
m_sum	src/gpgpu-sim/histogram.h	/^   signed long long int m_sum; \/\/ for calculating the average$/;"	m	class:binned_histogram
m_supervised_warps	src/gpgpu-sim/shader.h	/^    std::vector< shd_warp_t* > m_supervised_warps;$/;"	m	class:scheduler_unit
m_surf_mem	src/abstract_hardware_model.h	/^    class memory_space *m_surf_mem;$/;"	m	class:gpgpu_t	typeref:class:gpgpu_t::memory_space
m_symbol	src/stream_manager.h	/^    const char *m_symbol;$/;"	m	class:stream_operation
m_symbol_table	src/cuda-sim/ptx_sim.h	/^   symbol_table  *m_symbol_table;$/;"	m	class:ptx_thread_info
m_symbol_table	src/cuda-sim/ptx_sim.h	/^   symbol_table  *m_symbol_table;$/;"	m	struct:stack_entry
m_symbolic	src/cuda-sim/ptx_ir.h	/^      const symbol*  m_symbolic;$/;"	m	union:operand_info::__anon4
m_symbols	src/cuda-sim/ptx_ir.h	/^   std::map<std::string, symbol *> m_symbols; \/\/map from name of register to pointers to the registers$/;"	m	class:symbol_table
m_symtab	src/cuda-sim/ptx_ir.h	/^   symbol_table *m_symtab;$/;"	m	class:function_info
m_tag	src/gpgpu-sim/gpu-cache.h	/^    new_addr_type    m_tag;$/;"	m	struct:cache_block_t
m_tag_array	src/gpgpu-sim/gpu-cache.h	/^    tag_array*  m_tag_array;$/;"	m	class:baseline_cache
m_tags	src/gpgpu-sim/gpu-cache.h	/^    tag_array               m_tags;$/;"	m	class:tex_cache
m_tail	src/gpgpu-sim/delayqueue.h	/^   fifo_data<T> *m_tail;$/;"	m	class:fifo_pipeline
m_tail	src/gpgpu-sim/gpu-cache.h	/^        unsigned   m_tail; \/\/ oldest entry found here$/;"	m	class:tex_cache::fifo
m_techniques	common/preemption_info.h	/^    std::map<unsigned, PREEMPTION_TECHNIQUE_ENUM> m_techniques;$/;"	m	class:preemption_info_t
m_tex_mem	src/abstract_hardware_model.h	/^    class memory_space *m_tex_mem;$/;"	m	class:gpgpu_t	typeref:class:gpgpu_t::memory_space
m_tex_next	src/cuda-sim/ptx_ir.h	/^   unsigned m_tex_next;$/;"	m	class:symbol_table
m_texcache_linesize	src/abstract_hardware_model.h	/^    unsigned m_texcache_linesize;$/;"	m	class:gpgpu_functional_sim_config
m_texmode_unified	src/cuda-sim/ptx_sim.h	/^      bool     m_texmode_unified;$/;"	m	class:ptx_version
m_texref	src/abstract_hardware_model.h	/^    const struct textureReference *m_texref; $/;"	m	struct:textureReferenceAttr	typeref:struct:textureReferenceAttr::textureReference
m_thd_span	src/gpgpu-sim/stat-tool.h	/^   thread_insn_span m_thd_span;$/;"	m	class:thread_CFlocality
m_thd_span_archive	src/gpgpu-sim/stat-tool.h	/^   std::list<thread_insn_span> m_thd_span_archive;$/;"	m	class:thread_CFlocality
m_thread	src/abstract_hardware_model.h	/^        class ptx_thread_info ** m_thread;$/;"	m	class:core_t	typeref:class:core_t::ptx_thread_info
m_thread	src/debug.cc	/^   const ptx_thread_info *m_thread;$/;"	m	class:watchpoint_event	file:
m_threadState	src/gpgpu-sim/shader.h	/^    thread_ctx_t             *m_threadState;$/;"	m	class:shader_core_ctx
m_thread_done	src/cuda-sim/ptx_sim.h	/^   bool m_thread_done;$/;"	m	class:ptx_thread_info
m_thread_pc	src/gpgpu-sim/stat-tool.h	/^   std::vector<address_type> m_thread_pc;$/;"	m	class:thread_CFlocality
m_thread_uid	src/debug.h	/^   unsigned     m_thread_uid;$/;"	m	class:brk_pt
m_threads_in_cta	src/cuda-sim/ptx_sim.h	/^   std::set<ptx_thread_info*>    m_threads_in_cta;$/;"	m	class:ptx_cta_info
m_threads_that_have_exited	src/cuda-sim/ptx_sim.h	/^   std::set<ptx_thread_info*>  m_threads_that_have_exited;$/;"	m	class:ptx_cta_info
m_tid	src/cuda-sim/ptx_sim.h	/^   dim3   m_tid;$/;"	m	class:ptx_thread_info
m_time	src/gpgpu-sim/gpu-cache.h	/^        unsigned m_time; \/\/ which cycle did this entry become ready?$/;"	m	struct:tex_cache::rob_entry
m_timestamp	src/gpgpu-sim/mem_fetch.h	/^   unsigned m_timestamp;  \/\/ set to gpu_sim_cycle+gpu_tot_sim_cycle at struct creation$/;"	m	class:mem_fetch
m_timestamp2	src/gpgpu-sim/mem_fetch.h	/^   unsigned m_timestamp2; \/\/ set to gpu_sim_cycle+gpu_tot_sim_cycle when pushed onto icnt to shader; only used for reads$/;"	m	class:mem_fetch
m_to_be_migrated	common/kernel_info_t.h	/^   std::vector<dim3> m_to_be_migrated;$/;"	m	class:kernel_info_t
m_to_be_switched	common/kernel_info_t.h	/^   std::priority_queue<timed_dim3, std::vector<timed_dim3>, timed_dim3_comparison> m_to_be_switched;$/;"	m	class:kernel_info_t
m_to_option	src/cuda-sim/ptx_ir.h	/^   bool                m_to_option;$/;"	m	class:ptx_instruction
m_total_cta_launched	src/gpgpu-sim/gpu-sim.h	/^   unsigned m_total_cta_launched;$/;"	m	class:gpgpu_sim
m_tpc	src/gpgpu-sim/mem_fetch.h	/^   unsigned m_tpc;$/;"	m	class:mem_fetch
m_tpc	src/gpgpu-sim/shader.h	/^    unsigned m_tpc; \/\/ texture processor cluster id (aka, node id when using interconnect concentration)$/;"	m	class:shader_core_ctx
m_tpc	src/gpgpu-sim/shader.h	/^   unsigned m_tpc;$/;"	m	class:ldst_unit
m_type	src/abstract_hardware_model.h	/^        stack_entry_type m_type;$/;"	m	struct:simt_stack::simt_stack_entry
m_type	src/abstract_hardware_model.h	/^   enum _memory_space_t m_type;$/;"	m	class:memory_space_t	typeref:enum:memory_space_t::_memory_space_t
m_type	src/abstract_hardware_model.h	/^   mem_access_type m_type;$/;"	m	class:mem_access_t
m_type	src/cuda-sim/ptx_ir.h	/^   const type_info *m_type;$/;"	m	class:symbol
m_type	src/cuda-sim/ptx_ir.h	/^   enum operand_type m_type;$/;"	m	class:operand_info	typeref:enum:operand_info::operand_type
m_type	src/cuda-sim/ptx_ir.h	/^   int m_type;$/;"	m	class:param_info
m_type	src/gpgpu-sim/mem_fetch.h	/^   enum mf_type m_type;$/;"	m	class:mem_fetch	typeref:enum:mem_fetch::mf_type
m_type	src/stream_manager.h	/^    stream_operation_type m_type;$/;"	m	class:stream_operation
m_type_id	src/gpgpu-sim/gpu-cache.h	/^    int m_type_id; \/\/ what kind of cache is this (normal, texture, constant)$/;"	m	class:tag_array
m_type_info	src/cuda-sim/ptx_ir.h	/^   type_info_key m_type_info;$/;"	m	class:type_info
m_types	src/cuda-sim/ptx_ir.h	/^   std::map<type_info_key,type_info*,type_info_key_compare>  m_types;$/;"	m	class:symbol_table
m_uid	common/cu_event_st.h	/^   int m_uid;$/;"	m	class:CUevent_st
m_uid	common/kernel_info_t.h	/^   unsigned m_uid;$/;"	m	class:kernel_info_t
m_uid	src/abstract_hardware_model.h	/^    unsigned m_uid;$/;"	m	class:warp_inst_t
m_uid	src/abstract_hardware_model.h	/^   unsigned      m_uid;$/;"	m	class:mem_access_t
m_uid	src/cuda-sim/ptx_ir.h	/^   unsigned          m_uid;$/;"	m	class:ptx_instruction
m_uid	src/cuda-sim/ptx_ir.h	/^   unsigned m_uid;$/;"	m	class:function_info
m_uid	src/cuda-sim/ptx_ir.h	/^   unsigned m_uid;$/;"	m	class:operand_info
m_uid	src/cuda-sim/ptx_ir.h	/^   unsigned m_uid;$/;"	m	class:symbol
m_uid	src/cuda-sim/ptx_sim.h	/^   unsigned long long         m_uid;$/;"	m	class:ptx_cta_info
m_uid	src/cuda-sim/ptx_sim.h	/^   unsigned m_uid;$/;"	m	class:ptx_thread_info
m_uid	src/stream_manager.h	/^    unsigned m_uid;$/;"	m	struct:CUstream_st
m_uni	src/cuda-sim/ptx_ir.h	/^   bool                m_uni; \/\/if branch instruction, this evaluates to true for uniform branches (ie jumps)$/;"	m	class:ptx_instruction
m_unit	src/gpgpu-sim/l2cache.h	/^    memory_sub_partition *m_unit;$/;"	m	class:L2interface
m_unsigned	src/cuda-sim/ptx_ir.h	/^      unsigned int    m_unsigned;$/;"	m	union:operand_info::__anon4
m_updates	common/cu_event_st.h	/^   int m_updates;$/;"	m	class:CUevent_st
m_valid	common/cta_stat_context.h	/^    bool m_valid;$/;"	m	class:cta_stat_context_t
m_valid	common/shd_warp_t.h	/^       bool m_valid;$/;"	m	struct:shd_warp_t::ibuffer_entry
m_valid	src/abstract_hardware_model.h	/^    bool m_valid;$/;"	m	struct:core_config
m_valid	src/cuda-sim/ptx_ir.h	/^   bool m_valid;$/;"	m	class:operand_info
m_valid	src/cuda-sim/ptx_ir.h	/^   bool m_valid;$/;"	m	class:param_info
m_valid	src/cuda-sim/ptx_sim.h	/^      bool     m_valid;$/;"	m	class:ptx_version
m_valid	src/cuda-sim/ptx_sim.h	/^   bool   m_valid;$/;"	m	class:ptx_thread_info
m_valid	src/cuda-sim/ptx_sim.h	/^   bool m_valid;$/;"	m	struct:stack_entry
m_valid	src/debug.h	/^   bool         m_valid;$/;"	m	class:brk_pt
m_valid	src/gpgpu-sim/gpu-cache.h	/^        bool m_valid;$/;"	m	struct:baseline_cache::extra_mf_fields
m_valid	src/gpgpu-sim/gpu-cache.h	/^        bool m_valid;$/;"	m	struct:tex_cache::data_block
m_valid	src/gpgpu-sim/gpu-cache.h	/^        bool m_valid;$/;"	m	struct:tex_cache::extra_mf_fields
m_valid	src/gpgpu-sim/gpu-cache.h	/^    bool m_valid;$/;"	m	class:cache_config
m_valid	src/gpgpu-sim/gpu-sim.h	/^	bool m_valid;$/;"	m	struct:power_config
m_valid	src/gpgpu-sim/gpu-sim.h	/^    bool m_valid;$/;"	m	class:gpgpu_sim_config
m_valid	src/gpgpu-sim/gpu-sim.h	/^   bool m_valid;$/;"	m	struct:memory_config
m_valid	src/gpgpu-sim/shader.h	/^      bool m_valid;$/;"	m	class:opndcoll_rfu_t::op_t
m_valid	src/gpgpu-sim/shader.h	/^    bool m_valid;$/;"	m	struct:ifetch_buffer_t
m_value	src/cuda-sim/ptx_ir.h	/^   param_t m_value;$/;"	m	class:param_info
m_value	src/cuda-sim/ptx_ir.h	/^   } m_value;$/;"	m	class:operand_info	typeref:union:operand_info::__anon4
m_value	src/debug.h	/^   unsigned     m_value;$/;"	m	class:brk_pt
m_value_set	src/cuda-sim/ptx_ir.h	/^   bool m_value_set;$/;"	m	class:param_info
m_variable	src/option_parser.cc	/^   T &m_variable;$/;"	m	class:OptionRegistry	file:
m_vdouble	src/cuda-sim/ptx_ir.h	/^      double          m_vdouble[4];$/;"	m	union:operand_info::__anon4
m_vector	src/cuda-sim/ptx_ir.h	/^   bool m_vector;$/;"	m	class:operand_info
m_vector_spec	src/cuda-sim/ptx_ir.h	/^   int m_vector_spec;$/;"	m	class:ptx_instruction
m_vector_spec	src/cuda-sim/ptx_ir.h	/^   int m_vector_spec;$/;"	m	class:type_info_key
m_vector_symbolic	src/cuda-sim/ptx_ir.h	/^      const symbol**  m_vector_symbolic;$/;"	m	union:operand_info::__anon4
m_vfloat	src/cuda-sim/ptx_ir.h	/^      float           m_vfloat[4];$/;"	m	union:operand_info::__anon4
m_vint	src/cuda-sim/ptx_ir.h	/^      int             m_vint[4];$/;"	m	union:operand_info::__anon4
m_vote_mode	src/cuda-sim/ptx_ir.h	/^   enum vote_mode_t m_vote_mode;$/;"	m	class:ptx_instruction	typeref:enum:ptx_instruction::vote_mode_t
m_vunsigned	src/cuda-sim/ptx_ir.h	/^      unsigned int    m_vunsigned[4];$/;"	m	union:operand_info::__anon4
m_wallclock	common/cu_event_st.h	/^   time_t m_wallclock;$/;"	m	class:CUevent_st
m_warp	src/gpgpu-sim/shader.h	/^      const warp_inst_t *m_warp;$/;"	m	class:opndcoll_rfu_t::op_t
m_warp	src/gpgpu-sim/shader.h	/^      warp_inst_t  *m_warp;$/;"	m	class:opndcoll_rfu_t::collector_unit_t
m_warp	src/gpgpu-sim/shader.h	/^    std::vector<shd_warp_t>   m_warp;   \/\/ per warp information array$/;"	m	class:shader_core_ctx
m_warp	src/gpgpu-sim/shader.h	/^    std::vector<shd_warp_t>* m_warp;$/;"	m	class:scheduler_unit
m_warpAtBarrier	src/cuda-sim/cuda-sim.h	/^    bool* m_warpAtBarrier;$/;"	m	class:functionalCoreSim
m_warp_active	src/gpgpu-sim/shader.h	/^   warp_set_t m_warp_active;$/;"	m	class:barrier_set_t
m_warp_active_mask	src/abstract_hardware_model.h	/^    active_mask_t m_warp_active_mask; \/\/ dynamic active mask for timing model (after predication)$/;"	m	class:warp_inst_t
m_warp_at_barrier	src/gpgpu-sim/shader.h	/^   warp_set_t m_warp_at_barrier;$/;"	m	class:barrier_set_t
m_warp_count	src/abstract_hardware_model.h	/^        unsigned m_warp_count;$/;"	m	class:core_t
m_warp_id	common/shd_warp_t.h	/^    unsigned m_warp_id;$/;"	m	class:shd_warp_t
m_warp_id	src/abstract_hardware_model.h	/^    unsigned m_warp_id;$/;"	m	class:simt_stack
m_warp_id	src/abstract_hardware_model.h	/^    unsigned m_warp_id;$/;"	m	class:warp_inst_t
m_warp_id	src/gpgpu-sim/shader.h	/^      unsigned m_warp_id;$/;"	m	class:opndcoll_rfu_t::collector_unit_t
m_warp_id	src/gpgpu-sim/shader.h	/^    unsigned m_warp_id;$/;"	m	struct:ifetch_buffer_t
m_warp_issued_mask	src/abstract_hardware_model.h	/^    active_mask_t m_warp_issued_mask; \/\/ active mask at issue (prior to predication test) -- for instruction counting$/;"	m	class:warp_inst_t
m_warp_mask	src/abstract_hardware_model.h	/^   active_mask_t m_warp_mask;$/;"	m	class:mem_access_t
m_warp_size	common/shd_warp_t.h	/^    unsigned m_warp_size;$/;"	m	class:shd_warp_t
m_warp_size	src/abstract_hardware_model.h	/^        unsigned m_warp_size;$/;"	m	class:core_t
m_warp_size	src/abstract_hardware_model.h	/^    unsigned m_warp_size;$/;"	m	class:simt_stack
m_warp_size	src/gpgpu-sim/shader.h	/^   unsigned m_warp_size;$/;"	m	class:opndcoll_rfu_t
m_warps_active	src/cuda-sim/cuda-sim.h	/^  warp_set_t m_warps_active;$/;"	m	struct:barrier_context_t
m_warps_at_barrier	src/cuda-sim/cuda-sim.h	/^  warp_set_t m_warps_at_barrier;$/;"	m	struct:barrier_context_t
m_warps_mapped	src/cuda-sim/cuda-sim.h	/^  warp_set_t m_warps_mapped;$/;"	m	struct:barrier_context_t
m_watch	src/debug.h	/^   bool         m_watch;$/;"	m	class:brk_pt
m_watchpoints	src/cuda-sim/memory.h	/^   std::map<unsigned,mem_addr_t> m_watchpoints;$/;"	m	class:memory_space_impl
m_wid	common/warp_context.h	/^    unsigned m_wid;$/;"	m	class:warp_context_t
m_wid	src/gpgpu-sim/mem_fetch.h	/^   unsigned m_wid;$/;"	m	class:mem_fetch
m_wide	src/cuda-sim/ptx_ir.h	/^   bool                m_wide;$/;"	m	class:ptx_instruction
m_wr_alloc_type	src/gpgpu-sim/gpu-cache.h	/^    mem_access_type m_wr_alloc_type; \/\/ Specifies type of write allocate request (e.g., L1 or L2)$/;"	m	class:data_cache
m_wr_hit	src/gpgpu-sim/gpu-cache.h	/^        (data_cache::*m_wr_hit)( new_addr_type addr,$/;"	m	class:data_cache	typeref:enum:data_cache::m_wr_hit
m_wr_miss	src/gpgpu-sim/gpu-cache.h	/^        (data_cache::*m_wr_miss)( new_addr_type addr,$/;"	m	class:data_cache	typeref:enum:data_cache::m_wr_miss
m_wrbk_type	src/gpgpu-sim/gpu-cache.h	/^    mem_access_type m_wrbk_type; \/\/ Specifies type of writeback request (e.g., L1 or L2)$/;"	m	class:data_cache
m_write	src/abstract_hardware_model.h	/^   bool          m_write;$/;"	m	class:mem_access_t
m_write_alloc_policy	src/gpgpu-sim/gpu-cache.h	/^    write_allocate_policy_t m_write_alloc_policy;	\/\/ 'W' = Write allocate, 'N' = No write allocate$/;"	m	class:cache_config
m_write_policy	src/gpgpu-sim/gpu-cache.h	/^    enum write_policy_t m_write_policy;             \/\/ 'T' = write through, 'B' = write back, 'R' = read only$/;"	m	class:cache_config	typeref:enum:cache_config::write_policy_t
m_write_regfile_acesses	src/gpgpu-sim/power_stat.h	/^    unsigned *m_write_regfile_acesses[NUM_STAT_IDX];$/;"	m	struct:shader_core_power_stats_pod
m_write_regfile_acesses	src/gpgpu-sim/shader.h	/^    unsigned *m_write_regfile_acesses;$/;"	m	struct:shader_core_stats_pod
m_writeback_arb	src/gpgpu-sim/shader.h	/^   unsigned m_writeback_arb; \/\/ round-robin arbiter for writeback contention between L1T, L1C, shared$/;"	m	class:ldst_unit
machine_bits	src/gpuwattch/XML_Parse.h	/^	int machine_bits;$/;"	m	struct:__anon15
machine_bits	src/gpuwattch/XML_Parse.h	/^	int machine_bits;$/;"	m	struct:__anon26
machine_type	src/gpuwattch/XML_Parse.h	/^	int machine_type;$/;"	m	struct:__anon15
macro_PR_overhead	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:BranchPredictor
macro_PR_overhead	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:Core
macro_PR_overhead	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:EXECU
macro_PR_overhead	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:InstFetchU
macro_PR_overhead	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:LoadStoreU
macro_PR_overhead	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:MemManU
macro_PR_overhead	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:RegFU
macro_PR_overhead	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:SchedulerU
macro_PR_overhead	src/gpuwattch/logic.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:UndiffCore
macro_PR_overhead	src/gpuwattch/noc.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:NoC
macro_layout_overhead	src/gpuwattch/cacti/parameter.h	/^  double macro_layout_overhead;$/;"	m	class:TechnologyParameter
mad24_impl	src/cuda-sim/instructions.cc	/^void mad24_impl( const ptx_instruction *pI, ptx_thread_info *thread )$/;"	f
mad_def	src/cuda-sim/instructions.cc	/^void mad_def( const ptx_instruction *pI, ptx_thread_info *thread, bool use_carry ) $/;"	f
mad_impl	src/cuda-sim/instructions.cc	/^void mad_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
made_read_mfs	src/gpgpu-sim/shader.h	/^    unsigned made_read_mfs;$/;"	m	struct:shader_core_stats_pod
made_write_mfs	src/gpgpu-sim/shader.h	/^    unsigned made_write_mfs;$/;"	m	struct:shader_core_stats_pod
madp_impl	src/cuda-sim/instructions.cc	/^void madp_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
main	launcher/launcher.cc	/^main(int argc, char * argv[])$/;"	f
main	src/cuda-sim/memory.cc	/^int main(int argc, char *argv[] )$/;"	f
main	src/gpuwattch/cacti/main.cc	/^int main(int argc,char *argv[])$/;"	f
main	src/gpuwattch/main.cc	/^int main(int argc,char *argv[])$/;"	f
main	src/intersim/rng.cpp	/^int main()$/;"	f
main	src/intersim/rng_double.cpp	/^int main()$/;"	f
main	src/intersim/rng_double_wrapper.cpp	3;"	d	file:
main	src/intersim/rng_wrapper.cpp	3;"	d	file:
main	src/intersim2/main.cpp	/^int main( int argc, char **argv )$/;"	f
main	src/intersim2/rng-double.c	/^int main()$/;"	f
main	src/intersim2/rng.c	/^int main()$/;"	f
main	src/intersim2/rng_double_wrapper.cpp	28;"	d	file:
main	src/intersim2/rng_wrapper.cpp	28;"	d	file:
main	src/option_parser.cc	/^int main(int argc, const char *argv[]) $/;"	f
main_memory_access	src/gpuwattch/XML_Parse.h	/^	double main_memory_access;$/;"	m	struct:__anon15
main_memory_read	src/gpuwattch/XML_Parse.h	/^	double main_memory_read;$/;"	m	struct:__anon15
main_memory_write	src/gpuwattch/XML_Parse.h	/^	double main_memory_write;$/;"	m	struct:__anon15
make_complete	common/shd_warp_t.h	/^    void make_complete()$/;"	f	class:shd_warp_t
make_context_load	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::SM_info::make_context_load(const unsigned linear_shader_id)$/;"	f	class:DynamicScheduler::SM_info
make_context_load_done	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::SM_info::make_context_load_done(const unsigned linear_shader_id)$/;"	f	class:DynamicScheduler::SM_info
make_copy	src/cuda-sim/ptx_ir.h	/^   void make_copy( const arg_buffer_t &another )$/;"	f	class:arg_buffer_t
make_cta_drain	common/preemption_info.h	/^    void make_cta_drain(unsigned hw_cta_id)$/;"	f	class:preemption_info_t
make_cta_flush	common/preemption_info.h	/^    void make_cta_flush(unsigned hw_cta_id)$/;"	f	class:preemption_info_t
make_cta_switch	common/preemption_info.h	/^    void make_cta_switch(unsigned hw_cta_id)$/;"	f	class:preemption_info_t
make_drain	launcher/mk-sched/mk_scheduler.h	/^      void make_drain()  { status = REMOVE_DRAINING;  is_being_removed = true; }$/;"	f	struct:DynamicScheduler::SM_info::remove_status_st
make_flush	launcher/mk-sched/mk_scheduler.h	/^      void make_flush()  { status = REMOVE_FLUSHING;  is_being_removed = true; }$/;"	f	struct:DynamicScheduler::SM_info::remove_status_st
make_memory_operand	src/cuda-sim/ptx_ir.h	/^   void make_memory_operand() { m_type = memory_t;}$/;"	f	class:operand_info
make_non_idempotent	src/cuda-sim/ptx_sim.cc	/^ptx_cta_info::make_non_idempotent()$/;"	f	class:ptx_cta_info
make_non_idempotent	src/cuda-sim/ptx_sim.h	/^   void make_non_idempotent()$/;"	f	class:ptx_thread_info
make_pc_prefix	src/gpgpu-sim/shader.cc	/^shader_core_ctx::make_pc_prefix(unsigned warp_id) const$/;"	f	class:shader_core_ctx
make_switch	launcher/mk-sched/mk_scheduler.h	/^      void make_switch() { status = REMOVE_SWITCHING; is_being_removed = true; }$/;"	f	struct:DynamicScheduler::SM_info::remove_status_st
map_gen	src/intersim/interconnect_interface.cpp	/^void map_gen(int dim,int  memcount, int memnodes[])$/;"	f
map_t	src/cuda-sim/memory.h	/^   typedef mem_map<mem_addr_t,mem_storage<BSIZE> > map_t;$/;"	t	class:memory_space_impl
mapped_streams	launcher/simulator.h	/^  std::vector<cudaStream_t>                   mapped_streams;$/;"	m	class:Simulator
mark_ready	src/gpgpu-sim/gpu-cache.cc	/^void mshr_table::mark_ready( new_addr_type block_addr, bool &has_atomic ){$/;"	f	class:mshr_table
mask_and	src/cuda-sim/ptx_sim.h	/^   void mask_and( unsigned ms, unsigned ls )$/;"	f	union:ptx_reg_t
mask_or	src/cuda-sim/ptx_sim.h	/^   void mask_or( unsigned ms, unsigned ls )$/;"	f	union:ptx_reg_t
mat	src/gpuwattch/cacti/bank.h	/^    Mat   mat;$/;"	m	class:Bank
mat_height	src/gpuwattch/cacti/cacti_interface.h	/^  double mat_height;$/;"	m	class:mem_array
mat_height	src/gpuwattch/cacti/cacti_interface.h	/^  double mat_height;$/;"	m	struct:__anon5
mat_height	src/gpuwattch/cacti/htree2.h	/^    double mat_height;$/;"	m	class:Htree2
mat_length	src/gpuwattch/cacti/cacti_interface.h	/^  double mat_length;$/;"	m	class:mem_array
mat_width	src/gpuwattch/cacti/cacti_interface.h	/^  double mat_width;$/;"	m	struct:__anon5
mat_width	src/gpuwattch/cacti/htree2.h	/^    double mat_width;$/;"	m	class:Htree2
max	src/cuda-sim/cuda-math.h	71;"	d
max	src/gpuwattch/gpgpu_sim_wrapper.h	/^	T max;$/;"	m	struct:avg_max_min_counters
max	src/ramulator_sim/Controller.h	/^        unsigned int max = 64;\/\/old 32 KAIN$/;"	m	struct:Controller::Queue
maxInputPort	src/intersim2/power/power_module.hpp	/^  double maxInputPort;$/;"	m	class:Power_Module
maxOutputPort	src/intersim2/power/power_module.hpp	/^  double maxOutputPort;$/;"	m	class:Power_Module
max_address	src/ramulator_sim/Memory.h	/^    long max_address;$/;"	m	class:Memory
max_bank_count	src/ramulator_sim/Refresh.h	/^  int max_rank_count, max_bank_count;$/;"	m	class:Refresh
max_bucket	src/ramulator_sim/StatType.h	/^  Counter max_bucket;$/;"	m	class:Stats_Ram::Histogram
max_conc_access2samerow	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int **max_conc_access2samerow; \/\/max_conc_access2samerow[dram chip id][bank id]$/;"	m	class:memory_stats_t
max_concurrent_kernel	src/gpgpu-sim/gpu-sim.h	/^    unsigned max_concurrent_kernel;$/;"	m	class:gpgpu_sim_config
max_cta	src/gpgpu-sim/shader.cc	/^unsigned int shader_core_config::max_cta( const kernel_info_t &k, unsigned core_sid ) const$/;"	f	class:shader_core_config
max_cta	src/gpgpu-sim/shader.cc	/^unsigned simt_core_cluster::max_cta( const kernel_info_t &kernel )$/;"	f	class:simt_core_cluster
max_cta_per_core	src/gpgpu-sim/shader.h	/^    unsigned max_cta_per_core; \/\/Limit on number of concurrent CTAs in shader core$/;"	m	struct:shader_core_config
max_cta_per_core_kain	src/gpgpu-sim/shader.h	/^    unsigned max_cta_per_core_kain(unsigned core_sid) const$/;"	f	struct:shader_core_config
max_cta_per_shader_reason	common/kernel_info_t.h	/^   mutable limitCause max_cta_per_shader_reason;$/;"	m	class:kernel_info_t
max_cyc	src/gpuwattch/cacti/router.h	/^    double cycle_time, max_cyc;$/;"	m	class:MCPAT_Router
max_dq_latency	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned max_dq_latency;$/;"	m	class:memory_stats_t
max_drain_latency	common/preempt_overhead.h	/^  unsigned long long max_drain_latency;$/;"	m	class:shader_preempt_overhead
max_fixedlat_buf_size	src/intersim/interconnect_interface.cpp	/^unsigned int* max_fixedlat_buf_size;$/;"	v
max_icnt2mem_latency	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned max_icnt2mem_latency;$/;"	m	class:memory_stats_t
max_icnt2sh_latency	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned max_icnt2sh_latency;$/;"	m	class:memory_stats_t
max_impl	src/cuda-sim/instructions.cc	/^void max_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
max_mf_latency	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned max_mf_latency;$/;"	m	class:memory_stats_t
max_mrq_latency	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned max_mrq_latency;$/;"	m	class:memory_stats_t
max_rank_count	src/ramulator_sim/Refresh.h	/^  int max_rank_count, max_bank_count;$/;"	m	class:Refresh
max_sa_count	src/ramulator_sim/Refresh.h	/^  int max_sa_count = 0;$/;"	m	class:Refresh
max_servicetime2samerow	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int **max_servicetime2samerow; \/\/max_servicetime2samerow[dram chip id][bank id]$/;"	m	class:memory_stats_t
max_sfu_latency	src/gpgpu-sim/shader.h	/^    unsigned max_sfu_latency;$/;"	m	struct:shader_core_config
max_size	src/gpgpu-sim/stack.h	/^   int max_size;$/;"	m	struct:__anon30
max_sp_latency	src/gpgpu-sim/shader.h	/^    unsigned max_sp_latency;$/;"	m	struct:shader_core_config
max_track	src/ramulator_sim/StatType.h	/^  Counter max_track;$/;"	m	class:Stats_Ram::Distribution
max_unpipelined_link_delay	src/gpuwattch/cacti/htree2.h	/^    double max_unpipelined_link_delay;$/;"	m	class:Htree2
max_unpipelined_link_delay	src/gpuwattch/interconnect.h	/^    double max_unpipelined_link_delay;$/;"	m	class:interconnect
max_val	src/ramulator_sim/StatType.h	/^  Counter max_val;$/;"	m	class:Stats_Ram::Distribution
max_w_nmos_	src/gpuwattch/cacti/parameter.h	/^  double max_w_nmos_;$/;"	m	class:TechnologyParameter
max_w_nmos_dec	src/gpuwattch/cacti/parameter.h	/^  double max_w_nmos_dec;$/;"	m	class:TechnologyParameter
max_warps	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned max_warps;$/;"	m	class:memory_stats_t
max_warps_per_shader	src/gpgpu-sim/shader.h	/^    unsigned max_warps_per_shader; $/;"	m	struct:shader_core_config
max_warps_per_shader_kain	src/gpgpu-sim/shader.h	/^    unsigned max_warps_per_shader_kain (unsigned core_sid) const$/;"	f	struct:shader_core_config
maximum_alloc	launcher/mk-sched/mk_scheduler.h	/^    unsigned maximum_alloc;$/;"	m	class:DynamicScheduler::SM_info
maximum_bandwidth	src/ramulator_sim/Memory.h	/^    ScalarStat maximum_bandwidth;$/;"	m	class:Memory
maybeAddTxT	src/gpuwattch/xmlParser.cc	/^char XMLNode::maybeAddTxT(void *pa, XMLCSTR tokenPStr)$/;"	f	class:XMLNode
mc	src/gpuwattch/XML_Parse.h	/^	system_mc mc;$/;"	m	struct:__anon26
mc	src/gpuwattch/processor.h	/^    MemoryController * mc;$/;"	m	class:Processor
mc_clock	src/gpuwattch/XML_Parse.h	/^	int mc_clock;$/;"	m	struct:__anon23
mc_type	src/gpuwattch/memoryctrl.h	/^	enum MemoryCtrl_type mc_type;$/;"	m	class:MCBackend	typeref:enum:MCBackend::MemoryCtrl_type
mc_type	src/gpuwattch/memoryctrl.h	/^	enum MemoryCtrl_type mc_type;$/;"	m	class:MCFrontEnd	typeref:enum:MCFrontEnd::MemoryCtrl_type
mc_type	src/gpuwattch/memoryctrl.h	/^	enum MemoryCtrl_type mc_type;$/;"	m	class:MCPHY	typeref:enum:MCPHY::MemoryCtrl_type
mc_type	src/gpuwattch/memoryctrl.h	/^	enum MemoryCtrl_type mc_type;$/;"	m	class:MemoryController	typeref:enum:MemoryController::MemoryCtrl_type
mcp	src/gpuwattch/memoryctrl.h	/^	MCParam  mcp;$/;"	m	class:MCFrontEnd
mcp	src/gpuwattch/memoryctrl.h	/^    MCParam  mcp;$/;"	m	class:MCBackend
mcp	src/gpuwattch/memoryctrl.h	/^    MCParam  mcp;$/;"	m	class:MCPHY
mcp	src/gpuwattch/memoryctrl.h	/^    MCParam  mcp;$/;"	m	class:MemoryController
mcpat_cycle	src/gpgpu-sim/power_interface.cc	/^void mcpat_cycle(const gpgpu_sim_config &config, const struct shader_core_config *shdr_config, class gpgpu_sim_wrapper *wrapper, class power_stat_t *power_stats, unsigned stat_sample_freq, unsigned tot_cycle, unsigned cycle, unsigned tot_inst, unsigned inst){$/;"	f
mcpat_reset_perf_count	src/gpgpu-sim/power_interface.cc	/^void mcpat_reset_perf_count(class gpgpu_sim_wrapper *wrapper){$/;"	f
mcs	src/gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor
meets_latency_constraint	common/preempt_overhead.cc	/^shader_preempt_overhead::meets_latency_constraint(const cta_preempt_overhead& cta_overhead) const$/;"	f	class:shader_preempt_overhead
mem	src/gpuwattch/XML_Parse.h	/^    system_mem mem;$/;"	m	struct:__anon26
mem	src/ramulator_sim/gpu_wrapper.h	/^	MemoryBase *mem;$/;"	m	class:GpuWrapper
mem2device	src/gpgpu-sim/shader.h	/^    unsigned mem2device(unsigned memid) const { return memid + n_simt_clusters; }$/;"	f	struct:shader_core_config
memAccesses	src/gpuwattch/basic_components.h	/^    int    memAccesses;$/;"	m	class:MCParam
memRank	src/gpuwattch/basic_components.h	/^    int    memRank;$/;"	m	class:MCParam
mem_access_byte_mask_t	src/abstract_hardware_model.h	/^typedef std::bitset<MAX_MEMORY_ACCESS_SIZE> mem_access_byte_mask_t;$/;"	t
mem_access_t	src/abstract_hardware_model.h	/^   mem_access_t( mem_access_type type, $/;"	f	class:mem_access_t
mem_access_t	src/abstract_hardware_model.h	/^   mem_access_t() { init(); }$/;"	f	class:mem_access_t
mem_access_t	src/abstract_hardware_model.h	/^class mem_access_t {$/;"	c
mem_access_type_stats	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned ***mem_access_type_stats; \/\/ dram access type classification$/;"	m	class:memory_stats_t
mem_access_type_str	src/abstract_hardware_model.cc	/^const char * mem_access_type_str(enum mem_access_type access_type)$/;"	f
mem_addr_t	src/cuda-sim/memory.h	/^typedef address_type mem_addr_t;$/;"	t
mem_array	src/gpuwattch/cacti/cacti_interface.h	/^class mem_array$/;"	c
mem_fetch	src/gpgpu-sim/mem_fetch.cc	/^mem_fetch::mem_fetch( const mem_access_t &access, $/;"	f	class:mem_fetch
mem_fetch	src/gpgpu-sim/mem_fetch.h	/^class mem_fetch {$/;"	c
mem_fetch_allocator	src/abstract_hardware_model.h	/^class mem_fetch_allocator {$/;"	c
mem_fetch_interface	src/abstract_hardware_model.h	/^class mem_fetch_interface {$/;"	c
mem_id	src/ramulator_sim/gpu_wrapper.h	/^	unsigned mem_id;$/;"	m	class:GpuWrapper
mem_instruction_stats	src/gpgpu-sim/gpu-sim.cc	/^void shader_core_ctx::mem_instruction_stats(const warp_inst_t &inst)$/;"	f	class:shader_core_ctx
mem_iterator	src/abstract_hardware_model.h	/^    typedef std::list<mem_access_t>::iterator       mem_iterator;$/;"	t	class:warp_inst_t
mem_map	src/cuda-sim/memory.h	34;"	d
mem_op	src/abstract_hardware_model.h	/^    mem_operation mem_op;        \/\/ code (uarch visible) identify memory type$/;"	m	class:inst_t
mem_operation	src/abstract_hardware_model.h	/^typedef enum mem_operation_t mem_operation;$/;"	t	typeref:enum:mem_operation_t
mem_operation_t	src/abstract_hardware_model.h	/^enum mem_operation_t {$/;"	g
mem_power_stats_pod	src/gpgpu-sim/power_stat.h	/^struct mem_power_stats_pod{$/;"	s
mem_stage_access_type	src/gpgpu-sim/stats.h	/^enum mem_stage_access_type {$/;"	g
mem_stage_stall_type	src/gpgpu-sim/stats.h	/^enum mem_stage_stall_type {$/;"	g
mem_storage	src/cuda-sim/memory.h	/^   mem_storage( const mem_storage &another )$/;"	f	class:mem_storage
mem_storage	src/cuda-sim/memory.h	/^   mem_storage()$/;"	f	class:mem_storage
mem_storage	src/cuda-sim/memory.h	/^template<unsigned BSIZE> class mem_storage {$/;"	c
mem_tech_node	src/gpuwattch/XML_Parse.h	/^	int mem_tech_node;$/;"	m	struct:__anon22
mem_temp_r	src/ramulator_sim/gpu_wrapper.h	/^	std::map<unsigned long long, std::deque<mem_fetch*> > mem_temp_r;$/;"	m	class:GpuWrapper
mem_temp_w	src/ramulator_sim/gpu_wrapper.h	/^	std::map<unsigned long long, std::deque<mem_fetch*> > mem_temp_w;$/;"	m	class:GpuWrapper
mem_tick	src/ramulator_sim/Config.h	/^  int mem_tick;$/;"	m	class:Config
mem_warp_parts	src/abstract_hardware_model.h	/^    unsigned mem_warp_parts;  $/;"	m	struct:core_config
membar_impl	src/cuda-sim/instructions.cc	/^void membar_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
membar_level	src/cuda-sim/ptx_ir.h	/^   int membar_level() const { return m_membar_level; }$/;"	f	class:ptx_instruction
memcpy_from_gpu	src/cuda-sim/cuda-sim.cc	/^void gpgpu_t::memcpy_from_gpu( void *dst, size_t src_start_addr, size_t count )$/;"	f	class:gpgpu_t
memcpy_gpu_to_gpu	src/cuda-sim/cuda-sim.cc	/^void gpgpu_t::memcpy_gpu_to_gpu( size_t dst, size_t src, size_t count )$/;"	f	class:gpgpu_t
memcpy_to_gpu	src/cuda-sim/cuda-sim.cc	/^void gpgpu_t::memcpy_to_gpu( size_t dst_start_addr, const void *src, size_t count )$/;"	f	class:gpgpu_t
memlatstat_done	src/gpgpu-sim/mem_latency_stat.cc	/^unsigned memory_stats_t::memlatstat_done(mem_fetch *mf )$/;"	f	class:memory_stats_t
memlatstat_dram_access	src/gpgpu-sim/mem_latency_stat.cc	/^void memory_stats_t::memlatstat_dram_access(mem_fetch *mf)$/;"	f	class:memory_stats_t
memlatstat_icnt2mem_pop	src/gpgpu-sim/mem_latency_stat.cc	/^void memory_stats_t::memlatstat_icnt2mem_pop(mem_fetch *mf)$/;"	f	class:memory_stats_t
memlatstat_lat_pw	src/gpgpu-sim/mem_latency_stat.cc	/^void memory_stats_t::memlatstat_lat_pw()$/;"	f	class:memory_stats_t
memlatstat_print	src/gpgpu-sim/mem_latency_stat.cc	/^void memory_stats_t::memlatstat_print( unsigned n_mem, unsigned gpu_mem_n_bk )$/;"	f	class:memory_stats_t
memlatstat_read_done	src/gpgpu-sim/mem_latency_stat.cc	/^void memory_stats_t::memlatstat_read_done(mem_fetch *mf)$/;"	f	class:memory_stats_t
memory_accesses	src/gpuwattch/XML_Parse.h	/^	double memory_accesses;$/;"	m	struct:__anon22
memory_accesses	src/gpuwattch/XML_Parse.h	/^	double memory_accesses;$/;"	m	struct:__anon23
memory_channels_per_mc	src/gpuwattch/XML_Parse.h	/^	int memory_channels_per_mc;$/;"	m	struct:__anon23
memory_coalescing_arch_13	src/abstract_hardware_model.cc	/^void warp_inst_t::memory_coalescing_arch_13( bool is_write, mem_access_type access_type )$/;"	f	class:warp_inst_t
memory_coalescing_arch_13_atomic	src/abstract_hardware_model.cc	/^void warp_inst_t::memory_coalescing_arch_13_atomic( bool is_write, mem_access_type access_type )$/;"	f	class:warp_inst_t
memory_coalescing_arch_13_reduce_and_send	src/abstract_hardware_model.cc	/^void warp_inst_t::memory_coalescing_arch_13_reduce_and_send( bool is_write, mem_access_type access_type, const transaction_info &info, new_addr_type addr, unsigned segment_size )$/;"	f	class:warp_inst_t
memory_config	src/gpgpu-sim/gpu-sim.h	/^   memory_config()$/;"	f	struct:memory_config
memory_config	src/gpgpu-sim/gpu-sim.h	/^struct memory_config {$/;"	s
memory_cycle	src/gpgpu-sim/shader.cc	/^bool ldst_unit::memory_cycle( warp_inst_t &inst, mem_stage_stall_type &stall_reason, mem_stage_access_type &access_type )$/;"	f	class:ldst_unit
memory_h_INCLUDED	src/cuda-sim/memory.h	29;"	d
memory_load	src/abstract_hardware_model.h	/^	memory_load,$/;"	e	enum:_memory_op_t
memory_op	src/abstract_hardware_model.h	/^    _memory_op_t memory_op; \/\/ memory_op used by ptxplus $/;"	m	class:inst_t
memory_operand	src/cuda-sim/ptx.y	/^memory_operand : LEFT_SQUARE_BRACKET address_expression RIGHT_SQUARE_BRACKET { add_memory_operand(); }$/;"	l
memory_partition_unit	src/gpgpu-sim/l2cache.cc	/^memory_partition_unit::memory_partition_unit( unsigned partition_id, $/;"	f	class:memory_partition_unit
memory_partition_unit	src/gpgpu-sim/l2cache.h	/^class memory_partition_unit$/;"	c
memory_ports	src/gpuwattch/XML_Parse.h	/^	int memory_ports;$/;"	m	struct:__anon15
memory_reads	src/gpuwattch/XML_Parse.h	/^	double memory_reads;$/;"	m	struct:__anon22
memory_reads	src/gpuwattch/XML_Parse.h	/^	double memory_reads;$/;"	m	struct:__anon23
memory_space	src/cuda-sim/memory.h	/^class memory_space$/;"	c
memory_space_impl	src/cuda-sim/memory.cc	/^template<unsigned BSIZE> memory_space_impl<BSIZE>::memory_space_impl( std::string name, unsigned hash_size )$/;"	f	class:memory_space_impl
memory_space_impl	src/cuda-sim/memory.h	/^template<unsigned BSIZE> class memory_space_impl : public memory_space {$/;"	c
memory_space_t	src/abstract_hardware_model.h	/^   memory_space_t( const enum _memory_space_t &from ) { m_type = from; m_bank = 0; }$/;"	f	class:memory_space_t
memory_space_t	src/abstract_hardware_model.h	/^   memory_space_t() { m_type = undefined_space; m_bank=0; }$/;"	f	class:memory_space_t
memory_space_t	src/abstract_hardware_model.h	/^class memory_space_t {$/;"	c
memory_stats_t	src/gpgpu-sim/mem_latency_stat.cc	/^memory_stats_t::memory_stats_t( unsigned n_shader, const struct shader_core_config *shader_config, const struct memory_config *mem_config )$/;"	f	class:memory_stats_t
memory_stats_t	src/gpgpu-sim/mem_latency_stat.h	/^class memory_stats_t {$/;"	c
memory_store	src/abstract_hardware_model.h	/^	memory_store$/;"	e	enum:_memory_op_t
memory_sub_partition	src/gpgpu-sim/l2cache.cc	/^memory_sub_partition::memory_sub_partition( unsigned sub_partition_id, $/;"	f	class:memory_sub_partition
memory_sub_partition	src/gpgpu-sim/l2cache.h	/^class memory_sub_partition$/;"	c
memory_t	src/cuda-sim/ptx_ir.h	/^   reg_t, vector_t, builtin_t, address_t, memory_t, float_op_t, double_op_t, int_t, $/;"	e	enum:operand_type
memory_writes	src/gpuwattch/XML_Parse.h	/^	double memory_writes;$/;"	m	struct:__anon22
memory_writes	src/gpuwattch/XML_Parse.h	/^	double memory_writes;$/;"	m	struct:__anon23
memreqaddr	src/abstract_hardware_model.h	/^        new_addr_type memreqaddr[MAX_ACCESSES_PER_INSN_PER_THREAD]; \/\/ effective address, upto 8 different requests (to support 32B access in 8 chunks of 4B each)$/;"	m	struct:warp_inst_t::per_thread_info
merged_dir	src/gpuwattch/XML_Parse.h	/^	bool   merged_dir;$/;"	m	struct:__anon18
merged_dir	src/gpuwattch/XML_Parse.h	/^	bool   merged_dir;$/;"	m	struct:__anon19
metric_trace_file	src/gpuwattch/gpgpu_sim_wrapper.h	/^    gzFile metric_trace_file;$/;"	m	class:gpgpu_sim_wrapper
mf	src/ramulator_sim/Request.h	/^    class mem_fetch *mf;$/;"	m	class:Request	typeref:class:Request::mem_fetch
mf_lat_pw_table	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned mf_lat_pw_table[32]; \/\/table storing values of mf latency Per Window$/;"	m	class:memory_stats_t
mf_lat_table	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned mf_lat_table[32];$/;"	m	class:memory_stats_t
mf_max_lat_table	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned ** mf_max_lat_table; \/\/mf latency sums[dram chip id][bank id]$/;"	m	class:memory_stats_t
mf_num_lat_pw	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned mf_num_lat_pw;$/;"	m	class:memory_stats_t
mf_packet_size	src/gpgpu-sim/traffic_breakdown.h	/^   typedef unsigned int mf_packet_size; $/;"	t	class:traffic_breakdown
mf_packet_type	src/gpgpu-sim/traffic_breakdown.h	/^   typedef std::string mf_packet_type;  \/\/ use string so that it remains extensible $/;"	t	class:traffic_breakdown
mf_tot_lat_pw	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned mf_tot_lat_pw; \/\/total latency summed up per window. divide by mf_num_lat_pw to obtain average latency Per Window$/;"	m	class:memory_stats_t
mf_total_lat	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned long long int mf_total_lat;$/;"	m	class:memory_stats_t
mf_total_lat_table	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned long long int ** mf_total_lat_table; \/\/mf latency sums[dram chip id][bank id]$/;"	m	class:memory_stats_t
mf_type	src/gpgpu-sim/mem_fetch.h	/^enum mf_type {$/;"	g
micro_opcode_length	src/gpuwattch/basic_components.h	/^    int  perThreadState, globalCheckpoint, instruction_length, pc_width, opcode_length, micro_opcode_length;$/;"	m	class:CoreDynParam
micro_opcode_width	src/gpuwattch/XML_Parse.h	/^	int micro_opcode_width;$/;"	m	struct:__anon15
migrate_cta	common/kernel_info_t.h	/^   void migrate_cta(dim3 migrating_cta_id) {$/;"	f	class:kernel_info_t
miller_value	src/gpuwattch/cacti/parameter.h	/^    double miller_value;$/;"	m	class:TechnologyParameter::InterconnectType
min	src/cuda-sim/cuda-math.h	72;"	d
min	src/gpuwattch/gpgpu_sim_wrapper.h	/^	T min;$/;"	m	struct:avg_max_min_counters
min3	src/gpgpu-sim/gpu-misc.h	39;"	d
min4	src/gpgpu-sim/gpu-sim.cc	/^double min4(double a, double b, double c, double d)$/;"	f
min_adapt_mesh	src/intersim/routefunc.cpp	/^void min_adapt_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
min_adapt_mesh	src/intersim2/routefunc.cpp	/^void min_adapt_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
min_adapt_torus	src/intersim/routefunc.cpp	/^void min_adapt_torus( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
min_adapt_torus	src/intersim2/routefunc.cpp	/^void min_adapt_torus( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
min_anynet	src/intersim2/networks/anynet.cpp	/^void min_anynet( const Router *r, const Flit *f, int in_channel, $/;"	f
min_area	src/gpuwattch/cacti/Ucache.h	/^    double min_area;$/;"	m	class:min_values_t
min_bucket	src/ramulator_sim/StatType.h	/^  Counter min_bucket;$/;"	m	class:Stats_Ram::Histogram
min_cyc	src/gpuwattch/cacti/Ucache.h	/^    double min_cyc;$/;"	m	class:min_values_t
min_delay	src/gpuwattch/cacti/Ucache.h	/^    double min_delay;$/;"	m	class:min_values_t
min_dragonflynew	src/intersim2/networks/dragonfly.cpp	/^void min_dragonflynew( const Router *r, const Flit *f, int in_channel, $/;"	f
min_dyn	src/gpuwattch/cacti/Ucache.h	/^    double min_dyn;$/;"	m	class:min_values_t
min_flatfly	src/intersim2/networks/flatfly_onchip.cpp	/^void min_flatfly( const Router *r, const Flit *f, int in_channel, $/;"	f
min_impl	src/cuda-sim/instructions.cc	/^void min_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
min_leakage	src/gpuwattch/cacti/Ucache.h	/^    double min_leakage;$/;"	m	class:min_values_t
min_number_gates	src/gpuwattch/cacti/decoder.h	/^  int    min_number_gates;$/;"	m	class:Driver
min_number_gates	src/gpuwattch/cacti/decoder.h	/^  int min_number_gates;$/;"	m	class:PredecBlkDrv
min_number_gates_L1	src/gpuwattch/cacti/decoder.h	/^  int min_number_gates_L1;$/;"	m	class:PredecBlk
min_number_gates_L2	src/gpuwattch/cacti/decoder.h	/^  int min_number_gates_L2;$/;"	m	class:PredecBlk
min_ports	src/gpuwattch/basic_components.h	/^    int    input_ports, output_ports, min_ports, global_linked_ports;$/;"	m	class:NoCParam
min_snap_shot_interval	src/gpgpu-sim/stat-tool.cc	/^static unsigned long long  min_snap_shot_interval = 0;$/;"	v	file:
min_track	src/ramulator_sim/StatType.h	/^  Counter min_track;$/;"	m	class:Stats_Ram::Distribution
min_val	src/ramulator_sim/StatType.h	/^  Counter min_val;$/;"	m	class:Stats_Ram::Distribution
min_values_t	src/gpuwattch/cacti/Ucache.h	/^    min_values_t() : min_delay(BIGNUM), min_dyn(BIGNUM), min_leakage(BIGNUM), min_area(BIGNUM), min_cyc(BIGNUM) { }$/;"	f	class:min_values_t
min_values_t	src/gpuwattch/cacti/Ucache.h	/^class min_values_t$/;"	c
min_w_nmos	src/gpuwattch/cacti/htree2.h	/^    double min_w_nmos;$/;"	m	class:Htree2
min_w_nmos	src/gpuwattch/interconnect.h	/^    double min_w_nmos;$/;"	m	class:interconnect
min_w_nmos_	src/gpuwattch/cacti/parameter.h	/^  double min_w_nmos_;$/;"	m	class:TechnologyParameter
min_w_pmos	src/gpuwattch/cacti/arbiter.h	/^    double min_w_pmos, Vdd;$/;"	m	class:MCPAT_Arbiter
min_w_pmos	src/gpuwattch/cacti/crossbar.h	/^    double min_w_pmos, Vdd;$/;"	m	class:Crossbar
min_w_pmos	src/gpuwattch/cacti/highradix.h	/^    double min_w_pmos;$/;"	m	class:HighRadix
min_w_pmos	src/gpuwattch/cacti/htree2.h	/^    double min_w_pmos;$/;"	m	class:Htree2
min_w_pmos	src/gpuwattch/cacti/router.h	/^    double min_w_pmos;$/;"	m	class:MCPAT_Router
min_w_pmos	src/gpuwattch/cacti/wire.h	/^    double min_w_pmos;$/;"	m	class:Wire
min_w_pmos	src/gpuwattch/interconnect.h	/^    double min_w_pmos;$/;"	m	class:interconnect
miss	src/gpuwattch/basic_components.h	/^    double miss;$/;"	m	class:statsComponents
miss_buffer_access	src/gpuwattch/XML_Parse.h	/^	double miss_buffer_access;$/;"	m	struct:__anon11
miss_buffer_access	src/gpuwattch/XML_Parse.h	/^	double miss_buffer_access;$/;"	m	struct:__anon13
miss_buffer_accesses	src/gpuwattch/XML_Parse.h	/^	double miss_buffer_accesses;$/;"	m	struct:__anon18
miss_buffer_accesses	src/gpuwattch/XML_Parse.h	/^	double miss_buffer_accesses;$/;"	m	struct:__anon19
miss_queue_full	src/gpgpu-sim/gpu-cache.h	/^    bool miss_queue_full(unsigned num_miss){$/;"	f	class:baseline_cache
missb	src/gpuwattch/array.h	/^  ArrayST* missb;$/;"	m	class:InstCache
missb_size	src/gpuwattch/basic_components.h	/^    int missb_size, fu_size, prefetchb_size, wbb_size;$/;"	m	class:CacheDynParam
misses	src/gpgpu-sim/gpu-cache.h	/^    unsigned misses;$/;"	m	struct:cache_sub_stats
mk_scheduler	src/gpgpu-sim/shader.h	/^    MKScheduler* mk_scheduler;$/;"	m	class:shader_core_ctx
ml_precharge_drv	src/gpuwattch/cacti/mat.h	/^    Driver * ml_precharge_drv;\/\/matchline prechange driver$/;"	m	class:Mat
ml_to_ram_wl_drv	src/gpuwattch/cacti/mat.h	/^    Driver * ml_to_ram_wl_drv;\/\/search line data driver$/;"	m	class:Mat
mmin	src/gpuwattch/xmlParser.cc	/^inline int mmin( const int t1, const int t2 ) { return t1 < t2 ? t1 : t2; }$/;"	f
mmu	src/gpuwattch/core.h	/^	MemManU    * mmu;$/;"	m	class:Core
mod_diff	src/intersim/rng.cpp	24;"	d	file:
mod_diff	src/intersim2/rng.c	23;"	d	file:
mod_sum	src/intersim/rng_double.cpp	23;"	d	file:
mod_sum	src/intersim2/rng-double.c	22;"	d	file:
model	src/gpgpu-sim/shader.h	/^    enum divergence_support_t model;$/;"	m	struct:shader_core_config	typeref:enum:shader_core_config::divergence_support_t
model	src/gpuwattch/logic.h	/^	int    model;$/;"	m	class:DFFCell
more_threads_in_cta	common/kernel_info_t.h	/^   bool more_threads_in_cta() const$/;"	f	class:kernel_info_t
mov_impl	src/cuda-sim/instructions.cc	/^void mov_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
move_in	src/abstract_hardware_model.h	/^	void move_in( warp_inst_t *&src ){$/;"	f	class:register_set
move_out_to	src/abstract_hardware_model.h	/^	void move_out_to( warp_inst_t *&dest ){$/;"	f	class:register_set
move_warp	src/abstract_hardware_model.cc	/^void move_warp( warp_inst_t *&dst, warp_inst_t *&src )$/;"	f
mrq_lat_table	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned mrq_lat_table[32];$/;"	m	class:memory_stats_t
ms	src/cuda-sim/ptx_sim.h	/^      unsigned ms;$/;"	m	struct:ptx_reg_t::__anon2
mshr_config_t	src/gpgpu-sim/gpu-cache.h	/^enum mshr_config_t {$/;"	g
mshr_empty	src/gpgpu-sim/gpu-cache.h	/^    bool mshr_empty() const { return m_mshrs.empty(); }$/;"	f	class:baseline_cache
mshr_empty	src/gpgpu-sim/gpu-cache.h	/^    bool mshr_empty() const { return m_rob.empty() && m_fragment_fifo.empty() && m_request_fifo.empty() && m_result_fifo.empty(); }$/;"	f	class:tex_cache
mshr_entries	src/ramulator_sim/Cache.h	/^  std::vector<std::pair<long, std::list<Line>::iterator>> mshr_entries;$/;"	m	class:Cache
mshr_entry	src/gpgpu-sim/gpu-cache.h	/^        mshr_entry() : m_has_atomic(false), m_is_first_entry_served(false), m_first_linear_sid(0)$/;"	f	struct:mshr_table::mshr_entry
mshr_entry	src/gpgpu-sim/gpu-cache.h	/^    struct mshr_entry {$/;"	s	class:mshr_table
mshr_entry_num	src/ramulator_sim/Cache.h	/^  unsigned int mshr_entry_num;$/;"	m	class:Cache
mshr_table	src/gpgpu-sim/gpu-cache.h	/^    mshr_table( unsigned num_entries, unsigned max_merged )$/;"	f	class:mshr_table
mshr_table	src/gpgpu-sim/gpu-cache.h	/^class mshr_table {$/;"	c
mtx_init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::mtx_init()$/;"	f	class:linear_to_raw_address_translation
mul	src/gpuwattch/core.h	/^    FunctionalUnit * mul;$/;"	m	class:EXECU
mul24_impl	src/cuda-sim/instructions.cc	/^void mul24_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
mul_accesses	src/gpuwattch/XML_Parse.h	/^	double mul_accesses;$/;"	m	struct:__anon15
mul_impl	src/cuda-sim/instructions.cc	/^void mul_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
multisubbank_interleave_cycle_time	src/gpuwattch/cacti/cacti_interface.h	/^  double multisubbank_interleave_cycle_time;$/;"	m	class:mem_array
multisubbank_interleave_cycle_time	src/gpuwattch/cacti/cacti_interface.h	/^  double multisubbank_interleave_cycle_time;$/;"	m	struct:__anon5
multisubbank_interleave_cycle_time	src/gpuwattch/cacti/uca.h	/^    double multisubbank_interleave_cycle_time;$/;"	m	class:UCA
multithreaded	src/gpuwattch/basic_components.h	/^    bool regWindowing,multithreaded;$/;"	m	class:CoreDynParam
myFree	src/gpuwattch/xmlParser.cc	/^static inline void myFree(void *p) { if (p) free(p); }$/;"	f	file:
myIsTextWideChar	src/gpuwattch/xmlParser.cc	/^    char myIsTextWideChar(const void *b, int len) \/\/ inspired by the Wine API: RtlIsTextUnicode$/;"	f
myIsTextWideChar	src/gpuwattch/xmlParser.cc	/^    char myIsTextWideChar(const void *b,int l) { return (char)IsTextUnicode((CONST LPVOID)b,l,NULL); };$/;"	f
myIsTextWideChar	src/gpuwattch/xmlParser.cc	/^char myIsTextWideChar(const void *b, int len) { return FALSE; }$/;"	f
myMultiByteToWideChar	src/gpuwattch/xmlParser.cc	/^        wchar_t *myMultiByteToWideChar(const char *s, XMLNode::XMLCharEncoding ce)$/;"	f
myRealloc	src/gpuwattch/xmlParser.cc	/^static inline void *myRealloc(void *p, int newsize, int memInc, int sizeofElem)$/;"	f	file:
myTagCompare	src/gpuwattch/xmlParser.cc	/^char myTagCompare(XMLCSTR cclose, XMLCSTR copen)$/;"	f
myWideCharToMultiByte	src/gpuwattch/xmlParser.cc	/^        char *myWideCharToMultiByte(const wchar_t *s) { return NULL; }$/;"	f
myWideCharToMultiByte	src/gpuwattch/xmlParser.cc	/^        char *myWideCharToMultiByte(const wchar_t *s)$/;"	f
my_abs	src/cuda-sim/instructions.cc	636;"	d	file:
my_cuda_printf	src/cuda-sim/cuda_device_printf.cc	/^void my_cuda_printf(const char *fmtstr,const char *arg_list)$/;"	f
my_time_vector	src/gpgpu-sim/visualizer.cc	/^   my_time_vector(int ld_size,int st_size){$/;"	f	class:my_time_vector
my_time_vector	src/gpgpu-sim/visualizer.cc	/^class my_time_vector {$/;"	c	file:
mycomparison	src/intersim/interconnect_interface.cpp	/^class mycomparison {$/;"	c	file:
mymax	src/cuda-sim/ptx_parser.cc	196;"	d	file:
n32AW	src/ramulator_sim/GDDR5.h	/^        int nRRD, nFAW, n32AW;$/;"	m	struct:GDDR5::SpeedEntry
nAttribute	src/gpuwattch/xmlParser.cc	/^int XMLNode::nAttribute()  const { if (!d) return 0;    return d->nAttribute; }$/;"	f	class:XMLNode
nAttribute	src/gpuwattch/xmlParser.h	/^                                 nAttribute;      \/\/ Number of attributes$/;"	m	struct:XMLNode::XMLNodeDataTag
nBL	src/ramulator_sim/ALDRAM.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ALDRAM::SpeedEntry
nBL	src/ramulator_sim/DDR3.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:DDR3::SpeedEntry
nBL	src/ramulator_sim/DDR4.h	/^        int nBL, nCCDS, nCCDL, nRTRS;$/;"	m	struct:DDR4::SpeedEntry
nBL	src/ramulator_sim/DSARP.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:DSARP::SpeedEntry
nBL	src/ramulator_sim/GDDR5.h	/^        int nBL, nCCDS, nCCDL;$/;"	m	struct:GDDR5::SpeedEntry
nBL	src/ramulator_sim/HBM.h	/^        int nBL, nCCDS, nCCDL;$/;"	m	struct:HBM::SpeedEntry
nBL	src/ramulator_sim/LPDDR3.h	/^        int nBL, nCCD, nRTRS, nDQSCK;$/;"	m	struct:LPDDR3::SpeedEntry
nBL	src/ramulator_sim/LPDDR4.h	/^        int nBL, nCCD, nRTRS, nDQSCK;$/;"	m	struct:LPDDR4::SpeedEntry
nBL	src/ramulator_sim/SALP.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:SALP::SpeedEntry
nBL	src/ramulator_sim/TLDRAM.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:TLDRAM::SpeedEntry
nBL	src/ramulator_sim/WideIO.h	/^        int nBL, nCCD, nDQSCK;$/;"	m	struct:WideIO::SpeedEntry
nBL	src/ramulator_sim/WideIO2.h	/^        int nBL, nCCD, nDQSCK, nRTRS; \/\/ 4n prefetch, DDR (although 8n is allowed?)$/;"	m	struct:WideIO2::SpeedEntry
nCCD	src/ramulator_sim/ALDRAM.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ALDRAM::SpeedEntry
nCCD	src/ramulator_sim/DDR3.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:DDR3::SpeedEntry
nCCD	src/ramulator_sim/DSARP.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:DSARP::SpeedEntry
nCCD	src/ramulator_sim/LPDDR3.h	/^        int nBL, nCCD, nRTRS, nDQSCK;$/;"	m	struct:LPDDR3::SpeedEntry
nCCD	src/ramulator_sim/LPDDR4.h	/^        int nBL, nCCD, nRTRS, nDQSCK;$/;"	m	struct:LPDDR4::SpeedEntry
nCCD	src/ramulator_sim/SALP.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:SALP::SpeedEntry
nCCD	src/ramulator_sim/TLDRAM.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:TLDRAM::SpeedEntry
nCCD	src/ramulator_sim/WideIO.h	/^        int nBL, nCCD, nDQSCK;$/;"	m	struct:WideIO::SpeedEntry
nCCD	src/ramulator_sim/WideIO2.h	/^        int nBL, nCCD, nDQSCK, nRTRS; \/\/ 4n prefetch, DDR (although 8n is allowed?)$/;"	m	struct:WideIO2::SpeedEntry
nCCDL	src/ramulator_sim/DDR4.h	/^        int nBL, nCCDS, nCCDL, nRTRS;$/;"	m	struct:DDR4::SpeedEntry
nCCDL	src/ramulator_sim/GDDR5.h	/^        int nBL, nCCDS, nCCDL;$/;"	m	struct:GDDR5::SpeedEntry
nCCDL	src/ramulator_sim/HBM.h	/^        int nBL, nCCDS, nCCDL;$/;"	m	struct:HBM::SpeedEntry
nCCDS	src/ramulator_sim/DDR4.h	/^        int nBL, nCCDS, nCCDL, nRTRS;$/;"	m	struct:DDR4::SpeedEntry
nCCDS	src/ramulator_sim/GDDR5.h	/^        int nBL, nCCDS, nCCDL;$/;"	m	struct:GDDR5::SpeedEntry
nCCDS	src/ramulator_sim/HBM.h	/^        int nBL, nCCDS, nCCDL;$/;"	m	struct:HBM::SpeedEntry
nCKE	src/ramulator_sim/LPDDR3.h	/^        int nCKE, nXP; \/\/ CKE is PD, LPDDR3 has no DLL$/;"	m	struct:LPDDR3::SpeedEntry
nCKE	src/ramulator_sim/LPDDR4.h	/^        int nCKE, nXP; \/\/ CKE value n\/a$/;"	m	struct:LPDDR4::SpeedEntry
nCKE	src/ramulator_sim/WideIO.h	/^        int nCKE, nXP;$/;"	m	struct:WideIO::SpeedEntry
nCKE	src/ramulator_sim/WideIO2.h	/^        int nCKE, nXP;$/;"	m	struct:WideIO2::SpeedEntry
nCKESR	src/ramulator_sim/ALDRAM.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ALDRAM::SpeedEntry
nCKESR	src/ramulator_sim/DDR3.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:DDR3::SpeedEntry
nCKESR	src/ramulator_sim/DDR4.h	/^        int nCKESR, nXS, nXSDLL; \/\/ nXSDLL TBD (nDLLK), nXS = (tRFC+10ns)\/tCK$/;"	m	struct:DDR4::SpeedEntry
nCKESR	src/ramulator_sim/DSARP.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:DSARP::SpeedEntry
nCKESR	src/ramulator_sim/GDDR5.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:GDDR5::SpeedEntry
nCKESR	src/ramulator_sim/HBM.h	/^        int nCKESR, nXS;$/;"	m	struct:HBM::SpeedEntry
nCKESR	src/ramulator_sim/LPDDR3.h	/^        int nCKESR, nXSR; \/\/ tXSR = tRFCab + 10ns$/;"	m	struct:LPDDR3::SpeedEntry
nCKESR	src/ramulator_sim/SALP.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:SALP::SpeedEntry
nCKESR	src/ramulator_sim/TLDRAM.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:TLDRAM::SpeedEntry
nCKESR	src/ramulator_sim/WideIO.h	/^        int nCKESR, nXSR; \/\/ tXSR = tRFC+10$/;"	m	struct:WideIO::SpeedEntry
nCKESR	src/ramulator_sim/WideIO2.h	/^        int nCKESR, nXSR;$/;"	m	struct:WideIO2::SpeedEntry
nCL	src/ramulator_sim/ALDRAM.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ALDRAM::SpeedEntry
nCL	src/ramulator_sim/DDR3.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:DDR3::SpeedEntry
nCL	src/ramulator_sim/DDR4.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:DDR4::SpeedEntry
nCL	src/ramulator_sim/DSARP.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:DSARP::SpeedEntry
nCL	src/ramulator_sim/GDDR5.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:GDDR5::SpeedEntry
nCL	src/ramulator_sim/HBM.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:HBM::SpeedEntry
nCL	src/ramulator_sim/LPDDR3.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:LPDDR3::SpeedEntry
nCL	src/ramulator_sim/LPDDR4.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:LPDDR4::SpeedEntry
nCL	src/ramulator_sim/SALP.h	/^        int nCL, nRCD, nRP, nPA, nCWL; \/\/ nRP for pre2act same sa, nPA for pre2act diff sa (1 cycle)$/;"	m	struct:SALP::SpeedEntry
nCL	src/ramulator_sim/TLDRAM.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:TLDRAM::SpeedEntry
nCL	src/ramulator_sim/WideIO.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:WideIO::SpeedEntry
nCL	src/ramulator_sim/WideIO2.h	/^        int nCL, nRCD, nRPpb, nRP8b, nRPab, nCWL;$/;"	m	struct:WideIO2::SpeedEntry
nCWL	src/ramulator_sim/ALDRAM.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ALDRAM::SpeedEntry
nCWL	src/ramulator_sim/DDR3.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:DDR3::SpeedEntry
nCWL	src/ramulator_sim/DDR4.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:DDR4::SpeedEntry
nCWL	src/ramulator_sim/DSARP.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:DSARP::SpeedEntry
nCWL	src/ramulator_sim/GDDR5.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:GDDR5::SpeedEntry
nCWL	src/ramulator_sim/HBM.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:HBM::SpeedEntry
nCWL	src/ramulator_sim/LPDDR3.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:LPDDR3::SpeedEntry
nCWL	src/ramulator_sim/LPDDR4.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:LPDDR4::SpeedEntry
nCWL	src/ramulator_sim/SALP.h	/^        int nCL, nRCD, nRP, nPA, nCWL; \/\/ nRP for pre2act same sa, nPA for pre2act diff sa (1 cycle)$/;"	m	struct:SALP::SpeedEntry
nCWL	src/ramulator_sim/TLDRAM.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:TLDRAM::SpeedEntry
nCWL	src/ramulator_sim/WideIO.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:WideIO::SpeedEntry
nCWL	src/ramulator_sim/WideIO2.h	/^        int nCL, nRCD, nRPpb, nRP8b, nRPab, nCWL;$/;"	m	struct:WideIO2::SpeedEntry
nChild	src/gpuwattch/xmlParser.h	/^          int                    nChild,          \/\/ Number of child nodes$/;"	m	struct:XMLNode::XMLNodeDataTag
nChildNode	src/gpuwattch/xmlParser.cc	/^int XMLNode::nChildNode()  const { if (!d) return 0;    return d->nChild;     }$/;"	f	class:XMLNode
nChildNode	src/gpuwattch/xmlParser.cc	/^int XMLNode::nChildNode(XMLCSTR name) const$/;"	f	class:XMLNode
nClear	src/gpuwattch/xmlParser.cc	/^int XMLNode::nClear()      const { if (!d) return 0;    return d->nClear;     }$/;"	f	class:XMLNode
nClear	src/gpuwattch/xmlParser.h	/^                                 nClear,          \/\/ Number of Clear fields (comments)$/;"	m	struct:XMLNode::XMLNodeDataTag
nColumn	src/gpuwattch/xmlParser.h	/^    int  nLine,nColumn;$/;"	m	struct:XMLResults
nDQSCK	src/ramulator_sim/LPDDR3.h	/^        int nBL, nCCD, nRTRS, nDQSCK;$/;"	m	struct:LPDDR3::SpeedEntry
nDQSCK	src/ramulator_sim/LPDDR4.h	/^        int nBL, nCCD, nRTRS, nDQSCK;$/;"	m	struct:LPDDR4::SpeedEntry
nDQSCK	src/ramulator_sim/WideIO.h	/^        int nBL, nCCD, nDQSCK;$/;"	m	struct:WideIO::SpeedEntry
nDQSCK	src/ramulator_sim/WideIO2.h	/^        int nBL, nCCD, nDQSCK, nRTRS; \/\/ 4n prefetch, DDR (although 8n is allowed?)$/;"	m	struct:WideIO2::SpeedEntry
nElement	src/gpuwattch/xmlParser.cc	/^int XMLNode::nElement()    const { if (!d) return 0;    return d->nAttribute+d->nChild+d->nText+d->nClear; }$/;"	f	class:XMLNode
nFAW	src/ramulator_sim/ALDRAM.h	/^        int nRRD, nFAW;$/;"	m	struct:ALDRAM::SpeedEntry
nFAW	src/ramulator_sim/DDR3.h	/^        int nRRD, nFAW;$/;"	m	struct:DDR3::SpeedEntry
nFAW	src/ramulator_sim/DDR4.h	/^        int nRRDS, nRRDL, nFAW;$/;"	m	struct:DDR4::SpeedEntry
nFAW	src/ramulator_sim/DSARP.h	/^        int nRRD, nFAW;$/;"	m	struct:DSARP::SpeedEntry
nFAW	src/ramulator_sim/GDDR5.h	/^        int nRRD, nFAW, n32AW;$/;"	m	struct:GDDR5::SpeedEntry
nFAW	src/ramulator_sim/HBM.h	/^        int nRRDS, nRRDL, nFAW;$/;"	m	struct:HBM::SpeedEntry
nFAW	src/ramulator_sim/LPDDR3.h	/^        int nRRD, nFAW;$/;"	m	struct:LPDDR3::SpeedEntry
nFAW	src/ramulator_sim/LPDDR4.h	/^        int nPPD, nRRD, nFAW;$/;"	m	struct:LPDDR4::SpeedEntry
nFAW	src/ramulator_sim/SALP.h	/^        int nRRD, nFAW;$/;"	m	struct:SALP::SpeedEntry
nFAW	src/ramulator_sim/TLDRAM.h	/^        int nRRD, nFAW;$/;"	m	struct:TLDRAM::SpeedEntry
nFAW	src/ramulator_sim/WideIO2.h	/^        int nRRD, nFAW;$/;"	m	struct:WideIO2::SpeedEntry
nFirst	src/gpuwattch/xmlParser.cc	/^    int                    nFirst;$/;"	m	struct:XML	file:
nIndex	src/gpuwattch/xmlParser.cc	/^    int                    nIndex,nIndexMissigEndTag;$/;"	m	struct:XML	file:
nIndexMissigEndTag	src/gpuwattch/xmlParser.cc	/^    int                    nIndex,nIndexMissigEndTag;$/;"	m	struct:XML	file:
nLK	src/ramulator_sim/GDDR5.h	/^        int nPD, nXPN, nLK;$/;"	m	struct:GDDR5::SpeedEntry
nLine	src/gpuwattch/xmlParser.h	/^    int  nLine,nColumn;$/;"	m	struct:XMLResults
nPA	src/ramulator_sim/SALP.h	/^        int nCL, nRCD, nRP, nPA, nCWL; \/\/ nRP for pre2act same sa, nPA for pre2act diff sa (1 cycle)$/;"	m	struct:SALP::SpeedEntry
nPD	src/ramulator_sim/ALDRAM.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ALDRAM::SpeedEntry
nPD	src/ramulator_sim/DDR3.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:DDR3::SpeedEntry
nPD	src/ramulator_sim/DDR4.h	/^        int nPD, nXP, nXPDLL; \/\/ XPDLL not found in DDR4??$/;"	m	struct:DDR4::SpeedEntry
nPD	src/ramulator_sim/DSARP.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:DSARP::SpeedEntry
nPD	src/ramulator_sim/GDDR5.h	/^        int nPD, nXPN, nLK;$/;"	m	struct:GDDR5::SpeedEntry
nPD	src/ramulator_sim/HBM.h	/^        int nPD, nXP;$/;"	m	struct:HBM::SpeedEntry
nPD	src/ramulator_sim/SALP.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:SALP::SpeedEntry
nPD	src/ramulator_sim/TLDRAM.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:TLDRAM::SpeedEntry
nPPD	src/ramulator_sim/GDDR5.h	/^        int nPPD, nRTP, nWTR, nWR;$/;"	m	struct:GDDR5::SpeedEntry
nPPD	src/ramulator_sim/LPDDR4.h	/^        int nPPD, nRRD, nFAW;$/;"	m	struct:LPDDR4::SpeedEntry
nRA	src/ramulator_sim/SALP.h	/^        int nRTP, nWTR, nWR, nRA, nWA; \/\/ nRA = nCL\/2, nWA = nCWL + nBL + nWR\/2$/;"	m	struct:SALP::SpeedEntry
nRAS	src/ramulator_sim/ALDRAM.h	/^        int nRAS, nRC;$/;"	m	struct:ALDRAM::SpeedEntry
nRAS	src/ramulator_sim/DDR3.h	/^        int nRAS, nRC;$/;"	m	struct:DDR3::SpeedEntry
nRAS	src/ramulator_sim/DDR4.h	/^        int nRAS, nRC;$/;"	m	struct:DDR4::SpeedEntry
nRAS	src/ramulator_sim/DSARP.h	/^        int nRAS, nRC;$/;"	m	struct:DSARP::SpeedEntry
nRAS	src/ramulator_sim/GDDR5.h	/^        int nRAS, nRC;$/;"	m	struct:GDDR5::SpeedEntry
nRAS	src/ramulator_sim/HBM.h	/^        int nRAS, nRC;$/;"	m	struct:HBM::SpeedEntry
nRAS	src/ramulator_sim/LPDDR3.h	/^        int nRAS, nRC;$/;"	m	struct:LPDDR3::SpeedEntry
nRAS	src/ramulator_sim/LPDDR4.h	/^        int nRAS, nRC;$/;"	m	struct:LPDDR4::SpeedEntry
nRAS	src/ramulator_sim/SALP.h	/^        int nRAS, nRC;$/;"	m	struct:SALP::SpeedEntry
nRAS	src/ramulator_sim/TLDRAM.h	/^        int nRAS, nRC;$/;"	m	struct:TLDRAM::SpeedEntry
nRAS	src/ramulator_sim/WideIO.h	/^        int nRAS, nRC;$/;"	m	struct:WideIO::SpeedEntry
nRAS	src/ramulator_sim/WideIO2.h	/^        int nRAS, nRC;$/;"	m	struct:WideIO2::SpeedEntry
nRASF	src/ramulator_sim/TLDRAM.h	/^        int nRCDF, nRPF, nRASF, nRCF;$/;"	m	struct:TLDRAM::SpeedEntry
nRASM	src/ramulator_sim/TLDRAM.h	/^        int nRCDM, nRPM, nRASM, nRCM;$/;"	m	struct:TLDRAM::SpeedEntry
nRC	src/ramulator_sim/ALDRAM.h	/^        int nRAS, nRC;$/;"	m	struct:ALDRAM::SpeedEntry
nRC	src/ramulator_sim/DDR3.h	/^        int nRAS, nRC;$/;"	m	struct:DDR3::SpeedEntry
nRC	src/ramulator_sim/DDR4.h	/^        int nRAS, nRC;$/;"	m	struct:DDR4::SpeedEntry
nRC	src/ramulator_sim/DSARP.h	/^        int nRAS, nRC;$/;"	m	struct:DSARP::SpeedEntry
nRC	src/ramulator_sim/GDDR5.h	/^        int nRAS, nRC;$/;"	m	struct:GDDR5::SpeedEntry
nRC	src/ramulator_sim/HBM.h	/^        int nRAS, nRC;$/;"	m	struct:HBM::SpeedEntry
nRC	src/ramulator_sim/LPDDR3.h	/^        int nRAS, nRC;$/;"	m	struct:LPDDR3::SpeedEntry
nRC	src/ramulator_sim/LPDDR4.h	/^        int nRAS, nRC;$/;"	m	struct:LPDDR4::SpeedEntry
nRC	src/ramulator_sim/SALP.h	/^        int nRAS, nRC;$/;"	m	struct:SALP::SpeedEntry
nRC	src/ramulator_sim/TLDRAM.h	/^        int nRAS, nRC;$/;"	m	struct:TLDRAM::SpeedEntry
nRC	src/ramulator_sim/WideIO.h	/^        int nRAS, nRC;$/;"	m	struct:WideIO::SpeedEntry
nRC	src/ramulator_sim/WideIO2.h	/^        int nRAS, nRC;$/;"	m	struct:WideIO2::SpeedEntry
nRCD	src/ramulator_sim/ALDRAM.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ALDRAM::SpeedEntry
nRCD	src/ramulator_sim/DDR3.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:DDR3::SpeedEntry
nRCD	src/ramulator_sim/DDR4.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:DDR4::SpeedEntry
nRCD	src/ramulator_sim/DSARP.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:DSARP::SpeedEntry
nRCD	src/ramulator_sim/LPDDR3.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:LPDDR3::SpeedEntry
nRCD	src/ramulator_sim/LPDDR4.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:LPDDR4::SpeedEntry
nRCD	src/ramulator_sim/SALP.h	/^        int nCL, nRCD, nRP, nPA, nCWL; \/\/ nRP for pre2act same sa, nPA for pre2act diff sa (1 cycle)$/;"	m	struct:SALP::SpeedEntry
nRCD	src/ramulator_sim/TLDRAM.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:TLDRAM::SpeedEntry
nRCD	src/ramulator_sim/WideIO.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:WideIO::SpeedEntry
nRCD	src/ramulator_sim/WideIO2.h	/^        int nCL, nRCD, nRPpb, nRP8b, nRPab, nCWL;$/;"	m	struct:WideIO2::SpeedEntry
nRCDF	src/ramulator_sim/TLDRAM.h	/^        int nRCDF, nRPF, nRASF, nRCF;$/;"	m	struct:TLDRAM::SpeedEntry
nRCDM	src/ramulator_sim/TLDRAM.h	/^        int nRCDM, nRPM, nRASM, nRCM;$/;"	m	struct:TLDRAM::SpeedEntry
nRCDR	src/ramulator_sim/GDDR5.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:GDDR5::SpeedEntry
nRCDR	src/ramulator_sim/HBM.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:HBM::SpeedEntry
nRCDW	src/ramulator_sim/GDDR5.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:GDDR5::SpeedEntry
nRCDW	src/ramulator_sim/HBM.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:HBM::SpeedEntry
nRCF	src/ramulator_sim/TLDRAM.h	/^        int nRCDF, nRPF, nRASF, nRCF;$/;"	m	struct:TLDRAM::SpeedEntry
nRCM	src/ramulator_sim/TLDRAM.h	/^        int nRCDM, nRPM, nRASM, nRCM;$/;"	m	struct:TLDRAM::SpeedEntry
nREFI	src/ramulator_sim/ALDRAM.h	/^        int nRFC, nREFI;$/;"	m	struct:ALDRAM::SpeedEntry
nREFI	src/ramulator_sim/DDR3.h	/^        int nRFC, nREFI;$/;"	m	struct:DDR3::SpeedEntry
nREFI	src/ramulator_sim/DDR4.h	/^        int nRFC, nREFI;$/;"	m	struct:DDR4::SpeedEntry
nREFI	src/ramulator_sim/DSARP.h	/^        int nRFCab, nRFCpb, nREFI, nREFIpb;$/;"	m	struct:DSARP::SpeedEntry
nREFI	src/ramulator_sim/GDDR5.h	/^        int nRFC, nREFI;$/;"	m	struct:GDDR5::SpeedEntry
nREFI	src/ramulator_sim/HBM.h	/^        int nRFC, nREFI, nREFI1B;$/;"	m	struct:HBM::SpeedEntry
nREFI	src/ramulator_sim/LPDDR3.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:LPDDR3::SpeedEntry
nREFI	src/ramulator_sim/LPDDR4.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:LPDDR4::SpeedEntry
nREFI	src/ramulator_sim/SALP.h	/^        int nRFC, nREFI;$/;"	m	struct:SALP::SpeedEntry
nREFI	src/ramulator_sim/TLDRAM.h	/^        int nRFC, nREFI;$/;"	m	struct:TLDRAM::SpeedEntry
nREFI	src/ramulator_sim/WideIO.h	/^        int nRFC, nREFI;$/;"	m	struct:WideIO::SpeedEntry
nREFI	src/ramulator_sim/WideIO2.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:WideIO2::SpeedEntry
nREFI1B	src/ramulator_sim/HBM.h	/^        int nRFC, nREFI, nREFI1B;$/;"	m	struct:HBM::SpeedEntry
nREFIpb	src/ramulator_sim/DSARP.h	/^        int nRFCab, nRFCpb, nREFI, nREFIpb;$/;"	m	struct:DSARP::SpeedEntry
nRFC	src/ramulator_sim/ALDRAM.h	/^        int nRFC, nREFI;$/;"	m	struct:ALDRAM::SpeedEntry
nRFC	src/ramulator_sim/DDR3.h	/^        int nRFC, nREFI;$/;"	m	struct:DDR3::SpeedEntry
nRFC	src/ramulator_sim/DDR4.h	/^        int nRFC, nREFI;$/;"	m	struct:DDR4::SpeedEntry
nRFC	src/ramulator_sim/GDDR5.h	/^        int nRFC, nREFI;$/;"	m	struct:GDDR5::SpeedEntry
nRFC	src/ramulator_sim/HBM.h	/^        int nRFC, nREFI, nREFI1B;$/;"	m	struct:HBM::SpeedEntry
nRFC	src/ramulator_sim/SALP.h	/^        int nRFC, nREFI;$/;"	m	struct:SALP::SpeedEntry
nRFC	src/ramulator_sim/TLDRAM.h	/^        int nRFC, nREFI;$/;"	m	struct:TLDRAM::SpeedEntry
nRFC	src/ramulator_sim/WideIO.h	/^        int nRFC, nREFI;$/;"	m	struct:WideIO::SpeedEntry
nRFCab	src/ramulator_sim/DSARP.h	/^        int nRFCab, nRFCpb, nREFI, nREFIpb;$/;"	m	struct:DSARP::SpeedEntry
nRFCab	src/ramulator_sim/LPDDR3.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:LPDDR3::SpeedEntry
nRFCab	src/ramulator_sim/LPDDR4.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:LPDDR4::SpeedEntry
nRFCab	src/ramulator_sim/WideIO2.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:WideIO2::SpeedEntry
nRFCpb	src/ramulator_sim/DSARP.h	/^        int nRFCab, nRFCpb, nREFI, nREFIpb;$/;"	m	struct:DSARP::SpeedEntry
nRFCpb	src/ramulator_sim/LPDDR3.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:LPDDR3::SpeedEntry
nRFCpb	src/ramulator_sim/LPDDR4.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:LPDDR4::SpeedEntry
nRFCpb	src/ramulator_sim/WideIO2.h	/^        int nRFCab, nRFCpb, nREFI;$/;"	m	struct:WideIO2::SpeedEntry
nRP	src/ramulator_sim/ALDRAM.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:ALDRAM::SpeedEntry
nRP	src/ramulator_sim/DDR3.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:DDR3::SpeedEntry
nRP	src/ramulator_sim/DDR4.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:DDR4::SpeedEntry
nRP	src/ramulator_sim/GDDR5.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:GDDR5::SpeedEntry
nRP	src/ramulator_sim/HBM.h	/^        int nCL, nRCDR, nRCDW, nRP, nCWL;$/;"	m	struct:HBM::SpeedEntry
nRP	src/ramulator_sim/SALP.h	/^        int nCL, nRCD, nRP, nPA, nCWL; \/\/ nRP for pre2act same sa, nPA for pre2act diff sa (1 cycle)$/;"	m	struct:SALP::SpeedEntry
nRP	src/ramulator_sim/TLDRAM.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:TLDRAM::SpeedEntry
nRP	src/ramulator_sim/WideIO.h	/^        int nCL, nRCD, nRP, nCWL;$/;"	m	struct:WideIO::SpeedEntry
nRP8b	src/ramulator_sim/WideIO2.h	/^        int nCL, nRCD, nRPpb, nRP8b, nRPab, nCWL;$/;"	m	struct:WideIO2::SpeedEntry
nRPF	src/ramulator_sim/TLDRAM.h	/^        int nRCDF, nRPF, nRASF, nRCF;$/;"	m	struct:TLDRAM::SpeedEntry
nRPM	src/ramulator_sim/TLDRAM.h	/^        int nRCDM, nRPM, nRASM, nRCM;$/;"	m	struct:TLDRAM::SpeedEntry
nRPab	src/ramulator_sim/DSARP.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:DSARP::SpeedEntry
nRPab	src/ramulator_sim/LPDDR3.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:LPDDR3::SpeedEntry
nRPab	src/ramulator_sim/LPDDR4.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:LPDDR4::SpeedEntry
nRPab	src/ramulator_sim/WideIO2.h	/^        int nCL, nRCD, nRPpb, nRP8b, nRPab, nCWL;$/;"	m	struct:WideIO2::SpeedEntry
nRPpb	src/ramulator_sim/DSARP.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:DSARP::SpeedEntry
nRPpb	src/ramulator_sim/LPDDR3.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:LPDDR3::SpeedEntry
nRPpb	src/ramulator_sim/LPDDR4.h	/^        int nCL, nRCD, nRPpb, nRPab, nCWL;$/;"	m	struct:LPDDR4::SpeedEntry
nRPpb	src/ramulator_sim/WideIO2.h	/^        int nCL, nRCD, nRPpb, nRP8b, nRPab, nCWL;$/;"	m	struct:WideIO2::SpeedEntry
nRRD	src/ramulator_sim/ALDRAM.h	/^        int nRRD, nFAW;$/;"	m	struct:ALDRAM::SpeedEntry
nRRD	src/ramulator_sim/DDR3.h	/^        int nRRD, nFAW;$/;"	m	struct:DDR3::SpeedEntry
nRRD	src/ramulator_sim/DSARP.h	/^        int nRRD, nFAW;$/;"	m	struct:DSARP::SpeedEntry
nRRD	src/ramulator_sim/GDDR5.h	/^        int nRRD, nFAW, n32AW;$/;"	m	struct:GDDR5::SpeedEntry
nRRD	src/ramulator_sim/LPDDR3.h	/^        int nRRD, nFAW;$/;"	m	struct:LPDDR3::SpeedEntry
nRRD	src/ramulator_sim/LPDDR4.h	/^        int nPPD, nRRD, nFAW;$/;"	m	struct:LPDDR4::SpeedEntry
nRRD	src/ramulator_sim/SALP.h	/^        int nRRD, nFAW;$/;"	m	struct:SALP::SpeedEntry
nRRD	src/ramulator_sim/TLDRAM.h	/^        int nRRD, nFAW;$/;"	m	struct:TLDRAM::SpeedEntry
nRRD	src/ramulator_sim/WideIO.h	/^        int nRRD, nTAW;$/;"	m	struct:WideIO::SpeedEntry
nRRD	src/ramulator_sim/WideIO2.h	/^        int nRRD, nFAW;$/;"	m	struct:WideIO2::SpeedEntry
nRRDL	src/ramulator_sim/DDR4.h	/^        int nRRDS, nRRDL, nFAW;$/;"	m	struct:DDR4::SpeedEntry
nRRDL	src/ramulator_sim/HBM.h	/^        int nRRDS, nRRDL, nFAW;$/;"	m	struct:HBM::SpeedEntry
nRRDS	src/ramulator_sim/DDR4.h	/^        int nRRDS, nRRDL, nFAW;$/;"	m	struct:DDR4::SpeedEntry
nRRDS	src/ramulator_sim/HBM.h	/^        int nRRDS, nRRDL, nFAW;$/;"	m	struct:HBM::SpeedEntry
nRRD_factor	src/ramulator_sim/DSARP.h	/^    double nRRD_factor = 1.138;$/;"	m	class:DSARP
nRTP	src/ramulator_sim/ALDRAM.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ALDRAM::SpeedEntry
nRTP	src/ramulator_sim/DDR3.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:DDR3::SpeedEntry
nRTP	src/ramulator_sim/DDR4.h	/^        int nRTP, nWTRS, nWTRL, nWR;$/;"	m	struct:DDR4::SpeedEntry
nRTP	src/ramulator_sim/DSARP.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:DSARP::SpeedEntry
nRTP	src/ramulator_sim/GDDR5.h	/^        int nPPD, nRTP, nWTR, nWR;$/;"	m	struct:GDDR5::SpeedEntry
nRTP	src/ramulator_sim/HBM.h	/^        int nRTP, nWTRS, nWTRL, nWR;$/;"	m	struct:HBM::SpeedEntry
nRTP	src/ramulator_sim/LPDDR3.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:LPDDR3::SpeedEntry
nRTP	src/ramulator_sim/LPDDR4.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:LPDDR4::SpeedEntry
nRTP	src/ramulator_sim/SALP.h	/^        int nRTP, nWTR, nWR, nRA, nWA; \/\/ nRA = nCL\/2, nWA = nCWL + nBL + nWR\/2$/;"	m	struct:SALP::SpeedEntry
nRTP	src/ramulator_sim/TLDRAM.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:TLDRAM::SpeedEntry
nRTP	src/ramulator_sim/WideIO.h	/^        int nRTP, nRTW, nWTR, nWR;$/;"	m	struct:WideIO::SpeedEntry
nRTP	src/ramulator_sim/WideIO2.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:WideIO2::SpeedEntry
nRTRS	src/ramulator_sim/ALDRAM.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:ALDRAM::SpeedEntry
nRTRS	src/ramulator_sim/DDR3.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:DDR3::SpeedEntry
nRTRS	src/ramulator_sim/DDR4.h	/^        int nBL, nCCDS, nCCDL, nRTRS;$/;"	m	struct:DDR4::SpeedEntry
nRTRS	src/ramulator_sim/DSARP.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:DSARP::SpeedEntry
nRTRS	src/ramulator_sim/LPDDR3.h	/^        int nBL, nCCD, nRTRS, nDQSCK;$/;"	m	struct:LPDDR3::SpeedEntry
nRTRS	src/ramulator_sim/LPDDR4.h	/^        int nBL, nCCD, nRTRS, nDQSCK;$/;"	m	struct:LPDDR4::SpeedEntry
nRTRS	src/ramulator_sim/SALP.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:SALP::SpeedEntry
nRTRS	src/ramulator_sim/TLDRAM.h	/^        int nBL, nCCD, nRTRS;$/;"	m	struct:TLDRAM::SpeedEntry
nRTRS	src/ramulator_sim/WideIO2.h	/^        int nBL, nCCD, nDQSCK, nRTRS; \/\/ 4n prefetch, DDR (although 8n is allowed?)$/;"	m	struct:WideIO2::SpeedEntry
nRTW	src/ramulator_sim/WideIO.h	/^        int nRTP, nRTW, nWTR, nWR;$/;"	m	struct:WideIO::SpeedEntry
nSCD	src/ramulator_sim/SALP.h	/^        int nSCD;$/;"	m	struct:SALP::SpeedEntry
nSR	src/ramulator_sim/LPDDR4.h	/^        int nSR, nXSR; \/\/ tXSR = tRFCab + 7.5ns$/;"	m	struct:LPDDR4::SpeedEntry
nTAW	src/ramulator_sim/WideIO.h	/^        int nRRD, nTAW;$/;"	m	struct:WideIO::SpeedEntry
nText	src/gpuwattch/xmlParser.cc	/^int XMLNode::nText()       const { if (!d) return 0;    return d->nText;      }$/;"	f	class:XMLNode
nText	src/gpuwattch/xmlParser.h	/^                                 nText,           \/\/ Number of text fields$/;"	m	struct:XMLNode::XMLNodeDataTag
nWA	src/ramulator_sim/SALP.h	/^        int nRTP, nWTR, nWR, nRA, nWA; \/\/ nRA = nCL\/2, nWA = nCWL + nBL + nWR\/2$/;"	m	struct:SALP::SpeedEntry
nWR	src/ramulator_sim/ALDRAM.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ALDRAM::SpeedEntry
nWR	src/ramulator_sim/DDR3.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:DDR3::SpeedEntry
nWR	src/ramulator_sim/DDR4.h	/^        int nRTP, nWTRS, nWTRL, nWR;$/;"	m	struct:DDR4::SpeedEntry
nWR	src/ramulator_sim/DSARP.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:DSARP::SpeedEntry
nWR	src/ramulator_sim/GDDR5.h	/^        int nPPD, nRTP, nWTR, nWR;$/;"	m	struct:GDDR5::SpeedEntry
nWR	src/ramulator_sim/HBM.h	/^        int nRTP, nWTRS, nWTRL, nWR;$/;"	m	struct:HBM::SpeedEntry
nWR	src/ramulator_sim/LPDDR3.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:LPDDR3::SpeedEntry
nWR	src/ramulator_sim/LPDDR4.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:LPDDR4::SpeedEntry
nWR	src/ramulator_sim/SALP.h	/^        int nRTP, nWTR, nWR, nRA, nWA; \/\/ nRA = nCL\/2, nWA = nCWL + nBL + nWR\/2$/;"	m	struct:SALP::SpeedEntry
nWR	src/ramulator_sim/TLDRAM.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:TLDRAM::SpeedEntry
nWR	src/ramulator_sim/WideIO.h	/^        int nRTP, nRTW, nWTR, nWR;$/;"	m	struct:WideIO::SpeedEntry
nWR	src/ramulator_sim/WideIO2.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:WideIO2::SpeedEntry
nWTR	src/ramulator_sim/ALDRAM.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:ALDRAM::SpeedEntry
nWTR	src/ramulator_sim/DDR3.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:DDR3::SpeedEntry
nWTR	src/ramulator_sim/DSARP.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:DSARP::SpeedEntry
nWTR	src/ramulator_sim/GDDR5.h	/^        int nPPD, nRTP, nWTR, nWR;$/;"	m	struct:GDDR5::SpeedEntry
nWTR	src/ramulator_sim/LPDDR3.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:LPDDR3::SpeedEntry
nWTR	src/ramulator_sim/LPDDR4.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:LPDDR4::SpeedEntry
nWTR	src/ramulator_sim/SALP.h	/^        int nRTP, nWTR, nWR, nRA, nWA; \/\/ nRA = nCL\/2, nWA = nCWL + nBL + nWR\/2$/;"	m	struct:SALP::SpeedEntry
nWTR	src/ramulator_sim/TLDRAM.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:TLDRAM::SpeedEntry
nWTR	src/ramulator_sim/WideIO.h	/^        int nRTP, nRTW, nWTR, nWR;$/;"	m	struct:WideIO::SpeedEntry
nWTR	src/ramulator_sim/WideIO2.h	/^        int nRTP, nWTR, nWR;$/;"	m	struct:WideIO2::SpeedEntry
nWTRL	src/ramulator_sim/DDR4.h	/^        int nRTP, nWTRS, nWTRL, nWR;$/;"	m	struct:DDR4::SpeedEntry
nWTRL	src/ramulator_sim/HBM.h	/^        int nRTP, nWTRS, nWTRL, nWR;$/;"	m	struct:HBM::SpeedEntry
nWTRS	src/ramulator_sim/DDR4.h	/^        int nRTP, nWTRS, nWTRL, nWR;$/;"	m	struct:DDR4::SpeedEntry
nWTRS	src/ramulator_sim/HBM.h	/^        int nRTP, nWTRS, nWTRL, nWR;$/;"	m	struct:HBM::SpeedEntry
nXP	src/ramulator_sim/ALDRAM.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ALDRAM::SpeedEntry
nXP	src/ramulator_sim/DDR3.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:DDR3::SpeedEntry
nXP	src/ramulator_sim/DDR4.h	/^        int nPD, nXP, nXPDLL; \/\/ XPDLL not found in DDR4??$/;"	m	struct:DDR4::SpeedEntry
nXP	src/ramulator_sim/DSARP.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:DSARP::SpeedEntry
nXP	src/ramulator_sim/HBM.h	/^        int nPD, nXP;$/;"	m	struct:HBM::SpeedEntry
nXP	src/ramulator_sim/LPDDR3.h	/^        int nCKE, nXP; \/\/ CKE is PD, LPDDR3 has no DLL$/;"	m	struct:LPDDR3::SpeedEntry
nXP	src/ramulator_sim/LPDDR4.h	/^        int nCKE, nXP; \/\/ CKE value n\/a$/;"	m	struct:LPDDR4::SpeedEntry
nXP	src/ramulator_sim/SALP.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:SALP::SpeedEntry
nXP	src/ramulator_sim/TLDRAM.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:TLDRAM::SpeedEntry
nXP	src/ramulator_sim/WideIO.h	/^        int nCKE, nXP;$/;"	m	struct:WideIO::SpeedEntry
nXP	src/ramulator_sim/WideIO2.h	/^        int nCKE, nXP;$/;"	m	struct:WideIO2::SpeedEntry
nXPDLL	src/ramulator_sim/ALDRAM.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:ALDRAM::SpeedEntry
nXPDLL	src/ramulator_sim/DDR3.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:DDR3::SpeedEntry
nXPDLL	src/ramulator_sim/DDR4.h	/^        int nPD, nXP, nXPDLL; \/\/ XPDLL not found in DDR4??$/;"	m	struct:DDR4::SpeedEntry
nXPDLL	src/ramulator_sim/DSARP.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:DSARP::SpeedEntry
nXPDLL	src/ramulator_sim/SALP.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:SALP::SpeedEntry
nXPDLL	src/ramulator_sim/TLDRAM.h	/^        int nPD, nXP, nXPDLL;$/;"	m	struct:TLDRAM::SpeedEntry
nXPN	src/ramulator_sim/GDDR5.h	/^        int nPD, nXPN, nLK;$/;"	m	struct:GDDR5::SpeedEntry
nXS	src/ramulator_sim/ALDRAM.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ALDRAM::SpeedEntry
nXS	src/ramulator_sim/DDR3.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:DDR3::SpeedEntry
nXS	src/ramulator_sim/DDR4.h	/^        int nCKESR, nXS, nXSDLL; \/\/ nXSDLL TBD (nDLLK), nXS = (tRFC+10ns)\/tCK$/;"	m	struct:DDR4::SpeedEntry
nXS	src/ramulator_sim/DSARP.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:DSARP::SpeedEntry
nXS	src/ramulator_sim/GDDR5.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:GDDR5::SpeedEntry
nXS	src/ramulator_sim/HBM.h	/^        int nCKESR, nXS;$/;"	m	struct:HBM::SpeedEntry
nXS	src/ramulator_sim/SALP.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:SALP::SpeedEntry
nXS	src/ramulator_sim/TLDRAM.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:TLDRAM::SpeedEntry
nXSDLL	src/ramulator_sim/ALDRAM.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:ALDRAM::SpeedEntry
nXSDLL	src/ramulator_sim/DDR3.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:DDR3::SpeedEntry
nXSDLL	src/ramulator_sim/DDR4.h	/^        int nCKESR, nXS, nXSDLL; \/\/ nXSDLL TBD (nDLLK), nXS = (tRFC+10ns)\/tCK$/;"	m	struct:DDR4::SpeedEntry
nXSDLL	src/ramulator_sim/DSARP.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:DSARP::SpeedEntry
nXSDLL	src/ramulator_sim/GDDR5.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:GDDR5::SpeedEntry
nXSDLL	src/ramulator_sim/SALP.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:SALP::SpeedEntry
nXSDLL	src/ramulator_sim/TLDRAM.h	/^        int nCKESR, nXS, nXSDLL;$/;"	m	struct:TLDRAM::SpeedEntry
nXSR	src/ramulator_sim/LPDDR3.h	/^        int nCKESR, nXSR; \/\/ tXSR = tRFCab + 10ns$/;"	m	struct:LPDDR3::SpeedEntry
nXSR	src/ramulator_sim/LPDDR4.h	/^        int nSR, nXSR; \/\/ tXSR = tRFCab + 7.5ns$/;"	m	struct:LPDDR4::SpeedEntry
nXSR	src/ramulator_sim/WideIO.h	/^        int nCKESR, nXSR; \/\/ tXSR = tRFC+10$/;"	m	struct:WideIO::SpeedEntry
nXSR	src/ramulator_sim/WideIO2.h	/^        int nCKESR, nXSR;$/;"	m	struct:WideIO2::SpeedEntry
n_act	src/gpgpu-sim/power_stat.h	/^    unsigned *n_act[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod
n_activity	src/gpgpu-sim/power_stat.h	/^    unsigned *n_activity[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod
n_clock	src/gpuwattch/logic.h	/^	int    n_clock;$/;"	m	class:DFFCell
n_cmd	src/gpgpu-sim/power_stat.h	/^    unsigned *n_cmd[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod
n_completed	common/shd_warp_t.h	/^    unsigned n_completed;          \/\/ number of threads in warp completed$/;"	m	class:shd_warp_t
n_completed	common/warp_context.h	/^    unsigned n_completed;          \/\/ number of threads in warp completed$/;"	m	class:warp_context_t
n_inp	src/gpuwattch/cacti/crossbar.h	/^    double n_inp, n_out;$/;"	m	class:Crossbar
n_insn	src/gpgpu-sim/shader.h	/^   unsigned n_insn;$/;"	m	class:thread_ctx_t
n_insn_ac	src/gpgpu-sim/shader.h	/^   unsigned n_insn_ac;$/;"	m	class:thread_ctx_t
n_keep_0	src/gpuwattch/logic.h	/^	int    n_keep_0;$/;"	m	class:DFFCell
n_keep_1	src/gpuwattch/logic.h	/^	int    n_keep_1;$/;"	m	class:DFFCell
n_l1_access_ac	src/gpgpu-sim/shader.h	/^   unsigned n_l1_access_ac;$/;"	m	class:thread_ctx_t
n_l1_mis_ac	src/gpgpu-sim/shader.h	/^   unsigned n_l1_mis_ac;$/;"	m	class:thread_ctx_t
n_l1_mrghit_ac	src/gpgpu-sim/shader.h	/^   unsigned n_l1_mrghit_ac;$/;"	m	class:thread_ctx_t
n_mem_to_simt	src/gpgpu-sim/power_stat.h	/^    long *n_mem_to_simt[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod
n_mem_to_simt	src/gpgpu-sim/shader.h	/^    long *n_mem_to_simt;$/;"	m	struct:shader_core_stats_pod
n_nop	src/gpgpu-sim/power_stat.h	/^    unsigned *n_nop[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod
n_out	src/gpuwattch/cacti/crossbar.h	/^    double n_inp, n_out;$/;"	m	class:Crossbar
n_pre	src/gpgpu-sim/power_stat.h	/^    unsigned *n_pre[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod
n_rd	src/gpgpu-sim/power_stat.h	/^    unsigned *n_rd[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod
n_regfile_gating_group	src/gpgpu-sim/shader.h	/^    unsigned n_regfile_gating_group;$/;"	m	struct:shader_core_config
n_req	src/gpgpu-sim/power_stat.h	/^    unsigned *n_req[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod
n_sa	src/ramulator_sim/DSARP.h	/^    int n_sa;$/;"	m	class:DSARP
n_sa	src/ramulator_sim/SALP.h	/^    int n_sa; \/\/ number of subarrays per bank$/;"	m	class:SALP
n_simt_clusters	src/gpgpu-sim/shader.h	/^    unsigned n_simt_clusters;$/;"	m	struct:shader_core_config
n_simt_cores_per_cluster	src/gpgpu-sim/shader.h	/^    unsigned n_simt_cores_per_cluster;$/;"	m	struct:shader_core_config
n_simt_ejection_buffer_size	src/gpgpu-sim/shader.h	/^    unsigned n_simt_ejection_buffer_size;$/;"	m	struct:shader_core_config
n_simt_to_mem	src/gpgpu-sim/power_stat.h	/^    long *n_simt_to_mem[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod
n_simt_to_mem	src/gpgpu-sim/shader.h	/^    long *n_simt_to_mem; \/\/ Interconnect power stats$/;"	m	struct:shader_core_stats_pod
n_switch	src/gpuwattch/logic.h	/^	int    n_switch;$/;"	m	class:DFFCell
n_thread_CFloggers	src/gpgpu-sim/stat-tool.cc	/^static int n_thread_CFloggers = 0;$/;"	v	file:
n_thread_per_shader	src/gpgpu-sim/shader.h	/^    unsigned n_thread_per_shader;$/;"	m	struct:shader_core_config
n_thread_per_shader_kain	src/gpgpu-sim/shader.h	/^    unsigned n_thread_per_shader_kain(unsigned core_sid) const$/;"	f	struct:shader_core_config
n_to_p_eff_curr_drv_ratio	src/gpuwattch/cacti/parameter.h	/^    double n_to_p_eff_curr_drv_ratio;$/;"	m	class:TechnologyParameter::DeviceType
n_wr	src/gpgpu-sim/power_stat.h	/^    unsigned *n_wr[NUM_STAT_IDX];$/;"	m	struct:mem_power_stats_pod
name	launcher/stats/stats.h	/^  const std::string &name() const { return m_name; }$/;"	f	class:Stats::StatBase
name	launcher/stats/stats.h	/^  void name(const std::string &name)$/;"	f	class:Stats::StatBase
name	src/abstract_hardware_model.cc	/^std::string kernel_info_t::name() const$/;"	f	class:kernel_info_t
name	src/cuda-sim/ptx_ir.h	/^   const std::string &name() const { return m_name;}$/;"	f	class:symbol
name	src/cuda-sim/ptx_ir.h	/^   const std::string &name() const$/;"	f	class:operand_info
name	src/gpuwattch/array.h	/^  string         name;$/;"	m	class:ArrayST
name	src/gpuwattch/basic_components.h	/^    string name;$/;"	m	class:CacheDynParam
name	src/gpuwattch/basic_components.h	/^    string name;$/;"	m	class:DRAMParam
name	src/gpuwattch/basic_components.h	/^    string name;$/;"	m	class:MCParam
name	src/gpuwattch/basic_components.h	/^    string name;$/;"	m	class:NIUParam
name	src/gpuwattch/basic_components.h	/^    string name;$/;"	m	class:NoCParam
name	src/gpuwattch/basic_components.h	/^    string name;$/;"	m	class:PCIeParam
name	src/gpuwattch/basic_components.h	/^    string name;$/;"	m	class:ProcParam
name	src/gpuwattch/interconnect.h	/^	string   name;$/;"	m	class:interconnect
name	src/gpuwattch/noc.h	/^	string name, link_name;$/;"	m	class:NoC
name	src/intersim2/y.tab.c	/^  char   *name;$/;"	m	union:YYSTYPE	file:
name	src/intersim2/y.tab.h	/^  char   *name;$/;"	m	union:YYSTYPE
name	src/ramulator_sim/StatType.h	/^  Derived &name(const std::string &__name) {$/;"	f	class:Stats_Ram::Stat
name	src/ramulator_sim/Statistics.h	/^  StatBase<StatType> & name(std::string _name) {$/;"	f	class:StatBase
name	src/ramulator_sim/Statistics.h	/^  const std::string &name(void) const { return statName; }$/;"	f	class:StatBase
name_to_func	src/ramulator_sim/gpu_wrapper.cpp	/^static map<string, function<MemoryBase *(const Config&, int, fifo_pipeline<mem_fetch> *)> > name_to_func = {$/;"	v	file:
name_to_translation	src/ramulator_sim/Memory.h	/^    std::map<string, Translation> name_to_translation = {$/;"	m	class:Memory
nand	src/gpuwattch/cacti/basic_circuit.h	/^    nand,$/;"	e	enum:Gate_type
nandn_impl	src/cuda-sim/instructions.cc	/^void nandn_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
nbanks	src/gpuwattch/basic_components.h	/^    double    capacity, blockW, assoc, nbanks;$/;"	m	class:CacheDynParam
nbanks	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int nbanks;$/;"	m	class:InputParameter
nbanks	src/gpuwattch/cacti/uca.h	/^    uint32_t nbanks;$/;"	m	class:UCA
nbk	src/gpgpu-sim/gpu-sim.h	/^   unsigned nbk;$/;"	m	struct:memory_config
nbkgrp	src/gpgpu-sim/gpu-sim.h	/^   unsigned nbkgrp; \/\/ number of bank groups (has to be power of 2)$/;"	m	struct:memory_config
ndbl	src/gpuwattch/cacti/cacti_interface.h	/^    int ndbl, ndwl, nspd, ndsam1, ndsam2, ndcm;$/;"	m	class:InputParameter
ndbl	src/gpuwattch/cacti/htree2.h	/^    int ndbl, ndwl;$/;"	m	class:Htree2
ndcm	src/gpuwattch/cacti/cacti_interface.h	/^    int ndbl, ndwl, nspd, ndsam1, ndsam2, ndcm;$/;"	m	class:InputParameter
ndsam1	src/gpuwattch/cacti/cacti_interface.h	/^    int ndbl, ndwl, nspd, ndsam1, ndsam2, ndcm;$/;"	m	class:InputParameter
ndsam2	src/gpuwattch/cacti/cacti_interface.h	/^    int ndbl, ndwl, nspd, ndsam1, ndsam2, ndcm;$/;"	m	class:InputParameter
ndwl	src/gpuwattch/cacti/cacti_interface.h	/^    int ndbl, ndwl, nspd, ndsam1, ndsam2, ndcm;$/;"	m	class:InputParameter
ndwl	src/gpuwattch/cacti/htree2.h	/^    int ndbl, ndwl;$/;"	m	class:Htree2
need_eviction	src/ramulator_sim/Cache.cpp	/^bool Cache::need_eviction(const std::list<Line>& lines, long addr) {$/;"	f	class:Cache
neg_impl	src/cuda-sim/instructions.cc	/^void neg_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
neighbor	src/intersim/traffic.cpp	/^int neighbor( int source, int total_nodes )$/;"	f
net	src/intersim2/power/power_module.hpp	/^  Network * net;$/;"	m	class:Power_Module
net_c	src/intersim/interconnect_interface.cpp	/^static unsigned int net_c; \/\/number of interconnection networks$/;"	v	file:
net_num	src/intersim/flit.hpp	/^   int net_num; \/\/ which network is this flit in (we might have several icnt networks)$/;"	m	struct:Flit
net_num	src/intersim/interconnect_interface.h	/^   int net_num; \/\/ which network is this flit in (we might have several icnt networks)$/;"	m	struct:glue_buf
network_age_based	src/intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_based, hop_count_based, sequence_based, none };$/;"	e	enum:TrafficManager::ePriority
network_mode	src/gpgpu-sim/icnt_wrapper.h	/^enum network_mode {$/;"	g
new_addr_type	common/types.h	/^typedef unsigned long long new_addr_type;$/;"	t
new_grid	src/gpgpu-sim/shader.h	/^    void new_grid()$/;"	f	class:shader_core_stats
new_stack	src/gpgpu-sim/stack.cc	/^Stack* new_stack(int size) {$/;"	f
new_window	src/gpgpu-sim/gpu-cache.cc	/^void tag_array::new_window()$/;"	f	class:tag_array
next	launcher/simulator.h	/^    struct _cuda_device_id *next() { return m_next; }$/;"	f	struct:Simulator::_cuda_device_id
next	src/ramulator_sim/DRAM.h	/^    long next[int(T::Command::MAX)]; \/\/ the earliest time in the future when a command could be ready$/;"	m	class:DRAM
next	src/stream_manager.cc	/^stream_operation CUstream_st::next()$/;"	f	class:CUstream_st
nextID	launcher/child_process.cc	/^unsigned ChildProcess::nextID = 0;$/;"	m	class:ChildProcess	file:
nextID	launcher/child_process.h	/^  static unsigned nextID;$/;"	m	class:ChildProcess
next_access	src/gpgpu-sim/gpu-cache.cc	/^mem_fetch *mshr_table::next_access(){$/;"	f	class:mshr_table
next_access	src/gpgpu-sim/gpu-cache.h	/^    mem_fetch *next_access(){return m_mshrs.next_access();}$/;"	f	class:baseline_cache
next_access	src/gpgpu-sim/gpu-cache.h	/^    mem_fetch *next_access(){return m_result_fifo.pop();}$/;"	f	class:tex_cache
next_clock_domain	src/gpgpu-sim/gpu-sim.cc	/^int gpgpu_sim::next_clock_domain(void) $/;"	f	class:gpgpu_sim
next_instr	src/cuda-sim/ptx_sim.h	/^   unsigned next_instr()$/;"	f	class:ptx_thread_info
next_pc	src/gpgpu-sim/shader.cc	/^address_type shader_core_ctx::next_pc( int tid ) const$/;"	f	class:shader_core_ctx
next_pop_index	src/gpgpu-sim/gpu-cache.h	/^        unsigned next_pop_index() const $/;"	f	class:tex_cache::fifo
next_reg_num	src/cuda-sim/ptx_ir.h	/^   unsigned next_reg_num() { return ++m_reg_allocator;}$/;"	f	class:symbol_table
next_snap_shot_cycle	src/gpgpu-sim/stat-tool.cc	/^static unsigned long long  next_snap_shot_cycle = 0;$/;"	v	file:
next_spill_cycle	src/gpgpu-sim/stat-tool.cc	/^static unsigned long long  next_spill_cycle = 0;$/;"	v	file:
next_thread_block_to_schedule	launcher/mk-sched/even_scheduler.cc	/^EvenScheduler::next_thread_block_to_schedule()$/;"	f	class:EvenScheduler
next_thread_block_to_schedule	launcher/mk-sched/fixed_scheduler.cc	/^FixedScheduler::next_thread_block_to_schedule()$/;"	f	class:FixedScheduler
next_thread_block_to_schedule	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::next_thread_block_to_schedule()$/;"	f	class:DynamicScheduler
niu	src/gpuwattch/XML_Parse.h	/^	system_niu niu;$/;"	m	struct:__anon26
niu	src/gpuwattch/processor.h	/^    NIUController    * niu;$/;"	m	class:Processor
niup	src/gpuwattch/iocontrollers.h	/^    NIUParam  niup;$/;"	m	class:NIUController
nius	src/gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor
nmos	src/gpuwattch/cacti/basic_circuit.h	/^    nmos,$/;"	e	enum:Gate_type
no_device_under_wire_area	src/gpuwattch/interconnect.h	/^    Area no_device_under_wire_area;$/;"	m	class:interconnect
no_memory_op	src/abstract_hardware_model.h	/^	no_memory_op = 0,$/;"	e	enum:_memory_op_t
no_more_ctas_to_run	common/kernel_info_t.h	/^   bool no_more_ctas_to_run() const$/;"	f	class:kernel_info_t
no_more_fat_binary	launcher/child_process.h	/^  bool no_more_fat_binary() const { return fat_binary_count == 0; }$/;"	f	class:ChildProcess
no_more_stats	launcher/child_process.h	/^  bool no_more_stats;$/;"	m	class:ChildProcess
noc	src/gpuwattch/core.h	/^	Component noc;$/;"	m	class:LoadStoreU
noc	src/gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor
nocdynp	src/gpuwattch/noc.h	/^	NoCParam  nocdynp;$/;"	m	class:NoC
nocs	src/gpuwattch/core.h	/^	vector<NoC *>  nocs;$/;"	m	class:LoadStoreU
nocs	src/gpuwattch/processor.h	/^    vector<NoC *>  nocs;$/;"	m	class:Processor
node_list	src/intersim2/networks/anynet.hpp	/^  map<int, int > node_list;$/;"	m	class:AnyNet
node_map	src/intersim/interconnect_interface.cpp	/^static int * node_map;  \/\/deviceID to mesh location map$/;"	v	file:
non_rf_operands	src/gpuwattch/XML_Parse.h	/^	double non_rf_operands;$/;"	m	struct:__anon15
nonan	src/ramulator_sim/StatType.h	/^const uint16_t nonan     = 0x00000200;$/;"	m	namespace:Stats_Ram
none	src/intersim/trafficmanager.hpp	/^      class_based, age_based, none$/;"	e	enum:TrafficManager::ePriority
none	src/intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_based, hop_count_based, sequence_based, none };$/;"	e	enum:TrafficManager::ePriority
none	src/intersim2/vc.hpp	/^  enum ePrioType { local_age_based, queue_length_based, hop_count_based, none, other };$/;"	e	enum:VC::ePrioType
nop_coeff	src/gpuwattch/basic_components.h	/^    double nop_coeff;$/;"	m	class:DRAMParam
nop_impl	src/cuda-sim/instructions.cc	/^void nop_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
nor	src/gpuwattch/cacti/basic_circuit.h	/^    nor,$/;"	e	enum:Gate_type
normalized	src/abstract_hardware_model.h	/^   int                           normalized;$/;"	m	struct:textureReference
norn_impl	src/cuda-sim/instructions.cc	/^void norn_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
not_impl	src/cuda-sim/instructions.cc	/^void not_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
nozero	src/ramulator_sim/StatType.h	/^const uint16_t nozero    = 0x00000100;$/;"	m	namespace:Stats_Ram
nsense	src/gpuwattch/cacti/wire.h	/^    int nsense; \/\/ no. of sense amps connected to a low-swing wire if it$/;"	m	class:Wire
nsets	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int nsets;  \/\/ == number_of_sets$/;"	m	class:InputParameter
nspd	src/gpuwattch/cacti/cacti_interface.h	/^    int ndbl, ndwl, nspd, ndsam1, ndsam2, ndcm;$/;"	m	class:InputParameter
nthreads	src/gpuwattch/cacti/Ucache.cc	/^const uint32_t nthreads = NTHREADS;$/;"	v
nuca	src/gpuwattch/cacti/cacti_interface.h	/^    int nuca;$/;"	m	class:InputParameter
nuca_bank_count	src/gpuwattch/cacti/cacti_interface.h	/^    int nuca_bank_count;$/;"	m	class:InputParameter
nuca_cache_sz	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int nuca_cache_sz; \/\/ TODO$/;"	m	class:InputParameter
nuca_org_t	src/gpuwattch/cacti/nuca.h	/^class nuca_org_t {$/;"	c
nuca_pda	src/gpuwattch/cacti/nuca.h	/^    Component nuca_pda;$/;"	m	class:nuca_org_t
num	src/intersim2/y.tab.c	/^  int    num;$/;"	m	union:YYSTYPE	file:
num	src/intersim2/y.tab.h	/^  int    num;$/;"	m	union:YYSTYPE
numCore	src/gpuwattch/basic_components.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir,numMC, numMCChannel;$/;"	m	class:ProcParam
numCore	src/gpuwattch/processor.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir;$/;"	m	class:Processor
numIBEntries	src/gpuwattch/arch_const.h	/^const int numIBEntries			=	64;$/;"	v
numL1Dir	src/gpuwattch/basic_components.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir,numMC, numMCChannel;$/;"	m	class:ProcParam
numL1Dir	src/gpuwattch/processor.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir;$/;"	m	class:Processor
numL2	src/gpuwattch/basic_components.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir,numMC, numMCChannel;$/;"	m	class:ProcParam
numL2	src/gpuwattch/processor.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir;$/;"	m	class:Processor
numL2Dir	src/gpuwattch/basic_components.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir,numMC, numMCChannel;$/;"	m	class:ProcParam
numL2Dir	src/gpuwattch/processor.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir;$/;"	m	class:Processor
numL3	src/gpuwattch/basic_components.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir,numMC, numMCChannel;$/;"	m	class:ProcParam
numL3	src/gpuwattch/processor.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir;$/;"	m	class:Processor
numMC	src/gpuwattch/basic_components.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir,numMC, numMCChannel;$/;"	m	class:ProcParam
numMCChannel	src/gpuwattch/basic_components.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir,numMC, numMCChannel;$/;"	m	class:ProcParam
numNOC	src/gpuwattch/basic_components.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir,numMC, numMCChannel;$/;"	m	class:ProcParam
numNOC	src/gpuwattch/processor.h	/^    int  numCore, numL2, numL3, numNOC, numL1Dir, numL2Dir;$/;"	m	class:Processor
numPhysFloatRegs	src/gpuwattch/arch_const.h	/^const int numPhysFloatRegs=256;$/;"	v
numPhysIntRegs	src/gpuwattch/arch_const.h	/^const int numPhysIntRegs=32;$/;"	v
numROBEntries	src/gpuwattch/arch_const.h	/^const int numROBEntries=192;$/;"	v
numVC	src/intersim2/power/power_module.hpp	/^  double numVC;$/;"	m	class:Power_Module
num_FRF_entry	src/gpuwattch/basic_components.h	/^    int  num_IRF_entry, num_FRF_entry, num_ifreelist_entries, num_ffreelist_entries;$/;"	m	class:CoreDynParam
num_IRF_entry	src/gpuwattch/basic_components.h	/^    int  num_IRF_entry, num_FRF_entry, num_ifreelist_entries, num_ffreelist_entries;$/;"	m	class:CoreDynParam
num_L1_active_nand2_path	src/gpuwattch/cacti/decoder.h	/^  int num_L1_active_nand2_path;$/;"	m	class:PredecBlk
num_L1_active_nand3_path	src/gpuwattch/cacti/decoder.h	/^  int num_L1_active_nand3_path;$/;"	m	class:PredecBlk
num_MCBs_accessed	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int *num_MCBs_accessed; \/\/tracks how many memory controllers are accessed whenever any thread in a warp misses in cache$/;"	m	class:memory_stats_t
num_SMs	launcher/mk-sched/mk_scheduler.h	/^  unsigned num_SMs;$/;"	m	class:MKScheduler
num_act_mats_hor_dir	src/gpuwattch/cacti/mat.h	/^    int      num_act_mats_hor_dir;$/;"	m	class:Mat
num_act_mats_hor_dir	src/gpuwattch/cacti/parameter.h	/^    int num_act_mats_hor_dir;$/;"	m	class:DynamicParameter
num_act_mats_hor_dir_sl	src/gpuwattch/cacti/parameter.h	/^    int num_act_mats_hor_dir_sl;$/;"	m	class:DynamicParameter
num_activates	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int **num_activates; \/\/num_activates[dram chip id][bank id]$/;"	m	class:memory_stats_t
num_activates_kain_app1	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int **num_activates_kain_app1; \/\/num_activates[dram chip id][bank id]$/;"	m	class:memory_stats_t
num_activates_kain_app2	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int **num_activates_kain_app2; \/\/num_activates[dram chip id][bank id]$/;"	m	class:memory_stats_t
num_addr_b_bank	src/gpuwattch/cacti/uca.h	/^    int   num_addr_b_bank;$/;"	m	class:UCA
num_addr_b_mat	src/gpuwattch/cacti/bank.h	/^    int  num_addr_b_mat;$/;"	m	class:Bank
num_addr_b_routed_to_mat_for_act	src/gpuwattch/cacti/bank.h	/^    int  num_addr_b_routed_to_mat_for_act;$/;"	m	class:Bank
num_addr_b_routed_to_mat_for_rd_or_wr	src/gpuwattch/cacti/bank.h	/^    int  num_addr_b_routed_to_mat_for_rd_or_wr;$/;"	m	class:Bank
num_addr_b_row_dec	src/gpuwattch/cacti/bank.h	/^    int  num_addr_b_row_dec;$/;"	m	class:Bank
num_addr_bits_nand2_path	src/gpuwattch/cacti/decoder.h	/^  inline int num_addr_bits_nand2_path()$/;"	f	class:PredecBlkDrv
num_addr_bits_nand3_path	src/gpuwattch/cacti/decoder.h	/^  inline int num_addr_bits_nand3_path()$/;"	f	class:PredecBlkDrv
num_alus	src/gpuwattch/basic_components.h	/^    int  num_alus, num_muls;$/;"	m	class:CoreDynParam
num_args	src/cuda-sim/ptx_ir.h	/^   unsigned num_args() const$/;"	f	class:function_info
num_banks_of_DRAM_chip	src/gpuwattch/XML_Parse.h	/^	int num_banks_of_DRAM_chip;$/;"	m	struct:__anon22
num_bits_per_ecc_b_	src/gpuwattch/cacti/const.h	/^const static double num_bits_per_ecc_b_          = 8.0;$/;"	v
num_blocks	common/kernel_info_t.h	/^   size_t num_blocks() const$/;"	f	class:kernel_info_t
num_buffers_driving_1_nand2_load	src/gpuwattch/cacti/decoder.h	/^  int num_buffers_driving_1_nand2_load;$/;"	m	class:PredecBlkDrv
num_buffers_driving_2_nand2_load	src/gpuwattch/cacti/decoder.h	/^  int num_buffers_driving_2_nand2_load;$/;"	m	class:PredecBlkDrv
num_buffers_driving_2_nand3_load	src/gpuwattch/cacti/decoder.h	/^  int num_buffers_driving_2_nand3_load;$/;"	m	class:PredecBlkDrv
num_buffers_driving_4_nand2_load	src/gpuwattch/cacti/decoder.h	/^  int num_buffers_driving_4_nand2_load;$/;"	m	class:PredecBlkDrv
num_buffers_driving_8_nand3_load	src/gpuwattch/cacti/decoder.h	/^  int num_buffers_driving_8_nand3_load;$/;"	m	class:PredecBlkDrv
num_buffers_nand3_path	src/gpuwattch/cacti/decoder.h	/^  int num_buffers_nand3_path;$/;"	m	class:PredecBlkDrv
num_c_subarray	src/gpuwattch/cacti/parameter.h	/^    unsigned int num_c_subarray;$/;"	m	class:DynamicParameter
num_cache_line_bits	src/gpgpu-sim/addrdec.h	/^   unsigned num_cache_line_bits;$/;"	m	class:linear_to_raw_address_translation
num_channels	src/gpuwattch/XML_Parse.h	/^	int num_channels;$/;"	m	struct:__anon25
num_channels	src/gpuwattch/basic_components.h	/^    double  clockRate,num_mcs, peakDataTransferRate, num_channels;$/;"	m	class:MCParam
num_channels	src/gpuwattch/basic_components.h	/^    int    num_channels, num_units;$/;"	m	class:PCIeParam
num_cluster	src/gpgpu-sim/gpu-sim.h	/^    unsigned num_cluster() const { return m_shader_config.n_simt_clusters; }$/;"	f	class:gpgpu_sim_config
num_cols	src/gpuwattch/cacti/subarray.h	/^    unsigned int num_cols;$/;"	m	class:Subarray
num_cols_fa_cam	src/gpuwattch/cacti/subarray.h	/^    int32_t num_cols_fa_cam;$/;"	m	class:Subarray
num_cols_fa_ram	src/gpuwattch/cacti/subarray.h	/^    int32_t num_cols_fa_ram;$/;"	m	class:Subarray
num_decoded_signals	src/gpuwattch/logic.h	/^	int  num_decoded_signals;$/;"	m	class:inst_decoder
num_decoder_segments	src/gpuwattch/logic.h	/^	int  num_decoder_segments;$/;"	m	class:inst_decoder
num_decoders	src/gpuwattch/logic.h	/^	int  num_decoders;$/;"	m	class:inst_decoder
num_devices	launcher/simulator.h	/^    int num_devices() const {$/;"	f	struct:Simulator::_cuda_device_id
num_di_b_bank	src/gpuwattch/cacti/uca.h	/^    int   num_di_b_bank;$/;"	m	class:UCA
num_di_b_bank_per_port	src/gpuwattch/cacti/parameter.h	/^    int num_di_b_bank_per_port;$/;"	m	class:DynamicParameter
num_di_b_mat	src/gpuwattch/cacti/parameter.h	/^    int num_di_b_mat;$/;"	m	class:DynamicParameter
num_di_b_subbank	src/gpuwattch/cacti/parameter.h	/^    int num_di_b_subbank;$/;"	m	class:DynamicParameter
num_do_b_bank	src/gpuwattch/cacti/uca.h	/^    int   num_do_b_bank;$/;"	m	class:UCA
num_do_b_bank_per_port	src/gpuwattch/cacti/parameter.h	/^    int num_do_b_bank_per_port;$/;"	m	class:DynamicParameter
num_do_b_mat	src/gpuwattch/cacti/mat.h	/^    int      num_do_b_mat;$/;"	m	class:Mat
num_do_b_mat	src/gpuwattch/cacti/parameter.h	/^    int num_do_b_mat;$/;"	m	class:DynamicParameter
num_do_b_subbank	src/gpuwattch/cacti/parameter.h	/^    int num_do_b_subbank;$/;"	m	class:DynamicParameter
num_dram_cycles	src/ramulator_sim/Memory.h	/^    ScalarStat num_dram_cycles;$/;"	m	class:Memory
num_expected_shader	launcher/mk-sched/mk_scheduler.h	/^    unsigned num_expected_shader() const  { return expected_shaders; }$/;"	f	class:DynamicScheduler::SM_info
num_ffreelist_entries	src/gpuwattch/basic_components.h	/^    int  num_IRF_entry, num_FRF_entry, num_ifreelist_entries, num_ffreelist_entries;$/;"	m	class:CoreDynParam
num_fp_pipelines	src/gpuwattch/basic_components.h	/^    int  num_hthreads, pipeline_stages, fp_pipeline_stages, num_pipelines, num_fp_pipelines;$/;"	m	class:CoreDynParam
num_fpus	src/gpuwattch/basic_components.h	/^    double num_fpus;$/;"	m	class:CoreDynParam
num_fu	src/gpuwattch/logic.h	/^	double num_fu;$/;"	m	class:FunctionalUnit
num_gates	src/gpuwattch/cacti/decoder.h	/^    int    num_gates;$/;"	m	class:Decoder
num_gates_min	src/gpuwattch/cacti/decoder.h	/^    int    num_gates_min;$/;"	m	class:Decoder
num_holding_shader	launcher/mk-sched/mk_scheduler.h	/^    unsigned num_holding_shader() const   { return holding_shaders; }$/;"	f	class:DynamicScheduler::SM_info
num_hthreads	src/gpuwattch/basic_components.h	/^    int  num_hthreads, pipeline_stages, fp_pipeline_stages, num_pipelines, num_fp_pipelines;$/;"	m	class:CoreDynParam
num_hthreads	src/gpuwattch/logic.h	/^	double pipeline_stage,num_hthreads,issue_width;$/;"	m	class:UndiffCore
num_idle_cores	src/gpuwattch/XML_Parse.h	/^	double num_idle_cores;$/;"	m	struct:__anon15
num_idle_cores	src/gpuwattch/XML_Parse.h	/^	double num_idle_cores;$/;"	m	struct:__anon26
num_ifreelist_entries	src/gpuwattch/basic_components.h	/^    int  num_IRF_entry, num_FRF_entry, num_ifreelist_entries, num_ffreelist_entries;$/;"	m	class:CoreDynParam
num_in_signals	src/gpuwattch/cacti/decoder.h	/^    int    num_in_signals;$/;"	m	class:Decoder
num_incoming_requests	src/ramulator_sim/Memory.h	/^    ScalarStat num_incoming_requests;$/;"	m	class:Memory
num_local_bits	src/gpgpu-sim/addrdec.h	/^   unsigned num_local_bits;$/;"	m	class:linear_to_raw_address_translation
num_mats	src/gpuwattch/cacti/mat.h	/^    int      num_mats;$/;"	m	class:Mat
num_mats	src/gpuwattch/cacti/parameter.h	/^    int num_mats;       \/\/ only for leakage computation  -- the number of mats per bank$/;"	m	class:DynamicParameter
num_mats_h_dir	src/gpuwattch/cacti/parameter.h	/^    int num_mats_h_dir;$/;"	m	class:DynamicParameter
num_mats_hor_dir	src/gpuwattch/cacti/bank.h	/^    int  num_mats_hor_dir;$/;"	m	class:Bank
num_mats_v_dir	src/gpuwattch/cacti/parameter.h	/^    int num_mats_v_dir;$/;"	m	class:DynamicParameter
num_mats_ver_dir	src/gpuwattch/cacti/bank.h	/^    int  num_mats_ver_dir;$/;"	m	class:Bank
num_mcs	src/gpuwattch/basic_components.h	/^    double  clockRate,num_mcs, peakDataTransferRate, num_channels;$/;"	m	class:MCParam
num_mfs	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned num_mfs;$/;"	m	class:memory_stats_t
num_muls	src/gpuwattch/basic_components.h	/^    int  num_alus, num_muls;$/;"	m	class:CoreDynParam
num_operands	src/abstract_hardware_model.h	/^    unsigned num_operands;$/;"	m	class:inst_t
num_parallel_bits	src/gpgpu-sim/addrdec.h	/^   unsigned num_parallel_bits;$/;"	m	class:linear_to_raw_address_translation
num_perf_counters	src/gpuwattch/gpgpu_sim_wrapper.h	/^    unsigned num_perf_counters; \/\/ # of performance counters$/;"	m	class:gpgpu_sim_wrapper
num_pipe_stages	src/gpuwattch/interconnect.h	/^    int  num_pipe_stages;$/;"	m	class:interconnect
num_pipelines	src/gpuwattch/basic_components.h	/^    int  num_hthreads, pipeline_stages, fp_pipeline_stages, num_pipelines, num_fp_pipelines;$/;"	m	class:CoreDynParam
num_piperegs	src/gpuwattch/logic.h	/^	double num_piperegs;$/;"	m	class:Pipeline
num_pwr_cmps	src/gpuwattch/gpgpu_sim_wrapper.h	/^    unsigned num_pwr_cmps; \/\/ # of components modelled$/;"	m	class:gpgpu_sim_wrapper
num_r_subarray	src/gpuwattch/cacti/parameter.h	/^    unsigned int num_r_subarray;$/;"	m	class:DynamicParameter
num_rd_ports	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int num_rd_ports;$/;"	m	class:InputParameter
num_rd_ports	src/gpuwattch/cacti/parameter.h	/^    unsigned int num_rd_ports;$/;"	m	class:DynamicParameter
num_read_requests	src/ramulator_sim/Memory.h	/^    VectorStat num_read_requests;$/;"	m	class:Memory
num_reconvergence_pairs	src/cuda-sim/ptx_ir.h	/^   unsigned num_reconvergence_pairs;$/;"	m	class:function_info
num_registers_per_core	src/gpgpu-sim/gpu-sim.cc	/^int gpgpu_sim::num_registers_per_core() const$/;"	f	class:gpgpu_sim
num_regs	src/abstract_hardware_model.h	/^    unsigned num_regs; \/\/ count vector operand as one register operand$/;"	m	class:inst_t
num_removing_shader	launcher/mk-sched/mk_scheduler.h	/^    unsigned num_removing_shader() const  { return removing_shaders; }$/;"	f	class:DynamicScheduler::SM_info
num_result_bus	src/gpgpu-sim/shader.h	/^    unsigned num_result_bus;$/;"	m	class:shader_core_ctx
num_rows	src/gpuwattch/cacti/subarray.h	/^    unsigned int num_rows;$/;"	m	class:Subarray
num_rw_ports	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int num_rw_ports;$/;"	m	class:InputParameter
num_rw_ports	src/gpuwattch/cacti/parameter.h	/^    unsigned int num_rw_ports;$/;"	m	class:DynamicParameter
num_sa_subarray	src/gpuwattch/cacti/mat.h	/^    int      num_sa_subarray;$/;"	m	class:Mat
num_sa_subarray_search	src/gpuwattch/cacti/mat.h	/^    int      num_sa_subarray_search;$/;"	m	class:Mat
num_se_rd_ports	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int num_se_rd_ports;  \/\/ number of single ended read ports$/;"	m	class:InputParameter
num_se_rd_ports	src/gpuwattch/cacti/parameter.h	/^    unsigned int num_se_rd_ports;  \/\/ number of single ended read ports$/;"	m	class:DynamicParameter
num_search_ports	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int num_search_ports;  \/\/ Sheng: number of search ports for CAM$/;"	m	class:InputParameter
num_search_ports	src/gpuwattch/cacti/parameter.h	/^    unsigned int num_search_ports;$/;"	m	class:DynamicParameter
num_shader	launcher/simulator.h	/^    unsigned num_shader() const { return m_gpgpu->get_config().num_shader(); }$/;"	f	struct:Simulator::_cuda_device_id
num_shader	src/gpgpu-sim/gpu-sim.h	/^    unsigned num_shader() const { return m_shader_config.num_shader(); }$/;"	f	class:gpgpu_sim_config
num_shader	src/gpgpu-sim/shader.h	/^    unsigned num_shader() const { return n_simt_clusters*n_simt_cores_per_cluster; }$/;"	f	struct:shader_core_config
num_shaders	launcher/mk-sched/mk_scheduler.h	/^    unsigned num_shaders;$/;"	m	class:DynamicScheduler::SM_info
num_shmem_bank	src/abstract_hardware_model.h	/^    unsigned num_shmem_bank;$/;"	m	struct:core_config
num_si_b_bank	src/gpuwattch/cacti/uca.h	/^    int   num_si_b_bank;$/;"	m	class:UCA
num_si_b_bank_per_port	src/gpuwattch/cacti/parameter.h	/^	int num_si_b_bank_per_port;$/;"	m	class:DynamicParameter
num_si_b_mat	src/gpuwattch/cacti/parameter.h	/^    int num_si_b_mat;$/;"	m	class:DynamicParameter
num_si_b_subbank	src/gpuwattch/cacti/parameter.h	/^    int num_si_b_subbank;$/;"	m	class:DynamicParameter
num_simulated_cycles	launcher/child_process.h	/^  unsigned long long num_simulated_cycles;$/;"	m	class:ChildProcess
num_simulated_insts	launcher/child_process.h	/^  unsigned long long num_simulated_insts;$/;"	m	class:ChildProcess
num_so_b_bank	src/gpuwattch/cacti/uca.h	/^    int   num_so_b_bank;$/;"	m	class:UCA
num_so_b_bank_per_port	src/gpuwattch/cacti/parameter.h	/^	int num_so_b_bank_per_port;$/;"	m	class:DynamicParameter
num_so_b_mat	src/gpuwattch/cacti/mat.h	/^    int      num_so_b_mat;$/;"	m	class:Mat
num_so_b_mat	src/gpuwattch/cacti/parameter.h	/^    int num_so_b_mat;$/;"	m	class:DynamicParameter
num_so_b_subbank	src/gpuwattch/cacti/parameter.h	/^    int num_so_b_subbank;$/;"	m	class:DynamicParameter
num_sub	src/gpuwattch/cacti/highradix.h	/^    double num_sub;$/;"	m	class:HighRadix
num_subarrays	src/gpuwattch/cacti/parameter.h	/^    int num_subarrays;  \/\/ only for leakage computation  -- the number of subarrays per bank$/;"	m	class:DynamicParameter
num_subarrays_per_mat	src/gpuwattch/cacti/mat.h	/^    uint32_t num_subarrays_per_mat;  \/\/ the number of subarrays in a mat$/;"	m	class:Mat
num_subarrays_per_row	src/gpuwattch/cacti/mat.h	/^    uint32_t num_subarrays_per_row;  \/\/ the number of subarrays in a row of a mat$/;"	m	class:Mat
num_threads	src/cuda-sim/ptx_sim.cc	/^unsigned ptx_cta_info::num_threads() const$/;"	f	class:ptx_cta_info
num_threads	src/gpuwattch/logic.h	/^	int num_threads;$/;"	m	class:selection_logic
num_tot_bits	src/gpgpu-sim/addrdec.h	/^   unsigned num_tot_bits;$/;"	m	class:linear_to_raw_address_translation
num_units	src/gpuwattch/basic_components.h	/^    int    num_channels, num_units;$/;"	m	class:PCIeParam
num_units	src/gpuwattch/basic_components.h	/^    int    num_units;$/;"	m	class:NIUParam
num_updates	common/cu_event_st.h	/^   unsigned num_updates() const { return m_updates; }$/;"	f	class:CUevent_st
num_valid_ctas	common/kernel_info_t.h	/^   unsigned long long num_valid_ctas(unsigned sid) const {$/;"	f	class:kernel_info_t
num_warps_issuable	src/gpgpu-sim/shader.h	/^    unsigned *num_warps_issuable;$/;"	m	struct:shader_core_stats_pod
num_wasted_insts	launcher/child_process.h	/^  unsigned long long num_wasted_insts;$/;"	m	class:ChildProcess
num_wr_ports	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int num_wr_ports;$/;"	m	class:InputParameter
num_wr_ports	src/gpuwattch/cacti/parameter.h	/^    unsigned int num_wr_ports;$/;"	m	class:DynamicParameter
num_write_requests	src/ramulator_sim/Memory.h	/^    VectorStat num_write_requests;$/;"	m	class:Memory
number_activated_mats_horizontal_direction	src/gpuwattch/cacti/cacti_interface.h	/^  int number_activated_mats_horizontal_direction;$/;"	m	struct:__anon5
number_addr_bits_mat	src/gpuwattch/cacti/parameter.h	/^    int number_addr_bits_mat;             \/\/ per port$/;"	m	class:DynamicParameter
number_cache_levels	src/gpuwattch/XML_Parse.h	/^	int number_cache_levels;$/;"	m	struct:__anon26
number_cache_levels	src/gpuwattch/arch_const.h	/^const int			number_cache_levels	=	3;$/;"	v
number_entries	src/gpuwattch/XML_Parse.h	/^	int number_entries;$/;"	m	struct:__anon10
number_entries	src/gpuwattch/XML_Parse.h	/^	int number_entries;$/;"	m	struct:__anon12
number_gates	src/gpuwattch/cacti/decoder.h	/^  int    number_gates;$/;"	m	class:Driver
number_gates_L1_nand2_path	src/gpuwattch/cacti/decoder.h	/^  int number_gates_L1_nand2_path;$/;"	m	class:PredecBlk
number_gates_L1_nand3_path	src/gpuwattch/cacti/decoder.h	/^  int number_gates_L1_nand3_path;$/;"	m	class:PredecBlk
number_gates_L2	src/gpuwattch/cacti/decoder.h	/^  int number_gates_L2;$/;"	m	class:PredecBlk
number_gates_nand2_path	src/gpuwattch/cacti/decoder.h	/^  int number_gates_nand2_path;$/;"	m	class:PredecBlkDrv
number_gates_nand3_path	src/gpuwattch/cacti/decoder.h	/^  int number_gates_nand3_path;$/;"	m	class:PredecBlkDrv
number_hardware_threads	src/gpuwattch/XML_Parse.h	/^	int number_hardware_threads;$/;"	m	struct:__anon15
number_input_addr_bits	src/gpuwattch/cacti/decoder.h	/^  int number_input_addr_bits;$/;"	m	class:PredecBlk
number_input_addr_bits	src/gpuwattch/cacti/decoder.h	/^  int number_input_addr_bits;$/;"	m	class:PredecBlkDrv
number_inputs_L1_gate	src/gpuwattch/cacti/decoder.h	/^  int number_inputs_L1_gate;$/;"	m	class:PredecBlk
number_instruction_fetch_ports	src/gpuwattch/XML_Parse.h	/^	int number_instruction_fetch_ports;$/;"	m	struct:__anon15
number_mcs	src/gpuwattch/XML_Parse.h	/^	int number_mcs;$/;"	m	struct:__anon23
number_of_BPT	src/gpuwattch/XML_Parse.h	/^	int number_of_BPT;$/;"	m	struct:__anon15
number_of_BTB	src/gpuwattch/XML_Parse.h	/^	int number_of_BTB;$/;"	m	struct:__anon15
number_of_L1Directories	src/gpuwattch/XML_Parse.h	/^	int number_of_L1Directories;$/;"	m	struct:__anon26
number_of_L2Directories	src/gpuwattch/XML_Parse.h	/^	int number_of_L2Directories;$/;"	m	struct:__anon26
number_of_L2s	src/gpuwattch/XML_Parse.h	/^	int number_of_L2s;$/;"	m	struct:__anon26
number_of_L2s	src/gpuwattch/arch_const.h	/^const int  			number_of_L2s 	=	1;$/;"	v
number_of_L3s	src/gpuwattch/XML_Parse.h	/^	int number_of_L3s;$/;"	m	struct:__anon26
number_of_L3s	src/gpuwattch/arch_const.h	/^const int 			number_of_L3s	=	1;$/;"	v
number_of_NoCs	src/gpuwattch/XML_Parse.h	/^	int number_of_NoCs;$/;"	m	struct:__anon26
number_of_NoCs	src/gpuwattch/arch_const.h	/^const int 			number_of_NoCs	=	1;$/;"	v
number_of_cores	src/gpuwattch/XML_Parse.h	/^	int number_of_cores;$/;"	m	struct:__anon26
number_of_cores	src/gpuwattch/arch_const.h	/^const int  			number_of_cores =	8;$/;"	v
number_of_crossbars	src/gpuwattch/XML_Parse.h	/^	int number_of_crossbars;$/;"	m	struct:__anon21
number_of_dir_levels	src/gpuwattch/XML_Parse.h	/^	int number_of_dir_levels;$/;"	m	struct:__anon26
number_of_inputs_of_crossbars	src/gpuwattch/XML_Parse.h	/^	int number_of_inputs_of_crossbars;$/;"	m	struct:__anon20
number_of_outputs_of_crossbars	src/gpuwattch/XML_Parse.h	/^	int number_of_outputs_of_crossbars;$/;"	m	struct:__anon20
number_ranks	src/gpuwattch/XML_Parse.h	/^	int number_ranks;$/;"	m	struct:__anon22
number_ranks	src/gpuwattch/XML_Parse.h	/^	int number_ranks;$/;"	m	struct:__anon23
number_subbanks	src/gpuwattch/cacti/cacti_interface.h	/^  int number_subbanks;$/;"	m	struct:__anon5
number_subbanks_decode	src/gpuwattch/cacti/parameter.h	/^    int number_subbanks_decode;           \/\/ per_port$/;"	m	class:DynamicParameter
number_units	src/gpuwattch/XML_Parse.h	/^	int number_units;$/;"	m	struct:__anon24
number_units	src/gpuwattch/XML_Parse.h	/^	int number_units;$/;"	m	struct:__anon25
number_way_select_signals_mat	src/gpuwattch/cacti/parameter.h	/^    int number_way_select_signals_mat;$/;"	m	class:DynamicParameter
o_len	src/gpuwattch/cacti/arbiter.h	/^    double o_len;$/;"	m	class:MCPAT_Arbiter
obj_func_cycle_t	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int obj_func_cycle_t;$/;"	m	class:InputParameter
obj_func_dyn_energy	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int obj_func_dyn_energy;$/;"	m	class:InputParameter
obj_func_dyn_power	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int obj_func_dyn_power;$/;"	m	class:InputParameter
obj_func_leak_power	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int obj_func_leak_power;$/;"	m	class:InputParameter
occupied	launcher/mk-sched/mk_scheduler.h	/^    std::vector<bool> occupied;$/;"	m	class:DynamicScheduler::SM_info
occupied	src/gpgpu-sim/shader.h	/^    std::bitset<MAX_ALU_LATENCY> occupied;$/;"	m	class:simd_function_unit
off_type	src/ramulator_sim/StatType.h	/^typedef unsigned int off_type;$/;"	t	namespace:Stats_Ram
offset	src/cuda-sim/ptx_sim.h	/^   size_t offset;$/;"	m	struct:param_t
on_off	src/intersim/injection.cpp	/^int on_off( int source, double rate )$/;"	f
op	src/abstract_hardware_model.h	/^    op_type op;             \/\/ opcode (uarch visible)$/;"	m	class:inst_t
op_iter_begin	src/cuda-sim/ptx_ir.h	/^   const_iterator op_iter_begin() const $/;"	f	class:ptx_instruction
op_iter_end	src/cuda-sim/ptx_ir.h	/^   const_iterator op_iter_end() const $/;"	f	class:ptx_instruction
op_pipe	src/abstract_hardware_model.h	/^    operation_pipeline op_pipe;  \/\/ code (uarch visible) identify the pipeline of the operation (SP, SFU or MEM)$/;"	m	class:inst_t
op_t	src/gpgpu-sim/shader.h	/^      op_t( collector_unit_t *cu, unsigned op, unsigned reg, unsigned num_banks, unsigned bank_warp_shift )$/;"	f	class:opndcoll_rfu_t::op_t
op_t	src/gpgpu-sim/shader.h	/^      op_t( const warp_inst_t *warp, unsigned reg, unsigned num_banks, unsigned bank_warp_shift )$/;"	f	class:opndcoll_rfu_t::op_t
op_t	src/gpgpu-sim/shader.h	/^      op_t() { m_valid = false; }$/;"	f	class:opndcoll_rfu_t::op_t
op_t	src/gpgpu-sim/shader.h	/^   class op_t {$/;"	c	class:opndcoll_rfu_t
op_type	src/abstract_hardware_model.h	/^typedef enum uarch_op_t op_type;$/;"	t	typeref:enum:uarch_op_t
opcodeW	src/gpuwattch/basic_components.h	/^    int    opcodeW;$/;"	m	class:MCParam
opcode_initiation_dp	src/cuda-sim/cuda-sim.cc	/^char *opcode_initiation_int, *opcode_initiation_fp, *opcode_initiation_dp;$/;"	v
opcode_initiation_fp	src/cuda-sim/cuda-sim.cc	/^char *opcode_initiation_int, *opcode_initiation_fp, *opcode_initiation_dp;$/;"	v
opcode_initiation_int	src/cuda-sim/cuda-sim.cc	/^char *opcode_initiation_int, *opcode_initiation_fp, *opcode_initiation_dp;$/;"	v
opcode_latency_dp	src/cuda-sim/cuda-sim.cc	/^char *opcode_latency_int, *opcode_latency_fp, *opcode_latency_dp;$/;"	v
opcode_latency_fp	src/cuda-sim/cuda-sim.cc	/^char *opcode_latency_int, *opcode_latency_fp, *opcode_latency_dp;$/;"	v
opcode_latency_int	src/cuda-sim/cuda-sim.cc	/^char *opcode_latency_int, *opcode_latency_fp, *opcode_latency_dp;$/;"	v
opcode_length	src/gpuwattch/arch_const.h	/^const int opcode_length			= 	8;\/\/16;\/\/Niagara$/;"	v
opcode_length	src/gpuwattch/arch_const.h	/^const int opcode_length			= 	8;\/\/Niagara$/;"	v
opcode_length	src/gpuwattch/basic_components.h	/^    int  perThreadState, globalCheckpoint, instruction_length, pc_width, opcode_length, micro_opcode_length;$/;"	m	class:CoreDynParam
opcode_length	src/gpuwattch/logic.h	/^	int  opcode_length;$/;"	m	class:inst_decoder
opcode_spec	src/cuda-sim/ptx.y	/^opcode_spec: OPCODE { add_opcode($1); } option_list$/;"	l
opcode_t	src/cuda-sim/opcodes.h	/^enum opcode_t {$/;"	g
opcode_width	src/gpuwattch/XML_Parse.h	/^	int opcode_width;$/;"	m	struct:__anon15
opcodes_h_included	src/cuda-sim/opcodes.h	29;"	d
openFileHelper	src/gpuwattch/xmlParser.cc	/^XMLNode XMLNode::openFileHelper(XMLCSTR filename, XMLCSTR tag)$/;"	f	class:XMLNode
openTagLen	src/gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR lpszOpen; int openTagLen; XMLCSTR lpszClose;} ALLXMLClearTag;$/;"	m	struct:__anon6	file:
open_dbgfile	common/kernel_info_t.cc	/^static void open_dbgfile()$/;"	f	file:
open_files	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::open_files()$/;"	f	class:gpgpu_sim_wrapper
operand	src/cuda-sim/ptx.y	/^operand: IDENTIFIER  { add_scalar_operand( $1 ); }$/;"	l
operand_info	src/cuda-sim/ptx_ir.h	/^   operand_info( const symbol *addr )$/;"	f	class:operand_info
operand_info	src/cuda-sim/ptx_ir.h	/^   operand_info( const symbol *addr, int offset )$/;"	f	class:operand_info
operand_info	src/cuda-sim/ptx_ir.h	/^   operand_info( const symbol *addr1, const symbol *addr2 )$/;"	f	class:operand_info
operand_info	src/cuda-sim/ptx_ir.h	/^   operand_info( const symbol *s1, const symbol *s2, const symbol *s3, const symbol *s4 )$/;"	f	class:operand_info
operand_info	src/cuda-sim/ptx_ir.h	/^   operand_info( double x )$/;"	f	class:operand_info
operand_info	src/cuda-sim/ptx_ir.h	/^   operand_info( float x )$/;"	f	class:operand_info
operand_info	src/cuda-sim/ptx_ir.h	/^   operand_info( int builtin_id, int dim_mod )$/;"	f	class:operand_info
operand_info	src/cuda-sim/ptx_ir.h	/^   operand_info( int x )$/;"	f	class:operand_info
operand_info	src/cuda-sim/ptx_ir.h	/^   operand_info( unsigned x )$/;"	f	class:operand_info
operand_info	src/cuda-sim/ptx_ir.h	/^   operand_info()$/;"	f	class:operand_info
operand_info	src/cuda-sim/ptx_ir.h	/^class operand_info {$/;"	c
operand_list	src/cuda-sim/ptx.y	/^operand_list: operand$/;"	l
operand_lookup	src/cuda-sim/ptx_ir.h	/^   const operand_info &operand_lookup( unsigned n ) const$/;"	f	class:ptx_instruction
operand_type	src/cuda-sim/ptx_ir.h	/^enum operand_type {$/;"	g
operation_pipeline	src/abstract_hardware_model.h	/^typedef enum operation_pipeline_t operation_pipeline;$/;"	t	typeref:enum:operation_pipeline_t
operation_pipeline_t	src/abstract_hardware_model.h	/^enum operation_pipeline_t {$/;"	g
operator !=	src/abstract_hardware_model.h	/^   bool operator!=( const memory_space_t &x ) const { return !(*this == x); }$/;"	f	class:memory_space_t
operator ()	common/kernel_info_t.h	/^  bool operator() (const timed_dim3& lhs, const timed_dim3& rhs) const$/;"	f	class:timed_dim3_comparison
operator ()	common/preempt_overhead.h	/^  bool operator() (const cta_preempt_overhead& lhs, const cta_preempt_overhead& rhs) const$/;"	f	class:cta_preempt_overhead_compare
operator ()	common/preempt_overhead.h	/^  bool operator() (const preempt_overhead_item& lhs, const preempt_overhead_item& rhs) const$/;"	f	class:preempt_throughput_overhead_comparison
operator ()	common/preempt_overhead.h	/^  bool operator() (const shader_preempt_overhead& lhs, const shader_preempt_overhead& rhs) const$/;"	f	class:shader_preempt_overhead_compare
operator ()	src/cuda-sim/ptx-stats.cc	/^    std::size_t operator()(const ptx_file_line & pfline) const {$/;"	f	struct:hash_ptx_file_line
operator ()	src/cuda-sim/ptx_ir.h	/^   bool operator()( const type_info_key &a, const type_info_key &b ) const$/;"	f	struct:type_info_key_compare
operator ()	src/gpgpu-sim/addrdec.cc	/^   size_t operator()(const addrdec_t &x) const {$/;"	f	class:hash_addrdec_t
operator ()	src/gpgpu-sim/gpu-cache.cc	/^unsigned &cache_stats::operator()(int access_type, int access_outcome){$/;"	f	class:cache_stats
operator ()	src/gpgpu-sim/gpu-cache.cc	/^unsigned cache_stats::operator()(int access_type, int access_outcome) const{$/;"	f	class:cache_stats
operator ()	src/intersim/interconnect_interface.cpp	/^   bool operator() (const void* lhs, const void* rhs) const$/;"	f	class:mycomparison
operator ()	src/intersim/trafficmanager.hpp	/^   bool operator()( const Flit *a, const Flit *b ) const {$/;"	f	class:flitp_compare
operator ()	src/ramulator_sim/SpeedyController.h	/^        bool operator()(const Request& lhs, const Request& rhs) {$/;"	f	class:SpeedyController::compair_depart_clk
operator ()	src/ramulator_sim/StatType.h	/^  Result operator() (Result l, Result r) const {$/;"	f	class:Stats_Ram::Op
operator ()	src/ramulator_sim/StatType.h	/^  Result operator() (Result r) const {$/;"	f	class:Stats_Ram::Op
operator *	src/gpuwattch/basic_components.cc	/^statsComponents operator*(const statsComponents & x, double const * const y)$/;"	f
operator *	src/gpuwattch/basic_components.cc	/^statsDef operator*(const statsDef & x, double const * const y)$/;"	f
operator *	src/gpuwattch/cacti/io.cc	/^powerComponents operator*(const powerComponents & x, double const * const y)$/;"	f
operator *	src/gpuwattch/cacti/io.cc	/^powerDef operator*(const powerDef & x, double const * const y)$/;"	f
operator +	src/gpgpu-sim/gpu-cache.cc	/^cache_stats cache_stats::operator+(const cache_stats &cs){$/;"	f	class:cache_stats
operator +	src/gpgpu-sim/gpu-cache.h	/^    cache_sub_stats operator+(const cache_sub_stats &cs){$/;"	f	struct:cache_sub_stats
operator +	src/gpuwattch/basic_components.cc	/^statsComponents operator+(const statsComponents & x, const statsComponents & y)$/;"	f
operator +	src/gpuwattch/basic_components.cc	/^statsDef operator+(const statsDef & x, const statsDef & y)$/;"	f
operator +	src/gpuwattch/cacti/io.cc	/^powerComponents operator+(const powerComponents & x, const powerComponents & y)$/;"	f
operator +	src/gpuwattch/cacti/io.cc	/^powerDef operator+(const powerDef & x, const powerDef & y)$/;"	f
operator ++	launcher/stats/stats.h	/^  void operator++()     { storage.inc(1); }$/;"	f	class:Stats::ScalarBase
operator ++	launcher/stats/stats.h	/^  void operator++(int)  { ++*this;        }$/;"	f	class:Stats::ScalarBase
operator ++	src/ramulator_sim/StatType.h	/^  void operator ++ () { ++_value; }$/;"	f	class:Stats_Ram::ConstValue
operator ++	src/ramulator_sim/StatType.h	/^  void operator ++ () { ++_value; }$/;"	f	class:Stats_Ram::Scalar
operator ++	src/ramulator_sim/StatType.h	/^  void operator ++ () { inc(1); }$/;"	f	class:Stats_Ram::Average
operator ++	src/ramulator_sim/StatType.h	/^  void operator ++ (int) { _value++; }$/;"	f	class:Stats_Ram::ConstValue
operator ++	src/ramulator_sim/StatType.h	/^  void operator ++ (int) { _value++; }$/;"	f	class:Stats_Ram::Scalar
operator ++	src/ramulator_sim/StatType.h	/^  void operator ++ (int) { inc(1); }$/;"	f	class:Stats_Ram::Average
operator ++	src/ramulator_sim/Statistics.h	/^  void operator++() { ++StatBase<StatType>::stat; }$/;"	f	class:ScalarStatBase
operator ++	src/ramulator_sim/Statistics.h	/^  void operator++(int) { StatBase<StatType>::stat++; }$/;"	f	class:ScalarStatBase
operator +=	launcher/stats/stats.h	/^  void operator+=(uint64_t rhs) { storage.inc(rhs); }$/;"	f	class:Stats::ScalarBase
operator +=	src/gpgpu-sim/gpu-cache.cc	/^cache_stats &cache_stats::operator+=(const cache_stats &cs){$/;"	f	class:cache_stats
operator +=	src/gpgpu-sim/gpu-cache.h	/^    cache_sub_stats &operator+=(const cache_sub_stats &css){$/;"	f	struct:cache_sub_stats
operator +=	src/gpgpu-sim/stat-tool.cc	/^thread_insn_span& thread_insn_span::operator+=(const thread_insn_span& other)$/;"	f	class:thread_insn_span
operator +=	src/ramulator_sim/StatType.h	/^  void operator += (const U &v) { _value += v;}$/;"	f	class:Stats_Ram::ConstValue
operator +=	src/ramulator_sim/StatType.h	/^  void operator += (const U &v) { _value += v;}$/;"	f	class:Stats_Ram::Scalar
operator +=	src/ramulator_sim/StatType.h	/^  void operator += (const U &v) { inc(v);}$/;"	f	class:Stats_Ram::Average
operator +=	src/ramulator_sim/Statistics.h	/^  void operator+=(const U &v) { StatBase<StatType>::stat += v; }$/;"	f	class:ScalarStatBase
operator --	launcher/stats/stats.h	/^  void operator--()     { storage.dec(1); }$/;"	f	class:Stats::ScalarBase
operator --	launcher/stats/stats.h	/^  void operator--(int)  { --*this;        }$/;"	f	class:Stats::ScalarBase
operator --	src/ramulator_sim/StatType.h	/^  void operator -- () { --_value; }$/;"	f	class:Stats_Ram::ConstValue
operator --	src/ramulator_sim/StatType.h	/^  void operator -- () { --_value; }$/;"	f	class:Stats_Ram::Scalar
operator --	src/ramulator_sim/StatType.h	/^  void operator -- () { dec(1); }$/;"	f	class:Stats_Ram::Average
operator --	src/ramulator_sim/StatType.h	/^  void operator -- (int) { _value--; }$/;"	f	class:Stats_Ram::ConstValue
operator --	src/ramulator_sim/StatType.h	/^  void operator -- (int) { _value--; }$/;"	f	class:Stats_Ram::Scalar
operator --	src/ramulator_sim/StatType.h	/^  void operator -- (int) { dec(1); }$/;"	f	class:Stats_Ram::Average
operator --	src/ramulator_sim/Statistics.h	/^  void operator--() { --StatBase<StatType>::stat; }$/;"	f	class:ScalarStatBase
operator --	src/ramulator_sim/Statistics.h	/^  void operator--(int) { StatBase<StatType>::stat--; }$/;"	f	class:ScalarStatBase
operator -=	launcher/stats/stats.h	/^  void operator-=(uint64_t rhs) { storage.dec(rhs); }$/;"	f	class:Stats::ScalarBase
operator -=	src/ramulator_sim/StatType.h	/^  void operator -= (const U &v) { _value -= v;}$/;"	f	class:Stats_Ram::ConstValue
operator -=	src/ramulator_sim/StatType.h	/^  void operator -= (const U &v) { _value -= v;}$/;"	f	class:Stats_Ram::Scalar
operator -=	src/ramulator_sim/StatType.h	/^  void operator -= (const U &v) { dec(v);}$/;"	f	class:Stats_Ram::Average
operator -=	src/ramulator_sim/Statistics.h	/^  void operator-=(const U &v) { StatBase<StatType>::stat -= v; }$/;"	f	class:ScalarStatBase
operator <	src/abstract_hardware_model.h	/^   bool operator<( const memory_space_t &x ) const $/;"	f	class:memory_space_t
operator <	src/cuda-sim/ptx-stats.cc	/^    bool operator<(const ptx_file_line &other) const {$/;"	f	class:ptx_file_line
operator <	src/gpgpu-sim/addrdec.cc	/^bool operator<(const addrdec_t &x, const addrdec_t &y) $/;"	f
operator <	src/intersim2/outputset.hpp	/^inline bool operator<(const OutputSet::sSetElement & se1, $/;"	f
operator <<	src/intersim/flit.cpp	/^ostream& operator<<( ostream& os, const Flit& f )$/;"	f
operator <<	src/intersim2/flit.cpp	/^ostream& operator<<( ostream& os, const Flit& f )$/;"	f
operator <<	src/intersim2/power/buffer_monitor.cpp	/^ostream & operator<<( ostream & os, BufferMonitor const & obj ) {$/;"	f
operator <<	src/intersim2/power/switch_monitor.cpp	/^ostream & operator<<( ostream & os, SwitchMonitor const & obj ) {$/;"	f
operator <<	src/intersim2/stats.cpp	/^ostream & operator<<(ostream & os, const Stats & s) {$/;"	f
operator <<	src/intersim2/trafficmanager.hpp	/^ostream & operator<<(ostream & os, const vector<T> & v) {$/;"	f
operator =	launcher/stats/stats.h	/^  void operator=(uint64_t rhs)  { storage.set(rhs); }$/;"	f	class:Stats::ScalarBase
operator =	src/cuda-sim/ptx_ir.h	/^   void operator=( const arg_buffer_t &another )$/;"	f	class:arg_buffer_t
operator =	src/gpgpu-sim/stat-tool.cc	/^thread_insn_span& thread_insn_span::operator=(const thread_insn_span& other)$/;"	f	class:thread_insn_span
operator =	src/gpgpu-sim/stat-tool.h	/^   insn_warp_occ_logger& operator=(const insn_warp_occ_logger& p) {$/;"	f	class:insn_warp_occ_logger
operator =	src/gpuwattch/basic_components.h	/^    statsComponents & operator=(const statsComponents & rhs)$/;"	f	class:statsComponents
operator =	src/gpuwattch/cacti/cacti_interface.h	/^    powerComponents & operator=(const powerComponents & rhs)$/;"	f	class:powerComponents
operator =	src/gpuwattch/xmlParser.cc	/^XMLNode& XMLNode::operator=( const XMLNode& A )$/;"	f	class:XMLNode
operator =	src/ramulator_sim/StatType.h	/^  void operator = (const U &v) { _value = v; }$/;"	f	class:Stats_Ram::ConstValue
operator =	src/ramulator_sim/StatType.h	/^  void operator = (const U &v) { _value = v; }$/;"	f	class:Stats_Ram::Scalar
operator =	src/ramulator_sim/StatType.h	/^  void operator = (const U &v) { set(v); }$/;"	f	class:Stats_Ram::Average
operator =	src/ramulator_sim/StatType.h	/^  void operator=(uint16_t _flags) {flags = _flags;}$/;"	f	class:Stats_Ram::Flags
operator =	src/ramulator_sim/Statistics.h	/^  void operator=(const U &v) { StatBase<StatType>::stat = v; }$/;"	f	class:ScalarStatBase
operator ==	src/abstract_hardware_model.h	/^   bool operator==( const memory_space_t &x ) const { return (m_bank == x.m_bank) && (m_type == x.m_type); }$/;"	f	class:memory_space_t
operator ==	src/cuda-sim/ptx-stats.cc	/^    bool operator==(const ptx_file_line &other) const {$/;"	f	class:ptx_file_line
operator ==	src/gpgpu-sim/addrdec.cc	/^bool operator==(const addrdec_t &x, const addrdec_t &y) $/;"	f
operator T	src/option_parser.cc	/^   operator T()$/;"	f	class:OptionRegistry
operator []	src/ramulator_sim/Config.h	/^  std::string operator [] (const std::string& name) const {$/;"	f	class:Config
operator []	src/ramulator_sim/StatType.h	/^  Element &operator[](off_type index) {$/;"	f	class:Stats_Ram::VectorBase
operator []	src/ramulator_sim/Statistics.h	/^  Element &operator[](Stats_Ram::off_type index) { return StatBase<StatType>::stat[index]; }$/;"	f	class:VectorStatBase
operator []	src/ramulator_sim/Statistics.h	/^  Stats_Ram::ScalarProxy<StatType> operator[](Stats_Ram::off_type index) { return StatBase<StatType>::stat[index]; }$/;"	f	class:VectorStatBase
operator unsigned char	src/cuda-sim/ptx_sim.h	/^   operator unsigned char() { return u8;}$/;"	f	union:ptx_reg_t
operator unsigned int	src/cuda-sim/ptx_sim.h	/^   operator unsigned int() { return u32;}$/;"	f	union:ptx_reg_t
operator unsigned long long	src/cuda-sim/ptx_sim.h	/^   operator unsigned long long() { return u64;}$/;"	f	union:ptx_reg_t
operator unsigned short	src/cuda-sim/ptx_sim.h	/^   operator unsigned short() { return u16;}$/;"	f	union:ptx_reg_t
opndcoll_rfu_t	src/gpgpu-sim/shader.h	/^   opndcoll_rfu_t()$/;"	f	class:opndcoll_rfu_t
opndcoll_rfu_t	src/gpgpu-sim/shader.h	/^class opndcoll_rfu_t { \/\/ operand collector based register file unit$/;"	c
oprnd_type	src/abstract_hardware_model.h	/^    types_of_operands oprnd_type;     \/\/ code (uarch visible) identify if the operation is an interger or a floating point$/;"	m	class:inst_t
opstring	src/ramulator_sim/StatType.h	/^  std::string opstring;$/;"	m	class:Stats_Ram::Op
opt_area	src/gpuwattch/XML_Parse.h	/^	bool opt_area;$/;"	m	struct:__anon26
opt_area	src/gpuwattch/arch_const.h	/^const int		 	opt_area			=	0;$/;"	v
opt_clockrate	src/gpuwattch/XML_Parse.h	/^	bool opt_clockrate;$/;"	m	struct:__anon26
opt_dynamic_power	src/gpuwattch/XML_Parse.h	/^	bool opt_dynamic_power;$/;"	m	struct:__anon26
opt_dynamic_power	src/gpuwattch/arch_const.h	/^const int 			opt_dynamic_power	=	1;$/;"	v
opt_for_clk	src/gpuwattch/globalvar.h	/^EXTERN bool opt_for_clk;$/;"	v
opt_lakage_power	src/gpuwattch/XML_Parse.h	/^	bool opt_lakage_power;$/;"	m	struct:__anon26
opt_lakage_power	src/gpuwattch/arch_const.h	/^const int 			opt_lakage_power	=	0;$/;"	v
opt_local	src/gpuwattch/XML_Parse.h	/^	bool opt_local;$/;"	m	struct:__anon15
opt_local	src/gpuwattch/array.h	/^  bool opt_local;$/;"	m	class:ArrayST
opt_local	src/gpuwattch/basic_components.h	/^	bool opt_local;$/;"	m	class:CoreDynParam
opt_local	src/gpuwattch/interconnect.h	/^    bool opt_local;$/;"	m	class:interconnect
opt_performance	src/gpuwattch/logic.h	/^	bool   opt_performance, embedded;$/;"	m	class:UndiffCore
optimize_array	src/gpuwattch/array.cc	/^void ArrayST::optimize_array()$/;"	f	class:ArrayST
option	src/cuda-sim/ptx.y	/^option: type_spec$/;"	l
option_dtype	src/option_parser.h	/^enum option_dtype {$/;"	g
option_list	src/cuda-sim/ptx.y	/^option_list: option$/;"	l
option_parser_cfgfile	src/option_parser.cc	/^void option_parser_cfgfile(option_parser_t opp,$/;"	f
option_parser_cmdline	src/option_parser.cc	/^void option_parser_cmdline(option_parser_t opp,$/;"	f
option_parser_create	src/option_parser.cc	/^option_parser_t option_parser_create() $/;"	f
option_parser_delimited_string	src/option_parser.cc	/^void option_parser_delimited_string(option_parser_t opp,$/;"	f
option_parser_destroy	src/option_parser.cc	/^void option_parser_destroy(option_parser_t opp)$/;"	f
option_parser_print	src/option_parser.cc	/^void option_parser_print(option_parser_t opp, $/;"	f
option_parser_register	src/option_parser.cc	/^void option_parser_register(option_parser_t opp, $/;"	f
option_parser_t	src/option_parser.h	/^typedef class OptionParser *option_parser_t;$/;"	t	typeref:class:OptionParser
options	src/ramulator_sim/Config.h	/^  std::map<std::string, std::string> options;$/;"	m	class:Config
or_impl	src/cuda-sim/instructions.cc	/^void or_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
order_by_priority	src/gpgpu-sim/shader.cc	/^void scheduler_unit::order_by_priority( std::vector< T >& result_list,$/;"	f	class:scheduler_unit
order_lrr	src/gpgpu-sim/shader.cc	/^void scheduler_unit::order_lrr( std::vector< T >& result_list,$/;"	f	class:scheduler_unit
order_warps	src/gpgpu-sim/shader.cc	/^void gto_scheduler::order_warps()$/;"	f	class:gto_scheduler
order_warps	src/gpgpu-sim/shader.cc	/^void lrr_scheduler::order_warps()$/;"	f	class:lrr_scheduler
order_warps	src/gpgpu-sim/shader.cc	/^void swl_scheduler::order_warps()$/;"	f	class:swl_scheduler
order_warps	src/gpgpu-sim/shader.cc	/^void two_level_active_scheduler::order_warps()$/;"	f	class:two_level_active_scheduler
org_entry	src/ramulator_sim/ALDRAM.h	/^    }, org_entry;$/;"	m	class:ALDRAM	typeref:struct:ALDRAM::OrgEntry
org_entry	src/ramulator_sim/DDR3.h	/^    }, org_entry;$/;"	m	class:DDR3	typeref:struct:DDR3::OrgEntry
org_entry	src/ramulator_sim/DDR4.h	/^    }, org_entry;$/;"	m	class:DDR4	typeref:struct:DDR4::OrgEntry
org_entry	src/ramulator_sim/DSARP.h	/^    }, org_entry;$/;"	m	class:DSARP	typeref:struct:DSARP::OrgEntry
org_entry	src/ramulator_sim/GDDR5.h	/^    }, org_entry;$/;"	m	class:GDDR5	typeref:struct:GDDR5::OrgEntry
org_entry	src/ramulator_sim/HBM.h	/^    }, org_entry;$/;"	m	class:HBM	typeref:struct:HBM::OrgEntry
org_entry	src/ramulator_sim/LPDDR3.h	/^    }, org_entry;$/;"	m	class:LPDDR3	typeref:struct:LPDDR3::OrgEntry
org_entry	src/ramulator_sim/LPDDR4.h	/^    }, org_entry;$/;"	m	class:LPDDR4	typeref:struct:LPDDR4::OrgEntry
org_entry	src/ramulator_sim/SALP.h	/^    }, org_entry;$/;"	m	class:SALP	typeref:struct:SALP::OrgEntry
org_entry	src/ramulator_sim/TLDRAM.h	/^    }, org_entry;$/;"	m	class:TLDRAM	typeref:struct:TLDRAM::OrgEntry
org_entry	src/ramulator_sim/WideIO.h	/^    }, org_entry;$/;"	m	class:WideIO	typeref:struct:WideIO::OrgEntry
org_entry	src/ramulator_sim/WideIO2.h	/^    } org_entry;$/;"	m	class:WideIO2	typeref:struct:WideIO2::OrgEntry
org_map	src/ramulator_sim/ALDRAM.cpp	/^map<string, enum ALDRAM::Org> ALDRAM::org_map = {$/;"	m	class:ALDRAM	file:
org_map	src/ramulator_sim/ALDRAM.h	/^    static map<string, enum Org> org_map;$/;"	m	class:ALDRAM
org_map	src/ramulator_sim/DDR3.cpp	/^map<string, enum DDR3::Org> DDR3::org_map = {$/;"	m	class:DDR3	file:
org_map	src/ramulator_sim/DDR3.h	/^    static map<string, enum Org> org_map;$/;"	m	class:DDR3
org_map	src/ramulator_sim/DDR4.cpp	/^map<string, enum DDR4::Org> DDR4::org_map = {$/;"	m	class:DDR4	file:
org_map	src/ramulator_sim/DDR4.h	/^    static map<string, enum Org> org_map;$/;"	m	class:DDR4
org_map	src/ramulator_sim/DSARP.cpp	/^map<string, enum DSARP::Org> DSARP::org_map = {$/;"	m	class:DSARP	file:
org_map	src/ramulator_sim/DSARP.h	/^    static map<string, enum Org> org_map;$/;"	m	class:DSARP
org_map	src/ramulator_sim/GDDR5.cpp	/^map<string, enum GDDR5::Org> GDDR5::org_map = {$/;"	m	class:GDDR5	file:
org_map	src/ramulator_sim/GDDR5.h	/^    static map<string, enum Org> org_map;$/;"	m	class:GDDR5
org_map	src/ramulator_sim/HBM.cpp	/^map<string, enum HBM::Org> HBM::org_map = {$/;"	m	class:HBM	file:
org_map	src/ramulator_sim/HBM.h	/^    static map<string, enum Org> org_map;$/;"	m	class:HBM
org_map	src/ramulator_sim/LPDDR3.cpp	/^map<string, enum LPDDR3::Org> LPDDR3::org_map = {$/;"	m	class:LPDDR3	file:
org_map	src/ramulator_sim/LPDDR3.h	/^    static map<string, enum Org> org_map;$/;"	m	class:LPDDR3
org_map	src/ramulator_sim/LPDDR4.cpp	/^map<string, enum LPDDR4::Org> LPDDR4::org_map = {$/;"	m	class:LPDDR4	file:
org_map	src/ramulator_sim/LPDDR4.h	/^    static map<string, enum Org> org_map;$/;"	m	class:LPDDR4
org_map	src/ramulator_sim/SALP.cpp	/^map<string, enum SALP::Org> SALP::org_map = {$/;"	m	class:SALP	file:
org_map	src/ramulator_sim/SALP.h	/^    static map<string, enum Org> org_map;$/;"	m	class:SALP
org_map	src/ramulator_sim/TLDRAM.cpp	/^map<string, enum TLDRAM::Org> TLDRAM::org_map = {$/;"	m	class:TLDRAM	file:
org_map	src/ramulator_sim/TLDRAM.h	/^    static map<string, enum Org> org_map;$/;"	m	class:TLDRAM
org_map	src/ramulator_sim/WideIO.cpp	/^map<string, enum WideIO::Org> WideIO::org_map = {$/;"	m	class:WideIO	file:
org_map	src/ramulator_sim/WideIO.h	/^    static map<string, enum Org> org_map;$/;"	m	class:WideIO
org_map	src/ramulator_sim/WideIO2.cpp	/^map<string, enum WideIO2::Org> WideIO2::org_map = {$/;"	m	class:WideIO2	file:
org_map	src/ramulator_sim/WideIO2.h	/^    static map<string, enum Org> org_map;$/;"	m	class:WideIO2
org_table	src/ramulator_sim/ALDRAM.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:ALDRAM	typeref:struct:ALDRAM::OrgEntry
org_table	src/ramulator_sim/DDR3.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:DDR3	typeref:struct:DDR3::OrgEntry
org_table	src/ramulator_sim/DDR4.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:DDR4	typeref:struct:DDR4::OrgEntry
org_table	src/ramulator_sim/DSARP.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:DSARP	typeref:struct:DSARP::OrgEntry
org_table	src/ramulator_sim/GDDR5.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:GDDR5	typeref:struct:GDDR5::OrgEntry
org_table	src/ramulator_sim/HBM.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:HBM	typeref:struct:HBM::OrgEntry
org_table	src/ramulator_sim/LPDDR3.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:LPDDR3	typeref:struct:LPDDR3::OrgEntry
org_table	src/ramulator_sim/LPDDR4.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:LPDDR4	typeref:struct:LPDDR4::OrgEntry
org_table	src/ramulator_sim/SALP.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:SALP	typeref:struct:SALP::OrgEntry
org_table	src/ramulator_sim/TLDRAM.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:TLDRAM	typeref:struct:TLDRAM::OrgEntry
org_table	src/ramulator_sim/WideIO.h	/^    } org_table[int(Org::MAX)] = {$/;"	m	class:WideIO	typeref:struct:WideIO::OrgEntry
orn_impl	src/cuda-sim/instructions.cc	/^void orn_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
other	src/intersim2/vc.hpp	/^  enum ePrioType { local_age_based, queue_length_based, hop_count_based, none, other };$/;"	e	enum:VC::ePrioType
otherq	src/ramulator_sim/Controller.h	/^    Queue otherq;  \/\/ queue for all "other" requests (e.g., refresh)$/;"	m	class:Controller
otherq	src/ramulator_sim/SpeedyController.h	/^    request_queue otherq;  \/\/ queue for all "other" requests (e.g., refresh)$/;"	m	class:SpeedyController
out	src/abstract_hardware_model.h	/^    unsigned out[4];$/;"	m	class:inst_t
out_buf_fixedlat_buf	src/intersim/interconnect_interface.cpp	/^priority_queue<void * , vector<void* >, mycomparison> * out_buf_fixedlat_buf; $/;"	v
out_cb	src/gpuwattch/cacti/highradix.h	/^    Crossbar *cb, *out_cb;$/;"	m	class:HighRadix
out_htree	src/gpuwattch/cacti/htree2.cc	/^void Htree2::out_htree()$/;"	f	class:Htree2
out_pri	src/intersim/allocator.hpp	/^      int out_pri;$/;"	m	struct:Allocator::sRequest
out_pri	src/intersim2/allocators/allocator.hpp	/^    int out_pri;$/;"	m	struct:Allocator::sRequest
out_rise_time	src/gpuwattch/cacti/htree2.h	/^    double in_rise_time, out_rise_time;$/;"	m	class:Htree2
out_rise_time	src/gpuwattch/cacti/wire.h	/^    double in_rise_time, out_rise_time;$/;"	m	class:Wire
out_rise_time	src/gpuwattch/interconnect.h	/^    double in_rise_time, out_rise_time;$/;"	m	class:interconnect
out_w	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int out_w;\/\/ == nr_bits_out$/;"	m	class:InputParameter
out_w	src/gpuwattch/cacti/parameter.h	/^    unsigned int out_w;\/\/ == nr_bits_out$/;"	m	class:DynamicParameter
output	src/intersim/event_router.hpp	/^      int  output;$/;"	m	struct:EventRouter::tArrivalEvent
output	src/intersim2/routers/event_router.hpp	/^    int  output;$/;"	m	struct:EventRouter::tArrivalEvent
output	src/ramulator_sim/StatType.h	/^  void output(std::string filename) {$/;"	f	class:Stats_Ram::StatList
outputArea	src/intersim2/power/power_module.hpp	/^  double outputArea;$/;"	m	class:Power_Module
outputCtrlPower	src/intersim2/power/power_module.hpp	/^  double outputCtrlPower;$/;"	m	class:Power_Module
outputPower	src/intersim2/power/power_module.hpp	/^  double outputPower;$/;"	m	class:Power_Module
outputPowerClk	src/intersim2/power/power_module.hpp	/^  double outputPowerClk;$/;"	m	class:Power_Module
output_UCA	src/gpuwattch/cacti/io.cc	/^void output_UCA(uca_org_t *fr)$/;"	f
output_buffer	src/gpuwattch/cacti/crossbar.cc	/^double Crossbar::output_buffer()$/;"	f	class:Crossbar
output_buffer	src/gpuwattch/cacti/htree2.cc	/^void Htree2::output_buffer(double s1, double s2, double l_eff)$/;"	f	class:Htree2
output_data_csv	src/gpuwattch/cacti/io.cc	/^void output_data_csv(const uca_org_t & fin_res)$/;"	f
output_file_name	src/intersim2/power/power_module.hpp	/^  string output_file_name;$/;"	m	class:Power_Module
output_port	src/intersim2/outputset.hpp	/^    int output_port;$/;"	m	struct:OutputSet::sSetElement
output_ports	src/gpuwattch/XML_Parse.h	/^	int output_ports;$/;"	m	struct:__anon21
output_ports	src/gpuwattch/basic_components.h	/^    int    input_ports, output_ports, min_ports, global_linked_ports;$/;"	m	class:NoCParam
output_width_of_DRAM_chip	src/gpuwattch/XML_Parse.h	/^	int output_width_of_DRAM_chip;$/;"	m	struct:__anon22
outside_mat	src/gpuwattch/cacti/basic_circuit.h	/^    outside_mat,$/;"	e	enum:Wire_placement
overal_ld_count	src/gpgpu-sim/visualizer.cc	/^   int overal_ld_count;$/;"	m	class:my_time_vector	file:
overal_ld_time_dist	src/gpgpu-sim/visualizer.cc	/^   std::vector<double>  overal_ld_time_dist;$/;"	m	class:my_time_vector	file:
overal_st_count	src/gpgpu-sim/visualizer.cc	/^   int overal_st_count;$/;"	m	class:my_time_vector	file:
overal_st_time_dist	src/gpgpu-sim/visualizer.cc	/^   std::vector<double>  overal_st_time_dist;$/;"	m	class:my_time_vector	file:
overall_v2_random_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool overall_v2_random_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
overall_v2_rdm_init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::overall_v2_rdm_init()$/;"	f	class:linear_to_raw_address_translation
overall_v2_rdm_mtx_23	src/gpgpu-sim/addrdec.cc	/^unsigned overall_v2_rdm_mtx_23[][23] = {$/;"	v
overall_v3_random_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool overall_v3_random_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
overall_v3_rdm_init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::overall_v3_rdm_init()$/;"	f	class:linear_to_raw_address_translation
overall_v3_rdm_mtx_23	src/gpgpu-sim/addrdec.cc	/^unsigned overall_v3_rdm_mtx_23[][23] = {$/;"	v
overflow	src/ramulator_sim/StatType.h	/^  Counter overflow;$/;"	m	class:Stats_Ram::Distribution
overwrites_input	common/kernel_info_t.h	/^   bool overwrites_input() const { return m_overwrites_input; }$/;"	f	class:kernel_info_t
p	src/gpuwattch/gpgpu_sim_wrapper.h	/^	ParseXML * p;$/;"	m	class:gpgpu_sim_wrapper
pAttribute	src/gpuwattch/xmlParser.h	/^          XMLAttribute           *pAttribute;     \/\/ Array of attributes$/;"	m	struct:XMLNode::XMLNodeDataTag
pChild	src/gpuwattch/xmlParser.h	/^          XMLNode                *pChild;         \/\/ Array of child nodes$/;"	m	struct:XMLNode::XMLNodeDataTag
pClear	src/gpuwattch/xmlParser.h	/^          XMLClear               *pClear;         \/\/ Array of clear fields$/;"	m	struct:XMLNode::XMLNodeDataTag
pClr	src/gpuwattch/xmlParser.cc	/^    ALLXMLClearTag *pClr;$/;"	m	struct:__anon8	file:
pOrder	src/gpuwattch/xmlParser.h	/^          int                    *pOrder;         \/\/ order of the child_nodes,text_fields,clear_fields$/;"	m	struct:XMLNode::XMLNodeDataTag
pParent	src/gpuwattch/xmlParser.h	/^          struct XMLNodeDataTag  *pParent;        \/\/ Pointer to parent element (=NULL if root)$/;"	m	struct:XMLNode::XMLNodeDataTag	typeref:struct:XMLNode::XMLNodeDataTag::XMLNodeDataTag
pStr	src/gpuwattch/xmlParser.cc	/^    XMLCSTR     pStr;$/;"	m	struct:__anon8	file:
pText	src/gpuwattch/xmlParser.h	/^          XMLCSTR                *pText;          \/\/ Array of text fields$/;"	m	struct:XMLNode::XMLNodeDataTag
p_address_width	src/gpuwattch/basic_components.h	/^    int  int_data_width, fp_data_width,v_address_width, p_address_width;$/;"	m	class:CoreDynParam
packet_n	src/intersim/interconnect_interface.cpp	/^   int packet_n;$/;"	m	class:boundary_buf	file:
pad_address	src/cuda-sim/ptx_parser.cc	/^int pad_address (new_addr_type address, unsigned size, unsigned maxalign) {$/;"	f
page_allocator	src/ramulator_sim/Memory.h	/^    long page_allocator(long addr, int coreid) {$/;"	f	class:Memory
page_size_in_bits	src/gpuwattch/cacti/cacti_interface.h	/^  int page_size_in_bits;$/;"	m	struct:__anon5
page_size_of_DRAM_chip	src/gpuwattch/XML_Parse.h	/^	int page_size_of_DRAM_chip;$/;"	m	struct:__anon22
page_sz_bits	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int page_sz_bits;$/;"	m	class:InputParameter
page_translation	src/ramulator_sim/Memory.h	/^    map<pair<int, long>, long> page_translation;$/;"	m	class:Memory
parallel	src/gpuwattch/cacti/basic_circuit.h	/^    parallel,$/;"	e	enum:Half_net_topology
parallel_mask	src/gpgpu-sim/addrdec.h	/^   new_addr_type parallel_mask;$/;"	m	class:linear_to_raw_address_translation
param_bucket_size	src/ramulator_sim/StatType.h	/^  Counter param_bucket_size;$/;"	m	class:Stats_Ram::Distribution
param_buckets	src/ramulator_sim/StatType.h	/^  Counter param_buckets;$/;"	m	class:Stats_Ram::Distribution
param_buckets	src/ramulator_sim/StatType.h	/^  size_type param_buckets;$/;"	m	class:Stats_Ram::Histogram
param_entry	src/cuda-sim/ptx.y	/^param_entry: PARAM_DIRECTIVE { add_space_spec(param_space_unclassified,0); } variable_spec ptr_spec identifier_spec { add_function_arg(); }$/;"	l
param_info	src/cuda-sim/ptx_ir.h	/^   param_info( std::string name, int type, size_t size, bool is_ptr, memory_space_t ptr_space ) $/;"	f	class:param_info
param_info	src/cuda-sim/ptx_ir.h	/^   param_info() { m_valid = false; m_value_set=false; m_size = 0; m_is_ptr = false; }$/;"	f	class:param_info
param_info	src/cuda-sim/ptx_ir.h	/^class param_info {$/;"	c
param_list	src/cuda-sim/ptx.y	/^param_list: \/*empty*\/$/;"	l
param_max	src/ramulator_sim/StatType.h	/^  Counter param_max;$/;"	m	class:Stats_Ram::Distribution
param_min	src/ramulator_sim/StatType.h	/^  Counter param_min;$/;"	m	class:Stats_Ram::Distribution
param_space_kernel	src/abstract_hardware_model.h	/^   param_space_kernel,  \/* global to all threads in a kernel : read-only *\/$/;"	e	enum:_memory_space_t
param_space_local	src/abstract_hardware_model.h	/^   param_space_local,   \/* local to a thread : read-writable *\/$/;"	e	enum:_memory_space_t
param_space_unclassified	src/abstract_hardware_model.h	/^   param_space_unclassified,$/;"	e	enum:_memory_space_t
param_t	src/cuda-sim/ptx_sim.h	/^struct param_t {$/;"	s
param_to_shared	src/cuda-sim/cuda-sim.cc	/^void function_info::param_to_shared( memory_space *shared_mem, symbol_table *symtab ) $/;"	f	class:function_info
parent	launcher/communicate.h	/^  bool parent;$/;"	m	class:Communicate
parent	src/ramulator_sim/DRAM.h	/^    DRAM* parent;$/;"	m	class:DRAM
parse	src/gpuwattch/XML_Parse.cc	/^void ParseXML::parse(char* filepath)$/;"	f	class:ParseXML
parse	src/ramulator_sim/Config.cpp	/^void Config::parse(const string& fname)$/;"	f	class:Config
parseClearTag	src/gpuwattch/xmlParser.cc	/^char XMLNode::parseClearTag(void *px, void *_pClear)$/;"	f	class:XMLNode
parseFile	src/gpuwattch/xmlParser.cc	/^XMLNode XMLNode::parseFile(XMLCSTR filename, XMLCSTR tag, XMLResults *pResults)$/;"	f	class:XMLNode
parseString	src/gpuwattch/xmlParser.cc	/^XMLNode XMLNode::parseString(XMLCSTR lpszXML, XMLCSTR tag, XMLResults *pResults)$/;"	f	class:XMLNode
parse_args	launcher/launcher_option_parser.cc	/^LauncherOptionParser::parse_args(int argc, char *argv[]) {$/;"	f	class:LauncherOptionParser
parse_assert	src/cuda-sim/ptx_parser.cc	214;"	d	file:
parse_assert_impl	src/cuda-sim/ptx_parser.cc	/^void parse_assert_impl( int test_value, const char *file, unsigned line, const char *msg, ... )$/;"	f
parse_cfg	src/gpuwattch/cacti/io.cc	/^InputParameter::parse_cfg(const string & in_file)$/;"	f	class:InputParameter
parse_config	launcher/launcher_option_parser.cc	/^LauncherOptionParser::parse_config() {$/;"	f	class:LauncherOptionParser
parse_error	src/cuda-sim/ptx_parser.cc	213;"	d	file:
parse_error_impl	src/cuda-sim/ptx_parser.cc	/^void parse_error_impl( const char *file, unsigned line, const char *msg, ... )$/;"	f
parse_option	launcher/launcher_option_parser.cc	/^LauncherOptionParser::parse_option(std::string line, std::string option_name, std::vector<std::string>& value) {$/;"	f	class:LauncherOptionParser
part_random_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool part_random_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
part_rdm_init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::part_rdm_init()$/;"	f	class:linear_to_raw_address_translation
part_rdm_mtx_23	src/gpgpu-sim/addrdec.cc	/^unsigned part_rdm_mtx_23[][23] = {$/;"	v
part_rdm_mtx_25	src/gpgpu-sim/addrdec.cc	/^unsigned part_rdm_mtx_25[][25] = {$/;"	v
part_v2_random_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool part_v2_random_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
part_v2_rdm_init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::part_v2_rdm_init()$/;"	f	class:linear_to_raw_address_translation
part_v2_rdm_mtx_23	src/gpgpu-sim/addrdec.cc	/^unsigned part_v2_rdm_mtx_23[][23] = {$/;"	v
partition_address	src/gpgpu-sim/addrdec.cc	/^new_addr_type linear_to_raw_address_translation::partition_address( new_addr_type p_addr ) const $/;"	f	class:linear_to_raw_address_translation
partition_mf_allocator	src/gpgpu-sim/l2cache.h	/^    partition_mf_allocator( const memory_config *config )$/;"	f	class:partition_mf_allocator
partition_mf_allocator	src/gpgpu-sim/l2cache.h	/^class partition_mf_allocator : public mem_fetch_allocator {$/;"	c
passed_non_idempotent_point	src/cuda-sim/ptx_sim.h	/^   bool passed_non_idempotent_point;$/;"	m	class:ptx_cta_info
pc	src/abstract_hardware_model.h	/^    address_type pc;        \/\/ program counter address of instruction$/;"	m	class:inst_t
pc	src/gpgpu-sim/shader.h	/^   unsigned pc;$/;"	m	struct:insn_latency_info
pc_to_instruction	src/cuda-sim/ptx_ir.h	/^   static const ptx_instruction* pc_to_instruction(unsigned pc) $/;"	f	class:function_info
pc_width	src/gpuwattch/basic_components.h	/^    int  perThreadState, globalCheckpoint, instruction_length, pc_width, opcode_length, micro_opcode_length;$/;"	m	class:CoreDynParam
pcie	src/gpuwattch/XML_Parse.h	/^	system_pcie pcie;$/;"	m	struct:__anon26
pcie	src/gpuwattch/processor.h	/^    PCIeController   * pcie;$/;"	m	class:Processor
pciep	src/gpuwattch/iocontrollers.h	/^    PCIeParam  pciep;$/;"	m	class:PCIeController
pcies	src/gpuwattch/processor.h	/^    Component core, l2, l3, l1dir, l2dir, noc, mcs, cc, nius, pcies,flashcontrollers;$/;"	m	class:Processor
pcx_arbassoc	src/gpuwattch/arch_const.h	/^const int pcx_arbassoc=1;$/;"	v
pcx_arbblocksize	src/gpuwattch/arch_const.h	/^const int pcx_arbblocksize=2;$/;"	v
pcx_arbsize	src/gpuwattch/arch_const.h	/^const int pcx_arbsize=128;$/;"	v
pcx_bufferassoc	src/gpuwattch/arch_const.h	/^const int pcx_bufferassoc=1;$/;"	v
pcx_bufferblocksize	src/gpuwattch/arch_const.h	/^const int pcx_bufferblocksize=32;$/;"	v
pcx_buffersize	src/gpuwattch/arch_const.h	/^const int pcx_buffersize=1024;$/;"	v
pcx_numarb	src/gpuwattch/arch_const.h	/^const int pcx_numarb=5;$/;"	v
pcx_numbuffer	src/gpuwattch/arch_const.h	/^const int pcx_numbuffer=5;$/;"	v
pdata	src/cuda-sim/ptx_sim.h	/^   const void *pdata;$/;"	m	struct:param_t
pdf	src/ramulator_sim/StatType.h	/^const uint16_t pdf       = 0x00000020;$/;"	m	namespace:Stats_Ram
pdom	src/cuda-sim/ptx_ir.h	/^   bool pdom(const basic_block_t *B) {$/;"	f	struct:basic_block_t
peakDataTransferRate	src/gpuwattch/basic_components.h	/^    double  clockRate,num_mcs, peakDataTransferRate, num_channels;$/;"	m	class:MCParam
peak_commitW	src/gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_decodeW;$/;"	m	class:CoreDynParam
peak_issueW	src/gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_decodeW;$/;"	m	class:CoreDynParam
peak_issue_width	src/gpuwattch/XML_Parse.h	/^	int peak_issue_width;$/;"	m	struct:__anon15
peak_transfer_rate	src/gpuwattch/XML_Parse.h	/^	double peak_transfer_rate;$/;"	m	struct:__anon23
peak_transfer_rate	src/gpuwattch/XML_Parse.h	/^	int peak_transfer_rate;$/;"	m	struct:__anon22
peek	src/gpgpu-sim/gpu-cache.h	/^        T &peek( unsigned index ) $/;"	f	class:tex_cache::fifo
peek	src/gpgpu-sim/gpu-cache.h	/^        T &peek() const$/;"	f	class:tex_cache::fifo
peek	src/gpgpu-sim/gpu-cache.h	/^        const T &peek( unsigned index ) const $/;"	f	class:tex_cache::fifo
pending	src/ramulator_sim/Controller.h	/^    deque<Request> pending;  \/\/ read requests that are about to receive data from DRAM$/;"	m	class:Controller
pending	src/ramulator_sim/SpeedyController.h	/^    priority_queue<Request, vector<Request>, compair_depart_clk> pending;$/;"	m	class:SpeedyController
pendingWrites	src/gpgpu-sim/scoreboard.cc	/^bool Scoreboard::pendingWrites(unsigned wid) const$/;"	f	class:Scoreboard
pending_hits	src/gpgpu-sim/gpu-cache.h	/^    unsigned pending_hits;$/;"	m	struct:cache_sub_stats
pending_requests	src/ramulator_sim/Memory.h	/^    int pending_requests()$/;"	f	class:Memory
perThreadState	src/gpuwattch/basic_components.h	/^    int  perThreadState, globalCheckpoint, instruction_length, pc_width, opcode_length, micro_opcode_length;$/;"	m	class:CoreDynParam
per_access_energy	src/gpuwattch/logic.h	/^	double energy, base_energy,per_access_energy, leakage, gate_leakage;$/;"	m	class:FunctionalUnit
per_bitline_read_energy	src/gpuwattch/cacti/mat.h	/^    double   per_bitline_read_energy;$/;"	m	class:Mat
per_dq_read_power	src/gpuwattch/basic_components.h	/^	int per_dq_read_power; \/\/ in mW$/;"	m	class:DRAMParam
per_dq_write_power	src/gpuwattch/basic_components.h	/^	int per_dq_write_power; \/\/ in mW$/;"	m	class:DRAMParam
per_stage_vector	src/gpuwattch/cacti/cacti_interface.h	/^  int per_stage_vector;$/;"	m	class:InputParameter
per_thread_info	src/abstract_hardware_model.h	/^        per_thread_info() {$/;"	f	struct:warp_inst_t::per_thread_info
per_thread_info	src/abstract_hardware_model.h	/^    struct per_thread_info {$/;"	s	class:warp_inst_t
perc_load	src/gpuwattch/basic_components.h	/^    double duty_cycle, perc_load;$/;"	m	class:NIUParam
perc_load	src/gpuwattch/basic_components.h	/^    double duty_cycle, perc_load;$/;"	m	class:PCIeParam
perc_load	src/gpuwattch/basic_components.h	/^    double frontend_duty_cycle, duty_cycle, perc_load;$/;"	m	class:MCParam
perf_count_label	src/gpuwattch/XML_Parse.cc	/^const char * perf_count_label[] = {"TOT_INST,", "FP_INT,", "IC_H,", "IC_M,", "DC_RH,", "DC_RM,", "DC_WH,", "DC_WM,",$/;"	v
perf_count_t	src/gpuwattch/XML_Parse.h	/^enum perf_count_t {$/;"	g
perfect_icnt	src/intersim/interconnect_interface.cpp	/^bool perfect_icnt = 0;$/;"	v
perfect_memory_interface	src/gpgpu-sim/shader.h	/^    perfect_memory_interface( shader_core_ctx *core, simt_core_cluster *cluster ) { m_core=core; m_cluster=cluster; }$/;"	f	class:perfect_memory_interface
perfect_memory_interface	src/gpgpu-sim/shader.h	/^class perfect_memory_interface : public mem_fetch_interface {$/;"	c
peri_global	src/gpuwattch/cacti/parameter.h	/^  DeviceType peri_global; \/\/ peripheral global$/;"	m	class:TechnologyParameter
peri_global_tech_type	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int peri_global_tech_type;$/;"	m	class:InputParameter
ph	src/intersim/flit.hpp	/^   mutable int ph;$/;"	m	struct:Flit
ph	src/intersim2/flit.hpp	/^  mutable int ph;$/;"	m	class:Flit
phy_Regs_FRF_size	src/gpuwattch/XML_Parse.h	/^	int phy_Regs_FRF_size;$/;"	m	struct:__anon15
phy_Regs_IRF_size	src/gpuwattch/XML_Parse.h	/^	int phy_Regs_IRF_size;$/;"	m	struct:__anon15
phy_float_regfile_reads	src/gpuwattch/XML_Parse.h	/^	double phy_float_regfile_reads;$/;"	m	struct:__anon15
phy_float_regfile_writes	src/gpuwattch/XML_Parse.h	/^	double phy_float_regfile_writes;$/;"	m	struct:__anon15
phy_freg_width	src/gpuwattch/basic_components.h	/^    int  arch_ireg_width, arch_freg_width, phy_ireg_width, phy_freg_width;$/;"	m	class:CoreDynParam
phy_int_regfile_reads	src/gpuwattch/XML_Parse.h	/^	double phy_int_regfile_reads;$/;"	m	struct:__anon15
phy_int_regfile_writes	src/gpuwattch/XML_Parse.h	/^	double phy_int_regfile_writes;$/;"	m	struct:__anon15
phy_ireg_width	src/gpuwattch/basic_components.h	/^    int  arch_ireg_width, arch_freg_width, phy_ireg_width, phy_freg_width;$/;"	m	class:CoreDynParam
physical_address_width	src/gpuwattch/XML_Parse.h	/^	int physical_address_width;$/;"	m	struct:__anon15
physical_address_width	src/gpuwattch/XML_Parse.h	/^	int physical_address_width;$/;"	m	struct:__anon26
physical_page_replacement	src/ramulator_sim/Memory.h	/^    ScalarStat physical_page_replacement;$/;"	m	class:Memory
pid	launcher/child_process.h	/^  pid_t pid;$/;"	m	class:ChildProcess
pid	src/intersim2/flit.hpp	/^  int  pid;$/;"	m	class:Flit
pipe	launcher/child_process.h	/^  Communicate* pipe;$/;"	m	class:ChildProcess
pipeLogic	src/gpuwattch/memoryctrl.h	/^    Pipeline * pipeLogic;$/;"	m	class:MemoryController
pipe_widths	src/gpgpu-sim/shader.h	/^    int pipe_widths[N_PIPELINE_STAGES];$/;"	m	struct:shader_core_config
pipelinable	src/gpuwattch/cacti/cacti_interface.h	/^  bool pipelinable;$/;"	m	class:InputParameter
pipelinable	src/gpuwattch/interconnect.h	/^    bool pipelinable;$/;"	m	class:interconnect
pipeline_depth	src/gpuwattch/XML_Parse.h	/^	int pipeline_depth[20];$/;"	m	struct:__anon15
pipeline_duty_cycle	src/gpuwattch/XML_Parse.h	/^	double pipeline_duty_cycle;$/;"	m	struct:__anon15
pipeline_duty_cycle	src/gpuwattch/basic_components.h	/^    double pipeline_duty_cycle, total_cycles, busy_cycles, idle_cycles;$/;"	m	class:CoreDynParam
pipeline_stage	src/gpuwattch/logic.h	/^	double pipeline_stage,num_hthreads,issue_width;$/;"	m	class:UndiffCore
pipeline_stage_name_decode	src/gpgpu-sim/shader.h	/^const char* const pipeline_stage_name_decode[] = {$/;"	v
pipeline_stage_name_t	src/gpgpu-sim/shader.h	/^enum pipeline_stage_name_t {$/;"	g
pipeline_stages	src/gpuwattch/basic_components.h	/^    int  num_hthreads, pipeline_stages, fp_pipeline_stages, num_pipelines, num_fp_pipelines;$/;"	m	class:CoreDynParam
pipeline_stages	src/gpuwattch/cacti/cacti_interface.h	/^  int pipeline_stages;$/;"	m	class:InputParameter
pipeline_widths_string	src/gpgpu-sim/shader.h	/^    char* pipeline_widths_string;$/;"	m	struct:shader_core_config
pipelined_simd_unit	src/gpgpu-sim/shader.cc	/^pipelined_simd_unit::pipelined_simd_unit( register_set* result_port, const shader_core_config *config, unsigned max_latency,shader_core_ctx *core )$/;"	f	class:pipelined_simd_unit
pipelined_simd_unit	src/gpgpu-sim/shader.h	/^class pipelined_simd_unit : public simd_function_unit {$/;"	c
pipelines_per_core	src/gpuwattch/XML_Parse.h	/^	int pipelines_per_core[20];$/;"	m	struct:__anon15
pitch	src/gpuwattch/cacti/parameter.h	/^    double pitch;$/;"	m	class:TechnologyParameter::InterconnectType
planar_adapt_mesh	src/intersim/routefunc.cpp	/^void planar_adapt_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
planar_adapt_mesh	src/intersim2/routefunc.cpp	/^void planar_adapt_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
pmevent_impl	src/cuda-sim/instructions.cc	/^void pmevent_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
pmos	src/gpuwattch/cacti/basic_circuit.h	/^    pmos,$/;"	e	enum:Gate_type
pmos_to_nmos_sz_ratio	src/gpuwattch/cacti/basic_circuit.cc	/^double pmos_to_nmos_sz_ratio($/;"	f
policy	src/ramulator_sim/Scheduler.h	/^    function<vector<int>(typename T::Command)> policy[int(Type::MAX)] = {$/;"	m	class:RowPolicy
pop	src/gpgpu-sim/delayqueue.h	/^   T* pop() $/;"	f	class:fifo_pipeline
pop	src/gpgpu-sim/gpu-cache.h	/^        T pop() $/;"	f	class:tex_cache::fifo
pop	src/gpgpu-sim/l2cache.cc	/^mem_fetch* memory_sub_partition::pop() $/;"	f	class:memory_sub_partition
pop_breakaddr	src/cuda-sim/ptx_sim.cc	/^const operand_info& ptx_thread_info::pop_breakaddr() $/;"	f	class:ptx_thread_info
pop_packet	src/intersim/interconnect_interface.cpp	/^   void * pop_packet(){$/;"	f	class:boundary_buf
pop_stack	src/gpgpu-sim/stack.cc	/^address_type pop_stack(Stack *S) {$/;"	f
popc_impl	src/cuda-sim/instructions.cc	/^void popc_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
populate_memory	src/ramulator_sim/MemoryFactory.h	/^    static Memory<T> *populate_memory(const Config& configs, T *spec, int channels, int ranks, fifo_pipeline<mem_fetch> *r_returnq) {$/;"	f	class:MemoryFactory
port	src/intersim/allocator.hpp	/^      int port;$/;"	m	struct:Allocator::sRequest
port	src/intersim2/allocators/allocator.hpp	/^    int port;$/;"	m	struct:Allocator::sRequest
port_available_cycles	src/gpgpu-sim/gpu-cache.h	/^    unsigned long long port_available_cycles; $/;"	m	struct:cache_sub_stats
port_vector_t	src/gpgpu-sim/shader.h	/^   typedef std::vector<register_set*> port_vector_t;$/;"	t	class:opndcoll_rfu_t
ports	src/gpuwattch/XML_Parse.h	/^	int ports[20];$/;"	m	struct:__anon16
ports	src/gpuwattch/XML_Parse.h	/^	int ports[20];$/;"	m	struct:__anon17
ports	src/gpuwattch/XML_Parse.h	/^	int ports[20];$/;"	m	struct:__anon18
ports	src/gpuwattch/XML_Parse.h	/^	int ports[20];$/;"	m	struct:__anon19
ports_of_input_buffer	src/gpuwattch/XML_Parse.h	/^	int ports_of_input_buffer[20];$/;"	m	struct:__anon20
ports_of_input_buffer	src/gpuwattch/XML_Parse.h	/^	int ports_of_input_buffer[20];$/;"	m	struct:__anon21
positionOfChildNode	src/gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::positionOfChildNode(XMLCSTR name, int count) const$/;"	f	class:XMLNode
positionOfChildNode	src/gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::positionOfChildNode(XMLNode x)  const$/;"	f	class:XMLNode
positionOfChildNode	src/gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::positionOfChildNode(int i) const { if (i>=d->nChild) i=d->nChild-1; return findPosition(d,i,eNodeChild); }$/;"	f	class:XMLNode
positionOfClear	src/gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::positionOfClear    (int i) const { if (i>=d->nClear) i=d->nClear-1; return findPosition(d,i,eNodeClear); }$/;"	f	class:XMLNode
positionOfClear	src/gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::positionOfClear(XMLCSTR lpszValue) const { return positionOfClear(indexClear(lpszValue)); }$/;"	f	class:XMLNode
positionOfClear	src/gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::positionOfClear(XMLClear *a) const { if (a) return positionOfClear(a->lpszValue); return positionOfClear(); }$/;"	f	class:XMLNode
positionOfText	src/gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::positionOfText     (int i) const { if (i>=d->nText ) i=d->nText-1;  return findPosition(d,i,eNodeText ); }$/;"	f	class:XMLNode
positionOfText	src/gpuwattch/xmlParser.cc	/^XMLElementPosition XMLNode::positionOfText (XMLCSTR lpszValue) const { return positionOfText (indexText (lpszValue)); }$/;"	f	class:XMLNode
position_of_mrq_chosen	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int *position_of_mrq_chosen; \/\/position of mrq in m_queue chosen $/;"	m	class:memory_stats_t
postdominator_ids	src/cuda-sim/ptx_ir.h	/^   std::set<int> postdominator_ids;$/;"	m	struct:basic_block_t
pow2_histogram	src/gpgpu-sim/histogram.cc	/^pow2_histogram::pow2_histogram (std::string name, int nbins, int* bins) $/;"	f	class:pow2_histogram
pow2_histogram	src/gpgpu-sim/histogram.h	/^class pow2_histogram : public binned_histogram {$/;"	c
power	src/gpuwattch/cacti/cacti_interface.h	/^    powerDef power;$/;"	m	class:uca_org_t
power	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power;$/;"	m	class:mem_array
power	src/gpuwattch/cacti/component.h	/^    powerDef power,rt_power;$/;"	m	class:Component
power	src/gpuwattch/cacti/decoder.h	/^  powerDef power;$/;"	m	class:Driver
powerComponents	src/gpuwattch/cacti/cacti_interface.h	/^    powerComponents() : dynamic(0), leakage(0), gate_leakage(0), short_circuit(0), longer_channel_leakage(0)  { }$/;"	f	class:powerComponents
powerComponents	src/gpuwattch/cacti/cacti_interface.h	/^    powerComponents(const powerComponents & obj) { *this = obj; }$/;"	f	class:powerComponents
powerComponents	src/gpuwattch/cacti/cacti_interface.h	/^class powerComponents$/;"	c
powerCrossbar	src/intersim2/power/power_module.cpp	/^double Power_Module::powerCrossbar(double width, double inputs, double outputs, double from, double to){$/;"	f	class:Power_Module
powerCrossbarCtrl	src/intersim2/power/power_module.cpp	/^double Power_Module::powerCrossbarCtrl(double width, double inputs, double outputs){$/;"	f	class:Power_Module
powerCrossbarLeak	src/intersim2/power/power_module.cpp	/^double Power_Module::powerCrossbarLeak (double width, double inputs, double outputs){$/;"	f	class:Power_Module
powerDef	src/gpuwattch/cacti/cacti_interface.h	/^    powerDef() : readOp(), writeOp(), searchOp() { }$/;"	f	class:powerDef
powerDef	src/gpuwattch/cacti/cacti_interface.h	/^class powerDef$/;"	c
powerMemoryBitLeak	src/intersim2/power/power_module.cpp	/^double Power_Module::powerMemoryBitLeak(double memoryDepth ){$/;"	f	class:Power_Module
powerMemoryBitRead	src/intersim2/power/power_module.cpp	/^double Power_Module::powerMemoryBitRead(double memoryDepth){$/;"	f	class:Power_Module
powerMemoryBitWrite	src/intersim2/power/power_module.cpp	/^double Power_Module:: powerMemoryBitWrite(double memoryDepth){$/;"	f	class:Power_Module
powerOutputCtrl	src/intersim2/power/power_module.cpp	/^double Power_Module:: powerOutputCtrl(double width) {$/;"	f	class:Power_Module
powerRepeatedWire	src/intersim2/power/power_module.cpp	/^double Power_Module::powerRepeatedWire(double L, double K, double M, double N){$/;"	f	class:Power_Module
powerRepeatedWireLeak	src/intersim2/power/power_module.cpp	/^double Power_Module::powerRepeatedWireLeak (double K, double M, double N){$/;"	f	class:Power_Module
powerWireClk	src/intersim2/power/power_module.cpp	/^double Power_Module:: powerWireClk (double M, double W){$/;"	f	class:Power_Module
powerWireDFF	src/intersim2/power/power_module.cpp	/^double Power_Module::powerWireDFF(double M, double W, double alpha){$/;"	f	class:Power_Module
powerWordLine	src/intersim2/power/power_module.cpp	/^double Power_Module::powerWordLine(double memoryWidth, double memoryDepth){$/;"	f	class:Power_Module
power_L2	src/gpuwattch/cacti/decoder.h	/^  powerDef power_L2;$/;"	m	class:PredecBlk
power_addr_horizontal_htree	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_addr_horizontal_htree;$/;"	m	struct:__anon5
power_addr_input_htree	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_addr_input_htree;$/;"	m	class:mem_array
power_addr_input_htree	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_addr_input_htree;$/;"	m	struct:__anon5
power_addr_vertical_htree	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_addr_vertical_htree;$/;"	m	struct:__anon5
power_bit	src/gpuwattch/cacti/htree2.h	/^    powerDef power_bit;$/;"	m	class:Htree2
power_bit	src/gpuwattch/interconnect.h	/^    powerDef power_bit;$/;"	m	class:interconnect
power_bit_mux_decoders	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_bit_mux_decoders;$/;"	m	class:mem_array
power_bit_mux_decoders	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_bit_mux_decoders;$/;"	m	struct:__anon5
power_bit_mux_decoders	src/gpuwattch/cacti/mat.h	/^    powerDef power_bit_mux_decoders;$/;"	m	class:Mat
power_bit_mux_predecoder_blocks	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_bit_mux_predecoder_blocks;$/;"	m	class:mem_array
power_bit_mux_predecoder_blocks	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_bit_mux_predecoder_blocks;$/;"	m	struct:__anon5
power_bit_mux_predecoder_drivers	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_bit_mux_predecoder_drivers;$/;"	m	class:mem_array
power_bit_mux_predecoder_drivers	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_bit_mux_predecoder_drivers;$/;"	m	struct:__anon5
power_bitline	src/gpuwattch/cacti/mat.h	/^    powerDef power_bitline, power_searchline, power_matchline;$/;"	m	class:Mat
power_bitlines	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_bitlines;$/;"	m	class:mem_array
power_bitlines	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_bitlines;$/;"	m	struct:__anon5
power_bl_precharge_eq_drv	src/gpuwattch/cacti/mat.h	/^    powerDef power_bl_precharge_eq_drv;$/;"	m	class:Mat
power_cam_all_active	src/gpuwattch/cacti/mat.h	/^    powerDef power_cam_all_active;$/;"	m	class:Mat
power_cam_bitline_precharge_eq_drv	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_cam_bitline_precharge_eq_drv;$/;"	m	class:mem_array
power_comparator	src/gpuwattch/cacti/mat.h	/^    powerDef power_comparator;$/;"	m	class:Mat
power_comparators	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_comparators;$/;"	m	class:mem_array
power_comparators	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_comparators;$/;"	m	struct:__anon5
power_config	src/gpgpu-sim/gpu-sim.h	/^	power_config()$/;"	f	struct:power_config
power_config	src/gpgpu-sim/gpu-sim.h	/^struct power_config {$/;"	s
power_core_stat_t	src/gpgpu-sim/power_stat.cc	/^power_core_stat_t::power_core_stat_t( const struct shader_core_config *shader_config, shader_core_stats *core_stats )$/;"	f	class:power_core_stat_t
power_core_stat_t	src/gpgpu-sim/power_stat.h	/^class power_core_stat_t : public shader_core_power_stats_pod {$/;"	c
power_crossbar	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_crossbar;$/;"	m	struct:__anon5
power_data_input_htree	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_data_input_htree;$/;"	m	class:mem_array
power_data_input_htree	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_data_input_htree;$/;"	m	struct:__anon5
power_data_output_htree	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_data_output_htree;$/;"	m	class:mem_array
power_data_output_htree	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_data_output_htree;$/;"	m	struct:__anon5
power_datain_horizontal_htree	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_datain_horizontal_htree;$/;"	m	struct:__anon5
power_datain_vertical_htree	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_datain_vertical_htree;$/;"	m	struct:__anon5
power_dataout_horizontal_htree	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_dataout_horizontal_htree;$/;"	m	struct:__anon5
power_dataout_vertical_htree	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_dataout_vertical_htree;$/;"	m	class:mem_array
power_dataout_vertical_htree	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_dataout_vertical_htree;$/;"	m	struct:__anon5
power_fa_cam	src/gpuwattch/cacti/mat.h	/^    powerDef power_fa_cam;  \/\/ TODO: leakage power is not computed yet$/;"	m	class:Mat
power_htree_in_search	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_htree_in_search;$/;"	m	class:mem_array
power_htree_out_search	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_htree_out_search;$/;"	m	class:mem_array
power_matchline	src/gpuwattch/cacti/mat.h	/^    powerDef power_bitline, power_searchline, power_matchline;$/;"	m	class:Mat
power_matchline_precharge	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_matchline_precharge;$/;"	m	class:mem_array
power_matchline_precharge	src/gpuwattch/cacti/mat.h	/^    powerDef power_matchline_precharge;$/;"	m	class:Mat
power_matchline_to_wordline_drv	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_matchline_to_wordline_drv;$/;"	m	class:mem_array
power_matchlines	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_matchlines;$/;"	m	class:mem_array
power_mem_stat_t	src/gpgpu-sim/power_stat.cc	/^power_mem_stat_t::power_mem_stat_t(const struct memory_config *mem_config, const struct shader_core_config *shdr_config, memory_stats_t *mem_stats, shader_core_stats *shdr_stats){$/;"	f	class:power_mem_stat_t
power_mem_stat_t	src/gpgpu-sim/power_stat.h	/^class power_mem_stat_t : public mem_power_stats_pod{$/;"	c
power_metrics_calculations	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::power_metrics_calculations()$/;"	f	class:gpgpu_sim_wrapper
power_ml_to_ram_wl_drv	src/gpuwattch/cacti/mat.h	/^    powerDef power_ml_to_ram_wl_drv;$/;"	m	class:Mat
power_nand2_path	src/gpuwattch/cacti/decoder.h	/^  powerDef power_nand2_path;$/;"	m	class:PredecBlk
power_nand2_path	src/gpuwattch/cacti/decoder.h	/^  powerDef power_nand2_path;$/;"	m	class:PredecBlkDrv
power_nand3_path	src/gpuwattch/cacti/decoder.h	/^  powerDef power_nand3_path;$/;"	m	class:PredecBlk
power_nand3_path	src/gpuwattch/cacti/decoder.h	/^  powerDef power_nand3_path;$/;"	m	class:PredecBlkDrv
power_output_drivers_at_subarray	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_output_drivers_at_subarray;$/;"	m	class:mem_array
power_output_drivers_at_subarray	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_output_drivers_at_subarray;$/;"	m	struct:__anon5
power_prechg_eq_drivers	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_prechg_eq_drivers;$/;"	m	class:mem_array
power_prechg_eq_drivers	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_prechg_eq_drivers;$/;"	m	struct:__anon5
power_routing_to_bank	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_routing_to_bank;$/;"	m	class:mem_array
power_routing_to_bank	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_routing_to_bank;$/;"	m	struct:__anon5
power_routing_to_bank	src/gpuwattch/cacti/uca.h	/^    powerDef power_routing_to_bank;$/;"	m	class:UCA
power_row_decoders	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_row_decoders;$/;"	m	class:mem_array
power_row_decoders	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_row_decoders;$/;"	m	struct:__anon5
power_row_decoders	src/gpuwattch/cacti/mat.h	/^    powerDef power_row_decoders;$/;"	m	class:Mat
power_row_predecoder_blocks	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_row_predecoder_blocks;$/;"	m	class:mem_array
power_row_predecoder_blocks	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_row_predecoder_blocks;$/;"	m	struct:__anon5
power_row_predecoder_drivers	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_row_predecoder_drivers;$/;"	m	class:mem_array
power_row_predecoder_drivers	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_row_predecoder_drivers;$/;"	m	struct:__anon5
power_sa	src/gpuwattch/cacti/mat.h	/^    powerDef power_sa;$/;"	m	class:Mat
power_sa_mux_lev_1_decoders	src/gpuwattch/cacti/mat.h	/^    powerDef power_sa_mux_lev_1_decoders;$/;"	m	class:Mat
power_sa_mux_lev_2_decoders	src/gpuwattch/cacti/mat.h	/^    powerDef power_sa_mux_lev_2_decoders;$/;"	m	class:Mat
power_searchline	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_searchline;$/;"	m	class:mem_array
power_searchline	src/gpuwattch/cacti/mat.h	/^    powerDef power_bitline, power_searchline, power_matchline;$/;"	m	class:Mat
power_searchline_precharge	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_searchline_precharge;$/;"	m	class:mem_array
power_searchline_precharge	src/gpuwattch/cacti/mat.h	/^    powerDef power_searchline_precharge;$/;"	m	class:Mat
power_sense_amps	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_sense_amps;$/;"	m	class:mem_array
power_sense_amps	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_sense_amps;$/;"	m	struct:__anon5
power_senseamp_mux_lev_1_decoders	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_1_decoders;$/;"	m	class:mem_array
power_senseamp_mux_lev_1_decoders	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_1_decoders;$/;"	m	struct:__anon5
power_senseamp_mux_lev_1_predecoder_blocks	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_1_predecoder_blocks;$/;"	m	class:mem_array
power_senseamp_mux_lev_1_predecoder_blocks	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_1_predecoder_blocks;$/;"	m	struct:__anon5
power_senseamp_mux_lev_1_predecoder_drivers	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_1_predecoder_drivers;$/;"	m	class:mem_array
power_senseamp_mux_lev_1_predecoder_drivers	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_1_predecoder_drivers;$/;"	m	struct:__anon5
power_senseamp_mux_lev_2_decoders	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_2_decoders;$/;"	m	class:mem_array
power_senseamp_mux_lev_2_decoders	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_2_decoders;$/;"	m	struct:__anon5
power_senseamp_mux_lev_2_predecoder_blocks	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_2_predecoder_blocks;$/;"	m	class:mem_array
power_senseamp_mux_lev_2_predecoder_blocks	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_2_predecoder_blocks;$/;"	m	struct:__anon5
power_senseamp_mux_lev_2_predecoder_drivers	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_2_predecoder_drivers;$/;"	m	class:mem_array
power_senseamp_mux_lev_2_predecoder_drivers	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef power_senseamp_mux_lev_2_predecoder_drivers;$/;"	m	struct:__anon5
power_stat_t	src/gpgpu-sim/power_stat.cc	/^power_stat_t::power_stat_t( const struct shader_core_config *shader_config,float * average_pipeline_duty_cycle,float *active_sms,shader_core_stats * shader_stats, const struct memory_config *mem_config,memory_stats_t * memory_stats)$/;"	f	class:power_stat_t
power_stat_t	src/gpgpu-sim/power_stat.h	/^class power_stat_t {$/;"	c
power_subarray_out_drv	src/gpuwattch/cacti/mat.h	/^    powerDef power_subarray_out_drv;$/;"	m	class:Mat
power_t	src/gpuwattch/array.h	/^  powerDef       power_t;$/;"	m	class:ArrayST
power_t	src/gpuwattch/array.h	/^  powerDef power_t;\/\/temp value holder for both (max) power and runtime power$/;"	m	class:InstCache
power_t	src/gpuwattch/iocontrollers.h	/^    powerDef power_t;$/;"	m	class:FlashController
power_t	src/gpuwattch/iocontrollers.h	/^    powerDef power_t;$/;"	m	class:NIUController
power_t	src/gpuwattch/iocontrollers.h	/^    powerDef power_t;$/;"	m	class:PCIeController
power_t	src/gpuwattch/logic.h	/^	powerDef       power_t;$/;"	m	class:FunctionalUnit
power_t	src/gpuwattch/logic.h	/^	powerDef       power_t;$/;"	m	class:dep_resource_conflict_check
power_t	src/gpuwattch/logic.h	/^	powerDef       power_t;$/;"	m	class:inst_decoder
power_t	src/gpuwattch/memoryctrl.h	/^    powerDef       power_t;$/;"	m	class:DRAM
power_t	src/gpuwattch/memoryctrl.h	/^    powerDef       power_t;$/;"	m	class:MCPHY
power_t	src/gpuwattch/memoryctrl.h	/^    powerDef power_t;$/;"	m	class:MCBackend
power_t	src/gpuwattch/noc.h	/^	powerDef       power_t;$/;"	m	class:NoC
power_trace_file	src/gpuwattch/gpgpu_sim_wrapper.h	/^    gzFile power_trace_file;$/;"	m	class:gpgpu_sim_wrapper
powerfile	src/gpuwattch/gpgpu_sim_wrapper.h	/^    std::ofstream powerfile;$/;"	m	class:gpgpu_sim_wrapper
powers	src/gpuwattch/cacti/basic_circuit.cc	/^int powers (int base, int n)$/;"	f
powi	src/intersim/misc_utils.cpp	/^int powi( int x, int y ) \/\/ compute x to the y$/;"	f
powi	src/intersim2/misc_utils.cpp	/^int powi( int x, int y ) \/\/ compute x to the y$/;"	f
powli	src/gpgpu-sim/addrdec.cc	/^static long int powli( long int x, long int y ) \/\/ compute x to the y$/;"	f	file:
pppm	src/gpuwattch/cacti/const.h	/^const double pppm[4]      = {1,1,1,1};$/;"	v
pppm_Ig	src/gpuwattch/cacti/const.h	/^const double pppm_Ig[4]   = {0,0,1,0};$/;"	v
pppm_Isub	src/gpuwattch/cacti/const.h	/^const double pppm_Isub[4] = {0,1,0,0};$/;"	v
pppm_dyn	src/gpuwattch/cacti/const.h	/^const double pppm_dyn[4]  = {1,0,0,0};$/;"	v
pppm_lkg	src/gpuwattch/cacti/const.h	/^const double pppm_lkg[4]  = {0,1,1,0};$/;"	v
pppm_lkg_multhread	src/gpuwattch/basic_components.h	/^    double pppm_lkg_multhread[4];$/;"	m	class:CoreDynParam
pppm_sc	src/gpuwattch/cacti/const.h	/^const double pppm_sc[4]   = {0,0,0,1};$/;"	v
pre_coeff	src/gpuwattch/basic_components.h	/^    double pre_coeff;$/;"	m	class:DRAMParam
pre_dec	src/gpuwattch/logic.h	/^	Predec *  pre_dec;$/;"	m	class:inst_decoder
pre_decode	src/abstract_hardware_model.h	/^    virtual void pre_decode() {}$/;"	f	class:inst_t
pre_decode	src/cuda-sim/cuda-sim.cc	/^void ptx_instruction::pre_decode()$/;"	f	class:ptx_instruction
pre_part_random_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool pre_part_random_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
precharge_delay	src/gpuwattch/cacti/cacti_interface.h	/^  double precharge_delay;$/;"	m	class:mem_array
precharge_delay	src/gpuwattch/cacti/cacti_interface.h	/^  double precharge_delay;$/;"	m	struct:__anon5
precharge_delay	src/gpuwattch/cacti/uca.h	/^    double precharge_delay;$/;"	m	class:UCA
precharge_energy	src/gpuwattch/cacti/cacti_interface.h	/^  double activate_energy, read_energy, write_energy, precharge_energy,$/;"	m	class:mem_array
precharge_energy	src/gpuwattch/cacti/cacti_interface.h	/^  double precharge_energy;$/;"	m	struct:__anon5
precharge_energy	src/gpuwattch/cacti/uca.h	/^    double precharge_energy;$/;"	m	class:UCA
precision	src/ramulator_sim/StatType.h	/^  Derived &precision(int __precision) {$/;"	f	class:Stats_Ram::Stat
precision	src/ramulator_sim/Statistics.h	/^  StatBase<StatType> & precision(int _precision) {$/;"	f	class:StatBase
pred	src/abstract_hardware_model.h	/^    int pred; \/\/ predicate register number$/;"	m	class:inst_t
pred_lookup	src/cuda-sim/decuda_pred_table/decuda_pred_table.cc	/^bool pred_lookup(int condition, int flags)$/;"	f
pred_spec	src/cuda-sim/ptx.y	/^pred_spec: PRED IDENTIFIER  { add_pred($2,0, -1); }$/;"	l
predecessor_ids	src/cuda-sim/ptx_ir.h	/^   std::set<int> predecessor_ids; \/\/indices of other basic blocks in m_basic_blocks array$/;"	m	struct:basic_block_t
predictionW	src/gpuwattch/basic_components.h	/^    int  fetchW, decodeW,issueW,peak_issueW, commitW,peak_commitW, predictionW, fp_issueW, fp_decodeW;$/;"	m	class:CoreDynParam
prediction_scheme	src/gpuwattch/XML_Parse.h	/^	char prediction_scheme[20];$/;"	m	struct:__anon9
prediction_width	src/gpuwattch/XML_Parse.h	/^	int prediction_width;$/;"	m	struct:__anon15
prediction_width	src/gpuwattch/XML_Parse.h	/^	int prediction_width;$/;"	m	struct:__anon9
predictor	src/gpuwattch/XML_Parse.h	/^	predictor_systemcore predictor;$/;"	m	struct:__anon15
predictor_accesses	src/gpuwattch/XML_Parse.h	/^	double predictor_accesses;$/;"	m	struct:__anon9
predictor_entries	src/gpuwattch/XML_Parse.h	/^	int predictor_entries;$/;"	m	struct:__anon9
predictor_size	src/gpuwattch/XML_Parse.h	/^	int predictor_size;$/;"	m	struct:__anon9
predictor_systemcore	src/gpuwattch/XML_Parse.h	/^} predictor_systemcore;$/;"	t	typeref:struct:__anon9
preempt	common/preempt_overhead.h	/^  kernel_info_t::PreemptionTechnique preempt;$/;"	m	class:cta_preempt_overhead
preempt	common/preempt_overhead.h	/^  kernel_info_t::PreemptionTechnique preempt;$/;"	m	class:preempt_overhead_item
preempt_overhead_item	common/preempt_overhead.h	/^  preempt_overhead_item(unsigned _shader_id, unsigned long long _throughput_overhead, unsigned long long _latency_overhead, kernel_info_t::PreemptionTechnique _preempt)$/;"	f	class:preempt_overhead_item
preempt_overhead_item	common/preempt_overhead.h	/^class preempt_overhead_item {$/;"	c
preempt_policy	launcher/mk-sched/mk_scheduler.h	/^  PreemptionPolicy preempt_policy;$/;"	m	class:DynamicScheduler
preempt_shader	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::SM_info::preempt_shader(unsigned linear_shader_id)$/;"	f	class:DynamicScheduler::SM_info
preempt_throughput_overhead_comparison	common/preempt_overhead.h	/^  preempt_throughput_overhead_comparison() {}$/;"	f	class:preempt_throughput_overhead_comparison
preempt_throughput_overhead_comparison	common/preempt_overhead.h	/^class preempt_throughput_overhead_comparison {$/;"	c
preemption_info_t	common/preemption_info.cc	/^preemption_info_t::preemption_info_t(const shader_preempt_overhead& item)$/;"	f	class:preemption_info_t
preemption_info_t	common/preemption_info.cc	/^preemption_info_t::preemption_info_t(unsigned sid)$/;"	f	class:preemption_info_t
preemption_info_t	common/preemption_info.h	/^class preemption_info_t {$/;"	c
preemption_techniques	common/preempt_overhead.h	/^  std::map<unsigned, kernel_info_t::PreemptionTechnique> preemption_techniques;$/;"	m	class:shader_preempt_overhead
prefetch_buffer_accesses	src/gpuwattch/XML_Parse.h	/^	double prefetch_buffer_accesses;$/;"	m	struct:__anon11
prefetch_buffer_accesses	src/gpuwattch/XML_Parse.h	/^	double prefetch_buffer_accesses;$/;"	m	struct:__anon13
prefetch_buffer_accesses	src/gpuwattch/XML_Parse.h	/^	double prefetch_buffer_accesses;$/;"	m	struct:__anon18
prefetch_buffer_accesses	src/gpuwattch/XML_Parse.h	/^	double prefetch_buffer_accesses;$/;"	m	struct:__anon19
prefetch_buffer_hits	src/gpuwattch/XML_Parse.h	/^	double prefetch_buffer_hits;$/;"	m	struct:__anon11
prefetch_buffer_hits	src/gpuwattch/XML_Parse.h	/^	double prefetch_buffer_hits;$/;"	m	struct:__anon13
prefetch_buffer_hits	src/gpuwattch/XML_Parse.h	/^	double prefetch_buffer_hits;$/;"	m	struct:__anon18
prefetch_buffer_hits	src/gpuwattch/XML_Parse.h	/^	double prefetch_buffer_hits;$/;"	m	struct:__anon19
prefetch_buffer_reads	src/gpuwattch/XML_Parse.h	/^	double prefetch_buffer_reads;$/;"	m	struct:__anon11
prefetch_buffer_reads	src/gpuwattch/XML_Parse.h	/^	double prefetch_buffer_reads;$/;"	m	struct:__anon13
prefetch_buffer_reads	src/gpuwattch/XML_Parse.h	/^	double prefetch_buffer_reads;$/;"	m	struct:__anon18
prefetch_buffer_reads	src/gpuwattch/XML_Parse.h	/^	double prefetch_buffer_reads;$/;"	m	struct:__anon19
prefetch_buffer_writes	src/gpuwattch/XML_Parse.h	/^	double prefetch_buffer_writes;$/;"	m	struct:__anon11
prefetch_buffer_writes	src/gpuwattch/XML_Parse.h	/^	double prefetch_buffer_writes;$/;"	m	struct:__anon13
prefetch_buffer_writes	src/gpuwattch/XML_Parse.h	/^	double prefetch_buffer_writes;$/;"	m	struct:__anon18
prefetch_buffer_writes	src/gpuwattch/XML_Parse.h	/^	double prefetch_buffer_writes;$/;"	m	struct:__anon19
prefetch_impl	src/cuda-sim/instructions.cc	/^void prefetch_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
prefetch_size	src/ramulator_sim/ALDRAM.h	/^    int prefetch_size = 8; \/\/ 8n prefetch DDR$/;"	m	class:ALDRAM
prefetch_size	src/ramulator_sim/DDR3.h	/^    int prefetch_size = 8; \/\/ 8n prefetch DDR$/;"	m	class:DDR3
prefetch_size	src/ramulator_sim/DDR4.h	/^    int prefetch_size = 8; \/\/ 8n prefetch DDR$/;"	m	class:DDR4
prefetch_size	src/ramulator_sim/DSARP.h	/^    int prefetch_size = 16; \/\/ 16n prefetch DDR$/;"	m	class:DSARP
prefetch_size	src/ramulator_sim/GDDR5.h	/^    int prefetch_size = 8; \/\/ 8n prefetch QDR$/;"	m	class:GDDR5
prefetch_size	src/ramulator_sim/HBM.h	/^    int prefetch_size = 4; \/\/ burst length could be 2 and 4 (choose 4 here), 2n prefetch$/;"	m	class:HBM
prefetch_size	src/ramulator_sim/LPDDR3.h	/^    int prefetch_size = 8; \/\/ 16n prefetch DDR$/;"	m	class:LPDDR3
prefetch_size	src/ramulator_sim/LPDDR4.h	/^    int prefetch_size = 16; \/\/ 16n prefetch DDR$/;"	m	class:LPDDR4
prefetch_size	src/ramulator_sim/SALP.h	/^    int prefetch_size = 8; \/\/ 8n prefetch DDR$/;"	m	class:SALP
prefetch_size	src/ramulator_sim/TLDRAM.h	/^    int prefetch_size = 8; \/\/ 8n prefetch DDR$/;"	m	class:TLDRAM
prefetch_size	src/ramulator_sim/WideIO.h	/^    int prefetch_size = 4; \/\/ 4n prefetch SDR$/;"	m	class:WideIO
prefetch_size	src/ramulator_sim/WideIO2.h	/^    int prefetch_size = 4;$/;"	m	class:WideIO2
prefetchb	src/gpuwattch/array.h	/^  ArrayST* prefetchb;$/;"	m	class:InstCache
prefetchb_size	src/gpuwattch/basic_components.h	/^    int missb_size, fu_size, prefetchb_size, wbb_size;$/;"	m	class:CacheDynParam
prefetchu_impl	src/cuda-sim/instructions.cc	/^void prefetchu_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
prepare	src/ramulator_sim/StatType.h	/^  void prepare() {$/;"	f	class:Stats_Ram::Average
prepare	src/ramulator_sim/StatType.h	/^  void prepare() {$/;"	f	class:Stats_Ram::VectorBase
prepare	src/ramulator_sim/StatType.h	/^  void prepare() {}$/;"	f	class:Stats_Ram::AverageDeviation
prepare	src/ramulator_sim/StatType.h	/^  void prepare() {}$/;"	f	class:Stats_Ram::ConstValue
prepare	src/ramulator_sim/StatType.h	/^  void prepare() {}$/;"	f	class:Stats_Ram::Histogram
prepare	src/ramulator_sim/StatType.h	/^  void prepare() {}$/;"	f	class:Stats_Ram::Scalar
prepare	src/ramulator_sim/StatType.h	/^  void prepare() {}$/;"	f	class:Stats_Ram::StandardDeviation
prepare	src/ramulator_sim/StatType.h	/^  void prepare() {};$/;"	f	class:Stats_Ram::Distribution
prepare	src/ramulator_sim/Statistics.h	/^  void prepare(void) { stat.prepare(); }$/;"	f	class:StatBase
prereq	src/ramulator_sim/ALDRAM.h	/^    function<Command(DRAM<ALDRAM>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ALDRAM
prereq	src/ramulator_sim/DDR3.h	/^    function<Command(DRAM<DDR3>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:DDR3
prereq	src/ramulator_sim/DDR4.h	/^    function<Command(DRAM<DDR4>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:DDR4
prereq	src/ramulator_sim/DRAM.h	/^    function<typename T::Command(DRAM<T>*, typename T::Command cmd, int)>* prereq;$/;"	m	class:DRAM
prereq	src/ramulator_sim/DSARP.h	/^    function<Command(DRAM<DSARP>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:DSARP
prereq	src/ramulator_sim/GDDR5.h	/^    function<Command(DRAM<GDDR5>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:GDDR5
prereq	src/ramulator_sim/HBM.h	/^    function<Command(DRAM<HBM>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:HBM
prereq	src/ramulator_sim/LPDDR3.h	/^    function<Command(DRAM<LPDDR3>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:LPDDR3
prereq	src/ramulator_sim/LPDDR4.h	/^    function<Command(DRAM<LPDDR4>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:LPDDR4
prereq	src/ramulator_sim/SALP.h	/^    function<Command(DRAM<SALP>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:SALP
prereq	src/ramulator_sim/StatType.h	/^  Derived &prereq(const GenericStat & prereq) {$/;"	f	class:Stats_Ram::Stat
prereq	src/ramulator_sim/Statistics.h	/^  StatBase<StatType> & prereq(const Stat & _prereq) {$/;"	f	class:StatBase
prereq	src/ramulator_sim/TLDRAM.h	/^    function<Command(DRAM<TLDRAM>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:TLDRAM
prereq	src/ramulator_sim/WideIO.h	/^    function<Command(DRAM<WideIO>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:WideIO
prereq	src/ramulator_sim/WideIO2.h	/^    function<Command(DRAM<WideIO2>*, Command cmd, int)> prereq[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:WideIO2
pres	src/intersim/event_router.hpp	/^      int  pres;$/;"	m	struct:EventNextVCState::tWaiting
pres	src/intersim2/routers/event_router.hpp	/^    int  pres;$/;"	m	struct:EventNextVCState::tWaiting
prev	src/ramulator_sim/DRAM.h	/^    deque<long> prev[int(T::Command::MAX)]; \/\/ the most recent history of when commands were issued$/;"	m	class:DRAM
prev_kernel_stats	common/kernel_info_t.cc	/^static std::map<ChildProcess*, std::map<std::string, double> > prev_kernel_stats;$/;"	v	file:
pri	src/intersim/arbiter.hpp	/^      int pri;$/;"	m	struct:Arbiter::sRequest
pri	src/intersim/flit.hpp	/^   int  pri;$/;"	m	struct:Flit
pri	src/intersim/outputset.hpp	/^      int pri;$/;"	m	struct:OutputSet::sSetElement
pri	src/intersim2/arbiters/arbiter.hpp	/^    int pri ;$/;"	m	struct:Arbiter::__anon1
pri	src/intersim2/arbiters/prio_arb.hpp	/^    int pri;$/;"	m	struct:PriorityArbiter::sRequest
pri	src/intersim2/flit.hpp	/^  int  pri;$/;"	m	class:Flit
pri	src/intersim2/outputset.hpp	/^    int pri;$/;"	m	struct:OutputSet::sSetElement
print	libcuda/cuda_runtime_api.cc	/^    virtual void print() {$/;"	f	class:cuobjdumpELFSection
print	libcuda/cuda_runtime_api.cc	/^    virtual void print() {$/;"	f	class:cuobjdumpPTXSection
print	libcuda/cuda_runtime_api.cc	/^    virtual void print(){std::cout << "cuobjdump Section: unknown type" << std::endl;}$/;"	f	class:cuobjdumpSection
print	src/abstract_hardware_model.cc	/^void simt_stack::print(FILE *fout) const$/;"	f	class:simt_stack
print	src/abstract_hardware_model.h	/^	void print(FILE* fp) const{$/;"	f	class:register_set
print	src/abstract_hardware_model.h	/^   void print(FILE *fp) const$/;"	f	class:mem_access_t
print	src/cuda-sim/memory.cc	/^template<unsigned BSIZE> void memory_space_impl<BSIZE>::print( const char *format, FILE *fout ) const$/;"	f	class:memory_space_impl
print	src/cuda-sim/memory.h	/^   void print( const char *format, FILE *fout ) const$/;"	f	class:mem_storage
print	src/gpgpu-sim/addrdec.cc	/^void addrdec_t::print( FILE *fp ) const$/;"	f	class:addrdec_t
print	src/gpgpu-sim/delayqueue.h	/^   void print() const$/;"	f	class:fifo_pipeline
print	src/gpgpu-sim/gpu-cache.cc	/^void baseline_cache::print(FILE *fp, unsigned &accesses, unsigned &misses) const{$/;"	f	class:baseline_cache
print	src/gpgpu-sim/gpu-cache.cc	/^void tag_array::print( FILE *stream, unsigned &total_access, unsigned &total_misses ) const$/;"	f	class:tag_array
print	src/gpgpu-sim/gpu-cache.h	/^    void print( FILE *fp ) const$/;"	f	class:cache_config
print	src/gpgpu-sim/l2cache.cc	/^void memory_partition_unit::arbitration_metadata::print( FILE *fp ) const $/;"	f	class:memory_partition_unit::arbitration_metadata
print	src/gpgpu-sim/l2cache.cc	/^void memory_partition_unit::print( FILE *fp ) const$/;"	f	class:memory_partition_unit
print	src/gpgpu-sim/l2cache.cc	/^void memory_sub_partition::print( FILE *fp ) const$/;"	f	class:memory_sub_partition
print	src/gpgpu-sim/mem_fetch.cc	/^void mem_fetch::print( FILE *fp, bool print_inst ) const$/;"	f	class:mem_fetch
print	src/gpgpu-sim/power_stat.cc	/^void power_core_stat_t::print (FILE *fout)$/;"	f	class:power_core_stat_t
print	src/gpgpu-sim/power_stat.cc	/^void power_mem_stat_t::print (FILE *fout) const {$/;"	f	class:power_mem_stat_t
print	src/gpgpu-sim/power_stat.cc	/^void power_stat_t::print (FILE *fout) const$/;"	f	class:power_stat_t
print	src/gpgpu-sim/shader.cc	/^void ldst_unit::print(FILE *fout) const$/;"	f	class:ldst_unit
print	src/gpgpu-sim/shader.cc	/^void shader_core_stats::print( FILE* fout ) const$/;"	f	class:shader_core_stats
print	src/gpgpu-sim/shader.cc	/^void shd_warp_t::print( FILE *fout ) const$/;"	f	class:shd_warp_t
print	src/gpgpu-sim/shader.cc	/^void warp_inst_t::print( FILE *fout ) const$/;"	f	class:warp_inst_t
print	src/gpgpu-sim/shader.h	/^    virtual void print( FILE *fp ) const$/;"	f	class:simd_function_unit
print	src/gpgpu-sim/shader.h	/^    virtual void print(FILE *fp) const$/;"	f	class:pipelined_simd_unit
print	src/gpgpu-sim/stat-tool.cc	/^void linear_histogram_logger::print(FILE *fout) const$/;"	f	class:linear_histogram_logger
print	src/gpgpu-sim/stat-tool.h	/^   void print(FILE *fout) const $/;"	f	class:insn_warp_occ_logger
print	src/gpgpu-sim/stat-tool.h	/^   void print(FILE *fout) const {$/;"	f	class:linear_histogram_snapshot
print	src/gpgpu-sim/traffic_breakdown.cc	/^void traffic_breakdown::print(FILE* fout)$/;"	f	class:traffic_breakdown
print	src/ramulator_sim/StatType.h	/^  virtual void print(std::ofstream& file) {$/;"	f	class:Stats_Ram::ScalarBase
print	src/ramulator_sim/StatType.h	/^  virtual void print(std::ofstream& file) {};$/;"	f	class:Stats_Ram::Stat
print	src/ramulator_sim/StatType.h	/^  void print(std::ofstream& file) {$/;"	f	class:Stats_Ram::VectorBase
print	src/stream_manager.cc	/^void CUstream_st::print(FILE *fp)$/;"	f	class:CUstream_st
print	src/stream_manager.cc	/^void stream_manager::print( FILE *fp)$/;"	f	class:stream_manager
print	src/stream_manager.cc	/^void stream_operation::print( FILE *fp ) const$/;"	f	class:stream_operation
printContents	src/gpgpu-sim/scoreboard.cc	/^void Scoreboard::printContents() const$/;"	f	class:Scoreboard
printSectionList	libcuda/cuda_runtime_api.cc	/^void printSectionList(std::list<cuobjdumpSection*> sl) {$/;"	f
print_KAIN	src/gpuwattch/processor.h	/^	 void print_KAIN()$/;"	f	class:Processor
print_all_ld	src/gpgpu-sim/visualizer.cc	/^   void print_all_ld(void) {$/;"	f	class:my_time_vector
print_all_st	src/gpgpu-sim/visualizer.cc	/^   void print_all_st(void) {$/;"	f	class:my_time_vector
print_arbiter	src/gpuwattch/cacti/arbiter.cc	/^void MCPAT_Arbiter::print_arbiter()$/;"	f	class:MCPAT_Arbiter
print_basic_block_dot	src/cuda-sim/ptx_ir.cc	/^void function_info::print_basic_block_dot()$/;"	f	class:function_info
print_basic_block_links	src/cuda-sim/ptx_ir.cc	/^void function_info::print_basic_block_links()$/;"	f	class:function_info
print_basic_blocks	src/cuda-sim/ptx_ir.cc	/^void function_info::print_basic_blocks()$/;"	f	class:function_info
print_buffer	src/gpuwattch/cacti/highradix.cc	/^void HighRadix::print_buffer(Component *c)$/;"	f	class:HighRadix
print_cache_stat	src/gpgpu-sim/l2cache.cc	/^void memory_sub_partition::print_cache_stat(unsigned &accesses, unsigned &misses) const$/;"	f	class:memory_sub_partition
print_cache_stats	src/gpgpu-sim/shader.cc	/^void ldst_unit::print_cache_stats( FILE *fp, unsigned& dl1_accesses, unsigned& dl1_misses ) {$/;"	f	class:ldst_unit
print_cache_stats	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::print_cache_stats( FILE *fp, unsigned& dl1_accesses, unsigned& dl1_misses ) {$/;"	f	class:shader_core_ctx
print_cache_stats	src/gpgpu-sim/shader.cc	/^void simt_core_cluster::print_cache_stats( FILE *fp, unsigned& dl1_accesses, unsigned& dl1_misses ) const {$/;"	f	class:simt_core_cluster
print_cmd_trace	src/ramulator_sim/Config.h	/^  bool print_cmd_trace() const {$/;"	f	class:Config
print_cmd_trace	src/ramulator_sim/Controller.h	/^    bool print_cmd_trace = false;$/;"	m	class:Controller
print_cmd_trace	src/ramulator_sim/SpeedyController.h	/^    bool print_cmd_trace = false;$/;"	m	class:SpeedyController
print_cont_stats	src/gpuwattch/cacti/nuca.cc	/^Nuca::print_cont_stats()$/;"	f	class:Nuca
print_crossbar	src/gpuwattch/cacti/crossbar.cc	/^void Crossbar::print_crossbar()$/;"	f	class:Crossbar
print_detail	src/gpuwattch/cacti/cacti_interface.h	/^    int print_detail;$/;"	m	class:InputParameter
print_dist	src/gpgpu-sim/visualizer.cc	/^   void print_dist(void) {$/;"	f	class:my_time_vector
print_dominators	src/cuda-sim/ptx_ir.cc	/^void function_info::print_dominators()$/;"	f	class:function_info
print_dram_stats	src/gpgpu-sim/l2cache.cc	/^void gpgpu_sim::print_dram_stats(FILE *fout) const$/;"	f	class:gpgpu_sim
print_histo	src/gpgpu-sim/stat-tool.cc	/^void thread_CFlocality::print_histo(FILE *fout) const$/;"	f	class:thread_CFlocality
print_histo	src/gpgpu-sim/stat-tool.cc	/^void thread_insn_span::print_histo(FILE *fout) const$/;"	f	class:thread_insn_span
print_ibuffer	src/gpgpu-sim/shader.cc	/^void shd_warp_t::print_ibuffer( FILE *fout ) const$/;"	f	class:shd_warp_t
print_idominators	src/cuda-sim/ptx_ir.cc	/^void function_info::print_idominators()$/;"	f	class:function_info
print_impl	src/stream_manager.cc	/^void stream_manager::print_impl( FILE *fp)$/;"	f	class:stream_manager
print_info	src/cuda-sim/ptx_ir.cc	/^void symbol::print_info(FILE *fp) const$/;"	f	class:symbol
print_input_args	src/gpuwattch/cacti/cacti_interface.h	/^    bool print_input_args;$/;"	m	class:InputParameter
print_insn	src/abstract_hardware_model.h	/^    virtual void print_insn( FILE *fp ) const $/;"	f	class:inst_t
print_insn	src/abstract_hardware_model.h	/^    virtual void print_insn(FILE *fp) const $/;"	f	class:warp_inst_t
print_insn	src/cuda-sim/ptx_ir.cc	/^unsigned function_info::print_insn( unsigned pc, FILE * fp ) const$/;"	f	class:function_info
print_insn	src/cuda-sim/ptx_ir.cc	/^void ptx_instruction::print_insn( FILE *fp ) const$/;"	f	class:ptx_instruction
print_insn	src/cuda-sim/ptx_ir.cc	/^void ptx_instruction::print_insn() const$/;"	f	class:ptx_instruction
print_insn	src/cuda-sim/ptx_sim.cc	/^void ptx_thread_info::print_insn( unsigned pc, FILE * fp ) const$/;"	f	class:ptx_thread_info
print_ipostdominators	src/cuda-sim/ptx_ir.cc	/^void function_info::print_ipostdominators()$/;"	f	class:function_info
print_kain	src/gpgpu-sim/l2cache.h	/^   void print_kain()$/;"	f	class:memory_partition_unit
print_not_completed	src/gpgpu-sim/shader.cc	/^void simt_core_cluster::print_not_completed( FILE *fp ) const$/;"	f	class:simt_core_cluster
print_nuca	src/gpuwattch/cacti/nuca.cc	/^Nuca::print_nuca (nuca_org_t *fr)$/;"	f	class:Nuca
print_port_stats	src/gpgpu-sim/gpu-cache.cc	/^void cache_sub_stats::print_port_stats(FILE *fout, const char *cache_name) const$/;"	f	class:cache_sub_stats
print_postdominators	src/cuda-sim/ptx_ir.cc	/^void function_info::print_postdominators()$/;"	f	class:function_info
print_power_kernel_stats	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::print_power_kernel_stats(double gpu_sim_cycle, double gpu_tot_sim_cycle, double init_value, const std::string & kernel_info_string, bool print_trace)$/;"	f	class:gpgpu_sim_wrapper
print_ptx_file	src/cuda-sim/ptx_loader.cc	/^void print_ptx_file( const char *p, unsigned source_num, const char *filename )$/;"	f
print_ptxinfo	src/cuda-sim/cuda-sim.cc	/^void print_ptxinfo()$/;"	f
print_reg	src/cuda-sim/ptx_sim.cc	/^static void print_reg( FILE *fp, std::string name, ptx_reg_t value, symbol_table *symtab )$/;"	f	file:
print_reg	src/cuda-sim/ptx_sim.cc	/^static void print_reg( std::string name, ptx_reg_t value, symbol_table *symtab )$/;"	f	file:
print_router	src/gpuwattch/cacti/highradix.cc	/^void HighRadix::print_router()$/;"	f	class:HighRadix
print_router	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::print_router()$/;"	f	class:MCPAT_Router
print_set	src/cuda-sim/ptx_ir.cc	/^void print_set(const std::set<int> &A)$/;"	f
print_simulation_time	src/gpgpusim_entrypoint.cc	/^void print_simulation_time()$/;"	f
print_span	src/gpgpu-sim/stat-tool.cc	/^void thread_CFlocality::print_span(FILE *fout) const$/;"	f	class:thread_CFlocality
print_span	src/gpgpu-sim/stat-tool.cc	/^void thread_insn_span::print_span(FILE *fout) const$/;"	f	class:thread_insn_span
print_sparse_histo	src/gpgpu-sim/stat-tool.cc	/^void thread_insn_span::print_sparse_histo(FILE *fout) const$/;"	f	class:thread_insn_span
print_sparse_histo	src/gpgpu-sim/stat-tool.cc	/^void thread_insn_span::print_sparse_histo(gzFile fout) const$/;"	f	class:thread_insn_span
print_splash	src/cuda-sim/cuda-sim.cc	/^void print_splash()$/;"	f
print_stage	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::print_stage(unsigned int stage, FILE *fout ) const$/;"	f	class:shader_core_ctx
print_stat	src/gpgpu-sim/l2cache.cc	/^void memory_partition_unit::print_stat( FILE * fp ) const$/;"	f	class:memory_partition_unit
print_statistics	launcher/mk-sched/mk_scheduler.h	/^  virtual void print_statistics() {}$/;"	f	class:MKScheduler
print_stats	src/gpgpu-sim/gpu-cache.cc	/^void cache_stats::print_stats(FILE *fout, const char *cache_name) const{$/;"	f	class:cache_stats
print_stats	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::print_stats()$/;"	f	class:gpgpu_sim
print_steady_state	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::print_steady_state(int position, double init_val){$/;"	f	class:gpgpu_sim_wrapper
print_to_file	src/gpgpu-sim/visualizer.cc	/^   void print_to_file(FILE *outfile) {$/;"	f	class:my_time_vector
print_to_gzfile	src/gpgpu-sim/visualizer.cc	/^   void print_to_gzfile(gzFile outfile) {$/;"	f	class:my_time_vector
print_trace_files	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::print_trace_files()$/;"	f	class:gpgpu_sim_wrapper
print_usage	src/gpuwattch/main.cc	/^void print_usage(char * argv0)$/;"	f
print_visualizer	src/gpgpu-sim/stat-tool.cc	/^void linear_histogram_logger::print_visualizer(FILE *fout)$/;"	f	class:linear_histogram_logger
print_visualizer	src/gpgpu-sim/stat-tool.cc	/^void linear_histogram_logger::print_visualizer(gzFile fout)$/;"	f	class:linear_histogram_logger
print_visualizer	src/gpgpu-sim/stat-tool.cc	/^void thread_CFlocality::print_visualizer(FILE *fout)  $/;"	f	class:thread_CFlocality
print_visualizer	src/gpgpu-sim/stat-tool.cc	/^void thread_CFlocality::print_visualizer(gzFile fout)$/;"	f	class:thread_CFlocality
print_visualizer	src/gpgpu-sim/stat-tool.h	/^   void print_visualizer(FILE *fout) const {$/;"	f	class:linear_histogram_snapshot
print_visualizer	src/gpgpu-sim/stat-tool.h	/^   void print_visualizer(gzFile fout) const {$/;"	f	class:linear_histogram_snapshot
print_wire	src/gpuwattch/cacti/wire.cc	/^Wire::print_wire()$/;"	f	class:Wire
print_wrapup	launcher/launcher_option_parser.cc	/^LauncherOptionParser::print_wrapup() const$/;"	f	class:LauncherOptionParser
printall	src/ramulator_sim/StatType.h	/^  void printall() {$/;"	f	class:Stats_Ram::StatList
printdesc	src/ramulator_sim/StatType.h	/^  virtual void printdesc(std::ofstream& file) {$/;"	f	class:Stats_Ram::Stat
printname	src/ramulator_sim/StatType.h	/^  virtual void printname(std::ofstream& file) {$/;"	f	class:Stats_Ram::Stat
prmt_impl	src/cuda-sim/instructions.cc	/^void prmt_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
probe	src/gpgpu-sim/gpu-cache.cc	/^bool mshr_table::probe( new_addr_type block_addr ) const{$/;"	f	class:mshr_table
probe	src/gpgpu-sim/gpu-cache.cc	/^enum cache_request_status tag_array::probe( new_addr_type addr, unsigned &idx ) const {$/;"	f	class:tag_array
proc	src/gpuwattch/gpgpu_sim_wrapper.h	/^	Processor* proc;$/;"	m	class:gpgpu_sim_wrapper
proc_power	src/gpuwattch/gpgpu_sim_wrapper.h	/^    double proc_power;$/;"	m	class:gpgpu_sim_wrapper
procdynp	src/gpuwattch/processor.h	/^    ProcParam procdynp;$/;"	m	class:Processor
process_banks	src/gpgpu-sim/shader.h	/^   void process_banks()$/;"	f	class:opndcoll_rfu_t
process_cache_access	src/gpgpu-sim/shader.cc	/^ldst_unit::process_cache_access( cache_t* cache,$/;"	f	class:ldst_unit
process_ind	src/gpuwattch/logic.h	/^	bool process_ind;$/;"	m	class:Pipeline
process_memory_access_queue	src/gpgpu-sim/shader.cc	/^mem_stage_stall_type ldst_unit::process_memory_access_queue( cache_t *cache, warp_inst_t &inst )$/;"	f	class:ldst_unit
process_message	launcher/simulator.cc	/^Simulator::process_message(ChildProcess* process)$/;"	f	class:Simulator
process_tag_probe	src/gpgpu-sim/gpu-cache.cc	/^data_cache::process_tag_probe( bool wr,$/;"	f	class:data_cache
progress_policy	launcher/mk-sched/mk_scheduler.h	/^  ProgressPolicy progress_policy;$/;"	m	class:DynamicScheduler
pruneSectionList	libcuda/cuda_runtime_api.cc	/^std::list<cuobjdumpSection*> pruneSectionList(std::list<cuobjdumpSection*> cuobjdumpSectionList,  unsigned forced_max_capability) {$/;"	f
ptr_align_spec	src/cuda-sim/ptx.y	/^ptr_align_spec: ALIGN_DIRECTIVE INT_OPERAND$/;"	l
ptr_space_spec	src/cuda-sim/ptx.y	/^ptr_space_spec: GLOBAL_DIRECTIVE { add_ptr_spec(global_space); }$/;"	l
ptr_spec	src/cuda-sim/ptx.y	/^ptr_spec: \/*empty*\/$/;"	l
ptr_value	build/src/cuda-sim/ptx.tab.c	/^  void * ptr_value;$/;"	m	union:YYSTYPE	file:
ptr_value	build/src/cuda-sim/ptx.tab.h	/^  void * ptr_value;$/;"	m	union:YYSTYPE
ptx__create_buffer	build/src/cuda-sim/lex.ptx_.c	/^    YY_BUFFER_STATE ptx__create_buffer  (FILE * file, int  size )$/;"	f
ptx__delete_buffer	build/src/cuda-sim/lex.ptx_.c	/^    void ptx__delete_buffer (YY_BUFFER_STATE  b )$/;"	f
ptx__flex_debug	build/src/cuda-sim/lex.ptx_.c	/^int ptx__flex_debug = 0;$/;"	v
ptx__flush_buffer	build/src/cuda-sim/lex.ptx_.c	/^    void ptx__flush_buffer (YY_BUFFER_STATE  b )$/;"	f
ptx__init_buffer	build/src/cuda-sim/lex.ptx_.c	/^    static void ptx__init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	file:
ptx__load_buffer_state	build/src/cuda-sim/lex.ptx_.c	/^static void ptx__load_buffer_state  (void)$/;"	f	file:
ptx__scan_buffer	build/src/cuda-sim/lex.ptx_.c	/^YY_BUFFER_STATE ptx__scan_buffer  (char * base, yy_size_t  size )$/;"	f
ptx__scan_bytes	build/src/cuda-sim/lex.ptx_.c	/^YY_BUFFER_STATE ptx__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )$/;"	f
ptx__scan_string	build/src/cuda-sim/lex.ptx_.c	/^YY_BUFFER_STATE ptx__scan_string (yyconst char * yystr )$/;"	f
ptx__switch_to_buffer	build/src/cuda-sim/lex.ptx_.c	/^    void ptx__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f
ptx_alloc	build/src/cuda-sim/lex.ptx_.c	/^void *ptx_alloc (yy_size_t  size )$/;"	f
ptx_assemble	src/cuda-sim/cuda-sim.cc	/^void function_info::ptx_assemble()$/;"	f	class:function_info
ptx_begin	src/cuda-sim/ptx_ir.h	/^   ptx_instruction* ptx_begin;$/;"	m	struct:basic_block_t
ptx_cta_info	src/cuda-sim/ptx_sim.cc	/^ptx_cta_info::ptx_cta_info( unsigned pid, unsigned sm_idx )$/;"	f	class:ptx_cta_info
ptx_cta_info	src/cuda-sim/ptx_sim.h	/^class ptx_cta_info {$/;"	c
ptx_cta_lookup	src/cuda-sim/cuda-sim.cc	/^std::map<unsigned, std::map<unsigned,ptx_cta_info*> > SimulationInitializer::ptx_cta_lookup;$/;"	m	class:SimulationInitializer	file:
ptx_cta_lookup	src/cuda-sim/cuda-sim.h	/^  static std::map<unsigned, std::map<unsigned,ptx_cta_info*> > ptx_cta_lookup;$/;"	m	class:SimulationInitializer
ptx_cta_saved	src/cuda-sim/cuda-sim.cc	/^std::map<unsigned, std::map<unsigned,ptx_cta_info*> > SimulationInitializer::ptx_cta_saved;$/;"	m	class:SimulationInitializer	file:
ptx_cta_saved	src/cuda-sim/cuda-sim.h	/^  static std::map<unsigned, std::map<unsigned, ptx_cta_info*> > ptx_cta_saved;$/;"	m	class:SimulationInitializer
ptx_debug_exec_dump_cond	src/cuda-sim/cuda-sim.cc	/^bool ptx_debug_exec_dump_cond(int thd_uid, addr_t pc)$/;"	f
ptx_end	src/cuda-sim/ptx_ir.h	/^   ptx_instruction* ptx_end;$/;"	m	struct:basic_block_t
ptx_ensure_buffer_stack	build/src/cuda-sim/lex.ptx_.c	/^static void ptx_ensure_buffer_stack (void)$/;"	f	file:
ptx_error	build/src/cuda-sim/lex.ptx_.c	/^int ptx_error( const char *s )$/;"	f
ptx_exec_inst	src/cuda-sim/cuda-sim.cc	/^void ptx_thread_info::ptx_exec_inst( warp_inst_t &inst, unsigned lane_id)$/;"	f	class:ptx_thread_info
ptx_fetch_inst	src/cuda-sim/cuda-sim.cc	/^const warp_inst_t *ptx_fetch_inst( address_type pc )$/;"	f
ptx_fetch_inst	src/cuda-sim/cuda-sim.cc	/^void ptx_thread_info::ptx_fetch_inst( inst_t &inst ) const$/;"	f	class:ptx_thread_info
ptx_file_line	src/cuda-sim/ptx-stats.cc	/^    ptx_file_line(const char* s, int l) {$/;"	f	class:ptx_file_line
ptx_file_line	src/cuda-sim/ptx-stats.cc	/^class ptx_file_line $/;"	c	file:
ptx_file_line_stats	src/cuda-sim/ptx-stats.cc	/^    ptx_file_line_stats() $/;"	f	class:ptx_file_line_stats
ptx_file_line_stats	src/cuda-sim/ptx-stats.cc	/^class ptx_file_line_stats$/;"	c	file:
ptx_file_line_stats_add_dram_traffic	src/cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_add_dram_traffic(unsigned pc, unsigned dram_traffic)$/;"	f
ptx_file_line_stats_add_exec_count	src/cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_add_exec_count(const ptx_instruction *pInsn)$/;"	f
ptx_file_line_stats_add_inflight_memory_insn	src/cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_add_inflight_memory_insn(int sc_id, unsigned pc)$/;"	f
ptx_file_line_stats_add_latency	src/cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_add_latency(unsigned pc, unsigned latency)$/;"	f
ptx_file_line_stats_add_smem_bank_conflict	src/cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_add_smem_bank_conflict(unsigned pc, unsigned n_way_bkconflict)$/;"	f
ptx_file_line_stats_add_uncoalesced_gmem	src/cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_add_uncoalesced_gmem(unsigned pc, unsigned n_access)$/;"	f
ptx_file_line_stats_add_warp_divergence	src/cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_add_warp_divergence(unsigned pc, unsigned n_way_divergence)$/;"	f
ptx_file_line_stats_commit_exposed_latency	src/cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_commit_exposed_latency(int sc_id, int exposed_latency)$/;"	f
ptx_file_line_stats_create_exposed_latency_tracker	src/cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_create_exposed_latency_tracker(int n_shader_cores)$/;"	f
ptx_file_line_stats_map_t	src/cuda-sim/ptx-stats.cc	/^typedef tr1_hash_map<ptx_file_line, ptx_file_line_stats, hash_ptx_file_line> ptx_file_line_stats_map_t;$/;"	t	file:
ptx_file_line_stats_map_t	src/cuda-sim/ptx-stats.cc	/^typedef tr1_hash_map<ptx_file_line, ptx_file_line_stats> ptx_file_line_stats_map_t;$/;"	t	file:
ptx_file_line_stats_options	src/cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_options(option_parser_t opp)$/;"	f
ptx_file_line_stats_sub_inflight_memory_insn	src/cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_sub_inflight_memory_insn(int sc_id, unsigned pc)$/;"	f
ptx_file_line_stats_tracker	src/cuda-sim/ptx-stats.cc	/^static ptx_file_line_stats_map_t ptx_file_line_stats_tracker;$/;"	v	file:
ptx_file_line_stats_write_file	src/cuda-sim/ptx-stats.cc	/^void ptx_file_line_stats_write_file()$/;"	f
ptx_free	build/src/cuda-sim/lex.ptx_.c	/^void ptx_free (void * ptr )$/;"	f
ptx_get_debug	build/src/cuda-sim/lex.ptx_.c	/^int ptx_get_debug  (void)$/;"	f
ptx_get_in	build/src/cuda-sim/lex.ptx_.c	/^FILE *ptx_get_in  (void)$/;"	f
ptx_get_insn_str	src/cuda-sim/cuda-sim.cc	/^std::string ptx_get_insn_str( address_type pc )$/;"	f
ptx_get_leng	build/src/cuda-sim/lex.ptx_.c	/^int ptx_get_leng  (void)$/;"	f
ptx_get_lineno	build/src/cuda-sim/lex.ptx_.c	/^int ptx_get_lineno  (void)$/;"	f
ptx_get_out	build/src/cuda-sim/lex.ptx_.c	/^FILE *ptx_get_out  (void)$/;"	f
ptx_get_text	build/src/cuda-sim/lex.ptx_.c	/^char *ptx_get_text  (void)$/;"	f
ptx_in	build/src/cuda-sim/lex.ptx_.c	/^FILE *ptx_in = (FILE *) 0, *ptx_out = (FILE *) 0;$/;"	v
ptx_inflight_memory_insn_tracker	src/cuda-sim/ptx-stats.cc	/^class ptx_inflight_memory_insn_tracker$/;"	c	file:
ptx_inflight_memory_insns	src/cuda-sim/ptx-stats.cc	/^    insn_count_map ptx_inflight_memory_insns;$/;"	m	class:ptx_inflight_memory_insn_tracker	file:
ptx_inst_debug_file	src/abstract_hardware_model.h	/^    FILE* ptx_inst_debug_file;$/;"	m	class:gpgpu_t
ptx_instruction	src/cuda-sim/ptx_ir.cc	/^ptx_instruction::ptx_instruction( int opcode, $/;"	f	class:ptx_instruction
ptx_instruction	src/cuda-sim/ptx_ir.h	/^class ptx_instruction : public warp_inst_t {$/;"	c
ptx_instruction_lookup	src/cuda-sim/ptx_parser.cc	/^const ptx_instruction *ptx_instruction_lookup( const char *filename, unsigned linenumber )$/;"	f
ptx_ir_INCLUDED	src/cuda-sim/ptx_ir.h	29;"	d
ptx_kernel_nregs	src/cuda-sim/ptx_ir.cc	/^unsigned ptx_kernel_nregs( void *kernel_impl )$/;"	f
ptx_kernel_shmem_size	src/cuda-sim/ptx_ir.cc	/^unsigned ptx_kernel_shmem_size( void *kernel_impl )$/;"	f
ptx_leng	build/src/cuda-sim/lex.ptx_.c	/^int ptx_leng;$/;"	v
ptx_lex_destroy	build/src/cuda-sim/lex.ptx_.c	/^int ptx_lex_destroy  (void)$/;"	f
ptx_line_stats_filename	src/cuda-sim/ptx-stats.cc	/^char * ptx_line_stats_filename = NULL;$/;"	v
ptx_lineno	build/src/cuda-sim/lex.ptx_.c	/^int ptx_lineno = 1;$/;"	v
ptx_opcocde_latency_options	src/cuda-sim/cuda-sim.cc	/^void ptx_opcocde_latency_options (option_parser_t opp) {$/;"	f
ptx_out	build/src/cuda-sim/lex.ptx_.c	/^FILE *ptx_in = (FILE *) 0, *ptx_out = (FILE *) 0;$/;"	v
ptx_parser_INCLUDED	src/cuda-sim/ptx_parser.h	29;"	d
ptx_pop_buffer_state	build/src/cuda-sim/lex.ptx_.c	/^void ptx_pop_buffer_state (void)$/;"	f
ptx_print_insn	src/cuda-sim/cuda-sim.cc	/^void ptx_print_insn( address_type pc, FILE *fp )$/;"	f
ptx_push_buffer_state	build/src/cuda-sim/lex.ptx_.c	/^void ptx_push_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f
ptx_realloc	build/src/cuda-sim/lex.ptx_.c	/^void *ptx_realloc  (void * ptr, yy_size_t  size )$/;"	f
ptx_reg_options	src/cuda-sim/ptx_loader.cc	/^void ptx_reg_options(option_parser_t opp)$/;"	f
ptx_reg_t	src/cuda-sim/ptx_sim.h	/^   ptx_reg_t() {$/;"	f	union:ptx_reg_t
ptx_reg_t	src/cuda-sim/ptx_sim.h	/^   ptx_reg_t(unsigned x) $/;"	f	union:ptx_reg_t
ptx_reg_t	src/cuda-sim/ptx_sim.h	/^union ptx_reg_t {$/;"	u
ptx_restart	build/src/cuda-sim/lex.ptx_.c	/^    void ptx_restart  (FILE * input_file )$/;"	f
ptx_round	src/cuda-sim/instructions.cc	/^void ptx_round(ptx_reg_t& data, int rounding_mode, int type)$/;"	f
ptx_saturate	src/cuda-sim/instructions.cc	/^void ptx_saturate(ptx_reg_t& data, int saturation_mode, int type)$/;"	f
ptx_set_debug	build/src/cuda-sim/lex.ptx_.c	/^void ptx_set_debug (int  bdebug )$/;"	f
ptx_set_in	build/src/cuda-sim/lex.ptx_.c	/^void ptx_set_in (FILE *  in_str )$/;"	f
ptx_set_lineno	build/src/cuda-sim/lex.ptx_.c	/^void ptx_set_lineno (int  line_number )$/;"	f
ptx_set_out	build/src/cuda-sim/lex.ptx_.c	/^void ptx_set_out (FILE *  out_str )$/;"	f
ptx_set_tex_cache_linesize	src/abstract_hardware_model.cc	/^void gpgpu_functional_sim_config::ptx_set_tex_cache_linesize(unsigned linesize)$/;"	f	class:gpgpu_functional_sim_config
ptx_sim_h_INCLUDED	src/cuda-sim/ptx_sim.h	28;"	d
ptx_sim_init_thread	src/cuda-sim/cuda-sim.cc	/^SimulationInitializer::ptx_sim_init_thread( kernel_info_t &kernel,$/;"	f	class:SimulationInitializer
ptx_sim_kernel_info	src/cuda-sim/cuda-sim.cc	/^const struct gpgpu_ptx_sim_kernel_info* ptx_sim_kernel_info(const function_info *kernel) $/;"	f
ptx_tex_regs	src/cuda-sim/instructions.cc	/^ptx_reg_t* ptx_tex_regs = NULL;$/;"	v
ptx_text	build/src/cuda-sim/lex.ptx_.c	/^char *ptx_text;$/;"	v
ptx_thread_done	src/abstract_hardware_model.cc	/^bool  core_t::ptx_thread_done( unsigned hw_thread_id ) const  $/;"	f	class:core_t
ptx_thread_info	src/cuda-sim/ptx_sim.cc	/^ptx_thread_info::ptx_thread_info( kernel_info_t &kernel )$/;"	f	class:ptx_thread_info
ptx_thread_info	src/cuda-sim/ptx_sim.h	/^class ptx_thread_info {$/;"	c
ptx_version	src/abstract_hardware_model.h	/^   unsigned ptx_version;$/;"	m	struct:gpgpu_ptx_sim_kernel_info
ptx_version	src/cuda-sim/ptx_sim.h	/^      ptx_version()$/;"	f	class:ptx_version
ptx_version	src/cuda-sim/ptx_sim.h	/^      ptx_version(float ver, unsigned extensions)$/;"	f	class:ptx_version
ptx_version	src/cuda-sim/ptx_sim.h	/^class ptx_version {$/;"	c
ptx_wrap	build/src/cuda-sim/lex.ptx_.c	376;"	d	file:
ptxfilename	libcuda/cuda_runtime_api.cc	/^    std::string ptxfilename;$/;"	m	class:cuobjdumpPTXSection	file:
ptxinfo__create_buffer	build/src/cuda-sim/lex.ptxinfo_.c	/^    YY_BUFFER_STATE ptxinfo__create_buffer  (FILE * file, int  size )$/;"	f
ptxinfo__delete_buffer	build/src/cuda-sim/lex.ptxinfo_.c	/^    void ptxinfo__delete_buffer (YY_BUFFER_STATE  b )$/;"	f
ptxinfo__flex_debug	build/src/cuda-sim/lex.ptxinfo_.c	/^int ptxinfo__flex_debug = 0;$/;"	v
ptxinfo__flush_buffer	build/src/cuda-sim/lex.ptxinfo_.c	/^    void ptxinfo__flush_buffer (YY_BUFFER_STATE  b )$/;"	f
ptxinfo__init_buffer	build/src/cuda-sim/lex.ptxinfo_.c	/^    static void ptxinfo__init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	file:
ptxinfo__load_buffer_state	build/src/cuda-sim/lex.ptxinfo_.c	/^static void ptxinfo__load_buffer_state  (void)$/;"	f	file:
ptxinfo__scan_buffer	build/src/cuda-sim/lex.ptxinfo_.c	/^YY_BUFFER_STATE ptxinfo__scan_buffer  (char * base, yy_size_t  size )$/;"	f
ptxinfo__scan_bytes	build/src/cuda-sim/lex.ptxinfo_.c	/^YY_BUFFER_STATE ptxinfo__scan_bytes  (yyconst char * yybytes, int  _yybytes_len )$/;"	f
ptxinfo__scan_string	build/src/cuda-sim/lex.ptxinfo_.c	/^YY_BUFFER_STATE ptxinfo__scan_string (yyconst char * yystr )$/;"	f
ptxinfo__switch_to_buffer	build/src/cuda-sim/lex.ptxinfo_.c	/^    void ptxinfo__switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f
ptxinfo_addinfo	launcher/launcher.cc	/^ptxinfo_addinfo()$/;"	f
ptxinfo_alloc	build/src/cuda-sim/lex.ptxinfo_.c	/^void *ptxinfo_alloc (yy_size_t  size )$/;"	f
ptxinfo_cmem	src/cuda-sim/cuda-sim.cc	/^void ptxinfo_cmem( unsigned nbytes, unsigned bank )$/;"	f
ptxinfo_col	build/src/cuda-sim/lex.ptxinfo_.c	/^unsigned ptxinfo_col = 0;$/;"	v
ptxinfo_ensure_buffer_stack	build/src/cuda-sim/lex.ptxinfo_.c	/^static void ptxinfo_ensure_buffer_stack (void)$/;"	f	file:
ptxinfo_error	build/src/cuda-sim/lex.ptxinfo_.c	/^int ptxinfo_error( const char *s )$/;"	f
ptxinfo_free	build/src/cuda-sim/lex.ptxinfo_.c	/^void ptxinfo_free (void * ptr )$/;"	f
ptxinfo_function	src/cuda-sim/cuda-sim.cc	/^void ptxinfo_function(const char *fname )$/;"	f
ptxinfo_get_debug	build/src/cuda-sim/lex.ptxinfo_.c	/^int ptxinfo_get_debug  (void)$/;"	f
ptxinfo_get_in	build/src/cuda-sim/lex.ptxinfo_.c	/^FILE *ptxinfo_get_in  (void)$/;"	f
ptxinfo_get_leng	build/src/cuda-sim/lex.ptxinfo_.c	/^int ptxinfo_get_leng  (void)$/;"	f
ptxinfo_get_lineno	build/src/cuda-sim/lex.ptxinfo_.c	/^int ptxinfo_get_lineno  (void)$/;"	f
ptxinfo_get_out	build/src/cuda-sim/lex.ptxinfo_.c	/^FILE *ptxinfo_get_out  (void)$/;"	f
ptxinfo_get_text	build/src/cuda-sim/lex.ptxinfo_.c	/^char *ptxinfo_get_text  (void)$/;"	f
ptxinfo_in	build/src/cuda-sim/lex.ptxinfo_.c	/^FILE *ptxinfo_in = (FILE *) 0, *ptxinfo_out = (FILE *) 0;$/;"	v
ptxinfo_leng	build/src/cuda-sim/lex.ptxinfo_.c	/^int ptxinfo_leng;$/;"	v
ptxinfo_lex_destroy	build/src/cuda-sim/lex.ptxinfo_.c	/^int ptxinfo_lex_destroy  (void)$/;"	f
ptxinfo_linebuf	build/src/cuda-sim/lex.ptxinfo_.c	/^char ptxinfo_linebuf[LINEBUF_SIZE];$/;"	v
ptxinfo_lineno	build/src/cuda-sim/lex.ptxinfo_.c	/^int ptxinfo_lineno = 1;$/;"	v
ptxinfo_lmem	src/cuda-sim/cuda-sim.cc	/^void ptxinfo_lmem( unsigned declared, unsigned system )$/;"	f
ptxinfo_opencl_addinfo	src/cuda-sim/cuda-sim.cc	/^void ptxinfo_opencl_addinfo( std::map<std::string,function_info*> &kernels )$/;"	f
ptxinfo_out	build/src/cuda-sim/lex.ptxinfo_.c	/^FILE *ptxinfo_in = (FILE *) 0, *ptxinfo_out = (FILE *) 0;$/;"	v
ptxinfo_pop_buffer_state	build/src/cuda-sim/lex.ptxinfo_.c	/^void ptxinfo_pop_buffer_state (void)$/;"	f
ptxinfo_push_buffer_state	build/src/cuda-sim/lex.ptxinfo_.c	/^void ptxinfo_push_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f
ptxinfo_realloc	build/src/cuda-sim/lex.ptxinfo_.c	/^void *ptxinfo_realloc  (void * ptr, yy_size_t  size )$/;"	f
ptxinfo_regs	src/cuda-sim/cuda-sim.cc	/^void ptxinfo_regs( unsigned nregs )$/;"	f
ptxinfo_restart	build/src/cuda-sim/lex.ptxinfo_.c	/^    void ptxinfo_restart  (FILE * input_file )$/;"	f
ptxinfo_set_debug	build/src/cuda-sim/lex.ptxinfo_.c	/^void ptxinfo_set_debug (int  bdebug )$/;"	f
ptxinfo_set_in	build/src/cuda-sim/lex.ptxinfo_.c	/^void ptxinfo_set_in (FILE *  in_str )$/;"	f
ptxinfo_set_lineno	build/src/cuda-sim/lex.ptxinfo_.c	/^void ptxinfo_set_lineno (int  line_number )$/;"	f
ptxinfo_set_out	build/src/cuda-sim/lex.ptxinfo_.c	/^void ptxinfo_set_out (FILE *  out_str )$/;"	f
ptxinfo_smem	src/cuda-sim/cuda-sim.cc	/^void ptxinfo_smem( unsigned declared, unsigned system )$/;"	f
ptxinfo_text	build/src/cuda-sim/lex.ptxinfo_.c	/^char *ptxinfo_text;$/;"	v
ptxinfo_wrap	build/src/cuda-sim/lex.ptxinfo_.c	376;"	d	file:
pure_cam	src/gpuwattch/cacti/Ucache.h	/^  bool     pure_cam;$/;"	m	struct:calc_time_mt_wrapper_struct
pure_cam	src/gpuwattch/cacti/cacti_interface.h	/^    bool     pure_cam;$/;"	m	class:InputParameter
pure_cam	src/gpuwattch/cacti/mat.h	/^    bool     is_dram,is_fa, pure_cam, camFlag;$/;"	m	class:Mat
pure_cam	src/gpuwattch/cacti/parameter.h	/^    bool pure_cam;$/;"	m	class:DynamicParameter
pure_ram	src/gpuwattch/cacti/Ucache.h	/^  bool     pure_ram;$/;"	m	struct:calc_time_mt_wrapper_struct
pure_ram	src/gpuwattch/cacti/cacti_interface.h	/^    bool     pure_ram;$/;"	m	class:InputParameter
pure_ram	src/gpuwattch/cacti/parameter.h	/^    bool pure_ram;$/;"	m	class:DynamicParameter
push	src/gpgpu-sim/delayqueue.h	/^   void push(T* data ) $/;"	f	class:fifo_pipeline
push	src/gpgpu-sim/gpu-cache.h	/^        unsigned push( const T &e )$/;"	f	class:tex_cache::fifo
push	src/gpgpu-sim/l2cache.cc	/^void memory_sub_partition::push( mem_fetch* req, unsigned long long cycle ) $/;"	f	class:memory_sub_partition
push	src/gpgpu-sim/l2cache.h	/^    virtual void push(mem_fetch *mf) $/;"	f	class:L2interface
push	src/gpgpu-sim/shader.h	/^    virtual void push(mem_fetch *mf) $/;"	f	class:shader_memory_interface
push	src/gpgpu-sim/shader.h	/^    virtual void push(mem_fetch *mf)$/;"	f	class:perfect_memory_interface
push	src/ramulator_sim/gpu_wrapper.cpp	/^void GpuWrapper::push(mem_fetch* mf)$/;"	f	class:GpuWrapper
push	src/stream_manager.cc	/^void CUstream_st::push( const stream_operation &op )$/;"	f	class:CUstream_st
push	src/stream_manager.cc	/^void stream_manager::push( stream_operation op )$/;"	f	class:stream_manager
push_breakaddr	src/cuda-sim/ptx_sim.cc	/^void ptx_thread_info::push_breakaddr(const operand_info &breakaddr) $/;"	f	class:ptx_thread_info
push_flit_data	src/intersim/interconnect_interface.cpp	/^   void push_flit_data(void* data,bool is_tail) {$/;"	f	class:boundary_buf
push_response_fifo	src/gpgpu-sim/shader.h	/^    void push_response_fifo(class mem_fetch *mf) {$/;"	f	class:simt_core_cluster
push_stack	src/gpgpu-sim/stack.cc	/^void push_stack(Stack *S, address_type val) {$/;"	f
pwr_cmp_label	src/gpuwattch/gpgpu_sim_wrapper.cc	/^static const char * pwr_cmp_label[] = {"IBP,", "ICP,", "DCP,", "TCP,", "CCP,", "SHRDP,", "RFP,", "SPP,",$/;"	v	file:
pwr_cmp_t	src/gpuwattch/gpgpu_sim_wrapper.cc	/^enum pwr_cmp_t {$/;"	g	file:
pwr_core_stat	src/gpgpu-sim/power_stat.h	/^   power_core_stat_t * pwr_core_stat;$/;"	m	class:power_stat_t
pwr_counter	src/gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector<double> pwr_counter;$/;"	m	class:gpgpu_sim_wrapper
pwr_mem_stat	src/gpgpu-sim/power_stat.h	/^   power_mem_stat_t * pwr_mem_stat;$/;"	m	class:power_stat_t
q	src/ramulator_sim/Controller.h	/^        list<Request> q;$/;"	m	struct:Controller::Queue
qtree_nca	src/intersim2/routefunc.cpp	/^void qtree_nca( const Router *r, const Flit *f,$/;"	f
queue_capacity	src/ramulator_sim/SpeedyController.h	/^    const unsigned int queue_capacity = 32;$/;"	m	class:SpeedyController
queue_length_based	src/intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_based, hop_count_based, sequence_based, none };$/;"	e	enum:TrafficManager::ePriority
queue_length_based	src/intersim2/vc.hpp	/^  enum ePrioType { local_age_based, queue_length_based, hop_count_based, none, other };$/;"	e	enum:VC::ePrioType
r_buff	src/gpuwattch/cacti/highradix.h	/^    Mat *inp_buff, *r_buff, *c_buff;$/;"	m	class:HighRadix
r_load_nand2_path_out	src/gpuwattch/cacti/decoder.h	/^  double r_load_nand2_path_out;$/;"	m	class:PredecBlkDrv
r_load_nand3_path_out	src/gpuwattch/cacti/decoder.h	/^  double r_load_nand3_path_out;$/;"	m	class:PredecBlkDrv
r_predec	src/gpuwattch/cacti/mat.h	/^    Predec * r_predec;$/;"	m	class:Mat
r_return_queue_pop	src/ramulator_sim/gpu_wrapper.cpp	/^class mem_fetch* GpuWrapper::r_return_queue_pop() const$/;"	f	class:GpuWrapper
r_return_queue_top	src/ramulator_sim/gpu_wrapper.cpp	/^class mem_fetch* GpuWrapper::r_return_queue_top() const$/;"	f	class:GpuWrapper
r_returnq	src/ramulator_sim/Controller.h	/^    fifo_pipeline<mem_fetch> *r_returnq;$/;"	m	class:Controller
r_returnq	src/ramulator_sim/gpu_wrapper.h	/^	fifo_pipeline<mem_fetch> *r_returnq;$/;"	m	class:GpuWrapper
r_returnq_full	src/ramulator_sim/gpu_wrapper.cpp	/^bool GpuWrapper::r_returnq_full() const$/;"	f	class:GpuWrapper
r_wire_load	src/gpuwattch/cacti/decoder.h	/^  double r_wire_load;$/;"	m	class:Driver
ram_cell_tech_type	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int ram_cell_tech_type;$/;"	m	class:InputParameter
ram_cell_tech_type	src/gpuwattch/cacti/parameter.h	/^    uint32_t ram_cell_tech_type;$/;"	m	class:DynamicParameter
ram_cell_tech_type_num	src/gpuwattch/cacti/const.h	/^enum ram_cell_tech_type_num$/;"	g
ram_wl_stitching_overhead_	src/gpuwattch/cacti/parameter.h	/^  double ram_wl_stitching_overhead_;$/;"	m	class:TechnologyParameter
ramulator_active_cycles	src/ramulator_sim/Memory.h	/^    ScalarStat ramulator_active_cycles;$/;"	m	class:Memory
ran_arr_buf	src/intersim/rng.cpp	/^long ran_arr_buf[QUALITY];$/;"	v
ran_arr_buf	src/intersim2/rng.c	/^long ran_arr_buf[QUALITY];$/;"	v
ran_arr_cycle	src/intersim/rng.cpp	/^long ran_arr_cycle()$/;"	f
ran_arr_cycle	src/intersim2/rng.c	/^long ran_arr_cycle()$/;"	f
ran_arr_dummy	src/intersim/rng.cpp	/^long ran_arr_dummy=-1, ran_arr_started=-1;$/;"	v
ran_arr_dummy	src/intersim2/rng.c	/^long ran_arr_dummy=-1, ran_arr_started=-1;$/;"	v
ran_arr_next	src/intersim/rng.cpp	88;"	d	file:
ran_arr_next	src/intersim2/rng.c	86;"	d	file:
ran_arr_ptr	src/intersim/rng.cpp	/^long *ran_arr_ptr=&ran_arr_dummy; \/* the next random number, or -1 *\/$/;"	v
ran_arr_ptr	src/intersim2/rng.c	/^long *ran_arr_ptr=&ran_arr_dummy; \/* the next random number, or -1 *\/$/;"	v
ran_arr_started	src/intersim/rng.cpp	/^long ran_arr_dummy=-1, ran_arr_started=-1;$/;"	v
ran_arr_started	src/intersim2/rng.c	/^long ran_arr_dummy=-1, ran_arr_started=-1;$/;"	v
ran_array	src/intersim/rng.cpp	/^void ran_array(long aa[],int n)$/;"	f
ran_array	src/intersim2/rng.c	/^void ran_array(long aa[],int n)$/;"	f
ran_next	src/intersim/rng_wrapper.cpp	/^long ran_next( )$/;"	f
ran_next	src/intersim2/rng_wrapper.cpp	/^long ran_next( )$/;"	f
ran_start	src/intersim/rng.cpp	/^void ran_start(long seed)$/;"	f
ran_start	src/intersim2/rng.c	/^void ran_start(long seed)$/;"	f
ran_u	src/intersim/rng_double.cpp	/^double ran_u[KK];           \/* the generator state *\/$/;"	v
ran_u	src/intersim2/rng-double.c	/^double ran_u[KK];           \/* the generator state *\/$/;"	v
ran_x	src/intersim/rng.cpp	/^long ran_x[KK];                    \/* the generator state *\/$/;"	v
ran_x	src/intersim2/rng.c	/^long ran_x[KK];                    \/* the generator state *\/$/;"	v
rand_min_intr_mesh	src/intersim/routefunc.cpp	/^int rand_min_intr_mesh( int src, int dest )$/;"	f
rand_min_intr_mesh	src/intersim2/routefunc.cpp	/^int rand_min_intr_mesh( int src, int dest )$/;"	f
random_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool random_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
randomize	src/intersim2/traffic.cpp	/^void RandomPermutationTrafficPattern::randomize(int seed)$/;"	f	class:RandomPermutationTrafficPattern
randperm	src/intersim/traffic.cpp	/^int randperm( int source, int total_nodes )$/;"	f
ranf_arr_buf	src/intersim/rng_double.cpp	/^double ranf_arr_buf[QUALITY];$/;"	v
ranf_arr_buf	src/intersim2/rng-double.c	/^double ranf_arr_buf[QUALITY];$/;"	v
ranf_arr_cycle	src/intersim/rng_double.cpp	/^double ranf_arr_cycle()$/;"	f
ranf_arr_cycle	src/intersim2/rng-double.c	/^double ranf_arr_cycle()$/;"	f
ranf_arr_dummy	src/intersim/rng_double.cpp	/^double ranf_arr_dummy=-1.0, ranf_arr_started=-1.0;$/;"	v
ranf_arr_dummy	src/intersim2/rng-double.c	/^double ranf_arr_dummy=-1.0, ranf_arr_started=-1.0;$/;"	v
ranf_arr_next	src/intersim/rng_double.cpp	91;"	d	file:
ranf_arr_next	src/intersim2/rng-double.c	89;"	d	file:
ranf_arr_ptr	src/intersim/rng_double.cpp	/^double *ranf_arr_ptr=&ranf_arr_dummy; \/* the next random fraction, or -1 *\/$/;"	v
ranf_arr_ptr	src/intersim2/rng-double.c	/^double *ranf_arr_ptr=&ranf_arr_dummy; \/* the next random fraction, or -1 *\/$/;"	v
ranf_arr_started	src/intersim/rng_double.cpp	/^double ranf_arr_dummy=-1.0, ranf_arr_started=-1.0;$/;"	v
ranf_arr_started	src/intersim2/rng-double.c	/^double ranf_arr_dummy=-1.0, ranf_arr_started=-1.0;$/;"	v
ranf_array	src/intersim/rng_double.cpp	/^void ranf_array(double aa[], int n)$/;"	f
ranf_array	src/intersim2/rng-double.c	/^void ranf_array(double aa[], int n)$/;"	f
ranf_next	src/intersim/rng_double_wrapper.cpp	/^double ranf_next( )$/;"	f
ranf_next	src/intersim2/rng_double_wrapper.cpp	/^double ranf_next( )$/;"	f
ranf_start	src/intersim/rng_double.cpp	/^void ranf_start(long seed)$/;"	f
ranf_start	src/intersim2/rng-double.c	/^void ranf_start(long seed)$/;"	f
ranks	src/ramulator_sim/Config.h	/^  int ranks;$/;"	m	class:Config
rate	src/ramulator_sim/ALDRAM.h	/^        int rate;$/;"	m	struct:ALDRAM::SpeedEntry
rate	src/ramulator_sim/DDR3.h	/^        int rate;$/;"	m	struct:DDR3::SpeedEntry
rate	src/ramulator_sim/DDR4.h	/^        int rate;$/;"	m	struct:DDR4::SpeedEntry
rate	src/ramulator_sim/DSARP.h	/^        int rate;$/;"	m	struct:DSARP::SpeedEntry
rate	src/ramulator_sim/GDDR5.h	/^        int rate;$/;"	m	struct:GDDR5::SpeedEntry
rate	src/ramulator_sim/HBM.h	/^        int rate;$/;"	m	struct:HBM::SpeedEntry
rate	src/ramulator_sim/LPDDR3.h	/^        int rate;$/;"	m	struct:LPDDR3::SpeedEntry
rate	src/ramulator_sim/LPDDR4.h	/^        int rate;$/;"	m	struct:LPDDR4::SpeedEntry
rate	src/ramulator_sim/SALP.h	/^        int rate;$/;"	m	struct:SALP::SpeedEntry
rate	src/ramulator_sim/TLDRAM.h	/^        int rate;$/;"	m	struct:TLDRAM::SpeedEntry
rate	src/ramulator_sim/WideIO.h	/^        int rate;$/;"	m	struct:WideIO::SpeedEntry
rate	src/ramulator_sim/WideIO2.h	/^        int rate;$/;"	m	struct:WideIO2::SpeedEntry
rcp_impl	src/cuda-sim/instructions.cc	/^void rcp_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
rd_coeff	src/gpuwattch/basic_components.h	/^    double rd_coeff;$/;"	m	class:DRAMParam
rd_hit_base	src/gpgpu-sim/gpu-cache.cc	/^data_cache::rd_hit_base( new_addr_type addr,$/;"	f	class:data_cache
rd_miss_base	src/gpgpu-sim/gpu-cache.cc	/^data_cache::rd_miss_base( new_addr_type addr,$/;"	f	class:data_cache
rdm_init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::rdm_init()$/;"	f	class:linear_to_raw_address_translation
rdm_mtx_10	src/gpgpu-sim/addrdec.cc	/^unsigned rdm_mtx_10[][10] = {$/;"	v
rdm_mtx_11	src/gpgpu-sim/addrdec.cc	/^unsigned rdm_mtx_11[][11] = {$/;"	v
rdm_mtx_12	src/gpgpu-sim/addrdec.cc	/^unsigned rdm_mtx_12[][12] = {$/;"	v
rdm_mtx_13	src/gpgpu-sim/addrdec.cc	/^unsigned rdm_mtx_13[][13] = {$/;"	v
rdm_mtx_14	src/gpgpu-sim/addrdec.cc	/^unsigned rdm_mtx_14[][14] = {$/;"	v
rdm_mtx_15	src/gpgpu-sim/addrdec.cc	/^unsigned rdm_mtx_15[][15] = {$/;"	v
rdm_mtx_16	src/gpgpu-sim/addrdec.cc	/^unsigned rdm_mtx_16[][16] = {$/;"	v
rdm_mtx_23	src/gpgpu-sim/addrdec.cc	/^unsigned rdm_mtx_23[][23] = {$/;"	v
rdm_mtx_24	src/gpgpu-sim/addrdec.cc	/^unsigned rdm_mtx_24[][24] = {$/;"	v
rdm_mtx_25	src/gpgpu-sim/addrdec.cc	/^unsigned rdm_mtx_25[][25] = {$/;"	v
rdm_mtx_26	src/gpgpu-sim/addrdec.cc	/^unsigned rdm_mtx_26[][26] = {$/;"	v
rdm_mtx_opr	src/gpgpu-sim/addrdec.h	/^   new_addr_type* rdm_mtx_opr; \/\/ shared variable for different randomizing scheme$/;"	m	class:linear_to_raw_address_translation
reached_given_insts	launcher/child_process.h	/^  void reached_given_insts() { no_more_stats = true; }$/;"	f	class:ChildProcess
read	launcher/communicate.h	/^  void read(       void *data, size_t num_bytes) { recv(data, num_bytes); }$/;"	f	class:Communicate
read	launcher/communicate.h	/^Communicate::read(RECV_TYPE& msg)$/;"	f	class:Communicate
read	src/cuda-sim/memory.cc	/^template<unsigned BSIZE> void memory_space_impl<BSIZE>::read( mem_addr_t addr, size_t length, void *data ) const$/;"	f	class:memory_space_impl
read	src/cuda-sim/memory.h	/^   void read( unsigned offset, size_t length, unsigned char *data ) const$/;"	f	class:mem_storage
read	src/intersim2/power/buffer_monitor.cpp	/^void BufferMonitor::read( int input, Flit const * f ) {$/;"	f	class:BufferMonitor
readAc	src/gpuwattch/basic_components.h	/^    statsComponents readAc;$/;"	m	class:statsDef
readBuffer	src/gpuwattch/memoryctrl.h	/^	ArrayST  * readBuffer;$/;"	m	class:MCFrontEnd
readComplete	src/ramulator_sim/gpu_wrapper.cpp	/^void GpuWrapper::readComplete(Request& req) {$/;"	f	class:GpuWrapper
readFile	src/intersim2/networks/anynet.cpp	/^void AnyNet::readFile(){$/;"	f	class:AnyNet
readOp	src/gpuwattch/cacti/cacti_interface.h	/^    powerComponents readOp;$/;"	m	class:powerDef
read_accesses	src/gpuwattch/XML_Parse.h	/^	double read_accesses;$/;"	m	struct:__anon11
read_accesses	src/gpuwattch/XML_Parse.h	/^	double read_accesses;$/;"	m	struct:__anon12
read_accesses	src/gpuwattch/XML_Parse.h	/^	double read_accesses;$/;"	m	struct:__anon13
read_accesses	src/gpuwattch/XML_Parse.h	/^	double read_accesses;$/;"	m	struct:__anon14
read_accesses	src/gpuwattch/XML_Parse.h	/^	double read_accesses;$/;"	m	struct:__anon16
read_accesses	src/gpuwattch/XML_Parse.h	/^	double read_accesses;$/;"	m	struct:__anon17
read_accesses	src/gpuwattch/XML_Parse.h	/^	double read_accesses;$/;"	m	struct:__anon18
read_accesses	src/gpuwattch/XML_Parse.h	/^	double read_accesses;$/;"	m	struct:__anon19
read_cb_func	src/ramulator_sim/gpu_wrapper.h	/^	std::function<void(Request&)> read_cb_func;$/;"	m	class:GpuWrapper
read_energy	src/gpuwattch/cacti/cacti_interface.h	/^  double activate_energy, read_energy, write_energy, precharge_energy,$/;"	m	class:mem_array
read_energy	src/gpuwattch/cacti/cacti_interface.h	/^  double read_energy;$/;"	m	struct:__anon5
read_energy	src/gpuwattch/cacti/uca.h	/^    double read_energy;$/;"	m	class:UCA
read_hits	src/gpuwattch/XML_Parse.h	/^	double read_hits;$/;"	m	struct:__anon11
read_hits	src/gpuwattch/XML_Parse.h	/^	double read_hits;$/;"	m	struct:__anon12
read_hits	src/gpuwattch/XML_Parse.h	/^	double read_hits;$/;"	m	struct:__anon13
read_hits	src/gpuwattch/XML_Parse.h	/^	double read_hits;$/;"	m	struct:__anon14
read_hits	src/gpuwattch/XML_Parse.h	/^	double read_hits;$/;"	m	struct:__anon18
read_hits	src/gpuwattch/XML_Parse.h	/^	double read_hits;$/;"	m	struct:__anon19
read_latency	src/ramulator_sim/ALDRAM.h	/^    int read_latency;$/;"	m	class:ALDRAM
read_latency	src/ramulator_sim/DDR3.h	/^    int read_latency;$/;"	m	class:DDR3
read_latency	src/ramulator_sim/DDR4.h	/^    int read_latency;$/;"	m	class:DDR4
read_latency	src/ramulator_sim/DSARP.h	/^    int read_latency;$/;"	m	class:DSARP
read_latency	src/ramulator_sim/GDDR5.h	/^    int read_latency;$/;"	m	class:GDDR5
read_latency	src/ramulator_sim/HBM.h	/^    int read_latency;$/;"	m	class:HBM
read_latency	src/ramulator_sim/LPDDR3.h	/^    int read_latency;$/;"	m	class:LPDDR3
read_latency	src/ramulator_sim/LPDDR4.h	/^    int read_latency;$/;"	m	class:LPDDR4
read_latency	src/ramulator_sim/SALP.h	/^    int read_latency;$/;"	m	class:SALP
read_latency	src/ramulator_sim/TLDRAM.h	/^    int read_latency;$/;"	m	class:TLDRAM
read_latency	src/ramulator_sim/WideIO.h	/^    int read_latency;$/;"	m	class:WideIO
read_latency	src/ramulator_sim/WideIO2.h	/^    int read_latency;$/;"	m	class:WideIO2
read_latency_avg	src/ramulator_sim/Controller.h	/^    ScalarStat read_latency_avg;$/;"	m	class:Controller
read_latency_sum	src/ramulator_sim/Controller.h	/^    ScalarStat read_latency_sum;$/;"	m	class:Controller
read_misses	src/gpuwattch/XML_Parse.h	/^	double read_misses;$/;"	m	struct:__anon11
read_misses	src/gpuwattch/XML_Parse.h	/^	double read_misses;$/;"	m	struct:__anon12
read_misses	src/gpuwattch/XML_Parse.h	/^	double read_misses;$/;"	m	struct:__anon13
read_misses	src/gpuwattch/XML_Parse.h	/^	double read_misses;$/;"	m	struct:__anon14
read_misses	src/gpuwattch/XML_Parse.h	/^	double read_misses;$/;"	m	struct:__anon16
read_misses	src/gpuwattch/XML_Parse.h	/^	double read_misses;$/;"	m	struct:__anon17
read_misses	src/gpuwattch/XML_Parse.h	/^	double read_misses;$/;"	m	struct:__anon18
read_misses	src/gpuwattch/XML_Parse.h	/^	double read_misses;$/;"	m	struct:__anon19
read_only_cache	src/gpgpu-sim/gpu-cache.h	/^    read_only_cache( const char *name, cache_config &config, int core_id, int type_id, mem_fetch_interface *memport, enum mem_fetch_status status )$/;"	f	class:read_only_cache
read_only_cache	src/gpgpu-sim/gpu-cache.h	/^    read_only_cache( const char *name, cache_config &config, int core_id, int type_id, mem_fetch_interface *memport, enum mem_fetch_status status, tag_array* new_tag_array )$/;"	f	class:read_only_cache
read_only_cache	src/gpgpu-sim/gpu-cache.h	/^class read_only_cache : public baseline_cache {$/;"	c
read_operands	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::read_operands()$/;"	f	class:shader_core_ctx
read_parser_environment_variables	src/cuda-sim/ptx_parser.cc	/^void read_parser_environment_variables() $/;"	f
read_pipe	launcher/communicate.h	/^  int read_pipe;$/;"	m	class:Communicate
read_req_queue_length_avg	src/ramulator_sim/Controller.h	/^    ScalarStat read_req_queue_length_avg;$/;"	m	class:Controller
read_req_queue_length_sum	src/ramulator_sim/Controller.h	/^    ScalarStat read_req_queue_length_sum;$/;"	m	class:Controller
read_row_conflicts	src/ramulator_sim/Controller.h	/^    VectorStat read_row_conflicts;$/;"	m	class:Controller
read_row_hits	src/ramulator_sim/Controller.h	/^    VectorStat read_row_hits;$/;"	m	class:Controller
read_row_misses	src/ramulator_sim/Controller.h	/^    VectorStat read_row_misses;$/;"	m	class:Controller
read_sim_environment_variables	src/cuda-sim/cuda-sim.cc	/^void read_sim_environment_variables() $/;"	f
read_single_block	src/cuda-sim/memory.cc	/^template<unsigned BSIZE> void memory_space_impl<BSIZE>::read_single_block( mem_addr_t blk_idx, mem_addr_t addr, size_t length, void *data) const$/;"	f	class:memory_space_impl
read_transaction_bytes	src/ramulator_sim/Controller.h	/^    ScalarStat read_transaction_bytes;$/;"	m	class:Controller
readfile	libcuda/cuda_runtime_api.cc	/^char* readfile (const std::string filename){$/;"	f
readq	src/ramulator_sim/Controller.h	/^    Queue readq;  \/\/ queue for read requests$/;"	m	class:Controller
readq	src/ramulator_sim/SpeedyController.h	/^    request_queue readq;   \/\/ queue for read requests$/;"	m	class:SpeedyController
reads	src/gpuwattch/basic_components.h	/^    double executionTime, reads, writes;$/;"	m	class:MCParam
ready	src/gpgpu-sim/shader.cc	/^bool opndcoll_rfu_t::collector_unit_t::ready() const $/;"	f	class:opndcoll_rfu_t::collector_unit_t
ready_cycle	src/gpgpu-sim/l2cache.h	/^    	unsigned long long ready_cycle;$/;"	m	struct:memory_sub_partition::rop_delay_t
ready_cycle	src/gpgpu-sim/l2cache.h	/^      unsigned long long ready_cycle;$/;"	m	struct:memory_partition_unit::dram_delay_t
ready_time	common/kernel_info_t.h	/^  unsigned long long ready_time;$/;"	m	class:timed_dim3
rec_pts	src/cuda-sim/cuda-sim.cc	/^struct rec_pts {$/;"	s	file:
reconfigure	src/gpuwattch/cacti/io.cc	/^void reconfigure(InputParameter *local_interface, uca_org_t *fin_res)$/;"	f
reconvergence_pc	src/abstract_hardware_model.h	/^    address_type reconvergence_pc; \/\/ -1 => not a branch, -2 => use function return address$/;"	m	class:inst_t
record	src/intersim/flit.hpp	/^   bool record;$/;"	m	struct:Flit
record	src/intersim2/flit.hpp	/^  bool record;$/;"	m	class:Flit
record	src/intersim2/packet_reply_info.hpp	/^  bool record;$/;"	m	class:PacketReplyInfo
record_cmd_trace	src/ramulator_sim/Config.h	/^  bool record_cmd_trace() const {$/;"	f	class:Config
record_cmd_trace	src/ramulator_sim/Controller.h	/^    bool record_cmd_trace = false;$/;"	m	class:Controller
record_cmd_trace	src/ramulator_sim/SpeedyController.h	/^    bool record_cmd_trace = false;$/;"	m	class:SpeedyController
record_core	src/ramulator_sim/Controller.h	/^    void record_core(int coreid) {$/;"	f	class:Controller
record_core	src/ramulator_sim/Memory.h	/^    void record_core(int coreid) {$/;"	f	class:Memory
record_next_done	src/stream_manager.cc	/^void CUstream_st::record_next_done()$/;"	f	class:CUstream_st
record_read_conflicts	src/ramulator_sim/Controller.h	/^    VectorStat record_read_conflicts;$/;"	m	class:Controller
record_read_hits	src/ramulator_sim/Controller.h	/^    VectorStat record_read_hits;$/;"	m	class:Controller
record_read_misses	src/ramulator_sim/Controller.h	/^    VectorStat record_read_misses;$/;"	m	class:Controller
record_read_requests	src/ramulator_sim/Memory.h	/^    VectorStat record_read_requests;$/;"	m	class:Memory
record_traffic	src/gpgpu-sim/traffic_breakdown.cc	/^void traffic_breakdown::record_traffic(class mem_fetch * mf, unsigned int size) $/;"	f	class:traffic_breakdown
record_write_conflicts	src/ramulator_sim/Controller.h	/^    VectorStat record_write_conflicts;$/;"	m	class:Controller
record_write_hits	src/ramulator_sim/Controller.h	/^    VectorStat record_write_hits;$/;"	m	class:Controller
record_write_misses	src/ramulator_sim/Controller.h	/^    VectorStat record_write_misses;$/;"	m	class:Controller
record_write_requests	src/ramulator_sim/Memory.h	/^    VectorStat record_write_requests;$/;"	m	class:Memory
recv	launcher/communicate.cc	/^Communicate::recv(void *data, size_t num_bytes) {$/;"	f	class:Communicate
red_impl	src/cuda-sim/instructions.cc	/^void red_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
reduce_precision	src/cuda-sim/instructions.cc	/^float reduce_precision( float x, unsigned bits )$/;"	f
ref_count	src/gpuwattch/xmlParser.h	/^          int                    ref_count;       \/\/ for garbage collection (smart pointers)$/;"	m	struct:XMLNode::XMLNodeDataTag
refresh	src/ramulator_sim/Controller.h	/^    Refresh<T>* refresh;$/;"	m	class:Controller
refresh_cycles	src/ramulator_sim/DRAM.h	/^    ScalarStat refresh_cycles;$/;"	m	class:DRAM
refresh_intervals	src/ramulator_sim/DRAM.h	/^    std::vector<std::pair<long, long>> refresh_intervals;$/;"	m	class:DRAM
refresh_mode	src/ramulator_sim/DDR4.h	/^    } refresh_mode = RefreshMode::Refresh_1X;$/;"	m	class:DDR4	typeref:class:DDR4::RefreshMode
refresh_mode	src/ramulator_sim/DSARP.h	/^    } refresh_mode = RefreshMode::Refresh_1X;$/;"	m	class:DSARP	typeref:class:DSARP::RefreshMode
refresh_mode	src/ramulator_sim/LPDDR4.h	/^    } refresh_mode = RefreshMode::Refresh_1X;$/;"	m	class:LPDDR4	typeref:class:LPDDR4::RefreshMode
refresh_power	src/gpuwattch/cacti/cacti_interface.h	/^  double refresh_power;$/;"	m	struct:__anon5
refresh_power	src/gpuwattch/cacti/cacti_interface.h	/^  refresh_power, leak_power_subbank_closed_page, leak_power_subbank_open_page,$/;"	m	class:mem_array
refresh_power	src/gpuwattch/cacti/uca.h	/^    double refresh_power;  \/\/ only for DRAM$/;"	m	class:UCA
refresh_target	src/ramulator_sim/Refresh.h	/^  void refresh_target(Controller<T>* ctrl, int rank, int bank, int sa)$/;"	f	class:Refresh
refreshed	src/ramulator_sim/Refresh.h	/^  long clk, refreshed;$/;"	m	class:Refresh
refreshed	src/ramulator_sim/SpeedyController.h	/^    long refreshed = 0;  \/\/ last time refresh requests were generated$/;"	m	class:SpeedyController
reg1_num	src/cuda-sim/ptx_ir.h	/^   int reg1_num() const { return m_value.m_vector_symbolic[0]->reg_num();}$/;"	f	class:operand_info
reg2_num	src/cuda-sim/ptx_ir.h	/^   int reg2_num() const { return m_value.m_vector_symbolic[1]->reg_num();}$/;"	f	class:operand_info
reg3_num	src/cuda-sim/ptx_ir.h	/^   int reg3_num() const { return m_value.m_vector_symbolic[2]?m_value.m_vector_symbolic[2]->reg_num():0; }$/;"	f	class:operand_info
reg4_num	src/cuda-sim/ptx_ir.h	/^   int reg4_num() const { return m_value.m_vector_symbolic[3]?m_value.m_vector_symbolic[3]->reg_num():0; }$/;"	f	class:operand_info
regStats	src/ramulator_sim/DRAM.h	/^void DRAM<T>::regStats(const std::string& identifier) {$/;"	f	class:DRAM
regWindowing	src/gpuwattch/basic_components.h	/^    bool regWindowing,multithreaded;$/;"	m	class:CoreDynParam
reg_length	src/gpuwattch/arch_const.h	/^const int reg_length			=	5;\/\/Niagara$/;"	v
reg_length	src/gpuwattch/arch_const.h	/^const int reg_length			=	7;\/\/Niagara$/;"	v
reg_map_t	src/cuda-sim/ptx_sim.h	/^   typedef tr1_hash_map<const symbol*,ptx_reg_t> reg_map_t;$/;"	t	class:ptx_thread_info
reg_num	src/cuda-sim/ptx_ir.h	/^   int reg_num() const { return m_value.m_symbolic->reg_num();}$/;"	f	class:operand_info
reg_num	src/cuda-sim/ptx_ir.h	/^   unsigned reg_num() const$/;"	f	class:symbol
reg_options	src/abstract_hardware_model.cc	/^void gpgpu_functional_sim_config::reg_options(class OptionParser * opp)$/;"	f	class:gpgpu_functional_sim_config
reg_options	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim_config::reg_options(option_parser_t opp)$/;"	f	class:gpgpu_sim_config
reg_options	src/gpgpu-sim/gpu-sim.cc	/^void memory_config::reg_options(class OptionParser * opp)$/;"	f	class:memory_config
reg_options	src/gpgpu-sim/gpu-sim.cc	/^void power_config::reg_options(class OptionParser * opp)$/;"	f	class:power_config
reg_options	src/gpgpu-sim/gpu-sim.cc	/^void shader_core_config::reg_options(class OptionParser * opp)$/;"	f	class:shader_core_config
reg_space	src/abstract_hardware_model.h	/^   reg_space,$/;"	e	enum:_memory_space_t
reg_t	src/cuda-sim/ptx_ir.h	/^   reg_t, vector_t, builtin_t, address_t, memory_t, float_op_t, double_op_t, int_t, $/;"	e	enum:operand_type
reg_table	src/gpgpu-sim/scoreboard.h	/^    std::vector< std::set<unsigned> > reg_table;$/;"	m	class:Scoreboard
regfileassoc	src/gpuwattch/arch_const.h	/^const int regfileassoc=1;$/;"	v
regfileblocksize	src/gpuwattch/arch_const.h	/^const int regfileblocksize=18;$/;"	v
regfilesize	src/gpuwattch/arch_const.h	/^const int regfilesize=5760;$/;"	v
registerExit	src/cuda-sim/ptx_sim.h	/^   void registerExit(){m_cta_info->register_thread_exit(this);}$/;"	f	class:ptx_thread_info
register_bank	src/gpgpu-sim/shader.cc	/^int register_bank(int regnum, int wid, unsigned num_banks, unsigned bank_warp_shift)$/;"	f
register_cta_num_insts	common/kernel_info_t.h	/^   void register_cta_num_insts(const unsigned long long curr_inst_count)$/;"	f	class:kernel_info_t
register_cta_thread_exit	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::register_cta_thread_exit( unsigned cta_num )$/;"	f	class:shader_core_ctx
register_deleted_thread	src/cuda-sim/ptx_sim.cc	/^void ptx_cta_info::register_deleted_thread( ptx_thread_info *thd )$/;"	f	class:ptx_cta_info
register_finished_kernel	src/stream_manager.cc	/^stream_manager::register_finished_kernel(unsigned grid_uid)$/;"	f	class:stream_manager
register_function	launcher/simulator.h	/^    void register_function( unsigned fat_cubin_handle, const char *hostFun, const char *deviceFun ) {$/;"	f	struct:Simulator::CUctx_st
register_ptx_function	launcher/launcher.cc	/^register_ptx_function( const char *name, function_info *impl )$/;"	f
register_set	src/abstract_hardware_model.h	/^	register_set(unsigned num, const char* name){$/;"	f	class:register_set
register_set	src/abstract_hardware_model.h	/^class register_set {$/;"	c
register_thread_exit	src/cuda-sim/ptx_sim.cc	/^void ptx_cta_info::register_thread_exit( ptx_thread_info *thd )$/;"	f	class:ptx_cta_info
register_windows_size	src/gpuwattch/XML_Parse.h	/^	int register_windows_size;$/;"	m	struct:__anon15
regs	src/abstract_hardware_model.h	/^	std::vector<warp_inst_t*> regs;$/;"	m	class:register_set
regs	src/abstract_hardware_model.h	/^   int regs;$/;"	m	struct:gpgpu_ptx_sim_kernel_info
regwinassoc	src/gpuwattch/arch_const.h	/^const int regwinassoc=1;$/;"	v
regwinblocksize	src/gpuwattch/arch_const.h	/^const int regwinblocksize=8;$/;"	v
regwinsize	src/gpuwattch/arch_const.h	/^const int regwinsize=256;$/;"	v
reinit	launcher/stats/stats.h	/^  virtual void reinit()$/;"	f	class:Stats::AverageScalarStorage
reinit	launcher/stats/stats.h	/^  virtual void reinit()$/;"	f	class:Stats::CountScalarStorage
reinit	launcher/stats/stats.h	/^  virtual void reinit()$/;"	f	class:Stats::MaxScalarStorage
reinit	launcher/stats/stats.h	/^  void reinit()         { storage.reinit(); }$/;"	f	class:Stats::ScalarBase
reinit	src/cuda-sim/ptx_sim.cc	/^ptx_cta_info::reinit( unsigned sm_idx )$/;"	f	class:ptx_cta_info
reinit	src/cuda-sim/ptx_sim.h	/^   void reinit(gpgpu_t *gpu, core_t *core, unsigned sid, unsigned cta_id, unsigned wid, unsigned tid, bool fsim) $/;"	f	class:ptx_thread_info
reinit	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::reinit(unsigned start_thread, unsigned end_thread, bool reset_not_completed )$/;"	f	class:shader_core_ctx
reinit	src/gpgpu-sim/shader.cc	/^void simt_core_cluster::reinit()$/;"	f	class:simt_core_cluster
reinit_clock_domains	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::reinit_clock_domains(void)$/;"	f	class:gpgpu_sim
reinitializeSIMTStack	src/abstract_hardware_model.cc	/^void core_t::reinitializeSIMTStack()$/;"	f	class:core_t
releaseRegister	src/gpgpu-sim/scoreboard.cc	/^void Scoreboard::releaseRegister(unsigned wid, unsigned regnum) $/;"	f	class:Scoreboard
releaseRegisters	src/gpgpu-sim/scoreboard.cc	/^void Scoreboard::releaseRegisters(const class warp_inst_t *inst) $/;"	f	class:Scoreboard
releaseWarp	src/gpgpu-sim/scoreboard.cc	/^Scoreboard::releaseWarp(unsigned wid)$/;"	f	class:Scoreboard
rem_impl	src/cuda-sim/instructions.cc	/^void rem_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
remap_matrix_option	src/gpgpu-sim/addrdec.h	/^   char * remap_matrix_option;$/;"	m	class:linear_to_raw_address_translation
remap_mtx_23	src/gpgpu-sim/addrdec.cc	/^unsigned remap_mtx_23[][23] = {$/;"	v
remap_mtx_init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::remap_mtx_init()$/;"	f	class:linear_to_raw_address_translation
remap_mtx_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool remap_mtx_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
remap_mtx_opr	src/gpgpu-sim/addrdec.h	/^   new_addr_type* remap_mtx_opr;$/;"	m	class:linear_to_raw_address_translation
removeCommentsInMiddleOfText	src/gpuwattch/xmlParser.cc	/^static char guessWideCharChars=1, dropWhiteSpace=1, removeCommentsInMiddleOfText=1;$/;"	v	file:
removeOrderElement	src/gpuwattch/xmlParser.cc	/^int XMLNode::removeOrderElement(XMLNodeData *d, XMLElementType t, int index)$/;"	f	class:XMLNode
remove_args	src/cuda-sim/ptx_ir.h	/^   void remove_args()$/;"	f	class:function_info
remove_kernel	launcher/mk-sched/even_scheduler.cc	/^EvenScheduler::remove_kernel(kernel_info_t* kernel)$/;"	f	class:EvenScheduler
remove_kernel	launcher/mk-sched/fixed_scheduler.cc	/^FixedScheduler::remove_kernel(kernel_info_t* kernel)$/;"	f	class:FixedScheduler
remove_kernel	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::remove_kernel(kernel_info_t* kernel)$/;"	f	class:DynamicScheduler
remove_kernel	launcher/mk-sched/mk_scheduler.h	/^  virtual void remove_kernel(kernel_info_t* kernel)                           { kernels.remove(kernel); }$/;"	f	class:MKScheduler
remove_kernel	launcher/mk-sched/smart_even_scheduler.cc	/^SmartEvenScheduler::remove_kernel(kernel_info_t* kernel)$/;"	f	class:SmartEvenScheduler
remove_shader	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::SM_info::remove_shader(unsigned linear_shader_id)$/;"	f	class:DynamicScheduler::SM_info
remove_snap_shot_trigger	src/gpgpu-sim/stat-tool.cc	/^void remove_snap_shot_trigger (snap_shot_trigger* ss_trigger)$/;"	f
remove_spill_log	src/gpgpu-sim/stat-tool.cc	/^void remove_spill_log (spill_log_interface* spill_log)$/;"	f
remove_status_st	launcher/mk-sched/mk_scheduler.h	/^      remove_status_st()$/;"	f	struct:DynamicScheduler::SM_info::remove_status_st
remove_status_st	launcher/mk-sched/mk_scheduler.h	/^    struct remove_status_st {$/;"	s	class:DynamicScheduler::SM_info
remove_warp	src/abstract_hardware_model.h	/^        unsigned remove_warp(const unsigned warp_id) {$/;"	f	class:register_set
remove_warp	src/gpgpu-sim/shader.h	/^    virtual unsigned remove_warp(const unsigned warp_id)$/;"	f	class:ldst_unit
remove_warp	src/gpgpu-sim/shader.h	/^    virtual unsigned remove_warp(const unsigned warp_id)$/;"	f	class:pipelined_simd_unit
remove_warp	src/gpgpu-sim/shader.h	/^    virtual unsigned remove_warp(const unsigned warp_id)$/;"	f	class:simd_function_unit
removing_shaders	launcher/mk-sched/mk_scheduler.h	/^    unsigned removing_shaders;$/;"	m	class:DynamicScheduler::SM_info
renameWidth	src/gpuwattch/arch_const.h	/^const int renameWidth=8;$/;"	v
rename_accesses	src/gpuwattch/XML_Parse.h	/^	double rename_accesses;$/;"	m	struct:__anon15
rename_reads	src/gpuwattch/XML_Parse.h	/^	double rename_reads;$/;"	m	struct:__anon15
rename_scheme	src/gpuwattch/XML_Parse.h	/^	int rename_scheme;$/;"	m	struct:__anon15
rename_writes	src/gpuwattch/XML_Parse.h	/^	double rename_writes;$/;"	m	struct:__anon15
repeated_wire	src/gpuwattch/cacti/wire.h	/^    list <Component> repeated_wire;$/;"	m	class:Wire
repeater_size	src/gpuwattch/cacti/wire.h	/^    double repeater_size;$/;"	m	class:Wire
repeater_spacing	src/gpuwattch/cacti/wire.h	/^    double repeater_spacing;$/;"	m	class:Wire
replacement_policy_t	src/gpgpu-sim/gpu-cache.h	/^enum replacement_policy_t {$/;"	g
replacements	src/gpuwattch/XML_Parse.h	/^	double replacements;$/;"	m	struct:__anon11
replacements	src/gpuwattch/XML_Parse.h	/^	double replacements;$/;"	m	struct:__anon13
replacements	src/gpuwattch/XML_Parse.h	/^	double replacements;$/;"	m	struct:__anon14
replacements	src/gpuwattch/XML_Parse.h	/^	double replacements;$/;"	m	struct:__anon18
replacements	src/gpuwattch/XML_Parse.h	/^	double replacements;$/;"	m	struct:__anon19
replenish_port_bandwidth	src/gpgpu-sim/gpu-cache.cc	/^void baseline_cache::bandwidth_management::replenish_port_bandwidth()$/;"	f	class:baseline_cache::bandwidth_management
reply_full	src/gpgpu-sim/l2cache.h	/^        bool reply_full(mem_fetch *mf,unsigned to_m_id, unsigned from_m_id)$/;"	f	class:KAIN_GPU_chiplet
reply_pop_front	src/gpgpu-sim/l2cache.h	/^        mem_fetch * reply_pop_front(unsigned m_id)$/;"	f	class:KAIN_GPU_chiplet
reply_push	src/gpgpu-sim/l2cache.h	/^        void reply_push(mem_fetch *mf,unsigned to_m_id, unsigned from_m_id)$/;"	f	class:KAIN_GPU_chiplet
reply_top	src/gpgpu-sim/l2cache.h	/^        mem_fetch * reply_top(unsigned m_id)$/;"	f	class:KAIN_GPU_chiplet
req	src/gpgpu-sim/l2cache.h	/^    	class mem_fetch* req;$/;"	m	struct:memory_sub_partition::rop_delay_t	typeref:class:memory_sub_partition::rop_delay_t::mem_fetch
req	src/gpgpu-sim/l2cache.h	/^      class mem_fetch* req;$/;"	m	struct:memory_partition_unit::dram_delay_t	typeref:class:memory_partition_unit::dram_delay_t::mem_fetch
req_coeff	src/gpuwattch/basic_components.h	/^    double req_coeff;$/;"	m	class:DRAMParam
req_queue_length_avg	src/ramulator_sim/Controller.h	/^    ScalarStat req_queue_length_avg;$/;"	m	class:Controller
req_queue_length_sum	src/ramulator_sim/Controller.h	/^    ScalarStat req_queue_length_sum;$/;"	m	class:Controller
req_window_size_per_channel	src/gpuwattch/XML_Parse.h	/^	int req_window_size_per_channel;$/;"	m	struct:__anon23
request_empty	src/gpgpu-sim/l2cache.h	/^        bool request_empty(unsigned m_id)$/;"	f	class:KAIN_GPU_chiplet
request_full	src/gpgpu-sim/l2cache.h	/^        bool request_full(mem_fetch *mf,unsigned to_m_id, unsigned from_m_id)$/;"	f	class:KAIN_GPU_chiplet
request_info	src/ramulator_sim/SpeedyController.h	/^    typedef tuple<Request, typename T::Command, long> request_info;$/;"	t	class:SpeedyController
request_pop_front	src/gpgpu-sim/l2cache.h	/^        mem_fetch * request_pop_front(unsigned m_id)$/;"	f	class:KAIN_GPU_chiplet
request_push	src/gpgpu-sim/l2cache.h	/^        void request_push(mem_fetch *mf,unsigned to_m_id, unsigned from_m_id)$/;"	f	class:KAIN_GPU_chiplet
request_queue	src/ramulator_sim/SpeedyController.h	/^    typedef vector<request_info> request_queue;$/;"	t	class:SpeedyController
request_top	src/gpgpu-sim/l2cache.h	/^        mem_fetch * request_top(unsigned m_id)$/;"	f	class:KAIN_GPU_chiplet
res_fails	src/gpgpu-sim/gpu-cache.h	/^    unsigned res_fails;$/;"	m	struct:cache_sub_stats
reserveRegister	src/gpgpu-sim/scoreboard.cc	/^void Scoreboard::reserveRegister(unsigned wid, unsigned regnum) $/;"	f	class:Scoreboard
reserveRegisters	src/gpgpu-sim/scoreboard.cc	/^void Scoreboard::reserveRegisters(const class warp_inst_t* inst) $/;"	f	class:Scoreboard
reset	common/shd_warp_t.h	/^    void reset()$/;"	f	class:shd_warp_t
reset	launcher/mk-sched/mk_scheduler.h	/^      void reset() { status = REMOVE_NUM; is_being_removed = false; }$/;"	f	struct:DynamicScheduler::SM_info::remove_status_st
reset	src/abstract_hardware_model.cc	/^void simt_stack::reset()$/;"	f	class:simt_stack
reset	src/cuda-sim/ptx_sim.cc	/^ptx_cta_info::reset()$/;"	f	class:ptx_cta_info
reset	src/gpgpu-sim/shader.h	/^      void reset() { m_allocation = NO_ALLOC; }$/;"	f	class:opndcoll_rfu_t::allocation_t
reset	src/gpgpu-sim/shader.h	/^      void reset() { m_valid = false; }$/;"	f	class:opndcoll_rfu_t::op_t
reset	src/gpgpu-sim/shader.h	/^      void reset() {$/;"	f	struct:shader_core_ctx::executed_insts_st
reset	src/gpgpu-sim/stat-tool.cc	/^void thread_insn_span::reset(unsigned long long  cycle) $/;"	f	class:thread_insn_span
reset	src/gpgpu-sim/stat-tool.h	/^   void reset(unsigned long long  cycle) {$/;"	f	class:linear_histogram_snapshot
reset	src/gpuwattch/basic_components.h	/^    void reset() { access = 0; hit = 0; miss = 0;}$/;"	f	class:statsComponents
reset	src/gpuwattch/basic_components.h	/^    void reset() { readAc.reset(); writeAc.reset();searchAc.reset();}$/;"	f	class:statsDef
reset	src/gpuwattch/cacti/cacti_interface.h	/^    void reset() { dynamic = 0; leakage = 0; gate_leakage = 0; short_circuit = 0;longer_channel_leakage = 0;}$/;"	f	class:powerComponents
reset	src/gpuwattch/cacti/cacti_interface.h	/^    void reset() { readOp.reset(); writeOp.reset(); searchOp.reset();}$/;"	f	class:powerDef
reset	src/gpuwattch/cacti/parameter.h	/^    void reset()$/;"	f	class:TechnologyParameter::DeviceType
reset	src/gpuwattch/cacti/parameter.h	/^    void reset()$/;"	f	class:TechnologyParameter::InterconnectType
reset	src/gpuwattch/cacti/parameter.h	/^    void reset()$/;"	f	class:TechnologyParameter::MemoryType
reset	src/gpuwattch/cacti/parameter.h	/^    void reset()$/;"	f	class:TechnologyParameter::ScalingFactor
reset	src/gpuwattch/cacti/parameter.h	/^  void reset()$/;"	f	class:TechnologyParameter
reset	src/intersim2/injection.cpp	/^void InjectionProcess::reset()$/;"	f	class:InjectionProcess
reset	src/intersim2/injection.cpp	/^void OnOffInjectionProcess::reset()$/;"	f	class:OnOffInjectionProcess
reset	src/intersim2/traffic.cpp	/^void TrafficPattern::reset()$/;"	f	class:TrafficPattern
reset	src/ramulator_sim/StatType.h	/^  void reset() {$/;"	f	class:Stats_Ram::Average
reset	src/ramulator_sim/StatType.h	/^  void reset() {$/;"	f	class:Stats_Ram::AverageDeviation
reset	src/ramulator_sim/StatType.h	/^  void reset() {$/;"	f	class:Stats_Ram::Distribution
reset	src/ramulator_sim/StatType.h	/^  void reset() {$/;"	f	class:Stats_Ram::Histogram
reset	src/ramulator_sim/StatType.h	/^  void reset() {$/;"	f	class:Stats_Ram::StandardDeviation
reset	src/ramulator_sim/StatType.h	/^  void reset() {$/;"	f	class:Stats_Ram::VectorBase
reset	src/ramulator_sim/StatType.h	/^  void reset() {_value = Counter();}$/;"	f	class:Stats_Ram::Scalar
reset	src/ramulator_sim/StatType.h	/^  void reset() {}$/;"	f	class:Stats_Ram::ConstValue
reset	src/ramulator_sim/Statistics.h	/^  void reset(void) { stat.reset(); }$/;"	f	class:StatBase
reset_alloction	src/gpgpu-sim/shader.h	/^      void reset_alloction()$/;"	f	class:opndcoll_rfu_t::arbiter_t
reset_bins	src/gpgpu-sim/histogram.cc	/^void binned_histogram::reset_bins () {$/;"	f	class:binned_histogram
reset_counters	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::reset_counters(){$/;"	f	class:gpgpu_sim_wrapper
reset_overwrite_check	src/gpgpu-sim/shader.h	/^   void reset_overwrite_check(const unsigned cta_id)$/;"	f	class:ldst_unit
reset_overwrite_check	src/gpgpu-sim/shader.h	/^   void reset_overwrite_check(const unsigned cta_id)$/;"	f	class:shader_core_ctx
reset_stack	src/gpgpu-sim/stack.cc	/^void reset_stack(Stack *S) {$/;"	f
reset_symtab	src/cuda-sim/ptx_parser.cc	/^void *reset_symtab()$/;"	f
resistivity	src/gpuwattch/cacti/wire.h	/^    double resistivity;$/;"	m	class:Wire
response_buffer_full	src/gpgpu-sim/shader.cc	/^bool ldst_unit::response_buffer_full() const$/;"	f	class:ldst_unit
response_queue_full	src/gpgpu-sim/shader.h	/^    bool response_queue_full() {$/;"	f	class:simt_core_cluster
restart_cta	common/kernel_info_t.cc	/^kernel_info_t::restart_cta(unsigned shader_id, unsigned hw_cta_id, const cta_stat_context_t& stored_stat)$/;"	f	class:kernel_info_t
restart_warps	src/gpgpu-sim/shader.cc	/^shader_core_ctx::restart_warps( unsigned cta_id, unsigned start_thread, unsigned end_thread )$/;"	f	class:shader_core_ctx
result	launcher/stats/stats.h	/^  virtual double result() const { return double(total_value) \/ double(last_cycle); }$/;"	f	class:Stats::AverageScalarStorage
result	launcher/stats/stats.h	/^  virtual uint64_t result() const { return final_value; }$/;"	f	class:Stats::CountScalarStorage
result	launcher/stats/stats.h	/^  virtual uint64_t result() const { return final_value; }$/;"	f	class:Stats::MaxScalarStorage
result	src/ramulator_sim/StatType.h	/^  Result result() const {$/;"	f	class:Stats_Ram::Average
result	src/ramulator_sim/StatType.h	/^  Result result() const {return (Result)_value;}$/;"	f	class:Stats_Ram::ConstValue
result	src/ramulator_sim/StatType.h	/^  Result result() const {return (Result)_value;}$/;"	f	class:Stats_Ram::Scalar
result	src/ramulator_sim/StatType.h	/^  void result(VResult& vec) const {$/;"	f	class:Stats_Ram::VectorBase
result	src/ramulator_sim/Statistics.h	/^  void result(Stats_Ram::VResult & vec) const { StatBase<StatType>::stat.result(vec); }$/;"	f	class:VectorStatBase
results_mem_array	src/gpuwattch/cacti/cacti_interface.h	/^} results_mem_array;$/;"	t	typeref:struct:__anon5
ret_impl	src/cuda-sim/instructions.cc	/^void ret_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
retp_impl	src/cuda-sim/instructions.cc	/^void retp_impl( const ptx_instruction *pI, ptx_thread_info *thread )$/;"	f
return_credit	src/gpgpu-sim/l2cache.cc	/^void memory_partition_unit::arbitration_metadata::return_credit(int inner_sub_partition_id) $/;"	f	class:memory_partition_unit::arbitration_metadata
reverse_map	src/intersim/interconnect_interface.cpp	/^static int * reverse_map; $/;"	v	file:
rewind	launcher/child_process.cc	/^ChildProcess::rewind() {$/;"	f	class:ChildProcess
rf_banks	src/gpuwattch/XML_Parse.h	/^	int rf_banks;\/\/ (4)$/;"	m	struct:__anon15
rf_fu_clockRate	src/gpuwattch/core.h	/^	double rf_fu_clockRate;$/;"	m	class:EXECU
rfu	src/gpuwattch/core.h	/^	RegFU          * rfu;$/;"	m	class:EXECU
ring_par	src/intersim/flit.hpp	/^   mutable int ring_par;$/;"	m	struct:Flit
rm_ty	src/gpuwattch/basic_components.h	/^	enum Renaming_type rm_ty;$/;"	m	class:CoreDynParam	typeref:enum:CoreDynParam::Renaming_type
rnu	src/gpuwattch/core.h	/^	RENAMINGU  * rnu;$/;"	m	class:Core
rob_entry	src/gpgpu-sim/gpu-cache.h	/^        rob_entry( unsigned i, mem_fetch *mf, new_addr_type a )$/;"	f	struct:tex_cache::rob_entry
rob_entry	src/gpgpu-sim/gpu-cache.h	/^        rob_entry() { m_ready = false; m_time=0; m_request=NULL;}$/;"	f	struct:tex_cache::rob_entry
rob_entry	src/gpgpu-sim/gpu-cache.h	/^    struct rob_entry {$/;"	s	class:tex_cache
rob_time	src/intersim/flit.hpp	/^   int  rob_time;$/;"	m	struct:Flit
romm_mesh	src/intersim/routefunc.cpp	/^void romm_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
romm_mesh	src/intersim2/routefunc.cpp	/^void romm_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
romm_ni_mesh	src/intersim/routefunc.cpp	/^void romm_ni_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
romm_ni_mesh	src/intersim2/routefunc.cpp	/^void romm_ni_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
root_system	src/gpuwattch/XML_Parse.h	/^} root_system;$/;"	t	typeref:struct:__anon26
rop_delay_t	src/gpgpu-sim/l2cache.h	/^   struct rop_delay_t$/;"	s	class:memory_sub_partition
rop_latency	src/gpgpu-sim/gpu-sim.h	/^   unsigned rop_latency;$/;"	m	struct:memory_config
rotating_kernel_list	launcher/child_process.h	/^  std::list<kernel_build_info*> rotating_kernel_list;$/;"	m	class:ChildProcess
round_robin_turn	src/intersim/interconnect_interface.cpp	/^vector<int> round_robin_turn; \/\/keep track of boundary_buf last used in icnt_pop $/;"	v
rounding_mode	src/cuda-sim/ptx.y	/^rounding_mode: floating_point_rounding_mode$/;"	l
rounding_mode	src/cuda-sim/ptx_ir.h	/^   unsigned rounding_mode() const { return m_rounding_mode;}$/;"	f	class:ptx_instruction
route	src/intersim2/networks/anynet.cpp	/^void AnyNet::route(int r_start){$/;"	f	class:AnyNet
route_over_perc	src/gpuwattch/XML_Parse.h	/^	double route_over_perc;$/;"	m	struct:__anon21
route_over_perc	src/gpuwattch/basic_components.h	/^		   duty_cycle, chip_coverage, route_over_perc;$/;"	m	class:NoCParam
route_over_perc	src/gpuwattch/interconnect.h	/^    double route_over_perc;$/;"	m	class:interconnect
router	src/gpuwattch/cacti/nuca.h	/^    MCPAT_Router *router;$/;"	m	class:nuca_org_t
router	src/gpuwattch/noc.h	/^	MCPAT_Router * router;$/;"	m	class:NoC
router_exist	src/gpuwattch/noc.h	/^	bool router_exist;$/;"	m	class:NoC
router_list	src/intersim2/networks/anynet.hpp	/^  vector<map<int,  map<int, pair<int,int> > > > router_list;$/;"	m	class:AnyNet
routing	src/intersim/vc.hpp	/^      idle, routing, vc_alloc, active$/;"	e	enum:VC::eVCState
routing	src/intersim2/vc.hpp	/^  enum eVCState { state_min = 0, idle = state_min, routing, vc_alloc, active, $/;"	e	enum:VC::eVCState
routing_area_height_within_bank	src/gpuwattch/cacti/cacti_interface.h	/^  double routing_area_height_within_bank;$/;"	m	struct:__anon5
routing_area_width_within_bank	src/gpuwattch/cacti/cacti_interface.h	/^  double routing_area_width_within_bank;$/;"	m	struct:__anon5
routing_table	src/intersim2/networks/anynet.hpp	/^  vector<map<int, int> > routing_table;$/;"	m	class:AnyNet
row	src/gpgpu-sim/addrdec.h	/^   unsigned row;$/;"	m	struct:addrdec_t
row	src/ramulator_sim/Scheduler.h	/^        int row;$/;"	m	struct:RowTable::Entry
row_access	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int **row_access; \/\/row_access[dram chip id][bank id]$/;"	m	class:memory_stats_t
row_access_kain_app1	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int **row_access_kain_app1; \/\/row_access[dram chip id][bank id]$/;"	m	class:memory_stats_t
row_access_kain_app2	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int **row_access_kain_app2; \/\/row_access[dram chip id][bank id]$/;"	m	class:memory_stats_t
row_conflicts	src/ramulator_sim/Controller.h	/^    ScalarStat row_conflicts;$/;"	m	class:Controller
row_dec	src/gpuwattch/cacti/mat.h	/^    Decoder * row_dec;$/;"	m	class:Mat
row_hits	src/ramulator_sim/Controller.h	/^    ScalarStat row_hits;$/;"	m	class:Controller
row_hits	src/ramulator_sim/SpeedyController.h	/^    ScalarStat row_hits;$/;"	m	class:SpeedyController
row_misses	src/ramulator_sim/Controller.h	/^    ScalarStat row_misses;$/;"	m	class:Controller
row_misses	src/ramulator_sim/SpeedyController.h	/^    ScalarStat row_misses;$/;"	m	class:SpeedyController
row_state	src/ramulator_sim/DRAM.h	/^    map<int, typename T::State> row_state;$/;"	m	class:DRAM
rowhit	src/ramulator_sim/ALDRAM.h	/^    function<bool(DRAM<ALDRAM>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ALDRAM
rowhit	src/ramulator_sim/DDR3.h	/^    function<bool(DRAM<DDR3>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:DDR3
rowhit	src/ramulator_sim/DDR4.h	/^    function<bool(DRAM<DDR4>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:DDR4
rowhit	src/ramulator_sim/DRAM.h	/^    function<bool(DRAM<T>*, typename T::Command cmd, int)>* rowhit;$/;"	m	class:DRAM
rowhit	src/ramulator_sim/DSARP.h	/^    function<bool(DRAM<DSARP>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:DSARP
rowhit	src/ramulator_sim/GDDR5.h	/^    function<bool(DRAM<GDDR5>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:GDDR5
rowhit	src/ramulator_sim/HBM.h	/^    function<bool(DRAM<HBM>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:HBM
rowhit	src/ramulator_sim/LPDDR3.h	/^    function<bool(DRAM<LPDDR3>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:LPDDR3
rowhit	src/ramulator_sim/LPDDR4.h	/^    function<bool(DRAM<LPDDR4>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:LPDDR4
rowhit	src/ramulator_sim/SALP.h	/^    function<bool(DRAM<SALP>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:SALP
rowhit	src/ramulator_sim/TLDRAM.h	/^    function<bool(DRAM<TLDRAM>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:TLDRAM
rowhit	src/ramulator_sim/WideIO.h	/^    function<bool(DRAM<WideIO>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:WideIO
rowhit	src/ramulator_sim/WideIO2.h	/^    function<bool(DRAM<WideIO2>*, Command cmd, int)> rowhit[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:WideIO2
rowopen	src/ramulator_sim/ALDRAM.h	/^    function<bool(DRAM<ALDRAM>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ALDRAM
rowopen	src/ramulator_sim/DDR3.h	/^    function<bool(DRAM<DDR3>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:DDR3
rowopen	src/ramulator_sim/DDR4.h	/^    function<bool(DRAM<DDR4>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:DDR4
rowopen	src/ramulator_sim/DRAM.h	/^    function<bool(DRAM<T>*, typename T::Command cmd, int)>* rowopen;$/;"	m	class:DRAM
rowopen	src/ramulator_sim/DSARP.h	/^    function<bool(DRAM<DSARP>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:DSARP
rowopen	src/ramulator_sim/GDDR5.h	/^    function<bool(DRAM<GDDR5>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:GDDR5
rowopen	src/ramulator_sim/HBM.h	/^    function<bool(DRAM<HBM>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:HBM
rowopen	src/ramulator_sim/LPDDR3.h	/^    function<bool(DRAM<LPDDR3>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:LPDDR3
rowopen	src/ramulator_sim/LPDDR4.h	/^    function<bool(DRAM<LPDDR4>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:LPDDR4
rowopen	src/ramulator_sim/SALP.h	/^    function<bool(DRAM<SALP>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:SALP
rowopen	src/ramulator_sim/TLDRAM.h	/^    function<bool(DRAM<TLDRAM>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:TLDRAM
rowopen	src/ramulator_sim/WideIO.h	/^    function<bool(DRAM<WideIO>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:WideIO
rowopen	src/ramulator_sim/WideIO2.h	/^    function<bool(DRAM<WideIO2>*, Command cmd, int)> rowopen[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:WideIO2
rowpolicy	src/ramulator_sim/Controller.h	/^    RowPolicy<T>* rowpolicy;  \/\/ determines the row-policy (e.g., closed-row vs. open-row)$/;"	m	class:Controller
rows	src/gpuwattch/cacti/nuca.h	/^    int rows;$/;"	m	class:nuca_org_t
rowtable	src/ramulator_sim/Controller.h	/^    RowTable<T>* rowtable;  \/\/ tracks metadata about rows (e.g., which are open and for how long)$/;"	m	class:Controller
rpc_updated	src/cuda-sim/ptx_sim.h	/^   bool rpc_updated() const { return m_RPC_updated; }$/;"	f	class:ptx_thread_info
rpters_in_htree	src/gpuwattch/cacti/cacti_interface.h	/^    bool     rpters_in_htree;  \/\/ if there are repeaters in htree segment$/;"	m	class:InputParameter
rsqrt_impl	src/cuda-sim/instructions.cc	/^void rsqrt_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
rt_power	src/gpuwattch/cacti/component.h	/^    powerDef power,rt_power;$/;"	m	class:Component
rtp_stats	src/gpuwattch/array.h	/^  statsDef       rtp_stats;$/;"	m	class:ArrayST
rtp_stats	src/gpuwattch/logic.h	/^	statsDef       rtp_stats;$/;"	m	class:FunctionalUnit
rtp_stats	src/gpuwattch/logic.h	/^	statsDef       rtp_stats;$/;"	m	class:dep_resource_conflict_check
rtp_stats	src/gpuwattch/logic.h	/^	statsDef       rtp_stats;$/;"	m	class:inst_decoder
rtp_stats	src/gpuwattch/memoryctrl.h	/^    statsDef       rtp_stats;$/;"	m	class:MCPHY
rtp_stats	src/gpuwattch/memoryctrl.h	/^    statsDef rtp_stats;$/;"	m	class:MCBackend
rtp_stats	src/gpuwattch/noc.h	/^	statsDef       rtp_stats;$/;"	m	class:NoC
run	src/intersim2/power/power_module.cpp	/^void Power_Module::run(){$/;"	f	class:Power_Module
run_test	src/gpgpu-sim/addrdec.h	/^   bool run_test; $/;"	m	class:linear_to_raw_address_translation
run_until	launcher/launcher_option_parser.h	/^  unsigned long long run_until() const { return stopCondValue; }$/;"	f	class:LauncherOptionParser
run_until_cycle	launcher/launcher_option_parser.h	/^  bool run_until_cycle() const  { return stopCond == RUN_UNTIL_CYCLE; }$/;"	f	class:LauncherOptionParser
run_until_end	launcher/launcher_option_parser.h	/^  bool run_until_end() const    { return stopCond == RUN_UNTIL_END; }$/;"	f	class:LauncherOptionParser
run_until_inst	launcher/launcher_option_parser.h	/^  bool run_until_inst() const   { return stopCond == RUN_UNTIL_INST; }$/;"	f	class:LauncherOptionParser
running	common/kernel_info_t.h	/^   bool running() const { return m_num_cores_running > 0; }$/;"	f	class:kernel_info_t
running	src/intersim/trafficmanager.hpp	/^      warming_up, running, draining, done$/;"	e	enum:TrafficManager::eSimState
running	src/intersim2/trafficmanager.hpp	/^  enum eSimState { warming_up, running, draining, done };$/;"	e	enum:TrafficManager::eSimState
s	src/gpuwattch/xmlParser.cc	/^typedef struct { XMLCSTR s; int l; XMLCHAR c;} XMLCharacterEntity;$/;"	m	struct:__anon7	file:
s16	src/cuda-sim/ptx_sim.h	/^   signed short      s16;$/;"	m	union:ptx_reg_t
s1_random_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool s1_random_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
s1_rdm_init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::s1_rdm_init()$/;"	f	class:linear_to_raw_address_translation
s1_rdm_mtx_23	src/gpgpu-sim/addrdec.cc	/^unsigned s1_rdm_mtx_23[][23] = {$/;"	v
s1_rdm_mtx_25	src/gpgpu-sim/addrdec.cc	/^unsigned s1_rdm_mtx_25[][25] = {$/;"	v
s1_v2_random_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool s1_v2_random_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
s1_v2_rdm_init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::s1_v2_rdm_init()$/;"	f	class:linear_to_raw_address_translation
s1_v2_rdm_mtx_23	src/gpgpu-sim/addrdec.cc	/^unsigned s1_v2_rdm_mtx_23[][23] = {$/;"	v
s1_v3_random_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool s1_v3_random_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
s1_v3_rdm_init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::s1_v3_rdm_init()$/;"	f	class:linear_to_raw_address_translation
s1_v3_rdm_mtx_23	src/gpgpu-sim/addrdec.cc	/^unsigned s1_v3_rdm_mtx_23[][23] = {$/;"	v
s2_random_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool s2_random_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
s2_rdm_init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::s2_rdm_init()$/;"	f	class:linear_to_raw_address_translation
s2_rdm_mtx_23	src/gpgpu-sim/addrdec.cc	/^unsigned s2_rdm_mtx_23[][23] = {$/;"	v
s2_rdm_mtx_25	src/gpgpu-sim/addrdec.cc	/^unsigned s2_rdm_mtx_25[][25] = {$/;"	v
s2_v2_random_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool s2_v2_random_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
s2_v2_rdm_init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::s2_v2_rdm_init()$/;"	f	class:linear_to_raw_address_translation
s2_v2_rdm_mtx_23	src/gpgpu-sim/addrdec.cc	/^unsigned s2_v2_rdm_mtx_23[][23] = {$/;"	v
s2f	src/cuda-sim/instructions.cc	/^ptx_reg_t s2f( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_mode, int saturation_mode )$/;"	f
s32	src/cuda-sim/ptx_sim.h	/^   signed int        s32;$/;"	m	union:ptx_reg_t
s3_random_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool s3_random_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
s3_rdm_init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::s3_rdm_init()$/;"	f	class:linear_to_raw_address_translation
s3_rdm_mtx_23	src/gpgpu-sim/addrdec.cc	/^unsigned s3_rdm_mtx_23[][23] = {$/;"	v
s3_rdm_mtx_24_kain	src/gpgpu-sim/addrdec.cc	/^unsigned s3_rdm_mtx_24_kain[][24] = {$/;"	v
s3_rdm_mtx_25	src/gpgpu-sim/addrdec.cc	/^unsigned s3_rdm_mtx_25[][25] = {$/;"	v
s3_v2_random_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool s3_v2_random_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
s3_v2_rdm_init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::s3_v2_rdm_init()$/;"	f	class:linear_to_raw_address_translation
s3_v2_rdm_mtx_23	src/gpgpu-sim/addrdec.cc	/^unsigned s3_v2_rdm_mtx_23[][23] = {$/;"	v
s3_v3_random_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool s3_v3_random_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
s3_v3_rdm_init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::s3_v3_rdm_init()$/;"	f	class:linear_to_raw_address_translation
s3_v3_rdm_mtx_23	src/gpgpu-sim/addrdec.cc	/^unsigned s3_v3_rdm_mtx_23[][23] = {$/;"	v
s4_random_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool s4_random_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
s4_rdm_init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::s4_rdm_init()$/;"	f	class:linear_to_raw_address_translation
s4_rdm_mtx_23	src/gpgpu-sim/addrdec.cc	/^unsigned s4_rdm_mtx_23[][23] = {$/;"	v
s4_rdm_mtx_25	src/gpgpu-sim/addrdec.cc	/^unsigned s4_rdm_mtx_25[][25] = {$/;"	v
s4_v2_random_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool s4_v2_random_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
s4_v2_rdm_init	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::s4_v2_rdm_init()$/;"	f	class:linear_to_raw_address_translation
s4_v2_rdm_mtx_23	src/gpgpu-sim/addrdec.cc	/^unsigned s4_v2_rdm_mtx_23[][23] = {$/;"	v
s4_v2_rdm_mtx_25	src/gpgpu-sim/addrdec.cc	/^unsigned s4_v2_rdm_mtx_25[][25] = {};$/;"	v
s64	src/cuda-sim/ptx_sim.h	/^   signed long long  s64;$/;"	m	union:ptx_reg_t
s8	src/cuda-sim/ptx_sim.h	/^   signed char       s8;$/;"	m	union:ptx_reg_t
sRequest	src/intersim/allocator.hpp	/^   struct sRequest {$/;"	s	class:Allocator
sRequest	src/intersim/arbiter.hpp	/^   struct sRequest {$/;"	s	class:Arbiter
sRequest	src/intersim2/allocators/allocator.hpp	/^  struct sRequest {$/;"	s	class:Allocator
sRequest	src/intersim2/arbiters/prio_arb.hpp	/^  struct sRequest {$/;"	s	class:PriorityArbiter
sSetElement	src/intersim/outputset.hpp	/^   struct sSetElement {$/;"	s	class:OutputSet
sSetElement	src/intersim2/outputset.hpp	/^  struct sSetElement {$/;"	s	class:OutputSet
s_CTA_count_logger	src/gpgpu-sim/stat-tool.cc	/^static linear_histogram_logger *s_CTA_count_logger = NULL;$/;"	v	file:
s_cache_access_logger	src/gpgpu-sim/stat-tool.cc	/^static std::vector<linear_histogram_logger> s_cache_access_logger;$/;"	v	file:
s_cache_access_logger_n_types	src/gpgpu-sim/stat-tool.cc	/^static int s_cache_access_logger_n_types = 0;$/;"	v	file:
s_g_pc_to_insn	src/cuda-sim/cuda-sim.cc	/^std::vector<ptx_instruction*> function_info::s_g_pc_to_insn;$/;"	m	class:function_info	file:
s_g_pc_to_insn	src/cuda-sim/ptx_ir.h	/^   static std::vector<ptx_instruction*> s_g_pc_to_insn; \/\/ a direct mapping from PC to instruction$/;"	m	class:function_info
s_ids	src/gpgpu-sim/stat-tool.cc	/^int insn_warp_occ_logger::s_ids = 0;$/;"	m	class:insn_warp_occ_logger	file:
s_ids	src/gpgpu-sim/stat-tool.cc	/^int linear_histogram_logger::s_ids = 0;$/;"	m	class:linear_histogram_logger	file:
s_ids	src/gpgpu-sim/stat-tool.h	/^   static int s_ids;$/;"	m	class:insn_warp_occ_logger
s_ids	src/gpgpu-sim/stat-tool.h	/^   static int s_ids;$/;"	m	class:linear_histogram_logger
s_kernel_recon_points	src/cuda-sim/cuda-sim.cc	/^   gpgpu_recon_t *s_kernel_recon_points;$/;"	m	struct:rec_pts	file:
s_mem_acc_logger	src/gpgpu-sim/stat-tool.cc	/^static std::vector<linear_histogram_logger> s_mem_acc_logger;$/;"	v	file:
s_mem_acc_logger_n_bank	src/gpgpu-sim/stat-tool.cc	/^static int s_mem_acc_logger_n_bank = 0;$/;"	v	file:
s_mem_acc_logger_n_dram	src/gpgpu-sim/stat-tool.cc	/^static int s_mem_acc_logger_n_dram = 0;$/;"	v	file:
s_mem_lat_logger	src/gpgpu-sim/stat-tool.cc	/^static std::vector<linear_histogram_logger> s_mem_lat_logger;$/;"	v	file:
s_mem_lat_logger_nbins	src/gpgpu-sim/stat-tool.cc	/^static int s_mem_lat_logger_nbins = 48;     \/\/ up to 2^24 = 16M$/;"	v	file:
s_mem_lat_logger_used	src/gpgpu-sim/stat-tool.cc	/^static bool s_mem_lat_logger_used = false;$/;"	v	file:
s_num_recon	src/cuda-sim/cuda-sim.cc	/^   int s_num_recon;$/;"	m	struct:rec_pts	file:
s_scale	src/gpuwattch/cacti/wire.h	/^    double w_scale, s_scale;$/;"	m	class:Wire
s_warp_occ_logger	src/gpgpu-sim/stat-tool.cc	/^static std::vector<linear_histogram_logger> s_warp_occ_logger;$/;"	v	file:
sa_mux_lev_1_dec	src/gpuwattch/cacti/mat.h	/^    Decoder * sa_mux_lev_1_dec;$/;"	m	class:Mat
sa_mux_lev_1_predec	src/gpuwattch/cacti/mat.h	/^    Predec * sa_mux_lev_1_predec;$/;"	m	class:Mat
sa_mux_lev_2_dec	src/gpuwattch/cacti/mat.h	/^    Decoder * sa_mux_lev_2_dec;$/;"	m	class:Mat
sa_mux_lev_2_predec	src/gpuwattch/cacti/mat.h	/^    Predec * sa_mux_lev_2_predec;$/;"	m	class:Mat
sad_impl	src/cuda-sim/instructions.cc	/^void sad_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
sample	src/ramulator_sim/StatType.cpp	/^Histogram::sample(Counter val, int number)$/;"	f	class:Stats_Ram::Histogram
sample	src/ramulator_sim/StatType.h	/^  void sample(Counter val, int number) {$/;"	f	class:Stats_Ram::AverageDeviation
sample	src/ramulator_sim/StatType.h	/^  void sample(Counter val, int number) {$/;"	f	class:Stats_Ram::Distribution
sample	src/ramulator_sim/StatType.h	/^  void sample(Counter val, int number) {$/;"	f	class:Stats_Ram::StandardDeviation
sample	src/ramulator_sim/Statistics.h	/^  void sample(const U &v, int n = 1) { StatBase<StatType>::stat.sample(v, n); }$/;"	f	class:DistStatBase
sample_cache_port_utility	src/gpgpu-sim/gpu-cache.cc	/^void cache_stats::sample_cache_port_utility(bool data_port_busy, bool fill_port_busy) $/;"	f	class:cache_stats
sample_cmp_pwr	src/gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector<double> sample_cmp_pwr; \/\/ Current sample component powers$/;"	m	class:gpgpu_sim_wrapper
sample_perf_counters	src/gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector<double> sample_perf_counters; \/\/ Current sample component perf. counts$/;"	m	class:gpgpu_sim_wrapper
sample_start	src/gpuwattch/gpgpu_sim_wrapper.h	/^    unsigned sample_start;$/;"	m	class:gpgpu_sim_wrapper
sample_val	src/gpuwattch/gpgpu_sim_wrapper.h	/^    double sample_val;$/;"	m	class:gpgpu_sim_wrapper
samples	src/gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector<double> samples;$/;"	m	class:gpgpu_sim_wrapper
samples	src/ramulator_sim/StatType.h	/^  Counter samples;$/;"	m	class:Stats_Ram::Distribution
samples	src/ramulator_sim/StatType.h	/^  Counter samples;$/;"	m	class:Stats_Ram::Histogram
samples	src/ramulator_sim/StatType.h	/^  Counter samples;$/;"	m	class:Stats_Ram::StandardDeviation
samples_counter	src/gpuwattch/gpgpu_sim_wrapper.h	/^    std::vector<double> samples_counter;$/;"	m	class:gpgpu_sim_wrapper
sampling_core	src/trace.cc	/^    int sampling_core = 0;$/;"	m	namespace:Trace	file:
sampling_memory_partition	src/trace.cc	/^    int sampling_memory_partition = -1;$/;"	m	namespace:Trace	file:
sanity_check	src/gpuwattch/gpgpu_sim_wrapper.cc	/^bool gpgpu_sim_wrapper::sanity_check(double a, double b)$/;"	f	class:gpgpu_sim_wrapper
sassfilename	libcuda/cuda_runtime_api.cc	/^    std::string sassfilename;$/;"	m	class:cuobjdumpELFSection	file:
saturated2i	src/cuda-sim/instructions.cc	/^double saturated2i (double a, double max, double min) {$/;"	f
saturatei	src/cuda-sim/instructions.cc	/^int saturatei(int a, int max, int min) $/;"	f
saturatei	src/cuda-sim/instructions.cc	/^unsigned int saturatei(unsigned int a, unsigned int max) $/;"	f
saturation_mode	src/cuda-sim/ptx_ir.h	/^   unsigned saturation_mode() const { return m_saturation_mode;}$/;"	f	class:ptx_instruction
save	src/cuda-sim/ptx_sim.cc	/^ptx_cta_info::save()$/;"	f	class:ptx_cta_info
save_barrier_context	src/cuda-sim/cuda-sim.cc	/^SimulationInitializer::save_barrier_context( kernel_info_t *kernel,$/;"	f	class:SimulationInitializer
save_context	common/cta_stat_context.cc	/^cta_stat_context_t::save_context(const cta_stat_context_t& to_save)$/;"	f	class:cta_stat_context_t
save_cta_context	src/cuda-sim/cuda-sim.cc	/^SimulationInitializer::save_cta_context( kernel_info_t *kernel,$/;"	f	class:SimulationInitializer
save_stats	src/gpgpu-sim/power_stat.cc	/^void power_core_stat_t::save_stats(){$/;"	f	class:power_core_stat_t
save_stats	src/gpgpu-sim/power_stat.cc	/^void power_mem_stat_t::save_stats(){$/;"	f	class:power_mem_stat_t
save_stats	src/gpgpu-sim/power_stat.h	/^   void save_stats(){$/;"	f	class:power_stat_t
save_thread_context	src/cuda-sim/cuda-sim.cc	/^SimulationInitializer::save_thread_context( kernel_info_t *kernel,$/;"	f	class:SimulationInitializer
save_warp_context	src/cuda-sim/cuda-sim.cc	/^SimulationInitializer::save_warp_context( kernel_info_t *kernel,$/;"	f	class:SimulationInitializer
save_warps	src/gpgpu-sim/shader.cc	/^shader_core_ctx::save_warps(const unsigned flat_cta_id, const unsigned start_warp, const unsigned end_warp)$/;"	f	class:shader_core_ctx
scalar_type	src/cuda-sim/ptx.y	/^scalar_type: S8_TYPE { add_scalar_type_spec( S8_TYPE ); }$/;"	l
scalar_type	src/cuda-sim/ptx_ir.h	/^   int  scalar_type() const { return m_scalar_type_spec;}$/;"	f	class:type_info_key
scaling_coefficients	src/gpuwattch/XML_Parse.h	/^    double scaling_coefficients[64];$/;"	m	struct:__anon26
scaling_factor	src/gpuwattch/cacti/parameter.h	/^  ScalingFactor scaling_factor;$/;"	m	class:TechnologyParameter
schedule	src/ramulator_sim/SpeedyController.h	/^    void schedule(request_queue& q) {$/;"	f	class:SpeedyController
scheduled_cta_per_shader	common/kernel_info_t.h	/^   std::vector<unsigned> scheduled_cta_per_shader;$/;"	m	class:kernel_info_t
scheduler	launcher/launcher_option_parser.h	/^  MKScheduler* scheduler;$/;"	m	class:LauncherOptionParser
scheduler	src/gpgpu-sim/gpu-sim.h	/^   MKScheduler* scheduler;$/;"	m	class:gpgpu_sim
scheduler	src/ramulator_sim/Controller.h	/^    Scheduler<T>* scheduler;  \/\/ determines the highest priority request whose commands will be issued$/;"	m	class:Controller
scheduler_prioritization_type	src/gpgpu-sim/shader.h	/^enum scheduler_prioritization_type$/;"	g
scheduler_type	src/gpgpu-sim/gpu-sim.h	/^   enum dram_ctrl_t scheduler_type;$/;"	m	struct:memory_config	typeref:enum:memory_config::dram_ctrl_t
scheduler_unit	src/gpgpu-sim/shader.h	/^    scheduler_unit(shader_core_stats* stats, shader_core_ctx* shader, $/;"	f	class:scheduler_unit
scheduler_unit	src/gpgpu-sim/shader.h	/^class scheduler_unit { \/\/this can be copied freely, so can be used in std containers.$/;"	c
schedulers	src/gpgpu-sim/shader.h	/^    std::vector<scheduler_unit*>  schedulers;$/;"	m	class:shader_core_ctx
scheu	src/gpuwattch/core.h	/^	SchedulerU     * scheu;$/;"	m	class:EXECU
scheu_ty	src/gpuwattch/basic_components.h	/^    enum Scheduler_type scheu_ty;$/;"	m	class:CoreDynParam	typeref:enum:CoreDynParam::Scheduler_type
scktRatio	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:BranchPredictor
scktRatio	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:Core
scktRatio	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:EXECU
scktRatio	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:InstFetchU
scktRatio	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:LoadStoreU
scktRatio	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:MemManU
scktRatio	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:RegFU
scktRatio	src/gpuwattch/core.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:SchedulerU
scktRatio	src/gpuwattch/logic.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:UndiffCore
scktRatio	src/gpuwattch/noc.h	/^	double scktRatio, chip_PR_overhead, macro_PR_overhead;$/;"	m	class:NoC
scktRatio	src/gpuwattch/sharedcache.h	/^    double scktRatio, clockRate, executionTime;$/;"	m	class:CCdir
scktRatio	src/gpuwattch/sharedcache.h	/^    double scktRatio, executionTime;$/;"	m	class:SharedCache
sckt_co_eff	src/gpuwattch/cacti/parameter.h	/^  double sckt_co_eff;$/;"	m	class:TechnologyParameter
scope	src/ramulator_sim/ALDRAM.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:ALDRAM
scope	src/ramulator_sim/DDR3.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:DDR3
scope	src/ramulator_sim/DDR4.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:DDR4
scope	src/ramulator_sim/DSARP.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:DSARP
scope	src/ramulator_sim/GDDR5.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:GDDR5
scope	src/ramulator_sim/HBM.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:HBM
scope	src/ramulator_sim/LPDDR3.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:LPDDR3
scope	src/ramulator_sim/LPDDR4.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:LPDDR4
scope	src/ramulator_sim/SALP.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:SALP
scope	src/ramulator_sim/TLDRAM.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:TLDRAM
scope	src/ramulator_sim/WideIO.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:WideIO
scope	src/ramulator_sim/WideIO2.h	/^    Level scope[int(Command::MAX)] = {$/;"	m	class:WideIO2
sdata	src/option_parser.cc	/^   string sdata;$/;"	m	class:testtype	file:
searchAc	src/gpuwattch/basic_components.h	/^    statsComponents searchAc;$/;"	m	class:statsDef
searchOp	src/gpuwattch/cacti/cacti_interface.h	/^    powerComponents searchOp;\/\/Sheng: for CAM and FA$/;"	m	class:powerDef
search_data_in_bits	src/gpuwattch/cacti/htree2.h	/^    int add_bits, data_in_bits,search_data_in_bits,data_out_bits,  search_data_out_bits;$/;"	m	class:Htree2
search_data_out_bits	src/gpuwattch/cacti/htree2.h	/^    int add_bits, data_in_bits,search_data_in_bits,data_out_bits,  search_data_out_bits;$/;"	m	class:Htree2
search_tree	src/gpuwattch/cacti/htree2.h	/^    bool search_tree;$/;"	m	class:Htree2
segment_ratio	src/ramulator_sim/TLDRAM.h	/^    int segment_ratio = 16;$/;"	m	class:TLDRAM
select_candidates	common/preempt_overhead.cc	/^select_candidates(unsigned num_shaders, shader_sort& sorted_candidates)$/;"	f
select_candidates	common/preempt_overhead.cc	/^select_candidates(unsigned num_shaders, sort_throughput_queue& sorted_candidates)$/;"	f
select_kernel	src/gpgpu-sim/gpu-sim.cc	/^kernel_info_t *gpgpu_sim::select_kernel(unsigned sid)$/;"	f	class:gpgpu_sim
select_stats_status	src/gpgpu-sim/gpu-cache.cc	/^enum cache_request_status cache_stats::select_stats_status(enum cache_request_status probe, enum cache_request_status access) const {$/;"	f	class:cache_stats
selection_logic	src/gpuwattch/logic.cc	/^selection_logic::selection_logic($/;"	f	class:selection_logic
selection_logic	src/gpuwattch/logic.h	/^class selection_logic : public Component{$/;"	c
selection_power	src/gpuwattch/logic.cc	/^void selection_logic::selection_power()$/;"	f	class:selection_logic
self	src/ramulator_sim/StatType.h	/^  Derived &self() {return *static_cast<Derived*>(this);}$/;"	f	class:Stats_Ram::Stat
self	src/ramulator_sim/Statistics.h	/^  DistributionStat & self() { return *this; }$/;"	f	class:DistributionStat
self	src/ramulator_sim/Statistics.h	/^  HistogramStat & self() { return *this; }$/;"	f	class:HistogramStat
self	src/ramulator_sim/Statistics.h	/^  StatBase<StatType> & self() { return *this; }$/;"	f	class:StatBase
self	src/ramulator_sim/Statistics.h	/^  StatBaseVec<StatType> & self() { return *this; }$/;"	f	class:StatBaseVec
self	src/ramulator_sim/Statistics.h	/^  VectorStatBase<StatType, Element> & self() { return *this; }$/;"	f	class:VectorStatBase
selfptr	src/ramulator_sim/StatType.h	/^  Derived *selfptr() {return static_cast<Derived*>(this);}$/;"	f	class:Stats_Ram::Stat
selp_impl	src/cuda-sim/instructions.cc	/^void selp_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
send	launcher/communicate.cc	/^Communicate::send(const void *data, size_t num_bytes) {$/;"	f	class:Communicate
send	src/ramulator_sim/Cache.cpp	/^bool Cache::send(Request req) {$/;"	f	class:Cache
send	src/ramulator_sim/Memory.h	/^    bool send(Request req)$/;"	f	class:Memory
send	src/ramulator_sim/gpu_wrapper.cpp	/^bool GpuWrapper::send(Request req)$/;"	f	class:GpuWrapper
send_memory	src/ramulator_sim/Cache.h	/^  std::function<bool(Request)> send_memory;$/;"	m	class:CacheSystem
send_read_request	src/gpgpu-sim/gpu-cache.cc	/^void baseline_cache::send_read_request(new_addr_type addr, new_addr_type block_addr, unsigned cache_index, mem_fetch *mf,$/;"	f	class:baseline_cache
send_write_request	src/gpgpu-sim/gpu-cache.cc	/^void data_cache::send_write_request(mem_fetch *mf, cache_event request, unsigned time, std::list<cache_event> &events){$/;"	f	class:data_cache
sense_amp	src/gpuwattch/cacti/wire.h	/^    Component sense_amp;$/;"	m	class:Wire
sense_amp_input_cap	src/gpuwattch/cacti/wire.cc	/^Wire::sense_amp_input_cap()$/;"	f	class:Wire
sense_delay	src/gpuwattch/cacti/parameter.h	/^  double sense_delay;$/;"	m	class:TechnologyParameter
sense_dy_power	src/gpuwattch/cacti/parameter.h	/^  double sense_dy_power;$/;"	m	class:TechnologyParameter
separatorString	src/ramulator_sim/StatType.h	/^  std::string separatorString;$/;"	m	class:Stats_Ram::Stat
sequence_based	src/intersim2/trafficmanager.hpp	/^  enum ePriority { class_based, age_based, network_age_based, local_age_based, queue_length_based, hop_count_based, sequence_based, none };$/;"	e	enum:TrafficManager::ePriority
series	src/gpuwattch/cacti/basic_circuit.h	/^    series$/;"	e	enum:Half_net_topology
serving_requests	src/ramulator_sim/DRAM.h	/^    ScalarStat serving_requests;$/;"	m	class:DRAM
set	launcher/stats/stats.h	/^  virtual void set(uint64_t val)$/;"	f	class:Stats::AverageScalarStorage
set	launcher/stats/stats.h	/^  virtual void set(uint64_t val)$/;"	f	class:Stats::CountScalarStorage
set	launcher/stats/stats.h	/^  virtual void set(uint64_t val)$/;"	f	class:Stats::MaxScalarStorage
set	src/ramulator_sim/StatType.h	/^  void set(Counter val) {$/;"	f	class:Stats_Ram::Average
setArch	libcuda/cuda_runtime_api.cc	/^    void setArch(unsigned a) {arch = a;}$/;"	f	class:cuobjdumpSection
setCuobjdumparch	libcuda/cuda_runtime_api.cc	/^void setCuobjdumparch(const char* arch){$/;"	f
setCuobjdumpelffilename	libcuda/cuda_runtime_api.cc	/^void setCuobjdumpelffilename(const char* filename){$/;"	f
setCuobjdumpidentifier	libcuda/cuda_runtime_api.cc	/^void setCuobjdumpidentifier(const char* identifier){$/;"	f
setCuobjdumpptxfilename	libcuda/cuda_runtime_api.cc	/^void setCuobjdumpptxfilename(const char* filename){$/;"	f
setCuobjdumpsassfilename	libcuda/cuda_runtime_api.cc	/^void setCuobjdumpsassfilename(const char* filename){$/;"	f
setELFfilename	libcuda/cuda_runtime_api.cc	/^    void setELFfilename(std::string f) {elffilename = f;}$/;"	f	class:cuobjdumpELFSection
setGlobalOptions	src/gpuwattch/xmlParser.cc	/^char XMLNode::setGlobalOptions(XMLCharEncoding _characterEncoding, char _guessWideCharChars,$/;"	f	class:XMLNode
setIdentifier	libcuda/cuda_runtime_api.cc	/^    void setIdentifier(std::string i) {identifier = i;}$/;"	f	class:cuobjdumpSection
setPTXfilename	libcuda/cuda_runtime_api.cc	/^    void setPTXfilename(std::string f) {ptxfilename = f;}$/;"	f	class:cuobjdumpPTXSection
setSASSfilename	libcuda/cuda_runtime_api.cc	/^    void setSASSfilename(std::string f) {sassfilename = f;}$/;"	f	class:cuobjdumpELFSection
setSeparator	src/ramulator_sim/StatType.h	/^  Derived &setSeparator(std::string str) {$/;"	f	class:Stats_Ram::Stat
setSeparator	src/ramulator_sim/StatType.h	/^  const std::string& setSeparator() const {return separatorString;}$/;"	f	class:Stats_Ram::Stat
setSeparator	src/ramulator_sim/Statistics.h	/^  StatBase<StatType> & setSeparator(const std::string & _sep) {$/;"	f	class:StatBase
setSeparator	src/ramulator_sim/Statistics.h	/^  const std::string &setSeparator() const { return stat.setSeparator(); }$/;"	f	class:StatBase
set_NoC_power	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_NoC_power(double noc_tot_reads, double noc_tot_writes )$/;"	f	class:gpgpu_sim_wrapper
set_PC	src/cuda-sim/ptx_ir.h	/^   void set_PC( addr_t PC )$/;"	f	class:ptx_instruction
set_active	src/abstract_hardware_model.cc	/^void warp_inst_t::set_active( const active_mask_t &active ) {$/;"	f	class:warp_inst_t
set_active_lanes_power	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_active_lanes_power(double sp_avg_active_lane, double sfu_avg_active_lane)$/;"	f	class:gpgpu_sim_wrapper
set_addr	src/abstract_hardware_model.h	/^    void set_addr( unsigned n, new_addr_type addr ) $/;"	f	class:warp_inst_t
set_addr	src/abstract_hardware_model.h	/^    void set_addr( unsigned n, new_addr_type* addr, unsigned num_addrs )$/;"	f	class:warp_inst_t
set_addr	src/abstract_hardware_model.h	/^   void set_addr(new_addr_type addr) {m_addr=addr;}$/;"	f	class:mem_access_t
set_addr	src/gpgpu-sim/mem_fetch.h	/^   void set_addr(new_addr_type addr) { m_access.set_addr(addr); }$/;"	f	class:mem_fetch
set_addr_space	src/cuda-sim/ptx_ir.h	/^   void set_addr_space(enum _memory_space_t set_value) { m_addr_space = set_value; }$/;"	f	class:operand_info
set_address	src/cuda-sim/ptx_ir.h	/^   void set_address( addr_t addr )$/;"	f	class:symbol
set_area	src/gpuwattch/cacti/area.h	/^  void set_area(double a_) { area = a_; }$/;"	f	class:Area
set_arg	common/kernel_config.h	/^  void set_arg( const void *arg, size_t size, size_t offset )$/;"	f	class:kernel_config
set_array_dim	src/cuda-sim/ptx_ir.h	/^   void set_array_dim( int array_dim ) { m_array_dim = array_dim; }$/;"	f	class:type_info_key
set_bank	src/abstract_hardware_model.h	/^   void set_bank( unsigned b ) { m_bank = b; }$/;"	f	class:memory_space_t
set_cache_config	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::set_cache_config(std::string kernel_name)$/;"	f	class:gpgpu_sim
set_cache_config	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::set_cache_config(std::string kernel_name,  FuncCache cacheConfig )$/;"	f	class:gpgpu_sim
set_cache_param	src/gpuwattch/sharedcache.cc	/^void SharedCache::set_cache_param()$/;"	f	class:SharedCache
set_ccache_power	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_ccache_power(double hits, double misses)$/;"	f	class:gpgpu_sim_wrapper
set_channel_number	src/ramulator_sim/ALDRAM.cpp	/^void ALDRAM::set_channel_number(int channel) {$/;"	f	class:ALDRAM
set_channel_number	src/ramulator_sim/DDR3.cpp	/^void DDR3::set_channel_number(int channel) {$/;"	f	class:DDR3
set_channel_number	src/ramulator_sim/DDR4.cpp	/^void DDR4::set_channel_number(int channel) {$/;"	f	class:DDR4
set_channel_number	src/ramulator_sim/DSARP.cpp	/^void DSARP::set_channel_number(int channel) {$/;"	f	class:DSARP
set_channel_number	src/ramulator_sim/GDDR5.cpp	/^void GDDR5::set_channel_number(int channel) {$/;"	f	class:GDDR5
set_channel_number	src/ramulator_sim/HBM.cpp	/^void HBM::set_channel_number(int channel) {$/;"	f	class:HBM
set_channel_number	src/ramulator_sim/LPDDR3.cpp	/^void LPDDR3::set_channel_number(int channel) {$/;"	f	class:LPDDR3
set_channel_number	src/ramulator_sim/LPDDR4.cpp	/^void LPDDR4::set_channel_number(int channel) {$/;"	f	class:LPDDR4
set_channel_number	src/ramulator_sim/SALP.cpp	/^void SALP::set_channel_number(int channel) {$/;"	f	class:SALP
set_channel_number	src/ramulator_sim/TLDRAM.cpp	/^void TLDRAM::set_channel_number(int channel) {$/;"	f	class:TLDRAM
set_channel_number	src/ramulator_sim/WideIO.cpp	/^void WideIO::set_channel_number(int channel) {$/;"	f	class:WideIO
set_channel_number	src/ramulator_sim/WideIO2.cpp	/^void WideIO2::set_channel_number(int channel) {$/;"	f	class:WideIO2
set_completed	common/shd_warp_t.h	/^    void set_completed( unsigned lane ) $/;"	f	class:shd_warp_t
set_const_mem_offset	src/cuda-sim/ptx_ir.h	/^   void set_const_mem_offset(addr_t set_value) { m_const_mem_offset = set_value; }$/;"	f	class:operand_info
set_core_num	src/ramulator_sim/Config.h	/^  void set_core_num(int _core_num) {core_num = _core_num;}$/;"	f	class:Config
set_core_param	src/gpuwattch/core.cc	/^void Core::set_core_param()$/;"	f	class:Core
set_ctaid	src/cuda-sim/ptx_sim.h	/^   void set_ctaid( dim3 ctaid ) { m_ctaid = ctaid; }$/;"	f	class:ptx_thread_info
set_cycle	src/gpgpu-sim/stat-tool.h	/^   void set_cycle(unsigned long long  cycle) { m_cycle = cycle; }$/;"	f	class:linear_histogram_snapshot
set_data_size	src/gpgpu-sim/mem_fetch.h	/^   void     set_data_size( unsigned size ) { m_data_size=size; }$/;"	f	class:mem_fetch
set_done	src/cuda-sim/ptx_sim.cc	/^void ptx_thread_info::set_done() $/;"	f	class:ptx_thread_info
set_done	src/gpgpu-sim/l2cache.cc	/^void memory_partition_unit::set_done( mem_fetch *mf )$/;"	f	class:memory_partition_unit
set_done	src/gpgpu-sim/l2cache.cc	/^void memory_sub_partition::set_done( mem_fetch *mf )$/;"	f	class:memory_sub_partition
set_done_exit	common/shd_warp_t.h	/^    void set_done_exit() { m_done_exit=true; }$/;"	f	class:shd_warp_t
set_double_operand_type	src/cuda-sim/ptx_ir.h	/^   void set_double_operand_type(int set_value) {  m_double_operand_type = set_value; }$/;"	f	class:operand_info
set_dram_param	src/gpuwattch/memoryctrl.cc	/^void DRAM::set_dram_param()$/;"	f	class:DRAM
set_duty_cycle_power	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_duty_cycle_power(double duty_cycle)$/;"	f	class:gpgpu_sim_wrapper
set_exec_unit_power	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_exec_unit_power(double fpu_accesses, double ialu_accesses, double sfu_accesses)$/;"	f	class:gpgpu_sim_wrapper
set_fc_param	src/gpuwattch/iocontrollers.cc	/^void FlashController::set_fc_param()$/;"	f	class:FlashController
set_fp_or_int_archop	src/cuda-sim/cuda-sim.cc	/^void ptx_instruction::set_fp_or_int_archop(){$/;"	f	class:ptx_instruction
set_framesize	src/cuda-sim/ptx_ir.h	/^   void set_framesize( unsigned sz )$/;"	f	class:function_info
set_function	src/cuda-sim/ptx_ir.h	/^   void set_function( function_info *func )$/;"	f	class:symbol
set_h	src/gpuwattch/cacti/area.h	/^  void set_h(double h_) { h = h_; }$/;"	f	class:Area
set_has_atomic	common/kernel_info_t.h	/^   void set_has_atomic()   { m_has_atomic = true; }$/;"	f	class:kernel_info_t
set_icache_power	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_icache_power(double hits, double misses)$/;"	f	class:gpgpu_sim_wrapper
set_icnt_receive_time	src/gpgpu-sim/mem_fetch.h	/^   void set_icnt_receive_time( unsigned t ) { m_icnt_receive_time=t; }$/;"	f	class:mem_fetch
set_id	src/gpgpu-sim/stat-tool.h	/^   void set_id(int id) { m_id = id; }$/;"	f	class:insn_warp_occ_logger
set_id	src/gpgpu-sim/stat-tool.h	/^   void set_id(int id) { m_id = id; }$/;"	f	class:linear_histogram_logger
set_idle_core_power	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_idle_core_power(double num_idle_core)$/;"	f	class:gpgpu_sim_wrapper
set_imiss_pending	common/shd_warp_t.h	/^    void set_imiss_pending() { m_imiss_pending=true; }$/;"	f	class:shd_warp_t
set_immediate_addr	src/cuda-sim/ptx_ir.h	/^   void set_immediate_addr() {m_immediate_address=true;}$/;"	f	class:operand_info
set_immediate_operand_type	src/cuda-sim/ptx_parser.cc	/^void set_immediate_operand_type ()$/;"	f
set_impl	src/cuda-sim/instructions.cc	/^void set_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
set_in_rise_time	src/gpuwattch/cacti/htree2.h	/^    void set_in_rise_time(double rt)$/;"	f	class:Htree2
set_in_rise_time	src/gpuwattch/cacti/wire.h	/^    void set_in_rise_time(double rt)$/;"	f	class:Wire
set_in_rise_time	src/gpuwattch/interconnect.h	/^    void set_in_rise_time(double rt)$/;"	f	class:interconnect
set_index	src/gpgpu-sim/gpu-cache.cc	/^unsigned l1d_cache_config::set_index(new_addr_type addr) const{$/;"	f	class:l1d_cache_config
set_index	src/gpgpu-sim/gpu-cache.cc	/^unsigned l2_cache_config::set_index(new_addr_type addr) const{$/;"	f	class:l2_cache_config
set_index	src/gpgpu-sim/gpu-cache.h	/^    virtual unsigned set_index( new_addr_type addr ) const$/;"	f	class:cache_config
set_index_function	src/gpgpu-sim/gpu-cache.h	/^enum set_index_function{$/;"	g
set_info	src/cuda-sim/ptx_sim.cc	/^void ptx_thread_info::set_info( function_info *func ) $/;"	f	class:ptx_thread_info
set_init_max_cta_per_shader	common/kernel_info_t.cc	/^kernel_info_t::set_init_max_cta_per_shader(unsigned _max_cta,unsigned core_sid)$/;"	f	class:kernel_info_t
set_initial_alloc	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::SM_info::set_initial_alloc(const unsigned alloc)$/;"	f	class:DynamicScheduler::SM_info
set_inst_power	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_inst_power(bool clk_gated_lanes, double tot_cycles, double busy_cycles, double tot_inst, double int_inst, double fp_inst, double load_inst, double store_inst, double committed_inst)$/;"	f	class:gpgpu_sim_wrapper
set_is_func	src/cuda-sim/ptx_ir.h	/^   void set_is_func()$/;"	f	class:type_info_key
set_is_non_arch_reg	src/cuda-sim/ptx_ir.h	/^   void set_is_non_arch_reg() { m_is_non_arch_reg = true;  }$/;"	f	class:type_info_key
set_kain_stream_id	common/kernel_info_t.h	/^    void set_kain_stream_id(unsigned id) $/;"	f	class:kernel_info_t
set_kernel	src/gpgpu-sim/shader.h	/^    void set_kernel( kernel_info_t *k ) $/;"	f	class:shader_core_ctx
set_kernel_done	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::set_kernel_done( kernel_info_t *kernel ) $/;"	f	class:gpgpu_sim
set_kernel_info	src/cuda-sim/ptx_ir.h	/^   const void set_kernel_info (const struct gpgpu_ptx_sim_kernel_info &info) {$/;"	f	class:function_info
set_l1cache_power	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_l1cache_power(double read_hits, double read_misses, double write_hits, double write_misses)$/;"	f	class:gpgpu_sim_wrapper
set_l2cache_power	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_l2cache_power(double read_hits, double read_misses, double write_hits, double write_misses)$/;"	f	class:gpgpu_sim_wrapper
set_label_address	src/cuda-sim/ptx_ir.cc	/^void symbol_table::set_label_address( const symbol *label, unsigned addr )$/;"	f	class:symbol_table
set_label_address	src/cuda-sim/ptx_ir.h	/^   void set_label_address( addr_t addr)$/;"	f	class:symbol
set_last_fetch	common/shd_warp_t.h	/^    void set_last_fetch( unsigned long long sim_cycle ) { m_last_fetch=sim_cycle; }$/;"	f	class:shd_warp_t
set_launched_kernel	launcher/child_process.h	/^  void set_launched_kernel()      { launched_kernel = true; }$/;"	f	class:ChildProcess
set_m_instr_mem_index	src/cuda-sim/ptx_ir.h	/^   void set_m_instr_mem_index(unsigned index) {$/;"	f	class:ptx_instruction
set_max_cta	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::set_max_cta( const kernel_info_t &kernel ) $/;"	f	class:shader_core_ctx
set_max_cta_per_shader	common/kernel_info_t.cc	/^kernel_info_t::set_max_cta_per_shader(const unsigned shader_id, const unsigned _max_cta)$/;"	f	class:kernel_info_t
set_max_cta_reason	common/kernel_info_t.h	/^   void set_max_cta_reason(limitCause reason) const { max_cta_per_shader_reason = reason; }$/;"	f	class:kernel_info_t
set_mc_param	src/gpuwattch/memoryctrl.cc	/^void MemoryController::set_mc_param()$/;"	f	class:MemoryController
set_mem_ctrl_power	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_mem_ctrl_power(double reads, double writes, double dram_precharge)$/;"	f	class:gpgpu_sim_wrapper
set_membar	common/shd_warp_t.h	/^    void set_membar() { m_membar=true; }$/;"	f	class:shd_warp_t
set_min_length	src/gpgpu-sim/delayqueue.h	/^   void set_min_length(unsigned int new_min_len) $/;"	f	class:fifo_pipeline
set_mk_scheduler	src/gpgpu-sim/gpu-cache.cc	/^baseline_cache::set_mk_scheduler(MKScheduler* mk_sched)$/;"	f	class:baseline_cache
set_mk_scheduler	src/gpgpu-sim/gpu-cache.h	/^    void set_mk_scheduler(MKScheduler* mk_sched)$/;"	f	class:mshr_table
set_mk_scheduler	src/gpgpu-sim/gpu-sim.cc	/^gpgpu_sim::set_mk_scheduler(MKScheduler* mk_sched)$/;"	f	class:gpgpu_sim
set_mk_scheduler	src/gpgpu-sim/l2cache.cc	/^memory_sub_partition::set_mk_scheduler(MKScheduler* mk_sched)$/;"	f	class:memory_sub_partition
set_mk_scheduler	src/gpgpu-sim/shader.cc	/^ldst_unit::set_mk_scheduler(MKScheduler* mk_sched)$/;"	f	class:ldst_unit
set_mk_scheduler	src/gpgpu-sim/shader.cc	/^shader_core_ctx::set_mk_scheduler(MKScheduler* mk_sched)$/;"	f	class:shader_core_ctx
set_mk_scheduler	src/gpgpu-sim/shader.cc	/^simt_core_cluster::set_mk_scheduler(MKScheduler* mk_sched)$/;"	f	class:simt_core_cluster
set_mul_div_or_other_archop	src/cuda-sim/cuda-sim.cc	/^void ptx_instruction::set_mul_div_or_other_archop(){$/;"	f	class:ptx_instruction
set_name	src/cuda-sim/ptx_ir.cc	/^void symbol_table::set_name( const char *name )$/;"	f	class:symbol_table
set_name	src/cuda-sim/ptx_ir.h	/^   void set_name(const char *name)$/;"	f	class:function_info
set_nctaid	src/cuda-sim/ptx_sim.h	/^   void set_nctaid( dim3 cta_size ) { m_nctaid = cta_size; }$/;"	f	class:ptx_thread_info
set_neg_pred	src/cuda-sim/ptx_ir.h	/^   void set_neg_pred()$/;"	f	class:operand_info
set_next_pc	common/shd_warp_t.h	/^    void set_next_pc( address_type pc ) { m_next_pc = pc; }$/;"	f	class:shd_warp_t
set_niu_param	src/gpuwattch/iocontrollers.cc	/^void NIUController::set_niu_param()$/;"	f	class:NIUController
set_noc_param	src/gpuwattch/noc.cc	/^void NoC::set_noc_param()$/;"	f	class:NoC
set_not_active	src/abstract_hardware_model.cc	/^void warp_inst_t::set_not_active( unsigned lane_id ) {$/;"	f	class:warp_inst_t
set_npc	src/cuda-sim/ptx_sim.cc	/^void ptx_thread_info::set_npc( const function_info *f )$/;"	f	class:ptx_thread_info
set_npc	src/cuda-sim/ptx_sim.h	/^   void set_npc( unsigned npc )$/;"	f	class:ptx_thread_info
set_ntid	src/cuda-sim/ptx_sim.h	/^   void set_ntid( dim3 tid ) { m_ntid = tid; }$/;"	f	class:ptx_thread_info
set_num_operands	src/abstract_hardware_model.h	/^    void set_num_operands(unsigned num) {num_operands=num;}$/;"	f	class:inst_t
set_num_regs	src/abstract_hardware_model.h	/^    void set_num_regs(unsigned num) {num_regs=num;}$/;"	f	class:inst_t
set_number_of_SMs	launcher/mk-sched/fixed_scheduler.cc	/^FixedScheduler::set_number_of_SMs(unsigned num_shader)$/;"	f	class:FixedScheduler
set_number_of_SMs	launcher/mk-sched/mk_scheduler.h	/^  virtual void set_number_of_SMs(unsigned num_shader) { num_SMs = num_shader; }$/;"	f	class:MKScheduler
set_opcode_and_latency	src/cuda-sim/cuda-sim.cc	/^void ptx_instruction::set_opcode_and_latency()$/;"	f	class:ptx_instruction
set_operand_lohi	src/cuda-sim/ptx_ir.h	/^   void set_operand_lohi(int set_value) { m_operand_lohi = set_value; }$/;"	f	class:operand_info
set_operand_neg	src/cuda-sim/ptx_ir.h	/^   void set_operand_neg() { m_operand_neg = true; }$/;"	f	class:operand_info
set_operand_value	src/cuda-sim/instructions.cc	/^void ptx_thread_info::set_operand_value( const operand_info &dst, const ptx_reg_t &data, unsigned type, ptx_thread_info *thread, const ptx_instruction *pI )$/;"	f	class:ptx_thread_info
set_operand_value	src/cuda-sim/instructions.cc	/^void ptx_thread_info::set_operand_value( const operand_info &dst, const ptx_reg_t &data, unsigned type, ptx_thread_info *thread, const ptx_instruction *pI, int overflow, int carry )$/;"	f	class:ptx_thread_info
set_overwrites_input	common/kernel_info_t.h	/^   void set_overwrites_input()   { m_overwrites_input = true; }$/;"	f	class:kernel_info_t
set_param_gpgpu_num_shaders	src/cuda-sim/cuda-sim.cc	/^void set_param_gpgpu_num_shaders(int num_shaders)$/;"	f
set_parent_process	common/kernel_info_t.h	/^   void set_parent_process(ChildProcess* parent) { m_parent = parent; }$/;"	f	class:kernel_info_t
set_pcie_param	src/gpuwattch/iocontrollers.cc	/^void PCIeController::set_pcie_param()$/;"	f	class:PCIeController
set_pppm	src/gpuwattch/cacti/basic_circuit.h	/^inline void set_pppm($/;"	f
set_proc_param	src/gpuwattch/processor.cc	/^void Processor::set_proc_param()$/;"	f	class:Processor
set_prop	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::set_prop( cudaDeviceProp *prop )$/;"	f	class:gpgpu_sim
set_ptx_version	src/cuda-sim/ptx_ir.cc	/^void symbol_table::set_ptx_version( float ver, unsigned ext ) $/;"	f	class:symbol_table
set_ptx_warp_size	src/cuda-sim/ptx_parser.cc	/^void set_ptx_warp_size(const struct core_config * warp_size)$/;"	f
set_rank_number	src/ramulator_sim/ALDRAM.cpp	/^void ALDRAM::set_rank_number(int rank) {$/;"	f	class:ALDRAM
set_rank_number	src/ramulator_sim/DDR3.cpp	/^void DDR3::set_rank_number(int rank) {$/;"	f	class:DDR3
set_rank_number	src/ramulator_sim/DDR4.cpp	/^void DDR4::set_rank_number(int rank) {$/;"	f	class:DDR4
set_rank_number	src/ramulator_sim/DSARP.cpp	/^void DSARP::set_rank_number(int rank) {$/;"	f	class:DSARP
set_rank_number	src/ramulator_sim/GDDR5.cpp	/^void GDDR5::set_rank_number(int rank) {$/;"	f	class:GDDR5
set_rank_number	src/ramulator_sim/HBM.cpp	/^void HBM::set_rank_number(int rank) {$/;"	f	class:HBM
set_rank_number	src/ramulator_sim/LPDDR3.cpp	/^void LPDDR3::set_rank_number(int rank) {$/;"	f	class:LPDDR3
set_rank_number	src/ramulator_sim/LPDDR4.cpp	/^void LPDDR4::set_rank_number(int rank) {$/;"	f	class:LPDDR4
set_rank_number	src/ramulator_sim/SALP.cpp	/^void SALP::set_rank_number(int rank) {$/;"	f	class:SALP
set_rank_number	src/ramulator_sim/TLDRAM.cpp	/^void TLDRAM::set_rank_number(int rank) {$/;"	f	class:TLDRAM
set_rank_number	src/ramulator_sim/WideIO.cpp	/^void WideIO::set_rank_number(int rank) {$/;"	f	class:WideIO
set_rank_number	src/ramulator_sim/WideIO2.cpp	/^void WideIO2::set_rank_number(int rank) {$/;"	f	class:WideIO2
set_reg	src/cuda-sim/instructions.cc	/^void ptx_thread_info::set_reg( const symbol *reg, const ptx_reg_t &value ) $/;"	f	class:ptx_thread_info
set_regfile_power	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_regfile_power(double reads, double writes,double ops)$/;"	f	class:gpgpu_sim_wrapper
set_regno	src/cuda-sim/ptx_ir.h	/^   void set_regno( unsigned regno, unsigned arch_regno )$/;"	f	class:symbol
set_reply	src/gpgpu-sim/mem_fetch.h	/^   void set_reply() $/;"	f	class:mem_fetch
set_request	src/gpgpu-sim/mem_fetch.h	/^   void set_request()\/\/KAIN used in HBM caching $/;"	f	class:mem_fetch
set_return	src/cuda-sim/ptx_ir.h	/^   void set_return() { m_is_return_var = true; }$/;"	f	class:operand_info
set_return	src/cuda-sim/ptx_parser.cc	/^void set_return()$/;"	f
set_return_timestamp	src/gpgpu-sim/mem_fetch.h	/^   void set_return_timestamp( unsigned t ) { m_timestamp2=t; }$/;"	f	class:mem_fetch
set_run_condition	launcher/launcher_option_parser.h	/^  void set_run_condition(enum StopSimulationCondition cond, unsigned long long value)$/;"	f	class:LauncherOptionParser
set_shader_to_drain	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::SM_info::set_shader_to_drain(const unsigned linear_shader_id)$/;"	f	class:DynamicScheduler::SM_info
set_shader_to_flush	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::SM_info::set_shader_to_flush(const unsigned linear_shader_id)$/;"	f	class:DynamicScheduler::SM_info
set_shader_to_switch	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::SM_info::set_shader_to_switch(const unsigned linear_shader_id)$/;"	f	class:DynamicScheduler::SM_info
set_shrd_mem_power	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_shrd_mem_power(double accesses)$/;"	f	class:gpgpu_sim_wrapper
set_single_thread_single_block	src/cuda-sim/ptx_sim.h	/^   void set_single_thread_single_block()$/;"	f	class:ptx_thread_info
set_sm_target	src/cuda-sim/ptx_ir.cc	/^void symbol_table::set_sm_target( const char *target, const char *ext, const char *ext2 )$/;"	f	class:symbol_table
set_span	src/gpgpu-sim/stat-tool.cc	/^void thread_insn_span::set_span( address_type pc ) $/;"	f	class:thread_insn_span
set_spill_interval	src/gpgpu-sim/stat-tool.cc	/^void set_spill_interval (unsigned long long  interval)$/;"	f
set_sppm	src/gpuwattch/cacti/basic_circuit.h	/^inline void set_sppm($/;"	f
set_status	src/gpgpu-sim/mem_fetch.cc	/^void mem_fetch::set_status( enum mem_fetch_status status, unsigned long long cycle ) $/;"	f	class:mem_fetch
set_stream	src/stream_manager.h	/^    void set_stream( CUstream_st *stream ) { m_stream = stream; }$/;"	f	class:stream_operation
set_sub_partition_id	src/gpgpu-sim/gpu-cache.cc	/^baseline_cache::set_sub_partition_id(int id)$/;"	f	class:baseline_cache
set_sub_partition_id	src/gpgpu-sim/gpu-cache.h	/^    void set_sub_partition_id(unsigned id)$/;"	f	class:mshr_table
set_switching_overhead	common/kernel_info_t.h	/^   void set_switching_overhead(unsigned long long overhead) { switching_overhead_per_cta = overhead; }$/;"	f	class:kernel_info_t
set_symtab	src/cuda-sim/ptx_ir.h	/^   void set_symtab(symbol_table *symtab )$/;"	f	class:function_info
set_symtab	src/cuda-sim/ptx_parser.cc	/^void set_symtab(void*symtab)$/;"	f
set_target	src/cuda-sim/ptx_sim.h	/^      void set_target( const char *sm_ver, const char *ext, const char *ext2 ) $/;"	f	class:ptx_version
set_tcache_power	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::set_tcache_power(double hits, double misses)$/;"	f	class:gpgpu_sim_wrapper
set_tid	src/cuda-sim/ptx_sim.h	/^   void set_tid( dim3 tid ) { m_tid = tid; }$/;"	f	class:ptx_thread_info
set_type	src/cuda-sim/ptx_ir.h	/^   void set_type( enum operand_type type ) $/;"	f	class:operand_info
set_upper_bound	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::SM_info::set_upper_bound(const unsigned bound)$/;"	f	class:DynamicScheduler::SM_info
set_valid	src/cuda-sim/ptx_sim.h	/^   void set_valid() { m_valid = true;}$/;"	f	class:ptx_thread_info
set_value	src/debug.h	/^   unsigned set_value( unsigned val ) { return m_value=val; }$/;"	f	class:brk_pt
set_variable_type	src/cuda-sim/ptx_parser.cc	/^void set_variable_type()$/;"	f
set_vector_operand_values	src/cuda-sim/instructions.cc	/^void ptx_thread_info::set_vector_operand_values( const operand_info &dst, $/;"	f	class:ptx_thread_info
set_w	src/gpuwattch/cacti/area.h	/^  void set_w(double w_) { w = w_; }$/;"	f	class:Area
set_watch	src/cuda-sim/memory.cc	/^template<unsigned BSIZE> void memory_space_impl<BSIZE>::set_watch( addr_t addr, unsigned watchpoint ) $/;"	f	class:memory_space_impl
set_wid	src/abstract_hardware_model.h	/^    void set_wid(unsigned wid) { m_warp_id = wid; }$/;"	f	class:simt_stack
setp_impl	src/cuda-sim/instructions.cc	/^void setp_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
sexd	src/cuda-sim/instructions.cc	/^ptx_reg_t sexd( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_mode, int saturation_mode )$/;"	f
sext	src/cuda-sim/instructions.cc	/^ptx_reg_t sext( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_mode, int saturation_mode )$/;"	f
sfu	src/gpgpu-sim/shader.cc	/^sfu:: sfu(  register_set* result_port, const shader_core_config *config,shader_core_ctx *core  )$/;"	f	class:sfu
sfu	src/gpgpu-sim/shader.h	/^class sfu : public pipelined_simd_unit$/;"	c
sfu_average_active_lanes	src/gpuwattch/XML_Parse.h	/^	double sfu_average_active_lanes;$/;"	m	struct:__anon15
sg_argc	src/gpgpusim_entrypoint.cc	/^static int sg_argc = 3;$/;"	v	file:
sg_argv	src/gpgpusim_entrypoint.cc	/^const char *sg_argv[] = {"", "-config","gpgpusim.config"};$/;"	v
shader_CTA_count_create	src/gpgpu-sim/stat-tool.cc	/^void shader_CTA_count_create( int n_shaders, unsigned long long  logging_interval)$/;"	f
shader_CTA_count_log	src/gpgpu-sim/stat-tool.cc	/^void shader_CTA_count_log( int shader_id, int nCTAadded )$/;"	f
shader_CTA_count_print	src/gpgpu-sim/stat-tool.cc	/^void shader_CTA_count_print( FILE *fout )$/;"	f
shader_CTA_count_unlog	src/gpgpu-sim/stat-tool.cc	/^void shader_CTA_count_unlog( int shader_id, int nCTAdone )$/;"	f
shader_CTA_count_visualizer_gzprint	src/gpgpu-sim/stat-tool.cc	/^void shader_CTA_count_visualizer_gzprint( gzFile fout )$/;"	f
shader_CTA_count_visualizer_print	src/gpgpu-sim/stat-tool.cc	/^void shader_CTA_count_visualizer_print( FILE *fout )$/;"	f
shader_cache_access_create	src/gpgpu-sim/stat-tool.cc	/^void shader_cache_access_create( int n_loggers, int n_types, unsigned long long  logging_interval)$/;"	f
shader_cache_access_log	src/gpgpu-sim/stat-tool.cc	/^void shader_cache_access_log( int logger_id, int type, int miss)$/;"	f
shader_cache_access_print	src/gpgpu-sim/stat-tool.cc	/^void shader_cache_access_print( FILE *fout )$/;"	f
shader_cache_access_unlog	src/gpgpu-sim/stat-tool.cc	/^void shader_cache_access_unlog( int logger_id, int type, int miss)$/;"	f
shader_clock	src/gpgpu-sim/gpu-sim.cc	/^int gpgpu_sim::shader_clock() const$/;"	f	class:gpgpu_sim
shader_core	src/gpgpu-sim/shader.h	/^   shader_core_ctx *shader_core() { return m_shader; }$/;"	f	class:opndcoll_rfu_t
shader_core_config	src/gpgpu-sim/shader.h	/^    shader_core_config(){$/;"	f	struct:shader_core_config
shader_core_config	src/gpgpu-sim/shader.h	/^struct shader_core_config : public core_config$/;"	s
shader_core_ctx	src/gpgpu-sim/shader.cc	/^shader_core_ctx::shader_core_ctx( class gpgpu_sim *gpu, $/;"	f	class:shader_core_ctx
shader_core_ctx	src/gpgpu-sim/shader.h	/^class shader_core_ctx : public core_t {$/;"	c
shader_core_mem_fetch_allocator	src/gpgpu-sim/shader.h	/^    shader_core_mem_fetch_allocator( unsigned core_id, unsigned cluster_id, const memory_config *config )$/;"	f	class:shader_core_mem_fetch_allocator
shader_core_mem_fetch_allocator	src/gpgpu-sim/shader.h	/^class shader_core_mem_fetch_allocator : public mem_fetch_allocator {$/;"	c
shader_core_power_stats_pod	src/gpgpu-sim/power_stat.h	/^struct shader_core_power_stats_pod {$/;"	s
shader_core_stats	src/gpgpu-sim/shader.h	/^    shader_core_stats( const shader_core_config *config )$/;"	f	class:shader_core_stats
shader_core_stats	src/gpgpu-sim/shader.h	/^class shader_core_stats : public shader_core_stats_pod {$/;"	c
shader_core_stats_pod	src/gpgpu-sim/shader.h	/^struct shader_core_stats_pod {$/;"	s
shader_core_stats_pod_start	src/gpgpu-sim/shader.h	/^	void* shader_core_stats_pod_start[]; \/\/ DO NOT MOVE FROM THE TOP - spaceless pointer to the start of this structure$/;"	m	struct:shader_core_stats_pod
shader_cycle_distro	src/gpgpu-sim/shader.h	/^    unsigned *shader_cycle_distro;$/;"	m	struct:shader_core_stats_pod
shader_cycles	src/gpgpu-sim/shader.h	/^	unsigned long long *shader_cycles;$/;"	m	struct:shader_core_stats_pod
shader_finishes_loading_context	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::shader_finishes_loading_context(kernel_info_t* kernel, unsigned shader_id)$/;"	f	class:DynamicScheduler
shader_finishes_loading_context	launcher/mk-sched/mk_scheduler.h	/^  virtual void shader_finishes_loading_context(kernel_info_t* kernel, unsigned shader_id) {}$/;"	f	class:MKScheduler
shader_id	common/preempt_overhead.h	/^  unsigned shader_id;$/;"	m	class:preempt_overhead_item
shader_id	common/preempt_overhead.h	/^  unsigned shader_id;$/;"	m	class:shader_preempt_overhead
shader_loads_context	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::shader_loads_context(kernel_info_t* kernel, unsigned shader_id)$/;"	f	class:DynamicScheduler
shader_loads_context	launcher/mk-sched/mk_scheduler.h	/^  virtual void shader_loads_context(kernel_info_t* kernel, unsigned shader_id) {}$/;"	f	class:MKScheduler
shader_mem_acc_create	src/gpgpu-sim/stat-tool.cc	/^void shader_mem_acc_create( int n_loggers, int n_dram, int n_bank, unsigned long long  logging_interval)$/;"	f
shader_mem_acc_log	src/gpgpu-sim/stat-tool.cc	/^void shader_mem_acc_log( int logger_id, int dram_id, int bank, char rw)$/;"	f
shader_mem_acc_print	src/gpgpu-sim/stat-tool.cc	/^void shader_mem_acc_print( FILE *fout )$/;"	f
shader_mem_acc_snapshot	src/gpgpu-sim/stat-tool.cc	/^void shader_mem_acc_snapshot( int logger_id, unsigned long long  current_cycle)$/;"	f
shader_mem_lat_create	src/gpgpu-sim/stat-tool.cc	/^void shader_mem_lat_create( int n_loggers, unsigned long long  logging_interval)$/;"	f
shader_mem_lat_log	src/gpgpu-sim/stat-tool.cc	/^void shader_mem_lat_log( int logger_id, int latency)$/;"	f
shader_mem_lat_print	src/gpgpu-sim/stat-tool.cc	/^void shader_mem_lat_print( FILE *fout )$/;"	f
shader_mem_lat_snapshot	src/gpgpu-sim/stat-tool.cc	/^void shader_mem_lat_snapshot( int logger_id, unsigned long long  current_cycle)$/;"	f
shader_memory_interface	src/gpgpu-sim/shader.h	/^    shader_memory_interface( shader_core_ctx *core, simt_core_cluster *cluster ) { m_core=core; m_cluster=cluster; }$/;"	f	class:shader_memory_interface
shader_memory_interface	src/gpgpu-sim/shader.h	/^class shader_memory_interface : public mem_fetch_interface {$/;"	c
shader_preempt_overhead	common/preempt_overhead.h	/^  shader_preempt_overhead(unsigned _shader_id)$/;"	f	class:shader_preempt_overhead
shader_preempt_overhead	common/preempt_overhead.h	/^class shader_preempt_overhead {$/;"	c
shader_preempt_overhead_compare	common/preempt_overhead.h	/^  shader_preempt_overhead_compare() {}$/;"	f	class:shader_preempt_overhead_compare
shader_preempt_overhead_compare	common/preempt_overhead.h	/^class shader_preempt_overhead_compare {$/;"	c
shader_print_cache_stats	src/gpgpu-sim/shader.cc	/^void gpgpu_sim::shader_print_cache_stats( FILE *fout ) const{$/;"	f	class:gpgpu_sim
shader_print_l1_miss_stat	src/gpgpu-sim/shader.cc	/^void gpgpu_sim::shader_print_l1_miss_stat( FILE *fout ) const$/;"	f	class:gpgpu_sim
shader_print_runtime_stat	src/gpgpu-sim/shader.cc	/^void gpgpu_sim::shader_print_runtime_stat( FILE *fout ) $/;"	f	class:gpgpu_sim
shader_print_scheduler_stat	src/gpgpu-sim/shader.cc	/^void gpgpu_sim::shader_print_scheduler_stat( FILE* fout, bool print_dynamic_info ) const$/;"	f	class:gpgpu_sim
shader_sort	common/preempt_overhead.h	/^typedef std::priority_queue<shader_preempt_overhead, std::vector<shader_preempt_overhead>, shader_preempt_overhead_compare> shader_sort;$/;"	t
shader_warp_occ_create	src/gpgpu-sim/stat-tool.cc	/^void shader_warp_occ_create( int n_loggers, int simd_width, unsigned long long  logging_interval)$/;"	f
shader_warp_occ_log	src/gpgpu-sim/stat-tool.cc	/^void shader_warp_occ_log( int logger_id, int warp_occ)$/;"	f
shader_warp_occ_print	src/gpgpu-sim/stat-tool.cc	/^void shader_warp_occ_print( FILE *fout )$/;"	f
shader_warp_occ_snapshot	src/gpgpu-sim/stat-tool.cc	/^void shader_warp_occ_snapshot( int logger_id, unsigned long long  current_cycle)$/;"	f
shadow_dir	src/gpuwattch/sharedcache.h	/^    ArrayST * shadow_dir;$/;"	m	class:CCdir
shared	src/intersim2/routers/chaos_router.hpp	/^    shared         \/\/ >**HT**>$/;"	e	enum:ChaosRouter::eQState
shared_cycle	src/gpgpu-sim/shader.cc	/^bool ldst_unit::shared_cycle( warp_inst_t &inst, mem_stage_stall_type &rc_fail, mem_stage_access_type &fail_type)$/;"	f	class:ldst_unit
shared_mem_size	src/gpgpu-sim/gpu-sim.cc	/^int gpgpu_sim::shared_mem_size() const$/;"	f	class:gpgpu_sim
shared_memory_lookup	src/cuda-sim/cuda-sim.cc	/^std::map<unsigned, std::map<unsigned,memory_space*> > SimulationInitializer::shared_memory_lookup;$/;"	m	class:SimulationInitializer	file:
shared_memory_lookup	src/cuda-sim/cuda-sim.h	/^  static std::map<unsigned, std::map<unsigned,memory_space*> > shared_memory_lookup;$/;"	m	class:SimulationInitializer
shared_memory_saved	src/cuda-sim/cuda-sim.cc	/^std::map<unsigned, std::map<unsigned,memory_space*> > SimulationInitializer::shared_memory_saved;$/;"	m	class:SimulationInitializer	file:
shared_memory_saved	src/cuda-sim/cuda-sim.h	/^  static std::map<unsigned, std::map<unsigned, memory_space*> > shared_memory_saved;$/;"	m	class:SimulationInitializer
shared_space	src/abstract_hardware_model.h	/^   shared_space,$/;"	e	enum:_memory_space_t
shared_to_generic	src/cuda-sim/cuda-sim.cc	/^addr_t shared_to_generic( unsigned smid, addr_t addr )$/;"	f
sharedmemory	src/gpuwattch/XML_Parse.h	/^	dcache_systemcore sharedmemory; \/\/ added by Jingwen$/;"	m	struct:__anon15
sharedmemory	src/gpuwattch/core.h	/^	DataCache sharedmemory;$/;"	m	class:LoadStoreU
shd_warp_t	common/shd_warp_t.h	/^    shd_warp_t( class shader_core_ctx *shader, unsigned warp_size) $/;"	f	class:shd_warp_t
shd_warp_t	common/shd_warp_t.h	/^class shd_warp_t {$/;"	c
shl_impl	src/cuda-sim/instructions.cc	/^void shl_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
shmem_bank_func	src/abstract_hardware_model.h	/^    unsigned shmem_bank_func(address_type addr) const$/;"	f	struct:core_config
shmem_limited_broadcast	src/abstract_hardware_model.h	/^    bool shmem_limited_broadcast;$/;"	m	struct:core_config
shmem_read_access	src/gpgpu-sim/power_stat.h	/^    unsigned *shmem_read_access[NUM_STAT_IDX];   \/\/ Shared memory access$/;"	m	struct:mem_power_stats_pod
short	build/src/cuda-sim/ptx.tab.c	305;"	d	file:
short	build/src/cuda-sim/ptxinfo.tab.c	176;"	d	file:
short	src/intersim2/y.tab.c	154;"	d	file:
short_circuit	src/gpuwattch/cacti/cacti_interface.h	/^    double short_circuit;$/;"	m	class:powerComponents
shortcircuit	src/gpuwattch/cacti/basic_circuit.cc	/^double shortcircuit($/;"	f
shortcircuit_simple	src/gpuwattch/cacti/basic_circuit.cc	/^double shortcircuit_simple($/;"	f
shr_impl	src/cuda-sim/instructions.cc	/^void shr_impl( const ptx_instruction *pI, ptx_thread_info *thread )$/;"	f
shuffle	src/intersim/traffic.cpp	/^int shuffle( int source, int total_nodes )$/;"	f
sibling	src/ramulator_sim/ALDRAM.h	/^        bool sibling;$/;"	m	struct:ALDRAM::TimingEntry
sibling	src/ramulator_sim/DDR3.h	/^        bool sibling;$/;"	m	struct:DDR3::TimingEntry
sibling	src/ramulator_sim/DDR4.h	/^        bool sibling;$/;"	m	struct:DDR4::TimingEntry
sibling	src/ramulator_sim/DSARP.h	/^        bool sibling;$/;"	m	struct:DSARP::TimingEntry
sibling	src/ramulator_sim/GDDR5.h	/^        bool sibling;$/;"	m	struct:GDDR5::TimingEntry
sibling	src/ramulator_sim/HBM.h	/^        bool sibling;$/;"	m	struct:HBM::TimingEntry
sibling	src/ramulator_sim/LPDDR3.h	/^        bool sibling;$/;"	m	struct:LPDDR3::TimingEntry
sibling	src/ramulator_sim/LPDDR4.h	/^        bool sibling;$/;"	m	struct:LPDDR4::TimingEntry
sibling	src/ramulator_sim/SALP.h	/^        bool sibling;$/;"	m	struct:SALP::TimingEntry
sibling	src/ramulator_sim/TLDRAM.h	/^        bool sibling;$/;"	m	struct:TLDRAM::TimingEntry
sibling	src/ramulator_sim/WideIO.h	/^        bool sibling;$/;"	m	struct:WideIO::TimingEntry
sibling	src/ramulator_sim/WideIO2.h	/^        bool sibling;$/;"	m	struct:WideIO2::TimingEntry
sid_to_cid	src/gpgpu-sim/shader.h	/^    unsigned sid_to_cid( unsigned sid )     const { return sid % n_simt_cores_per_cluster; }$/;"	f	struct:shader_core_config
sid_to_cluster	src/gpgpu-sim/shader.h	/^    unsigned sid_to_cluster( unsigned sid ) const { return sid \/ n_simt_cores_per_cluster; }$/;"	f	struct:shader_core_config
sign_extend	src/cuda-sim/instructions.cc	/^void sign_extend( ptx_reg_t &data, unsigned src_size, const operand_info &dst )$/;"	f
signal_fall_time	src/gpuwattch/cacti/wire.cc	/^Wire::signal_fall_time ()$/;"	f	class:Wire
signal_rise_time	src/gpuwattch/cacti/wire.cc	/^double Wire::signal_rise_time ()$/;"	f	class:Wire
sim_nuca	src/gpuwattch/cacti/nuca.cc	/^Nuca::sim_nuca()$/;"	f	class:Nuca
simd_function_unit	src/gpgpu-sim/shader.cc	/^simd_function_unit::simd_function_unit( const shader_core_config *config )$/;"	f	class:simd_function_unit
simd_function_unit	src/gpgpu-sim/shader.h	/^class simd_function_unit {$/;"	c
simd_model	src/gpgpu-sim/gpu-sim.cc	/^enum divergence_support_t gpgpu_sim::simd_model() const$/;"	f	class:gpgpu_sim
simd_width	src/gpuwattch/XML_Parse.h	/^   int simd_width;\/\/ (8)$/;"	m	struct:__anon15
simplified_nmos_leakage	src/gpuwattch/cacti/basic_circuit.cc	/^double simplified_nmos_leakage($/;"	f
simplified_pmos_leakage	src/gpuwattch/cacti/basic_circuit.cc	/^double simplified_pmos_leakage($/;"	f
simt_core_cluster	src/gpgpu-sim/shader.cc	/^simt_core_cluster::simt_core_cluster( class gpgpu_sim *gpu, $/;"	f	class:simt_core_cluster
simt_core_cluster	src/gpgpu-sim/shader.h	/^class simt_core_cluster {$/;"	c
simt_core_sim_order	src/gpgpu-sim/shader.h	/^    int simt_core_sim_order; $/;"	m	struct:shader_core_config
simt_mask_t	src/abstract_hardware_model.h	/^typedef std::bitset<MAX_WARP_SIZE_SIMT_STACK> simt_mask_t;$/;"	t
simt_stack	src/abstract_hardware_model.cc	/^simt_stack::simt_stack( unsigned wid, unsigned warpSize)$/;"	f	class:simt_stack
simt_stack	src/abstract_hardware_model.h	/^class simt_stack {$/;"	c
simt_stack_entry	src/abstract_hardware_model.h	/^        simt_stack_entry() :$/;"	f	struct:simt_stack::simt_stack_entry
simt_stack_entry	src/abstract_hardware_model.h	/^    struct simt_stack_entry {$/;"	s	class:simt_stack
simt_stack_saved	src/cuda-sim/cuda-sim.cc	/^std::map<unsigned, std::map<unsigned, std::map<unsigned,simt_stack*> > > SimulationInitializer::simt_stack_saved;$/;"	m	class:SimulationInitializer	file:
simt_stack_saved	src/cuda-sim/cuda-sim.h	/^  static std::map<unsigned, std::map<unsigned, std::map<unsigned, simt_stack*> > > simt_stack_saved;$/;"	m	class:SimulationInitializer
simulator	launcher/launcher.cc	/^static Simulator simulator;$/;"	v	file:
sin_impl	src/cuda-sim/instructions.cc	/^void sin_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
singlerf	src/intersim/routefunc.cpp	/^void singlerf( const Router *, const Flit *f, int, OutputSet *outputs, bool inject )$/;"	f
size	common/cuda_array.h	/^   int size; \/\/in bytes$/;"	m	struct:cudaArray
size	common/preempt_overhead.h	/^  unsigned size() const$/;"	f	class:shader_preempt_overhead
size	libcuda/cuda_runtime_api.cc	/^	int size; \/\/in bytes$/;"	m	struct:cudaArray	file:
size	src/cuda-sim/ptx_sim.h	/^   size_t size;$/;"	m	struct:param_t
size	src/gpgpu-sim/gpu-cache.h	/^        unsigned size() const { return m_num;}$/;"	f	class:tex_cache::fifo
size	src/gpgpu-sim/gpu-cache.h	/^    unsigned size() const { return m_config.get_num_lines();}$/;"	f	class:tag_array
size	src/gpgpu-sim/mem_fetch.h	/^   unsigned size() const { return m_data_size+m_ctrl_size; }$/;"	f	class:mem_fetch
size	src/ramulator_sim/ALDRAM.h	/^        int size;$/;"	m	struct:ALDRAM::OrgEntry
size	src/ramulator_sim/Cache.h	/^  size_t size;$/;"	m	class:Cache
size	src/ramulator_sim/Controller.h	/^        unsigned int size() {return q.size();}$/;"	f	struct:Controller::Queue
size	src/ramulator_sim/DDR3.h	/^        int size;$/;"	m	struct:DDR3::OrgEntry
size	src/ramulator_sim/DDR4.h	/^        int size;$/;"	m	struct:DDR4::OrgEntry
size	src/ramulator_sim/DRAM.h	/^    long size;$/;"	m	class:DRAM
size	src/ramulator_sim/DSARP.h	/^        int size;$/;"	m	struct:DSARP::OrgEntry
size	src/ramulator_sim/GDDR5.h	/^        int size;$/;"	m	struct:GDDR5::OrgEntry
size	src/ramulator_sim/HBM.h	/^        int size;$/;"	m	struct:HBM::OrgEntry
size	src/ramulator_sim/LPDDR3.h	/^        int size;$/;"	m	struct:LPDDR3::OrgEntry
size	src/ramulator_sim/LPDDR4.h	/^        int size;$/;"	m	struct:LPDDR4::OrgEntry
size	src/ramulator_sim/SALP.h	/^        int size;$/;"	m	struct:SALP::OrgEntry
size	src/ramulator_sim/StatType.h	/^  size_type size() const { return 0; }$/;"	f	class:Stats_Ram::Stat
size	src/ramulator_sim/StatType.h	/^  size_type size() const {return 1;}$/;"	f	class:Stats_Ram::AverageDeviation
size	src/ramulator_sim/StatType.h	/^  size_type size() const {return 1;}$/;"	f	class:Stats_Ram::ScalarBase
size	src/ramulator_sim/StatType.h	/^  size_type size() const {return 1;}$/;"	f	class:Stats_Ram::StandardDeviation
size	src/ramulator_sim/StatType.h	/^  size_type size() const {return _size;}$/;"	f	class:Stats_Ram::VectorBase
size	src/ramulator_sim/StatType.h	/^  size_type size() const {return cvec.size();}$/;"	f	class:Stats_Ram::Distribution
size	src/ramulator_sim/StatType.h	/^  size_type size() const {return param_buckets;}$/;"	f	class:Stats_Ram::Histogram
size	src/ramulator_sim/Statistics.h	/^  Stats_Ram::size_type size(void) const { return stat.size(); }$/;"	f	class:StatBase
size	src/ramulator_sim/TLDRAM.h	/^        int size;$/;"	m	struct:TLDRAM::OrgEntry
size	src/ramulator_sim/WideIO.h	/^        int size;$/;"	m	struct:WideIO::OrgEntry
size	src/ramulator_sim/WideIO2.h	/^        int size; \/\/ per-channel density$/;"	m	struct:WideIO2::OrgEntry
size_stack	src/gpgpu-sim/stack.cc	/^int size_stack(Stack *S) {$/;"	f
size_type	src/ramulator_sim/StatType.h	/^typedef unsigned int size_type;$/;"	t	namespace:Stats_Ram
sl_data_drv	src/gpuwattch/cacti/mat.h	/^    Driver * sl_data_drv;\/\/search line data driver$/;"	m	class:Mat
sl_precharge_eq_drv	src/gpuwattch/cacti/mat.h	/^    Driver * sl_precharge_eq_drv;\/\/searchline prechage driver$/;"	m	class:Mat
slct_impl	src/cuda-sim/instructions.cc	/^void slct_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
slice_lower_bits	src/ramulator_sim/Memory.h	/^    int slice_lower_bits(long& addr, int bits)$/;"	f	class:Memory
sm_next_access_uid	src/abstract_hardware_model.cc	/^unsigned mem_access_t::sm_next_access_uid = 0;   $/;"	m	class:mem_access_t	file:
sm_next_access_uid	src/abstract_hardware_model.h	/^   static unsigned sm_next_access_uid;$/;"	m	class:mem_access_t
sm_next_mf_request_uid	src/gpgpu-sim/mem_fetch.cc	/^unsigned mem_fetch::sm_next_mf_request_uid=1;$/;"	m	class:mem_fetch	file:
sm_next_mf_request_uid	src/gpgpu-sim/mem_fetch.h	/^   static unsigned sm_next_mf_request_uid;$/;"	m	class:mem_fetch
sm_next_stream_uid	src/stream_manager.cc	/^unsigned CUstream_st::sm_next_stream_uid = 0;$/;"	m	class:CUstream_st	file:
sm_next_stream_uid	src/stream_manager.h	/^    static unsigned sm_next_stream_uid;$/;"	m	struct:CUstream_st
sm_next_uid	src/abstract_hardware_model.cc	/^unsigned warp_inst_t::sm_next_uid = 0;$/;"	m	class:warp_inst_t	file:
sm_next_uid	src/abstract_hardware_model.h	/^    static unsigned sm_next_uid;$/;"	m	class:warp_inst_t
sm_next_uid	src/cuda-sim/ptx_ir.cc	/^unsigned function_info::sm_next_uid = 1;$/;"	m	class:function_info	file:
sm_next_uid	src/cuda-sim/ptx_ir.cc	/^unsigned operand_info::sm_next_uid=1;$/;"	m	class:operand_info	file:
sm_next_uid	src/cuda-sim/ptx_ir.cc	/^unsigned symbol::sm_next_uid = 1;$/;"	m	class:symbol	file:
sm_next_uid	src/cuda-sim/ptx_ir.h	/^   static unsigned sm_next_uid;$/;"	m	class:function_info
sm_next_uid	src/cuda-sim/ptx_ir.h	/^   static unsigned sm_next_uid;$/;"	m	class:operand_info
sm_next_uid	src/cuda-sim/ptx_ir.h	/^   static unsigned sm_next_uid;$/;"	m	class:symbol
sm_target	src/abstract_hardware_model.h	/^   unsigned sm_target;$/;"	m	struct:gpgpu_ptx_sim_kernel_info
smem	src/abstract_hardware_model.h	/^   int smem;$/;"	m	struct:gpgpu_ptx_sim_kernel_info
smem_n_way_bank_conflict_total	src/cuda-sim/ptx-stats.cc	/^    unsigned long long smem_n_way_bank_conflict_total;  \/\/ total number of banks accessed by this instruction$/;"	m	class:ptx_file_line_stats	file:
smem_warp_count	src/cuda-sim/ptx-stats.cc	/^    unsigned long smem_warp_count;                      \/\/ number of warps accessing shared memory$/;"	m	class:ptx_file_line_stats	file:
sn	src/intersim/flit.hpp	/^   int  sn;$/;"	m	struct:Flit
snap_shot	src/gpgpu-sim/stat-tool.cc	/^void linear_histogram_logger::snap_shot(unsigned long long  current_cycle) {$/;"	f	class:linear_histogram_logger
snap_shot	src/gpgpu-sim/stat-tool.cc	/^void thread_CFlocality::snap_shot(unsigned long long  current_cycle) $/;"	f	class:thread_CFlocality
snap_shot_trigger	src/gpgpu-sim/stat-tool.h	/^   snap_shot_trigger(unsigned long long  interval) : m_snap_shot_interval(interval) {}$/;"	f	class:snap_shot_trigger
snap_shot_trigger	src/gpgpu-sim/stat-tool.h	/^class snap_shot_trigger {$/;"	c
solution	src/gpuwattch/cacti/Ucache.h	/^struct solution$/;"	s
solve	src/gpuwattch/cacti/Ucache.cc	/^void solve(uca_org_t *fin_res)$/;"	f
sort_throughput_queue	common/preempt_overhead.h	/^typedef std::priority_queue<preempt_overhead_item, std::vector<preempt_overhead_item>, preempt_throughput_overhead_comparison> sort_throughput_queue;$/;"	t
sort_warps_by_oldest_dynamic_id	src/gpgpu-sim/shader.cc	/^bool scheduler_unit::sort_warps_by_oldest_dynamic_id(shd_warp_t* lhs, shd_warp_t* rhs)$/;"	f	class:scheduler_unit
source	src/intersim2/packet_reply_info.hpp	/^  int source;$/;"	m	class:PacketReplyInfo
source_file	src/cuda-sim/ptx_ir.h	/^   const char *source_file() const { return m_source_file.c_str();} $/;"	f	class:ptx_instruction
source_inst	src/cuda-sim/ptx_ir.h	/^   class ptx_instruction* source_inst;$/;"	m	struct:gpgpu_recon_t	typeref:class:gpgpu_recon_t::ptx_instruction
source_line	src/cuda-sim/ptx_ir.h	/^   unsigned source_line() const { return m_source_line;}$/;"	f	class:ptx_instruction
source_pc	src/cuda-sim/ptx_ir.h	/^   address_type source_pc;$/;"	m	struct:gpgpu_recon_t
sp_average_active_lanes	src/gpuwattch/XML_Parse.h	/^	double sp_average_active_lanes;$/;"	m	struct:__anon15
sp_op	src/abstract_hardware_model.h	/^    special_ops sp_op;           \/\/ code (uarch visible) identify if int_alu, fp_alu, int_mul ....$/;"	m	class:inst_t
sp_unit	src/gpgpu-sim/shader.cc	/^sp_unit::sp_unit( register_set* result_port, const shader_core_config *config,shader_core_ctx *core)$/;"	f	class:sp_unit
sp_unit	src/gpgpu-sim/shader.h	/^class sp_unit : public pipelined_simd_unit$/;"	c
space	src/abstract_hardware_model.h	/^    memory_space_t space;$/;"	m	class:inst_t
space_scaling	src/gpuwattch/interconnect.h	/^    double width_scaling, space_scaling;$/;"	m	class:interconnect
space_spec	src/cuda-sim/ptx.y	/^space_spec: REG_DIRECTIVE {  add_space_spec(reg_space,0); }$/;"	l
spacing_poly_to_contact	src/gpuwattch/cacti/parameter.h	/^  double spacing_poly_to_contact;$/;"	m	class:TechnologyParameter
spacing_poly_to_poly	src/gpuwattch/cacti/parameter.h	/^  double spacing_poly_to_poly;$/;"	m	class:TechnologyParameter
span_count_map	src/gpgpu-sim/stat-tool.h	/^   typedef tr1_hash_map<address_type, int> span_count_map;$/;"	t	class:thread_insn_span
spawn	launcher/child_process.cc	/^ChildProcess::spawn() {$/;"	f	class:ChildProcess
spec	src/ramulator_sim/DRAM.h	/^    T* spec;$/;"	m	class:DRAM
spec	src/ramulator_sim/Memory.h	/^    T * spec;$/;"	m	class:Memory
special_operations_t	src/abstract_hardware_model.h	/^enum special_operations_t {$/;"	g
special_ops	src/abstract_hardware_model.h	/^typedef enum special_operations_t special_ops; \/\/ Required to identify for the power model$/;"	t	typeref:enum:special_operations_t
special_regs	src/cuda-sim/opcodes.h	/^enum special_regs {$/;"	g
specific_tag	src/gpuwattch/cacti/cacti_interface.h	/^    bool     specific_tag;$/;"	m	class:InputParameter
speed_entry	src/ramulator_sim/ALDRAM.h	/^    }, speed_entry;$/;"	m	class:ALDRAM	typeref:struct:ALDRAM::SpeedEntry
speed_entry	src/ramulator_sim/DDR3.h	/^    }, speed_entry;$/;"	m	class:DDR3	typeref:struct:DDR3::SpeedEntry
speed_entry	src/ramulator_sim/DDR4.h	/^    }, speed_entry;$/;"	m	class:DDR4	typeref:struct:DDR4::SpeedEntry
speed_entry	src/ramulator_sim/DSARP.h	/^    }, speed_entry;$/;"	m	class:DSARP	typeref:struct:DSARP::SpeedEntry
speed_entry	src/ramulator_sim/GDDR5.h	/^    }, speed_entry;$/;"	m	class:GDDR5	typeref:struct:GDDR5::SpeedEntry
speed_entry	src/ramulator_sim/HBM.h	/^    }, speed_entry;$/;"	m	class:HBM	typeref:struct:HBM::SpeedEntry
speed_entry	src/ramulator_sim/LPDDR3.h	/^    }, speed_entry;$/;"	m	class:LPDDR3	typeref:struct:LPDDR3::SpeedEntry
speed_entry	src/ramulator_sim/LPDDR4.h	/^    }, speed_entry;$/;"	m	class:LPDDR4	typeref:struct:LPDDR4::SpeedEntry
speed_entry	src/ramulator_sim/SALP.h	/^    }, speed_entry;$/;"	m	class:SALP	typeref:struct:SALP::SpeedEntry
speed_entry	src/ramulator_sim/TLDRAM.h	/^    }, speed_entry;$/;"	m	class:TLDRAM	typeref:struct:TLDRAM::SpeedEntry
speed_entry	src/ramulator_sim/WideIO.h	/^    }, speed_entry;$/;"	m	class:WideIO	typeref:struct:WideIO::SpeedEntry
speed_entry	src/ramulator_sim/WideIO2.h	/^    }, speed_entry;$/;"	m	class:WideIO2	typeref:struct:WideIO2::SpeedEntry
speed_map	src/ramulator_sim/ALDRAM.cpp	/^map<string, enum ALDRAM::Speed> ALDRAM::speed_map = {$/;"	m	class:ALDRAM	file:
speed_map	src/ramulator_sim/ALDRAM.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:ALDRAM
speed_map	src/ramulator_sim/DDR3.cpp	/^map<string, enum DDR3::Speed> DDR3::speed_map = {$/;"	m	class:DDR3	file:
speed_map	src/ramulator_sim/DDR3.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:DDR3
speed_map	src/ramulator_sim/DDR4.cpp	/^map<string, enum DDR4::Speed> DDR4::speed_map = {$/;"	m	class:DDR4	file:
speed_map	src/ramulator_sim/DDR4.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:DDR4
speed_map	src/ramulator_sim/DSARP.cpp	/^map<string, enum DSARP::Speed> DSARP::speed_map = {$/;"	m	class:DSARP	file:
speed_map	src/ramulator_sim/DSARP.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:DSARP
speed_map	src/ramulator_sim/GDDR5.cpp	/^map<string, enum GDDR5::Speed> GDDR5::speed_map = {$/;"	m	class:GDDR5	file:
speed_map	src/ramulator_sim/GDDR5.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:GDDR5
speed_map	src/ramulator_sim/HBM.cpp	/^map<string, enum HBM::Speed> HBM::speed_map = {$/;"	m	class:HBM	file:
speed_map	src/ramulator_sim/HBM.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:HBM
speed_map	src/ramulator_sim/LPDDR3.cpp	/^map<string, enum LPDDR3::Speed> LPDDR3::speed_map = {$/;"	m	class:LPDDR3	file:
speed_map	src/ramulator_sim/LPDDR3.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:LPDDR3
speed_map	src/ramulator_sim/LPDDR4.cpp	/^map<string, enum LPDDR4::Speed> LPDDR4::speed_map = {$/;"	m	class:LPDDR4	file:
speed_map	src/ramulator_sim/LPDDR4.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:LPDDR4
speed_map	src/ramulator_sim/SALP.cpp	/^map<string, enum SALP::Speed> SALP::speed_map = {$/;"	m	class:SALP	file:
speed_map	src/ramulator_sim/SALP.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:SALP
speed_map	src/ramulator_sim/TLDRAM.cpp	/^map<string, enum TLDRAM::Speed> TLDRAM::speed_map = {$/;"	m	class:TLDRAM	file:
speed_map	src/ramulator_sim/TLDRAM.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:TLDRAM
speed_map	src/ramulator_sim/WideIO.cpp	/^map<string, enum WideIO::Speed> WideIO::speed_map = {$/;"	m	class:WideIO	file:
speed_map	src/ramulator_sim/WideIO.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:WideIO
speed_map	src/ramulator_sim/WideIO2.cpp	/^map<string, enum WideIO2::Speed> WideIO2::speed_map = {$/;"	m	class:WideIO2	file:
speed_map	src/ramulator_sim/WideIO2.h	/^    static map<string, enum Speed> speed_map;$/;"	m	class:WideIO2
speed_table	src/ramulator_sim/ALDRAM.h	/^    } speed_table[int(Temp::MAX)][int(Speed::MAX)] = {$/;"	m	class:ALDRAM	typeref:struct:ALDRAM::SpeedEntry
speed_table	src/ramulator_sim/DDR3.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:DDR3	typeref:struct:DDR3::SpeedEntry
speed_table	src/ramulator_sim/DDR4.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:DDR4	typeref:struct:DDR4::SpeedEntry
speed_table	src/ramulator_sim/DSARP.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:DSARP	typeref:struct:DSARP::SpeedEntry
speed_table	src/ramulator_sim/GDDR5.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:GDDR5	typeref:struct:GDDR5::SpeedEntry
speed_table	src/ramulator_sim/HBM.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:HBM	typeref:struct:HBM::SpeedEntry
speed_table	src/ramulator_sim/LPDDR3.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:LPDDR3	typeref:struct:LPDDR3::SpeedEntry
speed_table	src/ramulator_sim/LPDDR4.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:LPDDR4	typeref:struct:LPDDR4::SpeedEntry
speed_table	src/ramulator_sim/SALP.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:SALP	typeref:struct:SALP::SpeedEntry
speed_table	src/ramulator_sim/TLDRAM.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:TLDRAM	typeref:struct:TLDRAM::SpeedEntry
speed_table	src/ramulator_sim/WideIO.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:WideIO	typeref:struct:WideIO::SpeedEntry
speed_table	src/ramulator_sim/WideIO2.h	/^    } speed_table[int(Speed::MAX)] = {$/;"	m	class:WideIO2	typeref:struct:WideIO2::SpeedEntry
spill	src/gpgpu-sim/stat-tool.cc	/^void linear_histogram_logger::spill(FILE *fout, bool final) $/;"	f	class:linear_histogram_logger
spill	src/gpgpu-sim/stat-tool.cc	/^void thread_CFlocality::spill(FILE *fout, bool final) $/;"	f	class:thread_CFlocality
spill_interval	src/gpgpu-sim/stat-tool.cc	/^static unsigned long long  spill_interval = 0;$/;"	v	file:
spill_log_interface	src/gpgpu-sim/stat-tool.h	/^   spill_log_interface() {}$/;"	f	class:spill_log_interface
spill_log_interface	src/gpgpu-sim/stat-tool.h	/^class spill_log_interface {$/;"	c
spill_log_to_file	src/gpgpu-sim/stat-tool.cc	/^void spill_log_to_file (FILE *fout, int final, unsigned long long  current_cycle)$/;"	f
sqrt_impl	src/cuda-sim/instructions.cc	/^void sqrt_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
squares	src/ramulator_sim/StatType.h	/^  Counter squares;$/;"	m	class:Stats_Ram::AverageDeviation
squares	src/ramulator_sim/StatType.h	/^  Counter squares;$/;"	m	class:Stats_Ram::Distribution
squares	src/ramulator_sim/StatType.h	/^  Counter squares;$/;"	m	class:Stats_Ram::Histogram
squares	src/ramulator_sim/StatType.h	/^  Counter squares;$/;"	m	class:Stats_Ram::StandardDeviation
sram	src/gpuwattch/cacti/parameter.h	/^  MemoryType sram;$/;"	m	class:TechnologyParameter
sram_cell	src/gpuwattch/cacti/parameter.h	/^  DeviceType sram_cell;   \/\/ SRAM cell transistor$/;"	m	class:TechnologyParameter
sram_num_cells_wl_stitching_	src/gpuwattch/cacti/const.h	/^const static uint32_t sram_num_cells_wl_stitching_ = 16;$/;"	v
src	src/abstract_hardware_model.h	/^        int src[MAX_REG_OPERANDS];$/;"	m	struct:inst_t::__anon28
src	src/intersim/flit.hpp	/^   int  src;$/;"	m	struct:Flit
src	src/intersim/interconnect_interface.h	/^   int  src;$/;"	m	struct:glue_buf
src	src/intersim2/flit.hpp	/^  int  src;$/;"	m	class:Flit
src1	src/cuda-sim/ptx_ir.h	/^   const operand_info &src1() const $/;"	f	class:ptx_instruction
src2	src/cuda-sim/ptx_ir.h	/^   const operand_info &src2() const $/;"	f	class:ptx_instruction
src3	src/cuda-sim/ptx_ir.h	/^   const operand_info &src3() const $/;"	f	class:ptx_instruction
srcOperandModifiers	src/cuda-sim/instructions.cc	/^ptx_reg_t srcOperandModifiers(ptx_reg_t opData, operand_info opInfo, operand_info dstInfo, unsigned type, ptx_thread_info *thread)$/;"	f
src_dest_bin	src/intersim/traffic.cpp	/^void src_dest_bin( int source, int dest, int lg )$/;"	f
src_vc	src/intersim/event_router.hpp	/^      int  src_vc;$/;"	m	struct:EventRouter::tArrivalEvent
src_vc	src/intersim/event_router.hpp	/^      int  src_vc;$/;"	m	struct:EventRouter::tTransportEvent
src_vc	src/intersim2/routers/event_router.hpp	/^    int  src_vc;$/;"	m	struct:EventRouter::tArrivalEvent
src_vc	src/intersim2/routers/event_router.hpp	/^    int  src_vc;$/;"	m	struct:EventRouter::tTransportEvent
ssy_impl	src/cuda-sim/instructions.cc	/^void ssy_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
st	src/cuda-sim/ptx-stats.cc	/^    std::string st;$/;"	m	class:ptx_file_line	file:
st_impl	src/cuda-sim/instructions.cc	/^void st_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
st_time_dist	src/gpgpu-sim/visualizer.cc	/^   std::vector<double>  st_time_dist;$/;"	m	class:my_time_vector	file:
st_time_map	src/gpgpu-sim/visualizer.cc	/^   std::map< unsigned int, std::vector<long int> > st_time_map;$/;"	m	class:my_time_vector	file:
st_vector_size	src/gpgpu-sim/visualizer.cc	/^   unsigned st_vector_size;$/;"	m	class:my_time_vector	file:
stack_entry	src/cuda-sim/ptx_sim.h	/^   stack_entry( symbol_table *s, function_info *f, unsigned pc, unsigned rpc, const symbol *return_var_src, const symbol *return_var_dst, unsigned call_uid )$/;"	f	struct:stack_entry
stack_entry	src/cuda-sim/ptx_sim.h	/^   stack_entry() {$/;"	f	struct:stack_entry
stack_entry	src/cuda-sim/ptx_sim.h	/^struct stack_entry {$/;"	s
stack_entry_type	src/abstract_hardware_model.h	/^    enum stack_entry_type {$/;"	g	class:simt_stack
stallable	src/gpgpu-sim/shader.h	/^    virtual bool stallable() const { return false; }$/;"	f	class:pipelined_simd_unit
stallable	src/gpgpu-sim/shader.h	/^    virtual bool stallable() const { return true; }$/;"	f	class:ldst_unit
standard_name	src/ramulator_sim/ALDRAM.h	/^    static string standard_name;$/;"	m	class:ALDRAM
standard_name	src/ramulator_sim/DDR3.h	/^    static string standard_name;$/;"	m	class:DDR3
standard_name	src/ramulator_sim/DDR4.h	/^    static string standard_name;$/;"	m	class:DDR4
standard_name	src/ramulator_sim/DSARP.h	/^    static string standard_name;$/;"	m	class:DSARP
standard_name	src/ramulator_sim/GDDR5.h	/^    static string standard_name;$/;"	m	class:GDDR5
standard_name	src/ramulator_sim/HBM.h	/^    static string standard_name;$/;"	m	class:HBM
standard_name	src/ramulator_sim/LPDDR3.h	/^    static string standard_name;$/;"	m	class:LPDDR3
standard_name	src/ramulator_sim/LPDDR4.h	/^    static string standard_name;$/;"	m	class:LPDDR4
standard_name	src/ramulator_sim/SALP.h	/^    string standard_name;$/;"	m	class:SALP
standard_name	src/ramulator_sim/TLDRAM.h	/^    static string standard_name;$/;"	m	class:TLDRAM
standard_name	src/ramulator_sim/WideIO.h	/^    static string standard_name;$/;"	m	class:WideIO
standard_name	src/ramulator_sim/WideIO2.h	/^    static string standard_name;$/;"	m	class:WideIO2
start	src/ramulator_sim/ALDRAM.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:ALDRAM	typeref:class:ALDRAM::State
start	src/ramulator_sim/DDR3.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:DDR3	typeref:class:DDR3::State
start	src/ramulator_sim/DDR4.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:DDR4	typeref:class:DDR4::State
start	src/ramulator_sim/DSARP.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:DSARP	typeref:class:DSARP::State
start	src/ramulator_sim/GDDR5.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:GDDR5	typeref:class:GDDR5::State
start	src/ramulator_sim/HBM.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:HBM	typeref:class:HBM::State
start	src/ramulator_sim/LPDDR3.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:LPDDR3	typeref:class:LPDDR3::State
start	src/ramulator_sim/LPDDR4.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:LPDDR4	typeref:class:LPDDR4::State
start	src/ramulator_sim/SALP.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:SALP	typeref:class:SALP::State
start	src/ramulator_sim/TLDRAM.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:TLDRAM	typeref:class:TLDRAM::State
start	src/ramulator_sim/WideIO.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:WideIO	typeref:class:WideIO::State
start	src/ramulator_sim/WideIO2.h	/^    } start[int(Level::MAX)] = {$/;"	m	class:WideIO2	typeref:class:WideIO2::State
start_CTA	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::start_CTA(kernel_info_t* kernel, const unsigned shader_id, const unsigned cta_id)$/;"	f	class:DynamicScheduler
start_CTA	launcher/mk-sched/mk_scheduler.h	/^  virtual void start_CTA(kernel_info_t* kernel, const unsigned shader_id, const unsigned cta_id)  {}$/;"	f	class:StaticScheduler
start_cta	common/kernel_info_t.cc	/^kernel_info_t::start_cta(unsigned shader_id, unsigned hw_cta_id)$/;"	f	class:kernel_info_t
start_function	src/cuda-sim/ptx_parser.cc	/^void start_function( int entry_point ) $/;"	f
start_sim_thread	src/gpgpusim_entrypoint.cc	/^void start_sim_thread(int api)$/;"	f
start_stat	common/cta_stat_context.cc	/^cta_stat_context_t::start_stat()$/;"	f	class:cta_stat_context_t
start_wiring_level	src/gpuwattch/interconnect.h	/^    int start_wiring_level;$/;"	m	class:interconnect
stat	src/ramulator_sim/Statistics.h	/^  StatType stat;$/;"	m	class:StatBase
statName	src/ramulator_sim/Statistics.h	/^  std::string statName;$/;"	m	class:StatBase
stat_idx	src/gpgpu-sim/power_stat.h	/^}stat_idx;$/;"	t	typeref:enum:_stat_idx
stat_output	src/ramulator_sim/StatType.h	/^  std::ofstream stat_output;$/;"	m	class:Stats_Ram::StatList
state	src/ramulator_sim/DRAM.h	/^    typename T::State state;$/;"	m	class:DRAM
state_info_t	src/intersim2/vc.hpp	/^  struct state_info_t {$/;"	s	class:VC
state_max	src/intersim2/vc.hpp	/^		  state_max = active };$/;"	e	enum:VC::eVCState
state_min	src/intersim2/vc.hpp	/^  enum eVCState { state_min = 0, idle = state_min, routing, vc_alloc, active, $/;"	e	enum:VC::eVCState
statement_block	src/cuda-sim/ptx.y	/^statement_block: LEFT_BRACE statement_list RIGHT_BRACE $/;"	l
statement_list	src/cuda-sim/ptx.y	/^statement_list: directive_statement { add_directive(); }$/;"	l
statlist	src/ramulator_sim/StatType.cpp	/^StatList statlist;$/;"	m	namespace:Stats_Ram	file:
statsComponents	src/gpuwattch/basic_components.h	/^    statsComponents() : access(0), hit(0), miss(0)  {}$/;"	f	class:statsComponents
statsComponents	src/gpuwattch/basic_components.h	/^    statsComponents(const statsComponents & obj) { *this = obj; }$/;"	f	class:statsComponents
statsComponents	src/gpuwattch/basic_components.h	/^class statsComponents$/;"	c
statsDef	src/gpuwattch/basic_components.h	/^    statsDef() : readAc(), writeAc(),searchAc() { }$/;"	f	class:statsDef
statsDef	src/gpuwattch/basic_components.h	/^class statsDef$/;"	c
stats_t	src/gpuwattch/array.h	/^  statsDef       stats_t;$/;"	m	class:ArrayST
stats_t	src/gpuwattch/logic.h	/^	statsDef       stats_t;$/;"	m	class:FunctionalUnit
stats_t	src/gpuwattch/logic.h	/^	statsDef       stats_t;$/;"	m	class:dep_resource_conflict_check
stats_t	src/gpuwattch/logic.h	/^	statsDef       stats_t;$/;"	m	class:inst_decoder
stats_t	src/gpuwattch/memoryctrl.h	/^    statsDef       stats_t;$/;"	m	class:MCPHY
stats_t	src/gpuwattch/memoryctrl.h	/^    statsDef stats_t;$/;"	m	class:MCBackend
stats_t	src/gpuwattch/noc.h	/^	statsDef       stats_t;$/;"	m	class:NoC
status	launcher/mk-sched/mk_scheduler.h	/^      RemoveStatus status;$/;"	m	struct:DynamicScheduler::SM_info::remove_status_st
steady_state_tacking_file	src/gpuwattch/gpgpu_sim_wrapper.h	/^    gzFile steady_state_tacking_file;$/;"	m	class:gpgpu_sim_wrapper
step	src/gpgpu-sim/shader.h	/^   void step()$/;"	f	class:opndcoll_rfu_t
stopCond	launcher/launcher_option_parser.h	/^  StopSimulationCondition stopCond;$/;"	m	class:LauncherOptionParser
stopCondValue	launcher/launcher_option_parser.h	/^  unsigned long long stopCondValue;$/;"	m	class:LauncherOptionParser
stop_CTA	launcher/mk-sched/mk_scheduler.cc	/^DynamicScheduler::stop_CTA(kernel_info_t* kernel, const unsigned shader_id, const unsigned cta_id)$/;"	f	class:DynamicScheduler
stop_CTA	launcher/mk-sched/mk_scheduler.h	/^  virtual void stop_CTA(kernel_info_t* kernel, const unsigned shader_id, const unsigned cta_id)   {}$/;"	f	class:StaticScheduler
stop_cta	common/kernel_info_t.cc	/^kernel_info_t::stop_cta(unsigned shader_id, unsigned hw_cta_id)$/;"	f	class:kernel_info_t
stop_or_finish_core	src/gpgpu-sim/shader.cc	/^shader_core_ctx::stop_or_finish_core()$/;"	f	class:shader_core_ctx
stop_or_finish_cta	src/gpgpu-sim/shader.cc	/^shader_core_ctx::stop_or_finish_cta(unsigned cta_id, CTA_FINISH_STATUS fin_status)$/;"	f	class:shader_core_ctx
stop_threads	src/gpgpu-sim/shader.cc	/^shader_core_ctx::stop_threads(const unsigned start_thread_id, const unsigned end_thread_id)$/;"	f	class:shader_core_ctx
stop_warps	src/gpgpu-sim/shader.cc	/^shader_core_ctx::stop_warps(const unsigned cta_id, const unsigned start_thread_id, const unsigned end_thread_id)$/;"	f	class:shader_core_ctx
storage	launcher/stats/stats.h	/^  Storage storage;$/;"	m	class:Stats::ScalarBase
store_ack	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::store_ack( class mem_fetch *mf )$/;"	f	class:shader_core_ctx
store_buffer_cams	src/gpuwattch/XML_Parse.h	/^	double store_buffer_cams;$/;"	m	struct:__anon15
store_buffer_forwards	src/gpuwattch/XML_Parse.h	/^	double store_buffer_forwards;$/;"	m	struct:__anon15
store_buffer_reads	src/gpuwattch/XML_Parse.h	/^	double store_buffer_reads;$/;"	m	struct:__anon15
store_buffer_size	src/gpuwattch/XML_Parse.h	/^	int store_buffer_size;$/;"	m	struct:__anon15
store_buffer_writes	src/gpuwattch/XML_Parse.h	/^	double store_buffer_writes;$/;"	m	struct:__anon15
store_instructions	src/gpuwattch/XML_Parse.h	/^	double store_instructions;$/;"	m	struct:__anon15
stores_done	common/shd_warp_t.h	/^    bool stores_done() const { return m_stores_outstanding == 0; }$/;"	f	class:shd_warp_t
stream_event	src/stream_manager.h	/^    stream_event$/;"	e	enum:stream_operation_type
stream_kernel_launch	src/stream_manager.h	/^    stream_kernel_launch,$/;"	e	enum:stream_operation_type
stream_manager	src/stream_manager.cc	/^stream_manager::stream_manager( gpgpu_sim *gpu, bool cuda_launch_blocking ) $/;"	f	class:stream_manager
stream_manager	src/stream_manager.h	/^class stream_manager {$/;"	c
stream_memcpy_device_to_device	src/stream_manager.h	/^    stream_memcpy_device_to_device,$/;"	e	enum:stream_operation_type
stream_memcpy_device_to_host	src/stream_manager.h	/^    stream_memcpy_device_to_host,$/;"	e	enum:stream_operation_type
stream_memcpy_from_symbol	src/stream_manager.h	/^    stream_memcpy_from_symbol,$/;"	e	enum:stream_operation_type
stream_memcpy_host_to_device	src/stream_manager.h	/^    stream_memcpy_host_to_device,$/;"	e	enum:stream_operation_type
stream_memcpy_to_symbol	src/stream_manager.h	/^    stream_memcpy_to_symbol,$/;"	e	enum:stream_operation_type
stream_no_op	src/stream_manager.h	/^    stream_no_op,$/;"	e	enum:stream_operation_type
stream_operation	src/stream_manager.h	/^    stream_operation( class CUevent_st *e, struct CUstream_st *stream )$/;"	f	class:stream_operation
stream_operation	src/stream_manager.h	/^    stream_operation( const char *symbol, void *dst, size_t count, size_t offset, struct CUstream_st *stream )$/;"	f	class:stream_operation
stream_operation	src/stream_manager.h	/^    stream_operation( const void *host_address_src, size_t device_address_dst, size_t cnt, struct CUstream_st *stream )$/;"	f	class:stream_operation
stream_operation	src/stream_manager.h	/^    stream_operation( const void *src, const char *symbol, size_t count, size_t offset, struct CUstream_st *stream )$/;"	f	class:stream_operation
stream_operation	src/stream_manager.h	/^    stream_operation( kernel_info_t *kernel, bool sim_mode, struct CUstream_st *stream )$/;"	f	class:stream_operation
stream_operation	src/stream_manager.h	/^    stream_operation( size_t device_address_src, size_t device_address_dst, size_t cnt, struct CUstream_st *stream  )$/;"	f	class:stream_operation
stream_operation	src/stream_manager.h	/^    stream_operation( size_t device_address_src, void *host_address_dst, size_t cnt, struct CUstream_st *stream  )$/;"	f	class:stream_operation
stream_operation	src/stream_manager.h	/^    stream_operation()$/;"	f	class:stream_operation
stream_operation	src/stream_manager.h	/^class stream_operation {$/;"	c
stream_operation_type	src/stream_manager.h	/^enum stream_operation_type {$/;"	g
stringDup	src/gpuwattch/xmlParser.cc	/^XMLSTR stringDup(XMLCSTR lpszData, int cbData)$/;"	f
string_value	build/src/cuda-sim/ptx.tab.c	/^  char * string_value;$/;"	m	union:YYSTYPE	file:
string_value	build/src/cuda-sim/ptx.tab.h	/^  char * string_value;$/;"	m	union:YYSTYPE
string_value	build/src/cuda-sim/ptxinfo.tab.c	/^  char * string_value;$/;"	m	union:YYSTYPE	file:
string_value	build/src/cuda-sim/ptxinfo.tab.h	/^  char * string_value;$/;"	m	union:YYSTYPE
stringparsertest	src/option_parser.cc	/^int stringparsertest()$/;"	f
sub_count	src/cuda-sim/ptx-stats.cc	/^    void sub_count(const ptx_instruction * pInsn, int count = 1)$/;"	f	class:ptx_inflight_memory_insn_tracker
sub_impl	src/cuda-sim/instructions.cc	/^void sub_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
sub_partition	src/gpgpu-sim/addrdec.h	/^   unsigned sub_partition; $/;"	m	struct:addrdec_t
sub_partition_id_mask	src/gpgpu-sim/addrdec.h	/^   new_addr_type sub_partition_id_mask; $/;"	m	class:linear_to_raw_address_translation
sub_partition_kain	src/gpgpu-sim/addrdec.h	/^   unsigned sub_partition_kain; $/;"	m	struct:addrdec_t
sub_sw	src/gpuwattch/cacti/highradix.h	/^    Component sub_sw;$/;"	m	class:HighRadix
sub_switch_power	src/gpuwattch/cacti/highradix.cc	/^HighRadix::sub_switch_power()$/;"	f	class:HighRadix
subarray	src/gpuwattch/cacti/mat.h	/^    Subarray subarray;$/;"	m	class:Mat
subarray_height	src/gpuwattch/cacti/cacti_interface.h	/^  double subarray_height;$/;"	m	class:mem_array
subarray_length	src/gpuwattch/cacti/cacti_interface.h	/^  double subarray_length;$/;"	m	class:mem_array
subarray_memory_cell_area_height	src/gpuwattch/cacti/cacti_interface.h	/^  double subarray_memory_cell_area_height;$/;"	m	struct:__anon5
subarray_memory_cell_area_width	src/gpuwattch/cacti/cacti_interface.h	/^  double subarray_memory_cell_area_width;$/;"	m	struct:__anon5
subarray_out_wire	src/gpuwattch/cacti/mat.h	/^    Wire   * subarray_out_wire;$/;"	m	class:Mat
subarray_ref_counters	src/ramulator_sim/Refresh.h	/^  vector<vector<int>> subarray_ref_counters;$/;"	m	class:Refresh
subarrays	src/ramulator_sim/Config.h	/^  int subarrays;$/;"	m	class:Config
subc_impl	src/cuda-sim/instructions.cc	/^void subc_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
subdesc	src/ramulator_sim/Statistics.h	/^  StatBaseVec<StatType> & subdesc(Stats_Ram::off_type index, const std::string & desc) {$/;"	f	class:StatBaseVec
subname	src/ramulator_sim/Statistics.h	/^  StatBaseVec<StatType> & subname(Stats_Ram::off_type index, const std::string & name) {$/;"	f	class:StatBaseVec
subnetwork	src/intersim2/flit.hpp	/^  int  subnetwork;$/;"	m	class:Flit
subsample	src/gpgpu-sim/stat-tool.h	/^   void subsample(int pos) {$/;"	f	class:linear_histogram_snapshot
successor_ids	src/cuda-sim/ptx_ir.h	/^   std::set<int> successor_ids;$/;"	m	struct:basic_block_t
suld_impl	src/cuda-sim/instructions.cc	/^void suld_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
sum	src/ramulator_sim/StatType.h	/^  Counter sum;$/;"	m	class:Stats_Ram::AverageDeviation
sum	src/ramulator_sim/StatType.h	/^  Counter sum;$/;"	m	class:Stats_Ram::Distribution
sum	src/ramulator_sim/StatType.h	/^  Counter sum;$/;"	m	class:Stats_Ram::Histogram
sum	src/ramulator_sim/StatType.h	/^  Counter sum;$/;"	m	class:Stats_Ram::StandardDeviation
suq_impl	src/cuda-sim/instructions.cc	/^void suq_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
sured_impl	src/cuda-sim/instructions.cc	/^void sured_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
surf_space	src/abstract_hardware_model.h	/^   surf_space,$/;"	e	enum:_memory_space_t
sust_impl	src/cuda-sim/instructions.cc	/^void sust_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
sweep_test	src/gpgpu-sim/addrdec.cc	/^void linear_to_raw_address_translation::sweep_test() const$/;"	f	class:linear_to_raw_address_translation
switchArea	src/intersim2/power/power_module.hpp	/^  double switchArea;$/;"	m	class:Power_Module
switchPower	src/intersim2/power/power_module.hpp	/^  double switchPower;$/;"	m	class:Power_Module
switchPowerCtrl	src/intersim2/power/power_module.hpp	/^  double switchPowerCtrl;$/;"	m	class:Power_Module
switchPowerLeak	src/intersim2/power/power_module.hpp	/^  double switchPowerLeak;$/;"	m	class:Power_Module
switch_core	src/gpgpu-sim/shader.cc	/^shader_core_ctx::switch_core()$/;"	f	class:shader_core_ctx
switching_overhead_per_cta	common/kernel_info_t.h	/^   unsigned long long switching_overhead_per_cta;$/;"	m	class:kernel_info_t
swl_scheduler	src/gpgpu-sim/shader.cc	/^swl_scheduler::swl_scheduler ( shader_core_stats* stats, shader_core_ctx* shader,$/;"	f	class:swl_scheduler
swl_scheduler	src/gpgpu-sim/shader.h	/^class swl_scheduler : public scheduler_unit {$/;"	c
symbol	src/cuda-sim/ptx_ir.h	/^   symbol( const char *name, const type_info *type, const char *location, unsigned size ) $/;"	f	class:symbol
symbol	src/cuda-sim/ptx_ir.h	/^class symbol {$/;"	c
symbol_table	src/cuda-sim/ptx_ir.cc	/^symbol_table::symbol_table( const char *scope_name, unsigned entry_point, symbol_table *parent )$/;"	f	class:symbol_table
symbol_table	src/cuda-sim/ptx_ir.cc	/^symbol_table::symbol_table() $/;"	f	class:symbol_table
symbol_table	src/cuda-sim/ptx_ir.h	/^class symbol_table {$/;"	c
symbolic_t	src/cuda-sim/ptx_ir.h	/^   unsigned_t, symbolic_t, label_t, v_reg_t, v_float_op_t, v_double_op_t,$/;"	e	enum:operand_type
synchronize	src/gpgpusim_entrypoint.cc	/^void synchronize()$/;"	f
synchronize	src/stream_manager.cc	/^void CUstream_st::synchronize() $/;"	f	class:CUstream_st
syntax_not_implemented	build/src/cuda-sim/ptx.tab.c	/^void syntax_not_implemented()$/;"	f
sys	src/gpuwattch/XML_Parse.h	/^	root_system sys;$/;"	m	class:ParseXML
system_L1Directory	src/gpuwattch/XML_Parse.h	/^} system_L1Directory;$/;"	t	typeref:struct:__anon16
system_L2	src/gpuwattch/XML_Parse.h	/^} system_L2;$/;"	t	typeref:struct:__anon18
system_L2Directory	src/gpuwattch/XML_Parse.h	/^} system_L2Directory;$/;"	t	typeref:struct:__anon17
system_L3	src/gpuwattch/XML_Parse.h	/^} system_L3;$/;"	t	typeref:struct:__anon19
system_NoC	src/gpuwattch/XML_Parse.h	/^} system_NoC;$/;"	t	typeref:struct:__anon21
system_core	src/gpuwattch/XML_Parse.h	/^} system_core;$/;"	t	typeref:struct:__anon15
system_mc	src/gpuwattch/XML_Parse.h	/^} system_mc;$/;"	t	typeref:struct:__anon23
system_mem	src/gpuwattch/XML_Parse.h	/^} system_mem;$/;"	t	typeref:struct:__anon22
system_niu	src/gpuwattch/XML_Parse.h	/^} system_niu;$/;"	t	typeref:struct:__anon24
system_pcie	src/gpuwattch/XML_Parse.h	/^} system_pcie;$/;"	t	typeref:struct:__anon25
tArrivalEvent	src/intersim/event_router.hpp	/^   struct tArrivalEvent {$/;"	s	class:EventRouter
tArrivalEvent	src/intersim2/routers/event_router.hpp	/^  struct tArrivalEvent {$/;"	s	class:EventRouter
tCCD	src/gpgpu-sim/gpu-sim.h	/^   unsigned tCCD;   \/\/column to column delay$/;"	m	struct:memory_config
tCCDL	src/gpgpu-sim/gpu-sim.h	/^   unsigned tCCDL;  \/\/column to column delay when bank groups are enabled$/;"	m	struct:memory_config
tCDLR	src/gpgpu-sim/gpu-sim.h	/^   unsigned tCDLR;  \/\/Last data-in to Read command (switching from write to read)$/;"	m	struct:memory_config
tCK	src/ramulator_sim/ALDRAM.h	/^        double freq, tCK;$/;"	m	struct:ALDRAM::SpeedEntry
tCK	src/ramulator_sim/DDR3.h	/^        double freq, tCK;$/;"	m	struct:DDR3::SpeedEntry
tCK	src/ramulator_sim/DDR4.h	/^        double freq, tCK;$/;"	m	struct:DDR4::SpeedEntry
tCK	src/ramulator_sim/DSARP.h	/^        double freq, tCK;$/;"	m	struct:DSARP::SpeedEntry
tCK	src/ramulator_sim/GDDR5.h	/^        double freq, tCK;$/;"	m	struct:GDDR5::SpeedEntry
tCK	src/ramulator_sim/HBM.h	/^        double freq, tCK;$/;"	m	struct:HBM::SpeedEntry
tCK	src/ramulator_sim/LPDDR3.h	/^        double freq, tCK;$/;"	m	struct:LPDDR3::SpeedEntry
tCK	src/ramulator_sim/LPDDR4.h	/^        double freq, tCK;$/;"	m	struct:LPDDR4::SpeedEntry
tCK	src/ramulator_sim/SALP.h	/^        double freq, tCK;$/;"	m	struct:SALP::SpeedEntry
tCK	src/ramulator_sim/TLDRAM.h	/^        double freq, tCK;$/;"	m	struct:TLDRAM::SpeedEntry
tCK	src/ramulator_sim/WideIO.h	/^        double freq, tCK;$/;"	m	struct:WideIO::SpeedEntry
tCK	src/ramulator_sim/WideIO2.h	/^        double freq, tCK;$/;"	m	struct:WideIO2::SpeedEntry
tCK	src/ramulator_sim/gpu_wrapper.h	/^	double tCK;$/;"	m	class:GpuWrapper
tCLK	src/intersim2/power/power_module.hpp	/^  double tCLK ;$/;"	m	class:Power_Module
tInjectionProcess	src/intersim/injection.hpp	/^typedef int (*tInjectionProcess)( int, double );$/;"	t
tRAS	src/gpgpu-sim/gpu-sim.h	/^   unsigned tRAS;   \/\/time needed to activate row$/;"	m	struct:memory_config
tRC	src/gpgpu-sim/gpu-sim.h	/^   unsigned tRC;    \/\/row cycle time ie. precharge current, then activate different row$/;"	m	struct:memory_config
tRCD	src/gpgpu-sim/gpu-sim.h	/^   unsigned tRCD;   \/\/row to column delay - time required to activate a row before a read$/;"	m	struct:memory_config
tRCDWR	src/gpgpu-sim/gpu-sim.h	/^   unsigned tRCDWR; \/\/row to column delay for a write command$/;"	m	struct:memory_config
tRP	src/gpgpu-sim/gpu-sim.h	/^   unsigned tRP;    \/\/row precharge ie. deactivate row$/;"	m	struct:memory_config
tRRD	src/gpgpu-sim/gpu-sim.h	/^   unsigned tRRD;   \/\/minimal time required between activation of rows in different banks$/;"	m	struct:memory_config
tRTPL	src/gpgpu-sim/gpu-sim.h	/^   unsigned tRTPL;  \/\/read to precharge delay when bank groups are enabled for GDDR5 this is identical to RTPS, if for other DRAM this is different, you will need to split them in two$/;"	m	struct:memory_config
tRTW	src/gpgpu-sim/gpu-sim.h	/^   unsigned tRTW;   \/\/time to switch from read to write$/;"	m	struct:memory_config
tRoutingFunction	src/intersim/routefunc.hpp	/^typedef void (*tRoutingFunction)( const Router *, const Flit *, int in_channel, OutputSet *, bool );$/;"	t
tRoutingFunction	src/intersim2/routefunc.hpp	/^typedef void (*tRoutingFunction)( const Router *, const Flit *, int in_channel, OutputSet *, bool );$/;"	t
tTrafficFunction	src/intersim/traffic.hpp	/^typedef int (*tTrafficFunction)( int, int );$/;"	t
tTransportEvent	src/intersim/event_router.hpp	/^   struct tTransportEvent {$/;"	s	class:EventRouter
tTransportEvent	src/intersim2/routers/event_router.hpp	/^  struct tTransportEvent {$/;"	s	class:EventRouter
tWR	src/gpgpu-sim/gpu-sim.h	/^   unsigned tWR;    \/\/Last data-in to Row precharge $/;"	m	struct:memory_config
tWTP	src/gpgpu-sim/gpu-sim.h	/^   unsigned tWTP;   \/\/time to switch from write to precharge in the same bank$/;"	m	struct:memory_config
tWTR	src/gpgpu-sim/gpu-sim.h	/^   unsigned tWTR;   \/\/time to switch from write to read $/;"	m	struct:memory_config
tWaiting	src/intersim/event_router.hpp	/^   struct tWaiting {$/;"	s	class:EventNextVCState
tWaiting	src/intersim2/routers/event_router.hpp	/^  struct tWaiting {$/;"	s	class:EventNextVCState
t_ccd	src/gpuwattch/basic_components.h	/^	int t_ccd;$/;"	m	class:DRAMParam
t_cdlr	src/gpuwattch/basic_components.h	/^	int t_cdlr;$/;"	m	class:DRAMParam
t_cl	src/gpuwattch/basic_components.h	/^	int t_cl;$/;"	m	class:DRAMParam
t_ox	src/gpuwattch/cacti/parameter.h	/^    double t_ox;$/;"	m	class:TechnologyParameter::DeviceType
t_ras	src/gpuwattch/basic_components.h	/^	int t_ras;$/;"	m	class:DRAMParam
t_rc	src/gpuwattch/basic_components.h	/^	int t_rc;$/;"	m	class:DRAMParam
t_rcd	src/gpuwattch/basic_components.h	/^	int t_rcd;$/;"	m	class:DRAMParam
t_rp	src/gpuwattch/basic_components.h	/^	int t_rp;$/;"	m	class:DRAMParam
t_rrd	src/gpuwattch/basic_components.h	/^	int t_rrd;$/;"	m	class:DRAMParam
t_wr	src/gpuwattch/basic_components.h	/^	int t_wr;$/;"	m	class:DRAMParam
table	src/gpgpu-sim/gpu-cache.h	/^    typedef tr1_hash_map<new_addr_type,mshr_entry> table;$/;"	t	class:mshr_table
table	src/ramulator_sim/Scheduler.h	/^    map<vector<int>, Entry> table;$/;"	m	class:RowTable
tag	src/gpgpu-sim/gpu-cache.h	/^    new_addr_type tag( new_addr_type addr ) const$/;"	f	class:cache_config
tag	src/ramulator_sim/Cache.h	/^    long tag;$/;"	m	struct:Cache::Line
tag_arr	src/gpuwattch/cacti/Ucache.h	/^  list<mem_array *> tag_arr;$/;"	m	struct:calc_time_mt_wrapper_struct
tag_arr_peri_global_tech_type	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int tag_arr_peri_global_tech_type;$/;"	m	class:InputParameter
tag_arr_ram_cell_tech_type	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int tag_arr_ram_cell_tech_type;$/;"	m	class:InputParameter
tag_array	src/gpgpu-sim/gpu-cache.cc	/^tag_array::tag_array( cache_config &config,$/;"	f	class:tag_array
tag_array	src/gpgpu-sim/gpu-cache.h	/^class tag_array {$/;"	c
tag_array	src/gpuwattch/cacti/cacti_interface.h	/^    results_mem_array tag_array;$/;"	m	class:uca_org_t
tag_array2	src/gpuwattch/cacti/cacti_interface.h	/^    mem_array * tag_array2;$/;"	m	class:uca_org_t
tag_array_index	src/gpuwattch/cacti/Ucache.h	/^  int    tag_array_index;$/;"	m	struct:solution
tag_array_iter	src/gpuwattch/cacti/Ucache.h	/^  list<mem_array *>::iterator tag_array_iter;$/;"	m	struct:solution
tag_assoc	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int tag_assoc;$/;"	m	class:InputParameter
tag_num_c_subarray	src/gpuwattch/cacti/parameter.h	/^    int tag_num_c_subarray;$/;"	m	class:DynamicParameter
tag_num_r_subarray	src/gpuwattch/cacti/parameter.h	/^    int tag_num_r_subarray;\/\/sheng: fully associative cache tag and data must be computed together, data and tag must be separate$/;"	m	class:DynamicParameter
tag_offset	src/ramulator_sim/Cache.h	/^  unsigned int tag_offset;$/;"	m	class:Cache
tag_res	src/gpuwattch/cacti/Ucache.h	/^  min_values_t * tag_res;$/;"	m	struct:calc_time_mt_wrapper_struct
tag_w	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int tag_w;$/;"	m	class:InputParameter
tagbits	src/gpuwattch/cacti/parameter.h	/^    int tagbits;$/;"	m	class:DynamicParameter
tail	src/intersim/credit.hpp	/^   bool head, tail;$/;"	m	class:Credit
tail	src/intersim/event_router.hpp	/^      bool tail;$/;"	m	struct:EventRouter::tArrivalEvent
tail	src/intersim/flit.hpp	/^   bool tail;$/;"	m	struct:Flit
tail	src/intersim2/credit.hpp	/^  bool head, tail;$/;"	m	class:Credit
tail	src/intersim2/flit.hpp	/^  bool tail;$/;"	m	class:Flit
tail	src/intersim2/routers/event_router.hpp	/^    bool tail;$/;"	m	struct:EventRouter::tArrivalEvent
tail_flag	src/intersim/interconnect_interface.cpp	/^   queue<bool> tail_flag;$/;"	m	class:boundary_buf	file:
tail_pending	src/intersim/event_router.hpp	/^      idle, busy, tail_pending$/;"	e	enum:EventNextVCState::eNextVCState
tail_pending	src/intersim2/routers/event_router.hpp	/^  enum eNextVCState { idle, busy, tail_pending };$/;"	e	enum:EventNextVCState::eNextVCState
target	src/cuda-sim/ptx_sim.h	/^      unsigned target() const { assert(m_valid&&m_sm_version_valid); return m_sm_version; }$/;"	f	class:ptx_version
target_chip_area	src/gpuwattch/XML_Parse.h	/^	int target_chip_area;$/;"	m	struct:__anon26
target_core_clockrate	src/gpuwattch/XML_Parse.h	/^	int target_core_clockrate;$/;"	m	struct:__anon26
target_header	src/cuda-sim/ptx_parser.cc	/^void target_header(char* a) $/;"	f
target_header2	src/cuda-sim/ptx_parser.cc	/^void target_header2(char* a, char* b) $/;"	f
target_header3	src/cuda-sim/ptx_parser.cc	/^void target_header3(char* a, char* b, char* c) $/;"	f
target_inst	src/cuda-sim/ptx_ir.h	/^   class ptx_instruction* target_inst;$/;"	m	struct:gpgpu_recon_t	typeref:class:gpgpu_recon_t::ptx_instruction
target_pc	src/cuda-sim/ptx_ir.h	/^   address_type target_pc;$/;"	m	struct:gpgpu_recon_t
tcache	src/gpuwattch/XML_Parse.h	/^	dcache_systemcore tcache;$/;"	m	struct:__anon15
tcache	src/gpuwattch/core.h	/^	DataCache tcache;$/;"	m	class:LoadStoreU
tdp_stats	src/gpuwattch/array.h	/^  statsDef       tdp_stats;$/;"	m	class:ArrayST
tdp_stats	src/gpuwattch/logic.h	/^	statsDef       tdp_stats;$/;"	m	class:FunctionalUnit
tdp_stats	src/gpuwattch/logic.h	/^	statsDef       tdp_stats;$/;"	m	class:dep_resource_conflict_check
tdp_stats	src/gpuwattch/logic.h	/^	statsDef       tdp_stats;$/;"	m	class:inst_decoder
tdp_stats	src/gpuwattch/memoryctrl.h	/^    statsDef       tdp_stats;$/;"	m	class:MCPHY
tdp_stats	src/gpuwattch/memoryctrl.h	/^    statsDef tdp_stats;$/;"	m	class:MCBackend
tdp_stats	src/gpuwattch/noc.h	/^	statsDef       tdp_stats;$/;"	m	class:NoC
temp	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int temp;$/;"	m	class:InputParameter
temperature	src/gpuwattch/XML_Parse.h	/^	int temperature;$/;"	m	struct:__anon26
temperature	src/gpuwattch/arch_const.h	/^const bool 			temperature		=	360;$/;"	v
temperature	src/ramulator_sim/ALDRAM.h	/^    Temp temperature = Temp::HOT;  \/\/ DHL$/;"	m	class:ALDRAM
terminate	launcher/child_process.h	/^  void terminate()                { first_run_done = true; }$/;"	f	class:ChildProcess
test	src/intersim2/injection.cpp	/^bool BernoulliInjectionProcess::test(int source)$/;"	f	class:BernoulliInjectionProcess
test	src/intersim2/injection.cpp	/^bool OnOffInjectionProcess::test(int source)$/;"	f	class:OnOffInjectionProcess
test_bytes	src/abstract_hardware_model.h	/^        bool test_bytes(unsigned start_bit, unsigned end_bit) {$/;"	f	struct:warp_inst_t::transaction_info
test_res_bus	src/gpgpu-sim/shader.cc	/^int shader_core_ctx::test_res_bus(int latency){$/;"	f	class:shader_core_ctx
testtype	src/option_parser.cc	/^   testtype() $/;"	f	class:testtype
testtype	src/option_parser.cc	/^class testtype$/;"	c	file:
texAddr_t	src/cuda-sim/instructions.cc	/^typedef unsigned (*texAddr_t) (unsigned x, unsigned y, unsigned mx, unsigned my, size_t elem_size);$/;"	t	file:
tex_cache	src/gpgpu-sim/gpu-cache.h	/^    tex_cache( const char *name, cache_config &config, int core_id, int type_id, mem_fetch_interface *memport,$/;"	f	class:tex_cache
tex_cache	src/gpgpu-sim/gpu-cache.h	/^class tex_cache : public cache_t {$/;"	c
tex_impl	src/cuda-sim/instructions.cc	/^void tex_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
tex_linf_sampling	src/cuda-sim/instructions.cc	/^float tex_linf_sampling(memory_space* mem, unsigned tex_array_base, $/;"	f
tex_operand	src/cuda-sim/ptx.y	/^tex_operand: LEFT_SQUARE_BRACKET IDENTIFIER COMMA { add_scalar_operand($2); }$/;"	l
tex_space	src/abstract_hardware_model.h	/^   tex_space,$/;"	e	enum:_memory_space_t
texel_size	src/cuda-sim/ptx_ir.h	/^   unsigned int texel_size; \/\/size in bytes, e.g. (channelDesc.x+y+z+w)\/8$/;"	m	struct:textureInfo
texel_size_numbits	src/cuda-sim/ptx_ir.h	/^   unsigned int texel_size_numbits; \/\/log2(texel_size)$/;"	m	struct:textureInfo
text	src/gpuwattch/xmlParser.h	/^    XMLCSTR text;$/;"	m	struct:XMLNodeContents
textureInfo	src/cuda-sim/ptx_ir.h	/^struct textureInfo {$/;"	s
textureNormalizeElementSigned	src/cuda-sim/instructions.cc	/^float textureNormalizeElementSigned(int element, int bits)$/;"	f
textureNormalizeElementUnsigned	src/cuda-sim/instructions.cc	/^float textureNormalizeElementUnsigned(unsigned int element, int bits)$/;"	f
textureNormalizeOutput	src/cuda-sim/instructions.cc	/^void textureNormalizeOutput( const struct cudaChannelFormatDesc& desc, ptx_reg_t& datax, ptx_reg_t& datay, ptx_reg_t& dataz, ptx_reg_t& dataw ) $/;"	f
textureReference	src/abstract_hardware_model.h	/^struct textureReference {$/;"	s
textureReferenceAttr	src/abstract_hardware_model.h	/^    textureReferenceAttr(const struct textureReference *texref, $/;"	f	struct:textureReferenceAttr
textureReferenceAttr	src/abstract_hardware_model.h	/^struct textureReferenceAttr {$/;"	s
texture_cycle	src/gpgpu-sim/shader.cc	/^bool ldst_unit::texture_cycle( warp_inst_t &inst, mem_stage_stall_type &rc_fail, mem_stage_access_type &fail_type)$/;"	f	class:ldst_unit
tg	src/gpuwattch/cacti/basic_circuit.h	/^    tg$/;"	e	enum:Gate_type
theConfig	src/intersim/config_utils.cpp	/^Configuration *Configuration::theConfig = 0;$/;"	m	class:Configuration	file:
theConfig	src/intersim/config_utils.hpp	/^   static Configuration *theConfig;$/;"	m	class:Configuration
theConfig	src/intersim2/config_utils.cpp	/^Configuration *Configuration::theConfig = 0;$/;"	m	class:Configuration	file:
theConfig	src/intersim2/config_utils.hpp	/^  static Configuration * theConfig;$/;"	m	class:Configuration
the_context	launcher/simulator.h	/^  CUctx_st*                                   the_context;$/;"	m	class:Simulator
the_device	launcher/simulator.h	/^  _cuda_device_id*                            the_device;$/;"	m	class:Simulator
thread	src/abstract_hardware_model.h	/^   class ptx_thread_info *thread;$/;"	m	struct:dram_callback_t	typeref:class:dram_callback_t::ptx_thread_info
thread	src/debug.cc	/^   const ptx_thread_info *thread() const { return m_thread; }$/;"	f	class:watchpoint_event
threadMasks	src/gpuwattch/memoryctrl.h	/^	ArrayST * threadMasks;$/;"	m	class:MCFrontEnd
thread_CFlocality	src/gpgpu-sim/stat-tool.cc	/^thread_CFlocality::thread_CFlocality(std::string name, $/;"	f	class:thread_CFlocality
thread_CFlocality	src/gpgpu-sim/stat-tool.h	/^class thread_CFlocality : public snap_shot_trigger, public spill_log_interface {$/;"	c
thread_CFlogger	src/gpgpu-sim/stat-tool.cc	/^static thread_CFlocality** thread_CFlogger = NULL;$/;"	v	file:
thread_at_brkpt	src/debug.cc	/^bool thread_at_brkpt( ptx_thread_info *thread, const struct brk_pt &b )$/;"	f
thread_ctx_t	src/gpgpu-sim/shader.h	/^class thread_ctx_t {$/;"	c
thread_info_saved	src/cuda-sim/cuda-sim.cc	/^std::map<unsigned, std::map<unsigned, std::map<unsigned,ptx_thread_info*> > > SimulationInitializer::thread_info_saved;$/;"	m	class:SimulationInitializer	file:
thread_info_saved	src/cuda-sim/cuda-sim.h	/^  static std::map<unsigned, std::map<unsigned, std::map<unsigned, ptx_thread_info*> > > thread_info_saved;$/;"	m	class:SimulationInitializer
thread_insn_span	src/gpgpu-sim/stat-tool.cc	/^thread_insn_span::thread_insn_span(const thread_insn_span& other)$/;"	f	class:thread_insn_span
thread_insn_span	src/gpgpu-sim/stat-tool.cc	/^thread_insn_span::thread_insn_span(unsigned long long  cycle)$/;"	f	class:thread_insn_span
thread_insn_span	src/gpgpu-sim/stat-tool.h	/^class thread_insn_span {$/;"	c
threads_per_core	src/gpgpu-sim/gpu-sim.cc	/^unsigned gpgpu_sim::threads_per_core() const $/;"	f	class:gpgpu_sim
threads_per_cta	common/kernel_info_t.h	/^   size_t threads_per_cta() const$/;"	f	class:kernel_info_t
threeD_stack	src/gpuwattch/XML_Parse.h	/^	char threeD_stack[20];$/;"	m	struct:__anon16
threeD_stack	src/gpuwattch/XML_Parse.h	/^	char threeD_stack[20];$/;"	m	struct:__anon17
threeD_stack	src/gpuwattch/XML_Parse.h	/^	char threeD_stack[20];$/;"	m	struct:__anon18
threeD_stack	src/gpuwattch/XML_Parse.h	/^	char threeD_stack[20];$/;"	m	struct:__anon19
throughput	src/gpuwattch/basic_components.h	/^    double throughput, latency;$/;"	m	class:CacheDynParam
throughput	src/gpuwattch/cacti/cacti_interface.h	/^  double throughput;$/;"	m	class:InputParameter
throughput	src/gpuwattch/interconnect.h	/^    double latency, throughput;$/;"	m	class:interconnect
throughput	src/intersim/trafficmanager.hpp	/^      latency, throughput$/;"	e	enum:TrafficManager::eSimMode
throughput_overflow	src/gpuwattch/interconnect.h	/^    bool  throughput_overflow;$/;"	m	class:interconnect
throughput_overhead	common/preempt_overhead.h	/^  unsigned long long throughput_overhead;$/;"	m	class:cta_preempt_overhead
throughput_overhead	common/preempt_overhead.h	/^  unsigned long long throughput_overhead;$/;"	m	class:preempt_overhead_item
throughput_overhead	common/preempt_overhead.h	/^  unsigned long long throughput_overhead;$/;"	m	class:shader_preempt_overhead
tick	src/ramulator_sim/Cache.cpp	/^void CacheSystem::tick() {$/;"	f	class:CacheSystem
tick	src/ramulator_sim/Controller.cpp	/^void Controller<TLDRAM>::tick() {$/;"	f	class:Controller
tick	src/ramulator_sim/Controller.h	/^    void tick()$/;"	f	class:Controller
tick	src/ramulator_sim/Memory.h	/^    void tick()$/;"	f	class:Memory
tick	src/ramulator_sim/SpeedyController.h	/^    void tick()$/;"	f	class:SpeedyController
tick_ref	src/ramulator_sim/Refresh.cpp	/^void Refresh<DSARP>::tick_ref() {$/;"	f	class:Refresh
tick_ref	src/ramulator_sim/Refresh.h	/^  void tick_ref() {$/;"	f	class:Refresh
tid	src/gpuwattch/cacti/Ucache.h	/^  uint32_t tid;$/;"	m	struct:calc_time_mt_wrapper_struct
time	src/intersim/flit.hpp	/^   int  time;$/;"	m	struct:Flit
time	src/intersim2/packet_reply_info.hpp	/^  int time;$/;"	m	class:PacketReplyInfo
time_vector_create	src/gpgpu-sim/visualizer.cc	/^void time_vector_create(int size) {$/;"	f
time_vector_print	src/gpgpu-sim/visualizer.cc	/^void time_vector_print(void) {$/;"	f
time_vector_print_interval2gzfile	src/gpgpu-sim/visualizer.cc	/^void time_vector_print_interval2gzfile(gzFile outfile) {$/;"	f
time_vector_update	src/gpgpu-sim/visualizer.cc	/^void time_vector_update(unsigned int uid,int slot ,long int cycle,int type) {$/;"	f
time_vector_update_icnt_injected	src/intersim/interconnect_interface.cpp	/^void time_vector_update_icnt_injected(void* data, int input) $/;"	f
timed_dim3	common/kernel_info_t.h	/^  timed_dim3(const dim3& _cta_id, unsigned long long _ready_time)$/;"	f	class:timed_dim3
timed_dim3	common/kernel_info_t.h	/^class timed_dim3 {$/;"	c
timed_dim3_comparison	common/kernel_info_t.h	/^  timed_dim3_comparison() {}$/;"	f	class:timed_dim3_comparison
timed_dim3_comparison	common/kernel_info_t.h	/^class timed_dim3_comparison {$/;"	c
timeout	src/ramulator_sim/Scheduler.h	/^    int timeout = 50;$/;"	m	class:RowPolicy
timestamp	src/ramulator_sim/Scheduler.h	/^        long timestamp;$/;"	m	struct:RowTable::Entry
timing	src/ramulator_sim/ALDRAM.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:ALDRAM
timing	src/ramulator_sim/DDR3.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:DDR3
timing	src/ramulator_sim/DDR4.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:DDR4
timing	src/ramulator_sim/DRAM.h	/^    vector<typename T::TimingEntry>* timing;$/;"	m	class:DRAM
timing	src/ramulator_sim/DSARP.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:DSARP
timing	src/ramulator_sim/GDDR5.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:GDDR5
timing	src/ramulator_sim/HBM.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:HBM
timing	src/ramulator_sim/LPDDR3.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:LPDDR3
timing	src/ramulator_sim/LPDDR4.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:LPDDR4
timing	src/ramulator_sim/SALP.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:SALP
timing	src/ramulator_sim/TLDRAM.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:TLDRAM
timing	src/ramulator_sim/WideIO.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:WideIO
timing	src/ramulator_sim/WideIO2.h	/^    vector<TimingEntry> timing[int(Level::MAX)][int(Command::MAX)];$/;"	m	class:WideIO2
tlb_request_status	src/gpgpu-sim/stats.h	/^enum tlb_request_status {$/;"	g
toString	src/option_parser.cc	/^   virtual string toString() $/;"	f	class:OptionRegistry
toString	src/option_parser.cc	/^string OptionRegistry<char *>::toString() $/;"	f	class:OptionRegistry
toXML	src/gpuwattch/xmlParser.cc	/^XMLSTR ToXMLStringTool::toXML(XMLCSTR source)$/;"	f	class:ToXMLStringTool
toXMLUnSafe	src/gpuwattch/xmlParser.cc	/^XMLSTR ToXMLStringTool::toXMLUnSafe(XMLSTR dest,XMLCSTR source)$/;"	f	class:ToXMLStringTool
to_remove	launcher/mk-sched/mk_scheduler.h	/^    std::vector<remove_status_st> to_remove;$/;"	m	class:DynamicScheduler::SM_info
to_string	src/cuda-sim/ptx_ir.cc	/^std::string ptx_instruction::to_string() const$/;"	f	class:ptx_instruction
tokenize_float	src/intersim2/config_utils.cpp	/^vector<double> tokenize_float(string const & data)$/;"	f
tokenize_int	src/intersim2/config_utils.cpp	/^vector<int> tokenize_int(string const & data)$/;"	f
tokenize_str	src/intersim2/config_utils.cpp	/^vector<string> tokenize_str(string const & data)$/;"	f
top	src/gpgpu-sim/delayqueue.h	/^   T* top() const$/;"	f	class:fifo_pipeline
top	src/gpgpu-sim/l2cache.cc	/^mem_fetch* memory_sub_partition::top() $/;"	f	class:memory_sub_partition
top	src/gpgpu-sim/stack.h	/^   int top;$/;"	m	struct:__anon30
top_packet	src/intersim/interconnect_interface.cpp	/^   void * top_packet(){$/;"	f	class:boundary_buf
top_stack	src/gpgpu-sim/stack.cc	/^address_type top_stack(Stack *S) {$/;"	f
topology	src/gpuwattch/XML_Parse.h	/^	char topology[20];$/;"	m	struct:__anon21
tornado	src/intersim/traffic.cpp	/^int tornado( int source, int total_nodes )$/;"	f
total	src/ramulator_sim/StatType.h	/^  Result total() const {$/;"	f	class:Stats_Ram::VectorBase
total	src/ramulator_sim/StatType.h	/^  Result total() const {return (Result)_value;}$/;"	f	class:Stats_Ram::Scalar
total	src/ramulator_sim/StatType.h	/^  Result total() const {return result();}$/;"	f	class:Stats_Ram::Average
total	src/ramulator_sim/StatType.h	/^  Result total() const {return result();}$/;"	f	class:Stats_Ram::ConstValue
total	src/ramulator_sim/StatType.h	/^  virtual Result total() const { return Result(); };$/;"	f	class:Stats_Ram::StatBase
total	src/ramulator_sim/StatType.h	/^const uint16_t total     = 0x00000010;$/;"	m	namespace:Stats_Ram
total	src/ramulator_sim/Statistics.h	/^  Stats_Ram::Result total(void) const { return StatBase<StatType>::stat.total(); }$/;"	f	class:VectorStatBase
totalTime	src/intersim2/power/power_module.hpp	/^  double totalTime;$/;"	m	class:Power_Module
total_access	src/gpuwattch/basic_components.h	/^    double executionTime, total_access, link_throughput,link_latency,$/;"	m	class:NoCParam
total_accesses	src/gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon10
total_accesses	src/gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon11
total_accesses	src/gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon12
total_accesses	src/gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon13
total_accesses	src/gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon14
total_accesses	src/gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon16
total_accesses	src/gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon17
total_accesses	src/gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon18
total_accesses	src/gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon19
total_accesses	src/gpuwattch/XML_Parse.h	/^	double total_accesses;$/;"	m	struct:__anon21
total_cycles	src/gpuwattch/XML_Parse.h	/^	double total_cycles;$/;"	m	struct:__anon15
total_cycles	src/gpuwattch/XML_Parse.h	/^    double total_cycles;$/;"	m	struct:__anon26
total_cycles	src/gpuwattch/basic_components.h	/^    double pipeline_duty_cycle, total_cycles, busy_cycles, idle_cycles;$/;"	m	class:CoreDynParam
total_hits	src/gpuwattch/XML_Parse.h	/^	double total_hits;$/;"	m	struct:__anon10
total_hits	src/gpuwattch/XML_Parse.h	/^	double total_hits;$/;"	m	struct:__anon11
total_hits	src/gpuwattch/XML_Parse.h	/^	double total_hits;$/;"	m	struct:__anon12
total_hits	src/gpuwattch/XML_Parse.h	/^	double total_hits;$/;"	m	struct:__anon13
total_hits	src/gpuwattch/XML_Parse.h	/^	double total_hits;$/;"	m	struct:__anon14
total_hits	src/gpuwattch/XML_Parse.h	/^	double total_hits;$/;"	m	struct:__anon18
total_hits	src/gpuwattch/XML_Parse.h	/^	double total_hits;$/;"	m	struct:__anon19
total_instructions	src/gpuwattch/XML_Parse.h	/^	double total_instructions;$/;"	m	struct:__anon15
total_load_perc	src/gpuwattch/XML_Parse.h	/^	double total_load_perc;$/;"	m	struct:__anon23
total_load_perc	src/gpuwattch/XML_Parse.h	/^	double total_load_perc;$/;"	m	struct:__anon24
total_load_perc	src/gpuwattch/XML_Parse.h	/^	double total_load_perc;$/;"	m	struct:__anon25
total_misses	src/gpuwattch/XML_Parse.h	/^	double total_misses;$/;"	m	struct:__anon10
total_misses	src/gpuwattch/XML_Parse.h	/^	double total_misses;$/;"	m	struct:__anon11
total_misses	src/gpuwattch/XML_Parse.h	/^	double total_misses;$/;"	m	struct:__anon12
total_misses	src/gpuwattch/XML_Parse.h	/^	double total_misses;$/;"	m	struct:__anon13
total_misses	src/gpuwattch/XML_Parse.h	/^	double total_misses;$/;"	m	struct:__anon14
total_misses	src/gpuwattch/XML_Parse.h	/^	double total_misses;$/;"	m	struct:__anon18
total_misses	src/gpuwattch/XML_Parse.h	/^	double total_misses;$/;"	m	struct:__anon19
total_n_access	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned total_n_access;$/;"	m	class:memory_stats_t
total_n_reads	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned total_n_reads;$/;"	m	class:memory_stats_t
total_n_writes	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned total_n_writes;$/;"	m	class:memory_stats_t
total_nodes	src/gpuwattch/basic_components.h	/^    int    horizontal_nodes,vertical_nodes, total_nodes;$/;"	m	class:NoCParam
total_power	src/gpuwattch/cacti/Ucache.h	/^  powerDef total_power;$/;"	m	struct:solution
total_power	src/gpuwattch/cacti/cacti_interface.h	/^  powerDef total_power;$/;"	m	struct:__anon5
total_sample_count	src/gpuwattch/gpgpu_sim_wrapper.h	/^    int total_sample_count; \/\/ # of samples per benchmark$/;"	m	class:gpgpu_sim_wrapper
total_val	src/ramulator_sim/StatType.h	/^  Result total_val;$/;"	m	class:Stats_Ram::Average
total_value	launcher/stats/stats.h	/^  uint64_t total_value;$/;"	m	class:Stats::AverageScalarStorage
totalbankaccesses	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int **totalbankaccesses; \/\/bankaccesses[dram chip id][bank id]$/;"	m	class:memory_stats_t
totalbankreads	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int **totalbankreads; \/\/bankreads[dram chip id][bank id]$/;"	m	class:memory_stats_t
totalbankwrites	src/gpgpu-sim/mem_latency_stat.h	/^   unsigned int **totalbankwrites; \/\/bankwrites[dram chip id][bank id]$/;"	m	class:memory_stats_t
tr1_hash_map	src/tr1_hash_map.h	37;"	d
tr1_hash_map	src/tr1_hash_map.h	41;"	d
tr1_hash_map	src/tr1_hash_map.h	46;"	d
tr1_hash_map_ismap	src/tr1_hash_map.h	38;"	d
tr1_hash_map_ismap	src/tr1_hash_map.h	42;"	d
tr1_hash_map_ismap	src/tr1_hash_map.h	47;"	d
tr_R_on	src/gpuwattch/cacti/basic_circuit.cc	/^double tr_R_on($/;"	f
tr_crossbar_power	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::tr_crossbar_power() {$/;"	f	class:MCPAT_Router
trace_streams_enabled	src/trace.cc	/^    bool trace_streams_enabled[NUM_TRACE_STREAMS] = {false};$/;"	m	namespace:Trace	file:
traffic	src/intersim/interconnect_interface.cpp	/^TrafficManager** traffic;$/;"	v
trafficManager	src/intersim2/main.cpp	/^TrafficManager * trafficManager = NULL;$/;"	v
traffic_breakdown	src/gpgpu-sim/traffic_breakdown.h	/^   traffic_breakdown(const std::string &network_name) $/;"	f	class:traffic_breakdown
traffic_breakdown	src/gpgpu-sim/traffic_breakdown.h	/^class traffic_breakdown$/;"	c
traffic_class_t	src/gpgpu-sim/traffic_breakdown.h	/^   typedef std::map < mf_packet_size, unsigned int > traffic_class_t; $/;"	t	class:traffic_breakdown
traffic_stat_t	src/gpgpu-sim/traffic_breakdown.h	/^   typedef std::map < mf_packet_type, traffic_class_t > traffic_stat_t; $/;"	t	class:traffic_breakdown
transaction_info	src/abstract_hardware_model.h	/^    struct transaction_info {$/;"	s	class:warp_inst_t
transecEngine	src/gpuwattch/memoryctrl.h	/^    MCBackend * transecEngine;$/;"	m	class:MemoryController
transfer2boundary_buf	src/intersim/interconnect_interface.cpp	/^void transfer2boundary_buf(int output) {$/;"	f
translate	src/ramulator_sim/ALDRAM.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:ALDRAM
translate	src/ramulator_sim/DDR3.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:DDR3
translate	src/ramulator_sim/DDR4.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:DDR4
translate	src/ramulator_sim/DSARP.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:DSARP
translate	src/ramulator_sim/GDDR5.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:GDDR5
translate	src/ramulator_sim/HBM.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:HBM
translate	src/ramulator_sim/LPDDR3.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:LPDDR3
translate	src/ramulator_sim/LPDDR4.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:LPDDR4
translate	src/ramulator_sim/SALP.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:SALP
translate	src/ramulator_sim/TLDRAM.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:TLDRAM
translate	src/ramulator_sim/WideIO.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:WideIO
translate	src/ramulator_sim/WideIO2.h	/^    Command translate[int(Request::Type::MAX)] = {$/;"	m	class:WideIO2
translate_local_memaddr	src/gpgpu-sim/shader.cc	/^unsigned shader_core_ctx::translate_local_memaddr( address_type localaddr, unsigned tid, unsigned num_shader, unsigned datasize, new_addr_type* translated_addrs )$/;"	f	class:shader_core_ctx
translate_pc_to_ptxlineno	src/cuda-sim/cuda-sim.cc	/^unsigned translate_pc_to_ptxlineno(unsigned pc)$/;"	f
translation	src/ramulator_sim/Memory.h	/^    } translation = Translation::None;$/;"	m	class:Memory	typeref:class:Memory::Translation
transmission_buf_ctrcap	src/gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::transmission_buf_ctrcap() {$/;"	f	class:MCPAT_Arbiter
transmission_buf_ctrcap	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::transmission_buf_ctrcap() {$/;"	f	class:MCPAT_Router
transmission_buf_inpcap	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::transmission_buf_inpcap() {$/;"	f	class:MCPAT_Router
transmission_buf_outcap	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::transmission_buf_outcap() {$/;"	f	class:MCPAT_Router
transmitter	src/gpuwattch/cacti/wire.h	/^    Component transmitter;$/;"	m	class:Wire
transpose	src/intersim/traffic.cpp	/^int transpose( int source, int total_nodes )$/;"	f
trap_impl	src/cuda-sim/instructions.cc	/^void trap_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
traversal	src/intersim2/power/switch_monitor.cpp	/^void SwitchMonitor::traversal( int input, int output, Flit const * f ) {$/;"	f	class:SwitchMonitor
trcd	src/gpuwattch/cacti/cacti_interface.h	/^  double trcd;$/;"	m	struct:__anon5
tree4_anca	src/intersim2/routefunc.cpp	/^void tree4_anca( const Router *r, const Flit *f,$/;"	f
tree4_nca	src/intersim2/routefunc.cpp	/^void tree4_nca( const Router *r, const Flit *f,$/;"	f
tree_type	src/gpuwattch/cacti/htree2.h	/^    enum Htree_type tree_type;$/;"	m	class:Htree2	typeref:enum:Htree2::Htree_type
tri	src/gpuwattch/cacti/basic_circuit.h	/^    tri,$/;"	e	enum:Gate_type
tri_ctr_cap	src/gpuwattch/cacti/crossbar.h	/^    double tri_inp_cap, tri_out_cap, tri_ctr_cap, tri_int_cap;$/;"	m	class:Crossbar
tri_inp_cap	src/gpuwattch/cacti/crossbar.h	/^    double tri_inp_cap, tri_out_cap, tri_ctr_cap, tri_int_cap;$/;"	m	class:Crossbar
tri_int_cap	src/gpuwattch/cacti/crossbar.h	/^    double tri_inp_cap, tri_out_cap, tri_ctr_cap, tri_int_cap;$/;"	m	class:Crossbar
tri_out_cap	src/gpuwattch/cacti/crossbar.h	/^    double tri_inp_cap, tri_out_cap, tri_ctr_cap, tri_int_cap;$/;"	m	class:Crossbar
true_tail	src/intersim/flit.hpp	/^   bool true_tail;$/;"	m	struct:Flit
try_snap_shot	src/gpgpu-sim/stat-tool.cc	/^void try_snap_shot (unsigned long long  current_cycle)$/;"	f
try_snap_shot	src/gpgpu-sim/stat-tool.h	/^   void try_snap_shot(unsigned long long  current_cycle) {$/;"	f	class:snap_shot_trigger
tuple	src/cuda-sim/ptxinfo.y	/^tuple: INT_OPERAND PLUS INT_OPERAND BYTES { g_declared=$1; g_system=$3; }$/;"	l
twin_operand	src/cuda-sim/ptx.y	/^twin_operand : IDENTIFIER PLUS IDENTIFIER { add_double_operand($1,$3); change_double_operand_type(1); }$/;"	l
two_level_active_scheduler	src/gpgpu-sim/shader.h	/^	two_level_active_scheduler ( shader_core_stats* stats, shader_core_ctx* shader,$/;"	f	class:two_level_active_scheduler
two_level_active_scheduler	src/gpgpu-sim/shader.h	/^class two_level_active_scheduler : public scheduler_unit {$/;"	c
tx_bits	src/ramulator_sim/Memory.h	/^    int tx_bits;$/;"	m	class:Memory
txq_impl	src/cuda-sim/instructions.cc	/^void txq_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
type	src/cuda-sim/ptx_ir.h	/^   const type_info *type() const { return m_type;}$/;"	f	class:symbol
type	src/cuda-sim/ptx_sim.h	/^   int type;$/;"	m	struct:param_t
type	src/gpuwattch/XML_Parse.h	/^	bool type;$/;"	m	struct:__anon21
type	src/gpuwattch/XML_Parse.h	/^	int type;$/;"	m	struct:__anon23
type	src/gpuwattch/XML_Parse.h	/^	int type;$/;"	m	struct:__anon24
type	src/gpuwattch/XML_Parse.h	/^	int type;$/;"	m	struct:__anon25
type	src/gpuwattch/basic_components.h	/^    bool   has_global_link, type;$/;"	m	class:NoCParam
type	src/gpuwattch/basic_components.h	/^    int    type;$/;"	m	class:MCParam
type	src/gpuwattch/basic_components.h	/^    int    type;$/;"	m	class:NIUParam
type	src/gpuwattch/basic_components.h	/^    int    type;$/;"	m	class:PCIeParam
type	src/intersim2/flit.hpp	/^  FlitType type;$/;"	m	class:Flit
type	src/intersim2/packet_reply_info.hpp	/^  Flit::FlitType type;$/;"	m	class:PacketReplyInfo
type	src/ramulator_sim/DSARP.h	/^    } type;$/;"	m	class:DSARP	typeref:class:DSARP::Type
type	src/ramulator_sim/Memory.h	/^    } type = Type::RoBaRaCoCh;$/;"	m	class:Memory	typeref:class:Memory::Type
type	src/ramulator_sim/Request.h	/^    } type;$/;"	m	class:Request	typeref:class:Request::Type
type	src/ramulator_sim/SALP.h	/^    } type;$/;"	m	class:SALP	typeref:class:SALP::Type
type	src/ramulator_sim/Scheduler.h	/^    } type = Type::FRFCFS_PriorHit;$/;"	m	class:Scheduler	typeref:class:Scheduler::Type
type	src/ramulator_sim/Scheduler.h	/^    } type = Type::Opened;$/;"	m	class:RowPolicy	typeref:class:RowPolicy::Type
type_decode	src/cuda-sim/ptx_ir.cc	/^unsigned type_info_key::type_decode( int type, size_t &size, int &basic_type )$/;"	f	class:type_info_key
type_decode	src/cuda-sim/ptx_ir.cc	/^unsigned type_info_key::type_decode( size_t &size, int &basic_type ) const$/;"	f	class:type_info_key
type_info	src/cuda-sim/ptx_ir.h	/^   type_info( symbol_table *scope, type_info_key t )$/;"	f	class:type_info
type_info	src/cuda-sim/ptx_ir.h	/^class type_info {$/;"	c
type_info_key	src/cuda-sim/ptx_ir.h	/^   type_info_key( memory_space_t space_spec, int scalar_type_spec, int vector_spec, int alignment_spec, int extern_spec, int array_dim )$/;"	f	class:type_info_key
type_info_key	src/cuda-sim/ptx_ir.h	/^   type_info_key()$/;"	f	class:type_info_key
type_info_key	src/cuda-sim/ptx_ir.h	/^class type_info_key {$/;"	c
type_info_key_compare	src/cuda-sim/ptx_ir.h	/^struct type_info_key_compare {$/;"	s
type_map	src/ramulator_sim/SALP.cpp	/^map<string, enum SALP::Type> SALP::type_map = {$/;"	m	class:SALP	file:
type_map	src/ramulator_sim/SALP.h	/^    static map<string, enum Type> type_map;$/;"	m	class:SALP
type_spec	src/cuda-sim/ptx.y	/^type_spec: scalar_type $/;"	l
types_of_operands	src/abstract_hardware_model.h	/^typedef enum uarch_operand_type_t types_of_operands;$/;"	t	typeref:enum:uarch_operand_type_t
u128	src/cuda-sim/ptx_sim.h	/^   } u128;$/;"	m	union:ptx_reg_t	typeref:struct:ptx_reg_t::__anon3
u16	src/cuda-sim/ptx_sim.h	/^   unsigned short    u16;$/;"	m	union:ptx_reg_t
u2f	src/cuda-sim/instructions.cc	/^ptx_reg_t u2f( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_mode, int saturation_mode )$/;"	f
u32	src/cuda-sim/ptx_sim.h	/^   unsigned int      u32;$/;"	m	union:ptx_reg_t
u64	src/cuda-sim/ptx_sim.h	/^   unsigned long long   u64;$/;"	m	union:ptx_reg_t
u8	src/cuda-sim/ptx_sim.h	/^   unsigned char     u8;$/;"	m	union:ptx_reg_t
uarch_op_t	src/abstract_hardware_model.h	/^enum uarch_op_t {$/;"	g
uarch_operand_type_t	src/abstract_hardware_model.h	/^enum uarch_operand_type_t {$/;"	g
uca_org_t	src/gpuwattch/cacti/cacti_interface.cc	/^uca_org_t :: uca_org_t()$/;"	f	class:uca_org_t
uca_org_t	src/gpuwattch/cacti/cacti_interface.h	/^class uca_org_t$/;"	c
uca_tree	src/gpuwattch/cacti/htree2.h	/^    bool uca_tree; \/\/ should have full bandwidth to access all banks in the array simultaneously$/;"	m	class:Htree2
ugal_dragonflynew	src/intersim2/networks/dragonfly.cpp	/^void ugal_dragonflynew( const Router *r, const Flit *f, int in_channel, $/;"	f
ugal_flatfly_onchip	src/intersim2/networks/flatfly_onchip.cpp	/^void ugal_flatfly_onchip( const Router *r, const Flit *f, int in_channel,$/;"	f
ugal_pni_flatfly_onchip	src/intersim2/networks/flatfly_onchip.cpp	/^void ugal_pni_flatfly_onchip( const Router *r, const Flit *f, int in_channel,$/;"	f
ugal_xyyx_flatfly_onchip	src/intersim2/networks/flatfly_onchip.cpp	/^void ugal_xyyx_flatfly_onchip( const Router *r, const Flit *f, int in_channel,$/;"	f
uid	src/cuda-sim/ptx_ir.h	/^   unsigned uid() const { return m_uid; }$/;"	f	class:symbol
uid	src/cuda-sim/ptx_ir.h	/^   unsigned uid() const { return m_uid;}$/;"	f	class:ptx_instruction
uid	src/intersim/trafficmanager.hpp	/^   int uid; \/\/ this traffic manger's ID useful when we have more than 1 traffic objects$/;"	m	class:TrafficManager
uint16_t	src/ramulator_sim/StatType.h	/^typedef unsigned short uint16_t;$/;"	t	namespace:Stats_Ram
uint32_t	src/ramulator_sim/StatType.h	/^typedef unsigned int uint32_t;$/;"	t	namespace:Stats_Ram
uint4	src/cuda-sim/cuda-math.h	/^   struct uint4 {$/;"	s	namespace:cuda_math
uint4	src/cuda-sim/cuda-math.h	/^   typedef struct uint4 uint4;$/;"	t	namespace:cuda_math	typeref:struct:cuda_math::uint4
uint64_t	src/ramulator_sim/StatType.h	/^typedef unsigned long long uint64_t;$/;"	t	namespace:Stats_Ram
uint8_t	src/ramulator_sim/StatType.h	/^typedef unsigned char uint8_t;$/;"	t	namespace:Stats_Ram
uint_vector_t	src/gpgpu-sim/shader.h	/^   typedef std::vector<unsigned int> uint_vector_t;$/;"	t	class:opndcoll_rfu_t
ulldata	src/option_parser.cc	/^   unsigned long long ulldata;$/;"	m	class:testtype	file:
umRobs	src/gpuwattch/arch_const.h	/^const int umRobs=1;$/;"	v
undef_t	src/cuda-sim/ptx_ir.h	/^   v_int_t, v_unsigned_t, undef_t$/;"	e	enum:operand_type
undefined_space	src/abstract_hardware_model.h	/^   undefined_space=0,$/;"	e	enum:_memory_space_t
underflow	src/ramulator_sim/StatType.h	/^  Counter underflow;$/;"	m	class:Stats_Ram::Distribution
undiffCore	src/gpuwattch/core.h	/^    UndiffCore * undiffCore;$/;"	m	class:Core
unicache	src/gpuwattch/sharedcache.h	/^    DataCache unicache;\/\/Shared cache$/;"	m	class:SharedCache
uniform	src/intersim/traffic.cpp	/^int uniform( int source, int total_nodes )$/;"	f
unit_len_wire_del	src/gpuwattch/cacti/parameter.h	/^  double unit_len_wire_del;$/;"	m	class:TechnologyParameter
unlog	src/gpgpu-sim/stat-tool.h	/^   void unlog(int pos) { m_curr_lin_hist.subsample(pos); }$/;"	f	class:linear_histogram_logger
unput	build/src/cuda-sim/lex.ptx_.c	221;"	d	file:
unput	build/src/cuda-sim/lex.ptxinfo_.c	221;"	d	file:
unput	src/intersim2/lex.yy.c	188;"	d	file:
unset_launched_kernel	launcher/child_process.h	/^  void unset_launched_kernel()    { launched_kernel = false; }$/;"	f	class:ChildProcess
unsigned_t	src/cuda-sim/ptx_ir.h	/^   unsigned_t, symbolic_t, label_t, v_reg_t, v_float_op_t, v_double_op_t,$/;"	e	enum:operand_type
update	common/cu_event_st.h	/^   void update( double cycle, time_t clk )$/;"	f	class:CUevent_st
update	src/abstract_hardware_model.cc	/^void simt_stack::update( simt_mask_t &thread_done, addr_vector_t &next_pc, address_type recvg_pc, op_type next_inst_op )$/;"	f	class:simt_stack
update	src/gpuwattch/cacti/Ucache.cc	/^void update(uca_org_t *fin_res)$/;"	f
update	src/ramulator_sim/DRAM.h	/^void DRAM<T>::update(typename T::Command cmd, const int* addr, long clk)$/;"	f	class:DRAM
update	src/ramulator_sim/Scheduler.h	/^    void update(typename T::Command cmd, const vector<int>& addr_vec, long clk)$/;"	f	class:RowTable
update	src/ramulator_sim/SpeedyController.h	/^    void update(typename T::Command cmd, bool state_change, vector<int>::iterator& begin, vector<int>::iterator& end, request_queue& q) {$/;"	f	class:SpeedyController
updateAttribute	src/gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::updateAttribute(XMLAttribute *newAttribute, XMLAttribute *oldAttribute)$/;"	f	class:XMLNode
updateAttribute	src/gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::updateAttribute(XMLCSTR lpszNewValue, XMLCSTR lpszNewName,XMLCSTR lpszOldName)$/;"	f	class:XMLNode
updateAttribute	src/gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::updateAttribute(XMLCSTR lpszNewValue, XMLCSTR lpszNewName,int i)$/;"	f	class:XMLNode
updateAttribute_WOSD	src/gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::updateAttribute_WOSD(XMLAttribute *newAttribute, XMLAttribute *oldAttribute)$/;"	f	class:XMLNode
updateAttribute_WOSD	src/gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::updateAttribute_WOSD(XMLSTR lpszNewValue, XMLSTR lpszNewName,XMLCSTR lpszOldName)$/;"	f	class:XMLNode
updateAttribute_WOSD	src/gpuwattch/xmlParser.cc	/^XMLAttribute *XMLNode::updateAttribute_WOSD(XMLSTR lpszNewValue, XMLSTR lpszNewName,int i)$/;"	f	class:XMLNode
updateClear	src/gpuwattch/xmlParser.cc	/^XMLClear     *XMLNode::updateClear(XMLCSTR lpszNewContent, int i)$/;"	f	class:XMLNode
updateClear	src/gpuwattch/xmlParser.cc	/^XMLClear     *XMLNode::updateClear(XMLCSTR lpszNewValue, XMLCSTR lpszOldValue)$/;"	f	class:XMLNode
updateClear	src/gpuwattch/xmlParser.cc	/^XMLClear     *XMLNode::updateClear(XMLClear *newP,XMLClear *oldP)$/;"	f	class:XMLNode
updateClear_WOSD	src/gpuwattch/xmlParser.cc	/^XMLClear *XMLNode::updateClear_WOSD(XMLClear *newP,XMLClear *oldP)$/;"	f	class:XMLNode
updateClear_WOSD	src/gpuwattch/xmlParser.cc	/^XMLClear *XMLNode::updateClear_WOSD(XMLSTR lpszNewContent, XMLCSTR lpszOldValue)$/;"	f	class:XMLNode
updateClear_WOSD	src/gpuwattch/xmlParser.cc	/^XMLClear *XMLNode::updateClear_WOSD(XMLSTR lpszNewContent, int i)$/;"	f	class:XMLNode
updateName	src/gpuwattch/xmlParser.cc	/^XMLCSTR       XMLNode::updateName(XMLCSTR lpszName)$/;"	f	class:XMLNode
updateName_WOSD	src/gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::updateName_WOSD(XMLSTR lpszName)$/;"	f	class:XMLNode
updateSIMTStack	src/abstract_hardware_model.cc	/^void core_t::updateSIMTStack(unsigned warpId, warp_inst_t * inst)$/;"	f	class:core_t
updateText	src/gpuwattch/xmlParser.cc	/^XMLCSTR       XMLNode::updateText(XMLCSTR lpszNewValue, XMLCSTR lpszOldValue)$/;"	f	class:XMLNode
updateText	src/gpuwattch/xmlParser.cc	/^XMLCSTR       XMLNode::updateText(XMLCSTR lpszNewValue, int i)$/;"	f	class:XMLNode
updateText_WOSD	src/gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::updateText_WOSD(XMLSTR lpszNewValue, XMLCSTR lpszOldValue)$/;"	f	class:XMLNode
updateText_WOSD	src/gpuwattch/xmlParser.cc	/^XMLCSTR XMLNode::updateText_WOSD(XMLSTR lpszNewValue, int i)$/;"	f	class:XMLNode
update_cache_parameters	src/gpgpu-sim/gpu-cache.cc	/^void tag_array::update_cache_parameters(cache_config &config)$/;"	f	class:tag_array
update_cache_parameters	src/gpgpu-sim/gpu-cache.h	/^	void update_cache_parameters(cache_config &config)$/;"	f	class:baseline_cache
update_coefficients	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::update_coefficients()$/;"	f	class:gpgpu_sim_wrapper
update_components_power	src/gpuwattch/gpgpu_sim_wrapper.cc	/^void gpgpu_sim_wrapper::update_components_power()$/;"	f	class:gpgpu_sim_wrapper
update_fullswing	src/gpuwattch/cacti/wire.cc	/^void Wire::update_fullswing()$/;"	f	class:Wire
update_ld	src/gpgpu-sim/visualizer.cc	/^   void update_ld(unsigned int uid,unsigned int slot, long int time) { $/;"	f	class:my_time_vector
update_min_values	src/gpuwattch/cacti/Ucache.cc	/^void min_values_t::update_min_values(const mem_array * res)$/;"	f	class:min_values_t
update_min_values	src/gpuwattch/cacti/Ucache.cc	/^void min_values_t::update_min_values(const min_values_t * val)$/;"	f	class:min_values_t
update_min_values	src/gpuwattch/cacti/Ucache.cc	/^void min_values_t::update_min_values(const nuca_org_t * res)$/;"	f	class:min_values_t
update_min_values	src/gpuwattch/cacti/Ucache.cc	/^void min_values_t::update_min_values(const uca_org_t & res)$/;"	f	class:min_values_t
update_pc	src/cuda-sim/ptx_sim.h	/^   void update_pc( )$/;"	f	class:ptx_thread_info
update_scheduler	launcher/mk-sched/even_scheduler.cc	/^EvenScheduler::update_scheduler(const SchedulerUpdateInfo& info)$/;"	f	class:EvenScheduler
update_scheduler	launcher/mk-sched/fixed_scheduler.cc	/^FixedScheduler::update_scheduler(const SchedulerUpdateInfo& info)$/;"	f	class:FixedScheduler
update_scheduler	launcher/mk-sched/smart_even_scheduler.cc	/^SmartEvenScheduler::update_scheduler(const SchedulerUpdateInfo& info)$/;"	f	class:SmartEvenScheduler
update_serving_requests	src/ramulator_sim/DRAM.h	/^void DRAM<T>::update_serving_requests(const int* addr, int delta, long clk) {$/;"	f	class:DRAM
update_st	src/gpgpu-sim/visualizer.cc	/^   void update_st(unsigned int uid,unsigned int slot, long int time) { $/;"	f	class:my_time_vector
update_state	src/ramulator_sim/DRAM.h	/^void DRAM<T>::update_state(typename T::Command cmd, const int* addr)$/;"	f	class:DRAM
update_stats	src/gpgpu-sim/gpu-sim.cc	/^void gpgpu_sim::update_stats() {$/;"	f	class:gpgpu_sim
update_temp	src/ramulator_sim/Controller.cpp	/^void Controller<ALDRAM>::update_temp(ALDRAM::Temp current_temperature) {$/;"	f	class:Controller
update_temp	src/ramulator_sim/Controller.h	/^    void update_temp(ALDRAM::Temp current_temperature)$/;"	f	class:Controller
update_thread_pc	src/gpgpu-sim/stat-tool.cc	/^void thread_CFlocality::update_thread_pc( int thread_id, address_type pc ) $/;"	f	class:thread_CFlocality
update_timing	src/ramulator_sim/DRAM.h	/^void DRAM<T>::update_timing(typename T::Command cmd, const int* addr, long clk)$/;"	f	class:DRAM
usage	launcher/launcher_option_parser.cc	/^LauncherOptionParser::usage(const char* binaryname) const {$/;"	f	class:LauncherOptionParser
use_cuobjdump	src/abstract_hardware_model.h	/^    bool use_cuobjdump() const { return m_ptx_use_cuobjdump; }$/;"	f	class:gpgpu_functional_sim_config
use_data_port	src/gpgpu-sim/gpu-cache.cc	/^void baseline_cache::bandwidth_management::use_data_port(mem_fetch *mf, enum cache_request_status outcome, const std::list<cache_event> &events)$/;"	f	class:baseline_cache::bandwidth_management
use_fill_port	src/gpgpu-sim/gpu-cache.cc	/^void baseline_cache::bandwidth_management::use_fill_port(mem_fetch *mf)$/;"	f	class:baseline_cache::bandwidth_management
use_inp_params	src/gpuwattch/cacti/parameter.h	/^    int use_inp_params;$/;"	m	class:DynamicParameter
v	src/gpgpu-sim/stack.h	/^   address_type *v;$/;"	m	struct:__anon30
v_address_width	src/gpuwattch/basic_components.h	/^    int  int_data_width, fp_data_width,v_address_width, p_address_width;$/;"	m	class:CoreDynParam
v_double_op_t	src/cuda-sim/ptx_ir.h	/^   unsigned_t, symbolic_t, label_t, v_reg_t, v_float_op_t, v_double_op_t,$/;"	e	enum:operand_type
v_float_op_t	src/cuda-sim/ptx_ir.h	/^   unsigned_t, symbolic_t, label_t, v_reg_t, v_float_op_t, v_double_op_t,$/;"	e	enum:operand_type
v_int_t	src/cuda-sim/ptx_ir.h	/^   v_int_t, v_unsigned_t, undef_t$/;"	e	enum:operand_type
v_reg_t	src/cuda-sim/ptx_ir.h	/^   unsigned_t, symbolic_t, label_t, v_reg_t, v_float_op_t, v_double_op_t,$/;"	e	enum:operand_type
v_unsigned_t	src/cuda-sim/ptx_ir.h	/^   v_int_t, v_unsigned_t, undef_t$/;"	e	enum:operand_type
v_wire	src/gpuwattch/cacti/nuca.h	/^    Wire *v_wire;$/;"	m	class:nuca_org_t
vabsdiff_impl	src/cuda-sim/instructions.cc	/^void vabsdiff_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
vadd_impl	src/cuda-sim/instructions.cc	/^void vadd_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
val	src/ramulator_sim/ALDRAM.h	/^        int val;$/;"	m	struct:ALDRAM::TimingEntry
val	src/ramulator_sim/DDR3.h	/^        int val;$/;"	m	struct:DDR3::TimingEntry
val	src/ramulator_sim/DDR4.h	/^        int val;$/;"	m	struct:DDR4::TimingEntry
val	src/ramulator_sim/DSARP.h	/^        int val;$/;"	m	struct:DSARP::TimingEntry
val	src/ramulator_sim/GDDR5.h	/^        int val;$/;"	m	struct:GDDR5::TimingEntry
val	src/ramulator_sim/HBM.h	/^        int val;$/;"	m	struct:HBM::TimingEntry
val	src/ramulator_sim/LPDDR3.h	/^        int val;$/;"	m	struct:LPDDR3::TimingEntry
val	src/ramulator_sim/LPDDR4.h	/^        int val;$/;"	m	struct:LPDDR4::TimingEntry
val	src/ramulator_sim/SALP.h	/^        int val;$/;"	m	struct:SALP::TimingEntry
val	src/ramulator_sim/TLDRAM.h	/^        int val;$/;"	m	struct:TLDRAM::TimingEntry
val	src/ramulator_sim/WideIO.h	/^        int val;$/;"	m	struct:WideIO::TimingEntry
val	src/ramulator_sim/WideIO2.h	/^        int val;$/;"	m	struct:WideIO2::TimingEntry
valiant_flatfly	src/intersim2/networks/flatfly_onchip.cpp	/^void valiant_flatfly( const Router *r, const Flit *f, int in_channel, $/;"	f
valiant_mesh	src/intersim/routefunc.cpp	/^void valiant_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
valiant_mesh	src/intersim2/routefunc.cpp	/^void valiant_mesh( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
valiant_ni_torus	src/intersim/routefunc.cpp	/^void valiant_ni_torus( const Router *r, const Flit *f, int in_channel, $/;"	f
valiant_ni_torus	src/intersim2/routefunc.cpp	/^void valiant_ni_torus( const Router *r, const Flit *f, int in_channel, $/;"	f
valiant_torus	src/intersim/routefunc.cpp	/^void valiant_torus( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
valiant_torus	src/intersim2/routefunc.cpp	/^void valiant_torus( const Router *r, const Flit *f, int in_channel, OutputSet *outputs, bool inject )$/;"	f
valid	src/abstract_hardware_model.h	/^    bool valid() const { return m_decoded; }$/;"	f	class:inst_t
valid	src/gpgpu-sim/shader.h	/^      bool valid() const { return m_valid; }$/;"	f	class:opndcoll_rfu_t::op_t
valid	src/gpuwattch/cacti/cacti_interface.h	/^    bool valid;$/;"	m	class:uca_org_t
valid	src/intersim2/arbiters/arbiter.hpp	/^    bool valid ;$/;"	m	struct:Arbiter::__anon1
validate	src/ramulator_sim/MemoryFactory.cpp	/^void MemoryFactory<HBM>::validate(int channels, int ranks, const Config& configs) {$/;"	f	class:MemoryFactory
validate	src/ramulator_sim/MemoryFactory.cpp	/^void MemoryFactory<LPDDR4>::validate(int channels, int ranks, const Config& configs) {$/;"	f	class:MemoryFactory
validate	src/ramulator_sim/MemoryFactory.cpp	/^void MemoryFactory<WideIO2>::validate(int channels, int ranks, const Config& configs) {$/;"	f	class:MemoryFactory
validate	src/ramulator_sim/MemoryFactory.cpp	/^void MemoryFactory<WideIO>::validate(int channels, int ranks, const Config& configs) {$/;"	f	class:MemoryFactory
validate	src/ramulator_sim/MemoryFactory.h	/^    static void validate(int channels, int ranks, const Config& configs) {$/;"	f	class:MemoryFactory
value	src/ramulator_sim/StatType.h	/^  Counter value() const { return current; }$/;"	f	class:Stats_Ram::Average
value	src/ramulator_sim/StatType.h	/^  Counter value() const {return _value;}$/;"	f	class:Stats_Ram::ConstValue
value	src/ramulator_sim/StatType.h	/^  Counter value() const {return _value;}$/;"	f	class:Stats_Ram::Scalar
value	src/ramulator_sim/StatType.h	/^  void value(VCounter& vec) const {$/;"	f	class:Stats_Ram::VectorBase
value	src/ramulator_sim/Statistics.h	/^  Stats_Ram::Counter value() const { return StatBase<StatType>::stat.value(); };$/;"	f	class:ScalarStatBase
value	src/ramulator_sim/Statistics.h	/^  void value(Stats_Ram::VCounter & vec) const { StatBase<StatType>::stat.value(vec); }$/;"	f	class:VectorStatBase
values	launcher/mk-sched/named_info.h	/^    std::map<std::string, T> values;$/;"	m	class:NamedInfo
var_spec	src/cuda-sim/ptx.y	/^var_spec: space_spec $/;"	l
var_spec_list	src/cuda-sim/ptx.y	/^var_spec_list: var_spec $/;"	l
variable_declaration	src/cuda-sim/ptx.y	/^variable_declaration: variable_spec identifier_list { add_variables(); }$/;"	l
variable_spec	src/cuda-sim/ptx.y	/^variable_spec: var_spec_list { set_variable_type(); }$/;"	l
vault	src/gpgpu-sim/addrdec.h	/^   unsigned vault; \/\/ vault id;$/;"	m	struct:addrdec_t
vc	src/intersim/credit.hpp	/^   int  *vc;$/;"	m	class:Credit
vc	src/intersim/event_router.hpp	/^      int  vc;$/;"	m	struct:EventNextVCState::tWaiting
vc	src/intersim/flit.hpp	/^   int vc;$/;"	m	struct:Flit
vc	src/intersim2/credit.hpp	/^  set<int> vc;$/;"	m	class:Credit
vc	src/intersim2/flit.hpp	/^  int vc;$/;"	m	class:Flit
vc	src/intersim2/routers/event_router.hpp	/^    int  vc;$/;"	m	struct:EventNextVCState::tWaiting
vc_alloc	src/intersim/vc.hpp	/^      idle, routing, vc_alloc, active$/;"	e	enum:VC::eVCState
vc_alloc	src/intersim2/vc.hpp	/^  enum eVCState { state_min = 0, idle = state_min, routing, vc_alloc, active, $/;"	e	enum:VC::eVCState
vc_arb	src/gpuwattch/cacti/highradix.h	/^    MCPAT_Arbiter *cb_arb, *vc_arb, *c_arb;$/;"	m	class:HighRadix
vc_buffer_size	src/gpuwattch/cacti/router.h	/^    double vc_buffer_size; \/* vc size = vc_buffer_size * flit_size *\/$/;"	m	class:MCPAT_Router
vc_cnt	src/intersim/credit.hpp	/^   int  vc_cnt;$/;"	m	class:Credit
vc_count	src/gpuwattch/cacti/router.h	/^    double vc_count;$/;"	m	class:MCPAT_Router
vc_end	src/intersim/outputset.hpp	/^      int vc_end;$/;"	m	struct:OutputSet::sSetElement
vc_end	src/intersim2/outputset.hpp	/^    int vc_end;$/;"	m	struct:OutputSet::sSetElement
vc_start	src/intersim/outputset.hpp	/^      int vc_start;$/;"	m	struct:OutputSet::sSetElement
vc_start	src/intersim2/outputset.hpp	/^    int vc_start;$/;"	m	struct:OutputSet::sSetElement
vdd_periph_global	src/gpuwattch/cacti/cacti_interface.h	/^    double vdd_periph_global;$/;"	m	class:uca_org_t
vec_name1	src/cuda-sim/ptx_ir.h	/^   const std::string &vec_name1() const$/;"	f	class:operand_info
vec_name2	src/cuda-sim/ptx_ir.h	/^   const std::string &vec_name2() const$/;"	f	class:operand_info
vec_name3	src/cuda-sim/ptx_ir.h	/^   const std::string &vec_name3() const$/;"	f	class:operand_info
vec_name4	src/cuda-sim/ptx_ir.h	/^   const std::string &vec_name4() const$/;"	f	class:operand_info
vec_symbol	src/cuda-sim/ptx_ir.h	/^   const symbol* vec_symbol(int idx) const $/;"	f	class:operand_info
vector_operand	src/cuda-sim/ptx.y	/^vector_operand: LEFT_BRACE IDENTIFIER COMMA IDENTIFIER RIGHT_BRACE { add_2vector_operand($2,$4); }$/;"	l
vector_spec	src/cuda-sim/ptx.y	/^vector_spec:  V2_TYPE {  add_option(V2_TYPE); func_header_info(".v2");}$/;"	l
vector_t	src/cuda-sim/ptx_ir.h	/^   reg_t, vector_t, builtin_t, address_t, memory_t, float_op_t, double_op_t, int_t, $/;"	e	enum:operand_type
ver	src/cuda-sim/ptx_sim.h	/^      float    ver() const { assert(m_valid); return m_ptx_version; }$/;"	f	class:ptx_version
ver_bus	src/gpuwattch/cacti/highradix.h	/^    Wire *hor_bus, *ver_bus;$/;"	m	class:HighRadix
ver_htree_wires_over_array	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int ver_htree_wires_over_array;$/;"	m	class:InputParameter
version_header	src/cuda-sim/ptx_parser.cc	/^void version_header(double a) {}  \/\/intentional dummy function$/;"	f
vert_dielectric_constant	src/gpuwattch/cacti/parameter.h	/^    double vert_dielectric_constant;$/;"	m	class:TechnologyParameter::InterconnectType
vertical_nodes	src/gpuwattch/XML_Parse.h	/^	int vertical_nodes;$/;"	m	struct:__anon21
vertical_nodes	src/gpuwattch/basic_components.h	/^    int    horizontal_nodes,vertical_nodes, total_nodes;$/;"	m	class:NoCParam
virtual_address_width	src/gpuwattch/XML_Parse.h	/^	int virtual_address_width;$/;"	m	struct:__anon15
virtual_address_width	src/gpuwattch/XML_Parse.h	/^	int virtual_address_width;$/;"	m	struct:__anon26
virtual_channel_per_port	src/gpuwattch/XML_Parse.h	/^	int virtual_channel_per_port;$/;"	m	struct:__anon21
virtual_channel_per_port	src/gpuwattch/basic_components.h	/^    int    virtual_channel_per_port,input_buffer_entries_per_vc;$/;"	m	class:NoCParam
virtual_memory_page_size	src/gpuwattch/XML_Parse.h	/^	int virtual_memory_page_size;$/;"	m	struct:__anon26
visualizer_print	src/gpgpu-sim/l2cache.cc	/^void memory_partition_unit::visualizer_print( gzFile visualizer_file ) const $/;"	f	class:memory_partition_unit
visualizer_print	src/gpgpu-sim/l2cache.cc	/^void memory_stats_t::visualizer_print( gzFile visualizer_file )$/;"	f	class:memory_stats_t
visualizer_print	src/gpgpu-sim/l2cache.cc	/^void memory_sub_partition::visualizer_print( gzFile visualizer_file )$/;"	f	class:memory_sub_partition
visualizer_print	src/gpgpu-sim/power_stat.cc	/^void power_core_stat_t::visualizer_print( gzFile visualizer_file )$/;"	f	class:power_core_stat_t
visualizer_print	src/gpgpu-sim/power_stat.cc	/^void power_mem_stat_t::visualizer_print( gzFile power_visualizer_file ){$/;"	f	class:power_mem_stat_t
visualizer_print	src/gpgpu-sim/power_stat.cc	/^void power_stat_t::visualizer_print( gzFile visualizer_file )$/;"	f	class:power_stat_t
visualizer_print	src/gpgpu-sim/shader.cc	/^void shader_core_stats::visualizer_print( gzFile visualizer_file )$/;"	f	class:shader_core_stats
visualizer_printstat	src/gpgpu-sim/visualizer.cc	/^void gpgpu_sim::visualizer_printstat()$/;"	f	class:gpgpu_sim
vmad_impl	src/cuda-sim/instructions.cc	/^void vmad_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
vmax_impl	src/cuda-sim/instructions.cc	/^void vmax_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
vmin_impl	src/cuda-sim/instructions.cc	/^void vmin_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
vote_all	src/cuda-sim/ptx_ir.h	/^   enum vote_mode_t { vote_any, vote_all, vote_uni, vote_ballot };$/;"	e	enum:ptx_instruction::vote_mode_t
vote_any	src/cuda-sim/ptx_ir.h	/^   enum vote_mode_t { vote_any, vote_all, vote_uni, vote_ballot };$/;"	e	enum:ptx_instruction::vote_mode_t
vote_ballot	src/cuda-sim/ptx_ir.h	/^   enum vote_mode_t { vote_any, vote_all, vote_uni, vote_ballot };$/;"	e	enum:ptx_instruction::vote_mode_t
vote_impl	src/cuda-sim/instructions.cc	/^void vote_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
vote_mode	src/cuda-sim/ptx_ir.h	/^   enum vote_mode_t vote_mode() const { return m_vote_mode; }$/;"	f	class:ptx_instruction
vote_mode_t	src/cuda-sim/ptx_ir.h	/^   enum vote_mode_t { vote_any, vote_all, vote_uni, vote_ballot };$/;"	g	class:ptx_instruction
vote_uni	src/cuda-sim/ptx_ir.h	/^   enum vote_mode_t { vote_any, vote_all, vote_uni, vote_ballot };$/;"	e	enum:ptx_instruction::vote_mode_t
vpp	src/gpuwattch/cacti/parameter.h	/^  double vpp;$/;"	m	class:TechnologyParameter
vresult	src/ramulator_sim/StatType.h	/^  VResult vresult() const {$/;"	f	class:Stats_Ram::VectorBase
vresult	src/ramulator_sim/StatType.h	/^  VResult vresult() const {return VResult(1, result());}$/;"	f	class:Stats_Ram::ScalarBase
vresult	src/ramulator_sim/StatType.h	/^  virtual VResult vresult() const { return VResult(); };$/;"	f	class:Stats_Ram::StatBase
vset_impl	src/cuda-sim/instructions.cc	/^void vset_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
vshl_impl	src/cuda-sim/instructions.cc	/^void vshl_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
vshr_impl	src/cuda-sim/instructions.cc	/^void vshr_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
vsub_impl	src/cuda-sim/instructions.cc	/^void vsub_impl( const ptx_instruction *pI, ptx_thread_info *thread ) { inst_not_implemented(pI); }$/;"	f
w	src/abstract_hardware_model.h	/^   int                        w;$/;"	m	struct:cudaChannelFormatDesc
w	src/cuda-sim/cuda-math.h	/^      float x, y, z, w;$/;"	m	struct:cuda_math::float4
w	src/cuda-sim/cuda-math.h	/^      int x, y, z, w;$/;"	m	struct:cuda_math::int4
w	src/cuda-sim/cuda-math.h	/^      unsigned int x, y, z, w;$/;"	m	struct:cuda_math::uint4
w	src/gpuwattch/cacti/area.h	/^  double w;$/;"	m	class:Area
w_L1_nand2_n	src/gpuwattch/cacti/decoder.h	/^  double w_L1_nand2_n[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlk
w_L1_nand2_p	src/gpuwattch/cacti/decoder.h	/^  double w_L1_nand2_p[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlk
w_L1_nand3_n	src/gpuwattch/cacti/decoder.h	/^  double w_L1_nand3_n[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlk
w_L1_nand3_p	src/gpuwattch/cacti/decoder.h	/^  double w_L1_nand3_p[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlk
w_L2_n	src/gpuwattch/cacti/decoder.h	/^  double w_L2_n[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlk
w_L2_p	src/gpuwattch/cacti/decoder.h	/^  double w_L2_p[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlk
w_comp_inv_n1	src/gpuwattch/cacti/parameter.h	/^  double w_comp_inv_n1;$/;"	m	class:TechnologyParameter
w_comp_inv_n2	src/gpuwattch/cacti/parameter.h	/^  double w_comp_inv_n2;$/;"	m	class:TechnologyParameter
w_comp_inv_n3	src/gpuwattch/cacti/parameter.h	/^  double w_comp_inv_n3;$/;"	m	class:TechnologyParameter
w_comp_inv_p1	src/gpuwattch/cacti/parameter.h	/^  double w_comp_inv_p1;$/;"	m	class:TechnologyParameter
w_comp_inv_p2	src/gpuwattch/cacti/parameter.h	/^  double w_comp_inv_p2;$/;"	m	class:TechnologyParameter
w_comp_inv_p3	src/gpuwattch/cacti/parameter.h	/^  double w_comp_inv_p3;$/;"	m	class:TechnologyParameter
w_comp_n	src/gpuwattch/cacti/parameter.h	/^  double w_comp_n;$/;"	m	class:TechnologyParameter
w_comp_p	src/gpuwattch/cacti/parameter.h	/^  double w_comp_p;$/;"	m	class:TechnologyParameter
w_dec_n	src/gpuwattch/cacti/decoder.h	/^    double w_dec_n[MAX_NUMBER_GATES_STAGE];$/;"	m	class:Decoder
w_dec_p	src/gpuwattch/cacti/decoder.h	/^    double w_dec_p[MAX_NUMBER_GATES_STAGE];$/;"	m	class:Decoder
w_eval_inv_n	src/gpuwattch/cacti/parameter.h	/^  double w_eval_inv_n;$/;"	m	class:TechnologyParameter
w_eval_inv_p	src/gpuwattch/cacti/parameter.h	/^  double w_eval_inv_p;$/;"	m	class:TechnologyParameter
w_iso	src/gpuwattch/cacti/parameter.h	/^  double w_iso;$/;"	m	class:TechnologyParameter
w_nmos_b_mux	src/gpuwattch/cacti/parameter.h	/^  double w_nmos_b_mux;$/;"	m	class:TechnologyParameter
w_nmos_sa_mux	src/gpuwattch/cacti/parameter.h	/^  double w_nmos_sa_mux;$/;"	m	class:TechnologyParameter
w_pmos_bl_eq	src/gpuwattch/cacti/parameter.h	/^  double w_pmos_bl_eq;$/;"	m	class:TechnologyParameter
w_pmos_bl_precharge	src/gpuwattch/cacti/parameter.h	/^  double w_pmos_bl_precharge;$/;"	m	class:TechnologyParameter
w_poly_contact	src/gpuwattch/cacti/parameter.h	/^  double w_poly_contact;$/;"	m	class:TechnologyParameter
w_scale	src/gpuwattch/cacti/wire.h	/^    double w_scale, s_scale;$/;"	m	class:Wire
w_sense_en	src/gpuwattch/cacti/parameter.h	/^  double w_sense_en;$/;"	m	class:TechnologyParameter
w_sense_n	src/gpuwattch/cacti/parameter.h	/^  double w_sense_n;$/;"	m	class:TechnologyParameter
w_sense_p	src/gpuwattch/cacti/parameter.h	/^  double w_sense_p;$/;"	m	class:TechnologyParameter
wait_list	src/ramulator_sim/Cache.h	/^  std::list<std::pair<long, Request> > wait_list;$/;"	m	class:CacheSystem
waiting	src/gpgpu-sim/shader.cc	/^bool shd_warp_t::waiting() $/;"	f	class:shd_warp_t
waiting_for_fill	src/gpgpu-sim/gpu-cache.cc	/^bool baseline_cache::waiting_for_fill( mem_fetch *mf ){$/;"	f	class:baseline_cache
warming_up	src/intersim/trafficmanager.hpp	/^      warming_up, running, draining, done$/;"	e	enum:TrafficManager::eSimState
warming_up	src/intersim2/trafficmanager.hpp	/^  enum eSimState { warming_up, running, draining, done };$/;"	e	enum:TrafficManager::eSimState
warp	src/gpgpu-sim/shader.cc	/^shd_warp_t& scheduler_unit::warp(int i){$/;"	f	class:scheduler_unit
warp_context_saved	src/cuda-sim/cuda-sim.cc	/^std::map<unsigned, std::map<unsigned, std::map<unsigned,warp_context_t*> > > SimulationInitializer::warp_context_saved;$/;"	m	class:SimulationInitializer	file:
warp_context_saved	src/cuda-sim/cuda-sim.h	/^  static std::map<unsigned, std::map<unsigned, std::map<unsigned, warp_context_t*> > > warp_context_saved;$/;"	m	class:SimulationInitializer
warp_context_t	common/warp_context.cc	/^warp_context_t::warp_context_t(const shd_warp_t& warp, unsigned flat_cta_id, unsigned wid)$/;"	f	class:warp_context_t
warp_context_t	common/warp_context.h	/^class warp_context_t {$/;"	c
warp_divergence	src/cuda-sim/ptx-stats.cc	/^    unsigned long long warp_divergence; \/\/ number of warp divergence occured at this instruction$/;"	m	class:ptx_file_line_stats	file:
warp_exit	src/cuda-sim/cuda-sim.cc	/^void functionalCoreSim::warp_exit( unsigned warp_id )$/;"	f	class:functionalCoreSim
warp_exit	src/gpgpu-sim/shader.cc	/^void barrier_set_t::warp_exit( unsigned warp_id )$/;"	f	class:barrier_set_t
warp_exit	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::warp_exit( unsigned warp_id )$/;"	f	class:shader_core_ctx
warp_id	src/abstract_hardware_model.h	/^    unsigned warp_id() const $/;"	f	class:warp_inst_t
warp_inst_complete	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::warp_inst_complete(const warp_inst_t &inst)$/;"	f	class:shader_core_ctx
warp_inst_t	src/abstract_hardware_model.h	/^    warp_inst_t( const core_config *config ) $/;"	f	class:warp_inst_t
warp_inst_t	src/abstract_hardware_model.h	/^    warp_inst_t() $/;"	f	class:warp_inst_t
warp_inst_t	src/abstract_hardware_model.h	/^class warp_inst_t: public inst_t {$/;"	c
warp_reaches_barrier	src/gpgpu-sim/shader.cc	/^void barrier_set_t::warp_reaches_barrier( unsigned cta_id, unsigned warp_id )$/;"	f	class:barrier_set_t
warp_set_t	src/gpgpu-sim/shader.h	/^typedef std::bitset<WARP_PER_CTA_MAX> warp_set_t;$/;"	t
warp_size	src/abstract_hardware_model.h	/^    unsigned warp_size() const { return m_config->warp_size; }$/;"	f	class:warp_inst_t
warp_size	src/abstract_hardware_model.h	/^    unsigned warp_size;$/;"	m	struct:core_config
warp_size	src/gpuwattch/XML_Parse.h	/^   int warp_size;\/\/ (32) $/;"	m	struct:__anon15
warp_waiting_at_barrier	src/cuda-sim/cuda-sim.h	/^    virtual bool warp_waiting_at_barrier( unsigned warp_id ) const  $/;"	f	class:functionalCoreSim
warp_waiting_at_barrier	src/gpgpu-sim/shader.cc	/^bool barrier_set_t::warp_waiting_at_barrier( unsigned warp_id ) const$/;"	f	class:barrier_set_t
warp_waiting_at_barrier	src/gpgpu-sim/shader.cc	/^bool shader_core_ctx::warp_waiting_at_barrier( unsigned warp_id ) const$/;"	f	class:shader_core_ctx
warp_waiting_at_mem_barrier	src/gpgpu-sim/shader.cc	/^bool shader_core_ctx::warp_waiting_at_mem_barrier( unsigned warp_id ) $/;"	f	class:shader_core_ctx
was_read_sent	src/gpgpu-sim/gpu-cache.cc	/^bool was_read_sent( const std::list<cache_event> &events )$/;"	f
was_write_sent	src/gpgpu-sim/gpu-cache.cc	/^bool was_write_sent( const std::list<cache_event> &events )$/;"	f
was_writeback_sent	src/gpgpu-sim/gpu-cache.cc	/^bool was_writeback_sent( const std::list<cache_event> &events )$/;"	f
watch	src/intersim/event_router.hpp	/^      bool watch; \/\/ debug$/;"	m	struct:EventRouter::tArrivalEvent
watch	src/intersim/event_router.hpp	/^      bool watch; \/\/ debug$/;"	m	struct:EventRouter::tTransportEvent
watch	src/intersim/event_router.hpp	/^      bool watch;$/;"	m	struct:EventNextVCState::tWaiting
watch	src/intersim/flit.hpp	/^   bool watch;$/;"	m	struct:Flit
watch	src/intersim2/flit.hpp	/^  bool watch;$/;"	m	class:Flit
watch	src/intersim2/routers/event_router.hpp	/^    bool watch; \/\/ debug$/;"	m	struct:EventRouter::tArrivalEvent
watch	src/intersim2/routers/event_router.hpp	/^    bool watch; \/\/ debug$/;"	m	struct:EventRouter::tTransportEvent
watch	src/intersim2/routers/event_router.hpp	/^    bool watch;$/;"	m	struct:EventNextVCState::tWaiting
watchpoint_event	src/debug.cc	/^   watchpoint_event()$/;"	f	class:watchpoint_event
watchpoint_event	src/debug.cc	/^   watchpoint_event(const ptx_thread_info *thd, const ptx_instruction *pI) $/;"	f	class:watchpoint_event
watchpoint_event	src/debug.cc	/^class watchpoint_event {$/;"	c	file:
way_sel_drv1	src/gpuwattch/cacti/mat.h	/^    PredecBlkDrv * way_sel_drv1;$/;"	m	class:Mat
way_select	src/gpuwattch/cacti/decoder.h	/^  int   way_select;$/;"	m	class:PredecBlkDrv
wb_addr	src/gpgpu-sim/l2cache.h	/^   unsigned long long int wb_addr;$/;"	m	class:memory_sub_partition
wbb	src/gpuwattch/array.h	/^  ArrayST* wbb;$/;"	m	class:DataCache
wbb_reads	src/gpuwattch/XML_Parse.h	/^	double wbb_reads;$/;"	m	struct:__anon13
wbb_reads	src/gpuwattch/XML_Parse.h	/^	double wbb_reads;$/;"	m	struct:__anon18
wbb_reads	src/gpuwattch/XML_Parse.h	/^	double wbb_reads;$/;"	m	struct:__anon19
wbb_size	src/gpuwattch/basic_components.h	/^    int missb_size, fu_size, prefetchb_size, wbb_size;$/;"	m	class:CacheDynParam
wbb_writes	src/gpuwattch/XML_Parse.h	/^	double wbb_writes;$/;"	m	struct:__anon13
wbb_writes	src/gpuwattch/XML_Parse.h	/^	double wbb_writes;$/;"	m	struct:__anon18
wbb_writes	src/gpuwattch/XML_Parse.h	/^	double wbb_writes;$/;"	m	struct:__anon19
whichspace	src/cuda-sim/cuda-sim.cc	/^memory_space_t whichspace( addr_t addr )$/;"	f
wid_from_hw_tid	src/gpgpu-sim/shader.h	/^inline unsigned wid_from_hw_tid(unsigned tid, unsigned warp_size){return tid\/warp_size;};$/;"	f
width	common/cuda_array.h	/^   int width;$/;"	m	struct:cudaArray
width	libcuda/cuda_runtime_api.cc	/^	int width;$/;"	m	struct:cudaArray	file:
width	src/gpuwattch/cacti/cacti_interface.h	/^  double width;$/;"	m	class:mem_array
width_n	src/gpuwattch/cacti/decoder.h	/^  double width_n[MAX_NUMBER_GATES_STAGE];$/;"	m	class:Driver
width_nand2_path_n	src/gpuwattch/cacti/decoder.h	/^  double width_nand2_path_n[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlkDrv
width_nand2_path_p	src/gpuwattch/cacti/decoder.h	/^  double width_nand2_path_p[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlkDrv
width_nand3_path_n	src/gpuwattch/cacti/decoder.h	/^  double width_nand3_path_n[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlkDrv
width_nand3_path_p	src/gpuwattch/cacti/decoder.h	/^  double width_nand3_path_p[MAX_NUMBER_GATES_STAGE];$/;"	m	class:PredecBlkDrv
width_p	src/gpuwattch/cacti/decoder.h	/^  double width_p[MAX_NUMBER_GATES_STAGE];$/;"	m	class:Driver
width_scaling	src/gpuwattch/interconnect.h	/^    double width_scaling, space_scaling;$/;"	m	class:interconnect
width_write_driver_or_write_mux	src/gpuwattch/cacti/mat.cc	/^double Mat::width_write_driver_or_write_mux()$/;"	f	class:Mat
win_entries	src/gpuwattch/logic.h	/^	int win_entries;$/;"	m	class:selection_logic
windowed_miss_rate	src/gpgpu-sim/gpu-cache.cc	/^float tag_array::windowed_miss_rate( ) const$/;"	f	class:tag_array
windowed_reg_accesses	src/gpuwattch/XML_Parse.h	/^	double windowed_reg_accesses;$/;"	m	struct:__anon15
windowed_reg_transports	src/gpuwattch/XML_Parse.h	/^	double windowed_reg_transports;$/;"	m	struct:__anon15
wire	src/intersim2/power/power_module.hpp	/^struct wire{$/;"	s
wireOptimize	src/intersim2/power/power_module.cpp	/^wire const & Power_Module::wireOptimize(double L){$/;"	f	class:Power_Module
wire_bw	src/gpuwattch/cacti/htree2.h	/^    double wire_bw;$/;"	m	class:Htree2
wire_bw	src/gpuwattch/interconnect.h	/^    double wire_bw;$/;"	m	class:interconnect
wire_cap	src/gpuwattch/cacti/wire.cc	/^double Wire::wire_cap (double len \/* in m *\/, bool call_from_outside)$/;"	f	class:Wire
wire_capacitance	src/gpuwattch/cacti/technology.cc	/^double wire_capacitance(double wire_width, double wire_thickness, double wire_spacing,$/;"	f
wire_capacitance	src/gpuwattch/technology_xeon_core.cc	/^double wire_capacitance(double wire_width, double wire_thickness, double wire_spacing,$/;"	f
wire_horizontal	src/gpuwattch/cacti/nuca.h	/^         *wire_horizontal[WIRE_TYPES];$/;"	m	class:Nuca
wire_inside_mat	src/gpuwattch/cacti/parameter.h	/^  InterconnectType wire_inside_mat;$/;"	m	class:TechnologyParameter
wire_is_mat_type	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int wire_is_mat_type;  \/\/ wire_inside_mat_type$/;"	m	class:InputParameter
wire_length	src/gpuwattch/cacti/wire.h	/^    double wire_length;$/;"	m	class:Wire
wire_length	src/intersim2/power/power_module.hpp	/^  double wire_length;$/;"	m	class:Power_Module
wire_local	src/gpuwattch/cacti/parameter.h	/^  InterconnectType wire_local;$/;"	m	class:TechnologyParameter
wire_map	src/intersim2/power/power_module.hpp	/^  map<double, wire> wire_map;$/;"	m	class:Power_Module
wire_model	src/gpuwattch/cacti/wire.cc	/^powerDef Wire::wire_model (double space, double size, double *delay)$/;"	f	class:Wire
wire_os_mat_type	src/gpuwattch/cacti/cacti_interface.h	/^    unsigned int wire_os_mat_type; \/\/ wire_outside_mat_type$/;"	m	class:InputParameter
wire_outside_mat	src/gpuwattch/cacti/parameter.h	/^  InterconnectType wire_outside_mat;$/;"	m	class:TechnologyParameter
wire_pda	src/gpuwattch/cacti/nuca.h	/^    Component wire_pda;$/;"	m	class:nuca_org_t
wire_placement	src/gpuwattch/cacti/router.h	/^    enum Wire_placement wire_placement;$/;"	m	class:MCPAT_Router	typeref:enum:MCPAT_Router::Wire_placement
wire_placement	src/gpuwattch/cacti/wire.h	/^    enum Wire_placement wire_placement;$/;"	m	class:Wire	typeref:enum:Wire::Wire_placement
wire_res	src/gpuwattch/cacti/wire.cc	/^Wire::wire_res (double len \/*(in m)*\/)$/;"	f	class:Wire
wire_resistance	src/gpuwattch/cacti/technology.cc	/^double wire_resistance(double resistivity, double wire_width, double wire_thickness,$/;"	f
wire_resistance	src/gpuwattch/technology_xeon_core.cc	/^double wire_resistance(double resistivity, double wire_width, double wire_thickness,$/;"	f
wire_spacing	src/gpuwattch/cacti/wire.h	/^    double wire_spacing;$/;"	m	class:Wire
wire_spacing_init	src/gpuwattch/cacti/wire.cc	/^    double Wire::wire_spacing_init;$/;"	m	class:Wire	file:
wire_spacing_init	src/gpuwattch/cacti/wire.h	/^    static double wire_spacing_init;$/;"	m	class:Wire
wire_tot	src/gpuwattch/cacti/highradix.h	/^    Component wire_tot, buff_tot, crossbar_tot, arb_tot;$/;"	m	class:HighRadix
wire_vertical	src/gpuwattch/cacti/nuca.h	/^    Wire *wire_vertical[WIRE_TYPES],$/;"	m	class:Nuca
wire_width	src/gpuwattch/cacti/wire.h	/^    double wire_width;$/;"	m	class:Wire
wire_width_init	src/gpuwattch/cacti/wire.cc	/^    double Wire::wire_width_init;$/;"	m	class:Wire	file:
wire_width_init	src/gpuwattch/cacti/wire.h	/^    static double wire_width_init;$/;"	m	class:Wire
withPHY	src/gpuwattch/XML_Parse.h	/^	bool withPHY;$/;"	m	struct:__anon23
withPHY	src/gpuwattch/XML_Parse.h	/^	bool withPHY;$/;"	m	struct:__anon25
withPHY	src/gpuwattch/basic_components.h	/^    bool   LVDS, withPHY;$/;"	m	class:MCParam
withPHY	src/gpuwattch/basic_components.h	/^    bool   withPHY;$/;"	m	class:PCIeParam
with_clock_grid	src/gpuwattch/cacti/cacti_interface.h	/^  bool with_clock_grid;$/;"	m	class:InputParameter
wr_coeff	src/gpuwattch/basic_components.h	/^    double wr_coeff;$/;"	m	class:DRAMParam
wr_hit_global_we_local_wb	src/gpgpu-sim/gpu-cache.cc	/^enum cache_request_status data_cache::wr_hit_global_we_local_wb(new_addr_type addr, unsigned cache_index, mem_fetch *mf, unsigned time, std::list<cache_event> &events, enum cache_request_status status ){$/;"	f	class:data_cache
wr_hit_wb	src/gpgpu-sim/gpu-cache.cc	/^cache_request_status data_cache::wr_hit_wb(new_addr_type addr, unsigned cache_index, mem_fetch *mf, unsigned time, std::list<cache_event> &events, enum cache_request_status status ){$/;"	f	class:data_cache
wr_hit_we	src/gpgpu-sim/gpu-cache.cc	/^cache_request_status data_cache::wr_hit_we(new_addr_type addr, unsigned cache_index, mem_fetch *mf, unsigned time, std::list<cache_event> &events, enum cache_request_status status ){$/;"	f	class:data_cache
wr_hit_wt	src/gpgpu-sim/gpu-cache.cc	/^cache_request_status data_cache::wr_hit_wt(new_addr_type addr, unsigned cache_index, mem_fetch *mf, unsigned time, std::list<cache_event> &events, enum cache_request_status status ){$/;"	f	class:data_cache
wr_miss_no_wa	src/gpgpu-sim/gpu-cache.cc	/^data_cache::wr_miss_no_wa( new_addr_type addr,$/;"	f	class:data_cache
wr_miss_wa	src/gpgpu-sim/gpu-cache.cc	/^data_cache::wr_miss_wa( new_addr_type addr,$/;"	f	class:data_cache
wrap	src/cuda-sim/instructions.cc	/^unsigned wrap( unsigned x, unsigned y, unsigned mx, unsigned my, size_t elem_size )$/;"	f
write	launcher/communicate.h	/^  void write(const void *data, size_t num_bytes) { send(data, num_bytes); }$/;"	f	class:Communicate
write	launcher/communicate.h	/^Communicate::write(const SEND_TYPE& msg)$/;"	f	class:Communicate
write	src/cuda-sim/memory.cc	/^template<unsigned BSIZE> void memory_space_impl<BSIZE>::write( mem_addr_t addr, size_t length, const void *data, class ptx_thread_info *thd, const ptx_instruction *pI)$/;"	f	class:memory_space_impl
write	src/cuda-sim/memory.h	/^   void write( unsigned offset, size_t length, const unsigned char *data )$/;"	f	class:mem_storage
write	src/intersim2/power/buffer_monitor.cpp	/^void BufferMonitor::write( int input, Flit const * f ) {$/;"	f	class:BufferMonitor
writeAc	src/gpuwattch/basic_components.h	/^    statsComponents writeAc;$/;"	m	class:statsDef
writeBuffer	src/gpuwattch/memoryctrl.h	/^	ArrayST  * writeBuffer;$/;"	m	class:MCFrontEnd
writeComplete	src/ramulator_sim/gpu_wrapper.cpp	/^void GpuWrapper::writeComplete(Request& req) {$/;"	f	class:GpuWrapper
writeOp	src/gpuwattch/cacti/cacti_interface.h	/^    powerComponents writeOp;$/;"	m	class:powerDef
writeToFile	src/gpuwattch/xmlParser.cc	/^XMLError XMLNode::writeToFile(XMLCSTR filename, const char *encoding, char nFormat) const$/;"	f	class:XMLNode
write_accesses	src/gpuwattch/XML_Parse.h	/^	double write_accesses;$/;"	m	struct:__anon12
write_accesses	src/gpuwattch/XML_Parse.h	/^	double write_accesses;$/;"	m	struct:__anon13
write_accesses	src/gpuwattch/XML_Parse.h	/^	double write_accesses;$/;"	m	struct:__anon14
write_accesses	src/gpuwattch/XML_Parse.h	/^	double write_accesses;$/;"	m	struct:__anon16
write_accesses	src/gpuwattch/XML_Parse.h	/^	double write_accesses;$/;"	m	struct:__anon17
write_accesses	src/gpuwattch/XML_Parse.h	/^	double write_accesses;$/;"	m	struct:__anon18
write_accesses	src/gpuwattch/XML_Parse.h	/^	double write_accesses;$/;"	m	struct:__anon19
write_allocate_policy_t	src/gpgpu-sim/gpu-cache.h	/^enum write_allocate_policy_t {$/;"	g
write_backs	src/gpuwattch/XML_Parse.h	/^	double write_backs;$/;"	m	struct:__anon13
write_backs	src/gpuwattch/XML_Parse.h	/^	double write_backs;$/;"	m	struct:__anon18
write_backs	src/gpuwattch/XML_Parse.h	/^	double write_backs;$/;"	m	struct:__anon19
write_cb_func	src/ramulator_sim/gpu_wrapper.h	/^	std::function<void(Request&)> write_cb_func;$/;"	m	class:GpuWrapper
write_energy	src/gpuwattch/cacti/cacti_interface.h	/^  double activate_energy, read_energy, write_energy, precharge_energy,$/;"	m	class:mem_array
write_energy	src/gpuwattch/cacti/cacti_interface.h	/^  double write_energy;$/;"	m	struct:__anon5
write_energy	src/gpuwattch/cacti/uca.h	/^    double write_energy;$/;"	m	class:UCA
write_hi	src/ramulator_sim/SpeedyController.h	/^    double write_hi = 0.875;$/;"	m	class:SpeedyController
write_hits	src/gpuwattch/XML_Parse.h	/^	double write_hits;$/;"	m	struct:__anon12
write_hits	src/gpuwattch/XML_Parse.h	/^	double write_hits;$/;"	m	struct:__anon13
write_hits	src/gpuwattch/XML_Parse.h	/^	double write_hits;$/;"	m	struct:__anon14
write_hits	src/gpuwattch/XML_Parse.h	/^	double write_hits;$/;"	m	struct:__anon18
write_hits	src/gpuwattch/XML_Parse.h	/^	double write_hits;$/;"	m	struct:__anon19
write_low	src/ramulator_sim/SpeedyController.h	/^    double write_low = 0.5;$/;"	m	class:SpeedyController
write_misses	src/gpuwattch/XML_Parse.h	/^	double write_misses;$/;"	m	struct:__anon12
write_misses	src/gpuwattch/XML_Parse.h	/^	double write_misses;$/;"	m	struct:__anon13
write_misses	src/gpuwattch/XML_Parse.h	/^	double write_misses;$/;"	m	struct:__anon14
write_misses	src/gpuwattch/XML_Parse.h	/^	double write_misses;$/;"	m	struct:__anon16
write_misses	src/gpuwattch/XML_Parse.h	/^	double write_misses;$/;"	m	struct:__anon17
write_misses	src/gpuwattch/XML_Parse.h	/^	double write_misses;$/;"	m	struct:__anon18
write_misses	src/gpuwattch/XML_Parse.h	/^	double write_misses;$/;"	m	struct:__anon19
write_mode	src/ramulator_sim/Controller.h	/^    bool write_mode = false;  \/\/ whether write requests should be prioritized over reads$/;"	m	class:Controller
write_mode	src/ramulator_sim/SpeedyController.h	/^    bool write_mode = false;  \/\/ whether write requests should be prioritized over reads$/;"	m	class:SpeedyController
write_out_buf	src/intersim/interconnect_interface.cpp	/^void write_out_buf(int output, Flit *flit) {$/;"	f
write_pipe	launcher/communicate.h	/^  int write_pipe;$/;"	m	class:Communicate
write_policy_t	src/gpgpu-sim/gpu-cache.h	/^enum write_policy_t {$/;"	g
write_req_queue_length_avg	src/ramulator_sim/Controller.h	/^    ScalarStat write_req_queue_length_avg;$/;"	m	class:Controller
write_req_queue_length_sum	src/ramulator_sim/Controller.h	/^    ScalarStat write_req_queue_length_sum;$/;"	m	class:Controller
write_row_conflicts	src/ramulator_sim/Controller.h	/^    VectorStat write_row_conflicts;$/;"	m	class:Controller
write_row_hits	src/ramulator_sim/Controller.h	/^    VectorStat write_row_hits;$/;"	m	class:Controller
write_row_misses	src/ramulator_sim/Controller.h	/^    VectorStat write_row_misses;$/;"	m	class:Controller
write_transaction_bytes	src/ramulator_sim/Controller.h	/^    ScalarStat write_transaction_bytes;$/;"	m	class:Controller
writeback	src/gpgpu-sim/shader.cc	/^bool opndcoll_rfu_t::writeback( const warp_inst_t &inst )$/;"	f	class:opndcoll_rfu_t
writeback	src/gpgpu-sim/shader.cc	/^void ldst_unit::writeback()$/;"	f	class:ldst_unit
writeback	src/gpgpu-sim/shader.cc	/^void shader_core_ctx::writeback()$/;"	f	class:shader_core_ctx
writeq	src/ramulator_sim/Controller.h	/^    Queue writeq;  \/\/ queue for write requests$/;"	m	class:Controller
writeq	src/ramulator_sim/SpeedyController.h	/^    request_queue writeq;  \/\/ queue for write requests$/;"	m	class:SpeedyController
writes	src/gpuwattch/basic_components.h	/^    double executionTime, reads, writes;$/;"	m	class:MCParam
wrp	src/ramulator_sim/Refresh.cpp	/^void Refresh<DSARP>::wrp() {$/;"	f	class:Refresh
wrp_size	src/gpgpu-sim/gpu-sim.cc	/^int gpgpu_sim::wrp_size() const$/;"	f	class:gpgpu_sim
wrq_comp	src/ramulator_sim/Refresh.cpp	/^bool wrq_comp (wrq_idx l, wrq_idx r)$/;"	f
wrq_idx	src/ramulator_sim/Refresh.cpp	/^typedef pair<int, int> wrq_idx;$/;"	t	file:
wt	src/gpuwattch/cacti/cacti_interface.h	/^    enum Wire_type wt;$/;"	m	class:InputParameter	typeref:enum:InputParameter::Wire_type
wt	src/gpuwattch/cacti/cacti_interface.h	/^  enum Wire_type wt;$/;"	m	class:mem_array	typeref:enum:mem_array::Wire_type
wt	src/gpuwattch/cacti/htree2.h	/^    enum Wire_type wt;$/;"	m	class:Htree2	typeref:enum:Htree2::Wire_type
wt	src/gpuwattch/cacti/router.h	/^    double NTtr, PTtr, wt, ht, I, O, NTi, PTi, NTid, PTid, NTod, PTod, TriS1, TriS2;$/;"	m	class:MCPAT_Router
wt	src/gpuwattch/cacti/wire.h	/^    enum Wire_type wt;$/;"	m	class:Wire	typeref:enum:Wire::Wire_type
wt	src/gpuwattch/interconnect.h	/^    enum Wire_type wt;$/;"	m	class:interconnect	typeref:enum:interconnect::Wire_type
wt_max	src/gpuwattch/cacti/nuca.h	/^    int wt_min, wt_max;$/;"	m	class:Nuca
wt_min	src/gpuwattch/cacti/nuca.h	/^    int wt_min, wt_max;$/;"	m	class:Nuca
wtype	src/gpuwattch/cacti/router.h	/^    enum Wire_type wtype;$/;"	m	class:MCPAT_Router	typeref:enum:MCPAT_Router::Wire_type
x	common/kernel_config.h	/^   unsigned int x, y, z;$/;"	m	struct:dim3
x	common/kernel_info_t.h	/^   unsigned int x, y, z;$/;"	m	struct:dim3
x	src/abstract_hardware_model.h	/^   int                        x;$/;"	m	struct:cudaChannelFormatDesc
x	src/cuda-sim/cuda-math.h	/^      float x, y, z, w;$/;"	m	struct:cuda_math::float4
x	src/cuda-sim/cuda-math.h	/^      float x, y;$/;"	m	struct:cuda_math::float2
x	src/cuda-sim/cuda-math.h	/^      int x, y, z, w;$/;"	m	struct:cuda_math::int4
x	src/cuda-sim/cuda-math.h	/^      unsigned int x, y, z, w;$/;"	m	struct:cuda_math::uint4
x86	src/gpuwattch/XML_Parse.h	/^	bool x86;$/;"	m	struct:__anon15
x86	src/gpuwattch/basic_components.h	/^	bool x86;$/;"	m	class:CoreDynParam
x86	src/gpuwattch/logic.h	/^	bool x86;$/;"	m	class:inst_decoder
xbar0	src/gpuwattch/XML_Parse.h	/^	xbar0_systemNoC xbar0;$/;"	m	struct:__anon21
xbar0_systemNoC	src/gpuwattch/XML_Parse.h	/^} xbar0_systemNoC;$/;"	t	typeref:struct:__anon20
xbar_rfu	src/gpuwattch/core.h	/^	Crossbar * xbar_rfu;$/;"	m	class:RegFU
xbar_shared	src/gpuwattch/core.h	/^   Crossbar *xbar_shared;$/;"	m	class:LoadStoreU
xfopen	src/gpuwattch/xmlParser.cc	/^        static inline FILE *xfopen(XMLCSTR filename,XMLCSTR mode) { return _wfopen(filename,mode); }$/;"	f	file:
xfopen	src/gpuwattch/xmlParser.cc	/^        static inline FILE *xfopen(XMLCSTR filename,XMLCSTR mode) { return fopen(filename,mode); }$/;"	f	file:
xfopen	src/gpuwattch/xmlParser.cc	/^        static inline FILE *xfopen(XMLCSTR filename,XMLCSTR mode)$/;"	f	file:
xml_filename	src/gpuwattch/gpgpu_sim_wrapper.h	/^    char *xml_filename;$/;"	m	class:gpgpu_sim_wrapper
xmltoa	src/gpuwattch/xmlParser.cc	/^XMLCSTR xmltoa(XMLCSTR t,XMLCSTR v){ if (t)       return  t; return v; }$/;"	f
xmltob	src/gpuwattch/xmlParser.cc	/^           char    xmltob(XMLCSTR t,int     v){ if (t) return (char)wcstol(t,NULL,10); return v; }$/;"	f
xmltob	src/gpuwattch/xmlParser.cc	/^           char    xmltob(XMLCSTR t,int     v){ if (t) return (char)wstol(t,NULL,10); return v; }$/;"	f
xmltob	src/gpuwattch/xmlParser.cc	/^        char    xmltob(XMLCSTR t,int     v){ if (t&&(*t)) return (char)_wtoi(t); return v; }$/;"	f
xmltob	src/gpuwattch/xmlParser.cc	/^    char    xmltob(XMLCSTR t,char    v){ if (t&&(*t)) return (char)atoi(t); return v; }$/;"	f
xmltoc	src/gpuwattch/xmlParser.cc	/^XMLCHAR xmltoc(XMLCSTR t,XMLCHAR v){ if (t&&(*t)) return *t; return v; }$/;"	f
xmltof	src/gpuwattch/xmlParser.cc	/^		double  xmltof(XMLCSTR t,double  v){ if (t&&(*t)) wscanf(t, "%f", &v); \/*v=_wtof(t);*\/ return v; }$/;"	f
xmltof	src/gpuwattch/xmlParser.cc	/^        double  xmltof(XMLCSTR t,double  v){ if (t&&(*t)) wscanf(t, "%f", &v); \/*v=_wtof(t);*\/ return v; }$/;"	f
xmltof	src/gpuwattch/xmlParser.cc	/^    double  xmltof(XMLCSTR t,double  v){ if (t&&(*t)) return atof(t); return v; }$/;"	f
xmltoi	src/gpuwattch/xmlParser.cc	/^           int     xmltoi(XMLCSTR t,int     v){ if (t) return (int)wcstol(t,NULL,10); return v; }$/;"	f
xmltoi	src/gpuwattch/xmlParser.cc	/^           int     xmltoi(XMLCSTR t,int     v){ if (t) return (int)wstol(t,NULL,10); return v; }$/;"	f
xmltoi	src/gpuwattch/xmlParser.cc	/^        int     xmltoi(XMLCSTR t,int     v){ if (t&&(*t)) return _wtoi(t); return v; }$/;"	f
xmltoi	src/gpuwattch/xmlParser.cc	/^    int     xmltoi(XMLCSTR t,int     v){ if (t&&(*t)) return atoi(t); return v; }$/;"	f
xmltol	src/gpuwattch/xmlParser.cc	/^           long    xmltol(XMLCSTR t,long    v){ if (t) return wcstol(t,NULL,10); return v; }$/;"	f
xmltol	src/gpuwattch/xmlParser.cc	/^           long    xmltol(XMLCSTR t,long    v){ if (t) return wstol(t,NULL,10); return v; }$/;"	f
xmltol	src/gpuwattch/xmlParser.cc	/^        long    xmltol(XMLCSTR t,long    v){ if (t&&(*t)) return _wtol(t); return v; }$/;"	f
xmltol	src/gpuwattch/xmlParser.cc	/^    long    xmltol(XMLCSTR t,long    v){ if (t&&(*t)) return atol(t); return v; }$/;"	f
xor_impl	src/cuda-sim/instructions.cc	/^void xor_impl( const ptx_instruction *pI, ptx_thread_info *thread ) $/;"	f
xor_lower_upper_bit	src/gpgpu-sim/addrdec.cc	/^unsigned linear_to_raw_address_translation::xor_lower_upper_bit(new_addr_type val) const$/;"	f	class:linear_to_raw_address_translation
xor_mapping_enabled	src/gpgpu-sim/addrdec.h	/^   bool xor_mapping_enabled;$/;"	m	class:linear_to_raw_address_translation
xor_upper_bit	src/gpgpu-sim/addrdec.cc	/^unsigned linear_to_raw_address_translation::xor_upper_bit(unsigned base, new_addr_type val) const$/;"	f	class:linear_to_raw_address_translation
xor_upper_bit_start	src/gpgpu-sim/addrdec.h	/^   unsigned xor_upper_bit_start;$/;"	m	class:linear_to_raw_address_translation
xstrcpy	src/gpuwattch/xmlParser.cc	/^        static inline XMLSTR xstrcpy(XMLSTR c1, XMLCSTR c2) { return (XMLSTR)strcpy(c1,c2); }$/;"	f	file:
xstrcpy	src/gpuwattch/xmlParser.cc	/^        static inline XMLSTR xstrcpy(XMLSTR c1, XMLCSTR c2) { return (XMLSTR)wcscpy(c1,c2); }$/;"	f	file:
xstricmp	src/gpuwattch/xmlParser.cc	/^            static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return _stricmp(c1,c2); }$/;"	f	file:
xstricmp	src/gpuwattch/xmlParser.cc	/^            static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return stricmp(c1,c2); }$/;"	f	file:
xstricmp	src/gpuwattch/xmlParser.cc	/^           static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return wcscasecmp(c1,c2); }$/;"	f	file:
xstricmp	src/gpuwattch/xmlParser.cc	/^           static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return wscasecmp(c1,c2); }$/;"	f	file:
xstricmp	src/gpuwattch/xmlParser.cc	/^        static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return _wcsicmp(c1,c2); }$/;"	f	file:
xstricmp	src/gpuwattch/xmlParser.cc	/^        static inline int xstricmp(XMLCSTR c1, XMLCSTR c2) { return strcasecmp(c1,c2); }$/;"	f	file:
xstrlen	src/gpuwattch/xmlParser.cc	/^        int xstrlen(XMLCSTR c)   { return wcslen(c); }$/;"	f
xstrlen	src/gpuwattch/xmlParser.cc	/^        static inline int xstrlen(XMLCSTR c)   { return (int)strlen(c); }$/;"	f	file:
xstrlen	src/gpuwattch/xmlParser.cc	/^        static inline int xstrlen(XMLCSTR c)   { return (int)wcslen(c); }$/;"	f	file:
xstrlen	src/gpuwattch/xmlParser.cc	/^        static inline int xstrlen(XMLCSTR c)   { return strlen(c); }$/;"	f	file:
xstrncmp	src/gpuwattch/xmlParser.cc	/^           static inline int xstrncmp(XMLCSTR c1, XMLCSTR c2, int l) { return wcsncmp(c1,c2,l);}$/;"	f	file:
xstrncmp	src/gpuwattch/xmlParser.cc	/^           static inline int xstrncmp(XMLCSTR c1, XMLCSTR c2, int l) { return wsncmp(c1,c2,l);}$/;"	f	file:
xstrncmp	src/gpuwattch/xmlParser.cc	/^        static inline int xstrncmp(XMLCSTR c1, XMLCSTR c2, int l) { return strncmp(c1,c2,l);}$/;"	f	file:
xstrncmp	src/gpuwattch/xmlParser.cc	/^        static inline int xstrncmp(XMLCSTR c1, XMLCSTR c2, int l) { return wcsncmp(c1,c2,l);}$/;"	f	file:
xstrnicmp	src/gpuwattch/xmlParser.cc	/^            static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return _strnicmp(c1,c2,l);}$/;"	f	file:
xstrnicmp	src/gpuwattch/xmlParser.cc	/^            static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return strnicmp(c1,c2,l);}$/;"	f	file:
xstrnicmp	src/gpuwattch/xmlParser.cc	/^           static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return wcsncasecmp(c1,c2,l);}$/;"	f	file:
xstrnicmp	src/gpuwattch/xmlParser.cc	/^           static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return wsncasecmp(c1,c2,l);}$/;"	f	file:
xstrnicmp	src/gpuwattch/xmlParser.cc	/^        static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return _wcsnicmp(c1,c2,l);}$/;"	f	file:
xstrnicmp	src/gpuwattch/xmlParser.cc	/^        static inline int xstrnicmp(XMLCSTR c1, XMLCSTR c2, int l) { return strncasecmp(c1,c2,l);}$/;"	f	file:
xstrstr	src/gpuwattch/xmlParser.cc	/^        static inline XMLSTR xstrstr(XMLCSTR c1, XMLCSTR c2) { return (XMLSTR)strstr(c1,c2); }$/;"	f	file:
xstrstr	src/gpuwattch/xmlParser.cc	/^        static inline XMLSTR xstrstr(XMLCSTR c1, XMLCSTR c2) { return (XMLSTR)wcsstr(c1,c2); }$/;"	f	file:
xy_yx_cmesh	src/intersim2/networks/cmesh.cpp	/^void xy_yx_cmesh( const Router *r, const Flit *f, int in_channel, $/;"	f
xy_yx_mesh	src/intersim2/routefunc.cpp	/^void xy_yx_mesh( const Router *r, const Flit *f, $/;"	f
xy_yx_no_express_cmesh	src/intersim2/networks/cmesh.cpp	/^void xy_yx_no_express_cmesh( const Router *r, const Flit *f, int in_channel, $/;"	f
xyyx_flatfly	src/intersim2/networks/flatfly_onchip.cpp	/^void xyyx_flatfly( const Router *r, const Flit *f, int in_channel, $/;"	f
y	common/kernel_config.h	/^   unsigned int x, y, z;$/;"	m	struct:dim3
y	common/kernel_info_t.h	/^   unsigned int x, y, z;$/;"	m	struct:dim3
y	src/abstract_hardware_model.h	/^   int                        y;$/;"	m	struct:cudaChannelFormatDesc
y	src/cuda-sim/cuda-math.h	/^      float x, y, z, w;$/;"	m	struct:cuda_math::float4
y	src/cuda-sim/cuda-math.h	/^      float x, y;$/;"	m	struct:cuda_math::float2
y	src/cuda-sim/cuda-math.h	/^      int x, y, z, w;$/;"	m	struct:cuda_math::int4
y	src/cuda-sim/cuda-math.h	/^      unsigned int x, y, z, w;$/;"	m	struct:cuda_math::uint4
yy_accept	build/src/cuda-sim/lex.ptx_.c	/^static yyconst flex_int16_t yy_accept[1289] =$/;"	v	file:
yy_accept	build/src/cuda-sim/lex.ptxinfo_.c	/^static yyconst flex_int16_t yy_accept[137] =$/;"	v	file:
yy_accept	src/intersim2/lex.yy.c	/^static yyconst flex_int16_t yy_accept[36] =$/;"	v	file:
yy_at_bol	build/src/cuda-sim/lex.ptx_.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_at_bol	build/src/cuda-sim/lex.ptxinfo_.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_at_bol	src/intersim2/lex.yy.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	build/src/cuda-sim/lex.ptx_.c	/^static yyconst flex_int16_t yy_base[1334] =$/;"	v	file:
yy_base	build/src/cuda-sim/lex.ptxinfo_.c	/^static yyconst flex_int16_t yy_base[143] =$/;"	v	file:
yy_base	src/intersim2/lex.yy.c	/^static yyconst flex_int16_t yy_base[42] =$/;"	v	file:
yy_bs_column	build/src/cuda-sim/lex.ptx_.c	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_column	build/src/cuda-sim/lex.ptxinfo_.c	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_column	src/intersim2/lex.yy.c	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	build/src/cuda-sim/lex.ptx_.c	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	build/src/cuda-sim/lex.ptxinfo_.c	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	src/intersim2/lex.yy.c	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	build/src/cuda-sim/lex.ptx_.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	build/src/cuda-sim/lex.ptxinfo_.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	src/intersim2/lex.yy.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	build/src/cuda-sim/lex.ptx_.c	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	build/src/cuda-sim/lex.ptxinfo_.c	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	src/intersim2/lex.yy.c	/^	yy_size_t yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_stack	build/src/cuda-sim/lex.ptx_.c	/^static YY_BUFFER_STATE * yy_buffer_stack = 0; \/**< Stack as an array. *\/$/;"	v	file:
yy_buffer_stack	build/src/cuda-sim/lex.ptxinfo_.c	/^static YY_BUFFER_STATE * yy_buffer_stack = 0; \/**< Stack as an array. *\/$/;"	v	file:
yy_buffer_stack	src/intersim2/lex.yy.c	/^static YY_BUFFER_STATE * yy_buffer_stack = 0; \/**< Stack as an array. *\/$/;"	v	file:
yy_buffer_stack_max	build/src/cuda-sim/lex.ptx_.c	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	file:
yy_buffer_stack_max	build/src/cuda-sim/lex.ptxinfo_.c	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	file:
yy_buffer_stack_max	src/intersim2/lex.yy.c	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	file:
yy_buffer_stack_top	build/src/cuda-sim/lex.ptx_.c	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	file:
yy_buffer_stack_top	build/src/cuda-sim/lex.ptxinfo_.c	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	file:
yy_buffer_stack_top	src/intersim2/lex.yy.c	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	file:
yy_buffer_state	build/src/cuda-sim/lex.ptx_.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_state	build/src/cuda-sim/lex.ptxinfo_.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_state	src/intersim2/lex.yy.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	build/src/cuda-sim/lex.ptx_.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_status	build/src/cuda-sim/lex.ptxinfo_.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_status	src/intersim2/lex.yy.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_c_buf_p	build/src/cuda-sim/lex.ptx_.c	/^static char *yy_c_buf_p = (char *) 0;$/;"	v	file:
yy_c_buf_p	build/src/cuda-sim/lex.ptxinfo_.c	/^static char *yy_c_buf_p = (char *) 0;$/;"	v	file:
yy_c_buf_p	src/intersim2/lex.yy.c	/^static char *yy_c_buf_p = (char *) 0;$/;"	v	file:
yy_ch_buf	build/src/cuda-sim/lex.ptx_.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_ch_buf	build/src/cuda-sim/lex.ptxinfo_.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_ch_buf	src/intersim2/lex.yy.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	build/src/cuda-sim/lex.ptx_.c	/^static yyconst flex_int16_t yy_chk[1733] =$/;"	v	file:
yy_chk	build/src/cuda-sim/lex.ptxinfo_.c	/^static yyconst flex_int16_t yy_chk[219] =$/;"	v	file:
yy_chk	src/intersim2/lex.yy.c	/^static yyconst flex_int16_t yy_chk[86] =$/;"	v	file:
yy_create_buffer	build/src/cuda-sim/lex.ptx_.c	9;"	d	file:
yy_create_buffer	build/src/cuda-sim/lex.ptxinfo_.c	9;"	d	file:
yy_create_buffer	src/intersim2/lex.yy.c	/^    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )$/;"	f
yy_def	build/src/cuda-sim/lex.ptx_.c	/^static yyconst flex_int16_t yy_def[1334] =$/;"	v	file:
yy_def	build/src/cuda-sim/lex.ptxinfo_.c	/^static yyconst flex_int16_t yy_def[143] =$/;"	v	file:
yy_def	src/intersim2/lex.yy.c	/^static yyconst flex_int16_t yy_def[42] =$/;"	v	file:
yy_delete_buffer	build/src/cuda-sim/lex.ptx_.c	10;"	d	file:
yy_delete_buffer	build/src/cuda-sim/lex.ptxinfo_.c	10;"	d	file:
yy_delete_buffer	src/intersim2/lex.yy.c	/^    void yy_delete_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_did_buffer_switch_on_eof	build/src/cuda-sim/lex.ptx_.c	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_did_buffer_switch_on_eof	build/src/cuda-sim/lex.ptxinfo_.c	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_did_buffer_switch_on_eof	src/intersim2/lex.yy.c	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_ec	build/src/cuda-sim/lex.ptx_.c	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_ec	build/src/cuda-sim/lex.ptxinfo_.c	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_ec	src/intersim2/lex.yy.c	/^static yyconst flex_int32_t yy_ec[256] =$/;"	v	file:
yy_fatal_error	build/src/cuda-sim/lex.ptx_.c	/^static void yy_fatal_error (yyconst char* msg )$/;"	f	file:
yy_fatal_error	build/src/cuda-sim/lex.ptxinfo_.c	/^static void yy_fatal_error (yyconst char* msg )$/;"	f	file:
yy_fatal_error	src/intersim2/lex.yy.c	/^static void yy_fatal_error (yyconst char* msg )$/;"	f	file:
yy_fill_buffer	build/src/cuda-sim/lex.ptx_.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_fill_buffer	build/src/cuda-sim/lex.ptxinfo_.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_fill_buffer	src/intersim2/lex.yy.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_flex_debug	build/src/cuda-sim/lex.ptx_.c	11;"	d	file:
yy_flex_debug	build/src/cuda-sim/lex.ptxinfo_.c	11;"	d	file:
yy_flex_debug	src/intersim2/lex.yy.c	/^int yy_flex_debug = 0;$/;"	v
yy_flex_strlen	build/src/cuda-sim/lex.ptx_.c	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strlen	build/src/cuda-sim/lex.ptxinfo_.c	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strlen	src/intersim2/lex.yy.c	/^static int yy_flex_strlen (yyconst char * s )$/;"	f	file:
yy_flex_strncpy	build/src/cuda-sim/lex.ptx_.c	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flex_strncpy	build/src/cuda-sim/lex.ptxinfo_.c	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flex_strncpy	src/intersim2/lex.yy.c	/^static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )$/;"	f	file:
yy_flush_buffer	build/src/cuda-sim/lex.ptx_.c	13;"	d	file:
yy_flush_buffer	build/src/cuda-sim/lex.ptxinfo_.c	13;"	d	file:
yy_flush_buffer	src/intersim2/lex.yy.c	/^    void yy_flush_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_get_next_buffer	build/src/cuda-sim/lex.ptx_.c	/^static int yy_get_next_buffer (void)$/;"	f	file:
yy_get_next_buffer	build/src/cuda-sim/lex.ptxinfo_.c	/^static int yy_get_next_buffer (void)$/;"	f	file:
yy_get_next_buffer	src/intersim2/lex.yy.c	/^static int yy_get_next_buffer (void)$/;"	f	file:
yy_get_previous_state	build/src/cuda-sim/lex.ptx_.c	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	file:
yy_get_previous_state	build/src/cuda-sim/lex.ptxinfo_.c	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	file:
yy_get_previous_state	src/intersim2/lex.yy.c	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	file:
yy_hold_char	build/src/cuda-sim/lex.ptx_.c	/^static char yy_hold_char;$/;"	v	file:
yy_hold_char	build/src/cuda-sim/lex.ptxinfo_.c	/^static char yy_hold_char;$/;"	v	file:
yy_hold_char	src/intersim2/lex.yy.c	/^static char yy_hold_char;$/;"	v	file:
yy_init	build/src/cuda-sim/lex.ptx_.c	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init	build/src/cuda-sim/lex.ptxinfo_.c	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init	src/intersim2/lex.yy.c	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init_buffer	build/src/cuda-sim/lex.ptx_.c	12;"	d	file:
yy_init_buffer	build/src/cuda-sim/lex.ptxinfo_.c	12;"	d	file:
yy_init_buffer	src/intersim2/lex.yy.c	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	file:
yy_init_globals	build/src/cuda-sim/lex.ptx_.c	/^static int yy_init_globals (void)$/;"	f	file:
yy_init_globals	build/src/cuda-sim/lex.ptxinfo_.c	/^static int yy_init_globals (void)$/;"	f	file:
yy_init_globals	src/intersim2/lex.yy.c	/^static int yy_init_globals (void)$/;"	f	file:
yy_input_file	build/src/cuda-sim/lex.ptx_.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_input_file	build/src/cuda-sim/lex.ptxinfo_.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_input_file	src/intersim2/lex.yy.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	build/src/cuda-sim/lex.ptx_.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	build/src/cuda-sim/lex.ptxinfo_.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	src/intersim2/lex.yy.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	build/src/cuda-sim/lex.ptx_.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	build/src/cuda-sim/lex.ptxinfo_.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	src/intersim2/lex.yy.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_last_accepting_cpos	build/src/cuda-sim/lex.ptx_.c	/^static char *yy_last_accepting_cpos;$/;"	v	file:
yy_last_accepting_cpos	build/src/cuda-sim/lex.ptxinfo_.c	/^static char *yy_last_accepting_cpos;$/;"	v	file:
yy_last_accepting_cpos	src/intersim2/lex.yy.c	/^static char *yy_last_accepting_cpos;$/;"	v	file:
yy_last_accepting_state	build/src/cuda-sim/lex.ptx_.c	/^static yy_state_type yy_last_accepting_state;$/;"	v	file:
yy_last_accepting_state	build/src/cuda-sim/lex.ptxinfo_.c	/^static yy_state_type yy_last_accepting_state;$/;"	v	file:
yy_last_accepting_state	src/intersim2/lex.yy.c	/^static yy_state_type yy_last_accepting_state;$/;"	v	file:
yy_load_buffer_state	build/src/cuda-sim/lex.ptx_.c	14;"	d	file:
yy_load_buffer_state	build/src/cuda-sim/lex.ptxinfo_.c	14;"	d	file:
yy_load_buffer_state	src/intersim2/lex.yy.c	/^static void yy_load_buffer_state  (void)$/;"	f	file:
yy_meta	build/src/cuda-sim/lex.ptx_.c	/^static yyconst flex_int32_t yy_meta[76] =$/;"	v	file:
yy_meta	build/src/cuda-sim/lex.ptxinfo_.c	/^static yyconst flex_int32_t yy_meta[39] =$/;"	v	file:
yy_meta	src/intersim2/lex.yy.c	/^static yyconst flex_int32_t yy_meta[15] =$/;"	v	file:
yy_n_chars	build/src/cuda-sim/lex.ptx_.c	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	build/src/cuda-sim/lex.ptx_.c	/^static int yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_n_chars	build/src/cuda-sim/lex.ptxinfo_.c	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	build/src/cuda-sim/lex.ptxinfo_.c	/^static int yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_n_chars	src/intersim2/lex.yy.c	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	src/intersim2/lex.yy.c	/^static int yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_new_buffer	build/src/cuda-sim/lex.ptx_.c	350;"	d	file:
yy_new_buffer	build/src/cuda-sim/lex.ptxinfo_.c	350;"	d	file:
yy_new_buffer	src/intersim2/lex.yy.c	317;"	d	file:
yy_nxt	build/src/cuda-sim/lex.ptx_.c	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	build/src/cuda-sim/lex.ptx_.c	/^static yyconst flex_int16_t yy_nxt[1733] =$/;"	v	file:
yy_nxt	build/src/cuda-sim/lex.ptxinfo_.c	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	build/src/cuda-sim/lex.ptxinfo_.c	/^static yyconst flex_int16_t yy_nxt[219] =$/;"	v	file:
yy_nxt	src/intersim2/lex.yy.c	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	src/intersim2/lex.yy.c	/^static yyconst flex_int16_t yy_nxt[86] =$/;"	v	file:
yy_reduce_print	build/src/cuda-sim/ptx.tab.c	/^yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_reduce_print	build/src/cuda-sim/ptxinfo.tab.c	/^yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_reduce_print	src/intersim2/y.tab.c	/^yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_rule_can_match_eol	build/src/cuda-sim/lex.ptx_.c	/^static yyconst flex_int32_t yy_rule_can_match_eol[290] =$/;"	v	file:
yy_rule_can_match_eol	build/src/cuda-sim/lex.ptxinfo_.c	/^static yyconst flex_int32_t yy_rule_can_match_eol[27] =$/;"	v	file:
yy_scan_buffer	src/intersim2/lex.yy.c	/^YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )$/;"	f
yy_scan_bytes	src/intersim2/lex.yy.c	/^YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )$/;"	f
yy_scan_string	src/intersim2/lex.yy.c	/^YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )$/;"	f
yy_set_bol	build/src/cuda-sim/lex.ptx_.c	362;"	d	file:
yy_set_bol	build/src/cuda-sim/lex.ptxinfo_.c	362;"	d	file:
yy_set_bol	src/intersim2/lex.yy.c	329;"	d	file:
yy_set_interactive	build/src/cuda-sim/lex.ptx_.c	352;"	d	file:
yy_set_interactive	build/src/cuda-sim/lex.ptxinfo_.c	352;"	d	file:
yy_set_interactive	src/intersim2/lex.yy.c	319;"	d	file:
yy_size_t	build/src/cuda-sim/lex.ptx_.c	/^typedef size_t yy_size_t;$/;"	t	file:
yy_size_t	build/src/cuda-sim/lex.ptxinfo_.c	/^typedef size_t yy_size_t;$/;"	t	file:
yy_size_t	src/intersim2/lex.yy.c	/^typedef size_t yy_size_t;$/;"	t	file:
yy_stack_print	build/src/cuda-sim/ptx.tab.c	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_stack_print	build/src/cuda-sim/ptxinfo.tab.c	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_stack_print	src/intersim2/y.tab.c	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_start	build/src/cuda-sim/lex.ptx_.c	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_start	build/src/cuda-sim/lex.ptxinfo_.c	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_start	src/intersim2/lex.yy.c	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_state_type	build/src/cuda-sim/lex.ptx_.c	/^typedef int yy_state_type;$/;"	t	file:
yy_state_type	build/src/cuda-sim/lex.ptxinfo_.c	/^typedef int yy_state_type;$/;"	t	file:
yy_state_type	src/intersim2/lex.yy.c	/^typedef int yy_state_type;$/;"	t	file:
yy_switch_to_buffer	build/src/cuda-sim/lex.ptx_.c	15;"	d	file:
yy_switch_to_buffer	build/src/cuda-sim/lex.ptxinfo_.c	15;"	d	file:
yy_switch_to_buffer	src/intersim2/lex.yy.c	/^    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f
yy_symbol_print	build/src/cuda-sim/ptx.tab.c	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_print	build/src/cuda-sim/ptxinfo.tab.c	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_print	src/intersim2/y.tab.c	/^yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	build/src/cuda-sim/ptx.tab.c	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	build/src/cuda-sim/ptxinfo.tab.c	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	src/intersim2/y.tab.c	/^yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_trans_info	build/src/cuda-sim/lex.ptx_.c	/^struct yy_trans_info$/;"	s	file:
yy_trans_info	build/src/cuda-sim/lex.ptxinfo_.c	/^struct yy_trans_info$/;"	s	file:
yy_trans_info	src/intersim2/lex.yy.c	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	build/src/cuda-sim/lex.ptx_.c	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	file:
yy_try_NUL_trans	build/src/cuda-sim/lex.ptxinfo_.c	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	file:
yy_try_NUL_trans	src/intersim2/lex.yy.c	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	file:
yy_verify	build/src/cuda-sim/lex.ptx_.c	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yy_verify	build/src/cuda-sim/lex.ptxinfo_.c	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yy_verify	src/intersim2/lex.yy.c	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yyalloc	build/src/cuda-sim/lex.ptx_.c	24;"	d	file:
yyalloc	build/src/cuda-sim/lex.ptxinfo_.c	24;"	d	file:
yyalloc	build/src/cuda-sim/ptx.tab.c	/^union yyalloc$/;"	u	file:
yyalloc	build/src/cuda-sim/ptxinfo.tab.c	/^union yyalloc$/;"	u	file:
yyalloc	src/intersim2/lex.yy.c	/^void *yyalloc (yy_size_t  size )$/;"	f
yyalloc	src/intersim2/y.tab.c	/^union yyalloc$/;"	u	file:
yychar	build/src/cuda-sim/ptx.tab.c	/^int yychar;$/;"	v
yychar	build/src/cuda-sim/ptx.tab.c	70;"	d	file:
yychar	build/src/cuda-sim/ptxinfo.tab.c	/^int yychar;$/;"	v
yychar	build/src/cuda-sim/ptxinfo.tab.c	70;"	d	file:
yychar	src/intersim2/y.tab.c	/^int yychar;$/;"	v
yycheck	build/src/cuda-sim/ptx.tab.c	/^static const yytype_int16 yycheck[] =$/;"	v	file:
yycheck	build/src/cuda-sim/ptxinfo.tab.c	/^static const yytype_int8 yycheck[] =$/;"	v	file:
yycheck	src/intersim2/y.tab.c	/^static const yytype_int8 yycheck[] =$/;"	v	file:
yyclearin	build/src/cuda-sim/ptx.tab.c	1090;"	d	file:
yyclearin	build/src/cuda-sim/ptxinfo.tab.c	597;"	d	file:
yyclearin	src/intersim2/y.tab.c	548;"	d	file:
yyconst	build/src/cuda-sim/lex.ptx_.c	126;"	d	file:
yyconst	build/src/cuda-sim/lex.ptx_.c	128;"	d	file:
yyconst	build/src/cuda-sim/lex.ptxinfo_.c	126;"	d	file:
yyconst	build/src/cuda-sim/lex.ptxinfo_.c	128;"	d	file:
yyconst	src/intersim2/lex.yy.c	106;"	d	file:
yyconst	src/intersim2/lex.yy.c	108;"	d	file:
yydebug	build/src/cuda-sim/ptx.tab.c	/^int yydebug;$/;"	v
yydebug	build/src/cuda-sim/ptx.tab.c	66;"	d	file:
yydebug	build/src/cuda-sim/ptxinfo.tab.c	/^int yydebug;$/;"	v
yydebug	build/src/cuda-sim/ptxinfo.tab.c	66;"	d	file:
yydebug	src/intersim2/y.tab.c	/^int yydebug;$/;"	v
yydefact	build/src/cuda-sim/ptx.tab.c	/^static const yytype_uint16 yydefact[] =$/;"	v	file:
yydefact	build/src/cuda-sim/ptxinfo.tab.c	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefact	src/intersim2/y.tab.c	/^static const yytype_uint8 yydefact[] =$/;"	v	file:
yydefgoto	build/src/cuda-sim/ptx.tab.c	/^static const yytype_int16 yydefgoto[] =$/;"	v	file:
yydefgoto	build/src/cuda-sim/ptxinfo.tab.c	/^static const yytype_int8 yydefgoto[] =$/;"	v	file:
yydefgoto	src/intersim2/y.tab.c	/^static const yytype_int8 yydefgoto[] =$/;"	v	file:
yydestruct	build/src/cuda-sim/ptx.tab.c	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yydestruct	build/src/cuda-sim/ptxinfo.tab.c	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yydestruct	src/intersim2/y.tab.c	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yyensure_buffer_stack	src/intersim2/lex.yy.c	/^static void yyensure_buffer_stack (void)$/;"	f	file:
yyerrok	build/src/cuda-sim/ptx.tab.c	1089;"	d	file:
yyerrok	build/src/cuda-sim/ptxinfo.tab.c	596;"	d	file:
yyerrok	src/intersim2/y.tab.c	547;"	d	file:
yyerror	build/src/cuda-sim/ptx.tab.c	65;"	d	file:
yyerror	build/src/cuda-sim/ptxinfo.tab.c	65;"	d	file:
yyerror	src/intersim2/lex.yy.c	/^void yyerror( char * msg )$/;"	f
yyfree	build/src/cuda-sim/lex.ptx_.c	26;"	d	file:
yyfree	build/src/cuda-sim/lex.ptxinfo_.c	26;"	d	file:
yyfree	src/intersim2/lex.yy.c	/^void yyfree (void * ptr )$/;"	f
yyget_debug	src/intersim2/lex.yy.c	/^int yyget_debug  (void)$/;"	f
yyget_in	src/intersim2/lex.yy.c	/^FILE *yyget_in  (void)$/;"	f
yyget_leng	src/intersim2/lex.yy.c	/^int yyget_leng  (void)$/;"	f
yyget_lineno	src/intersim2/lex.yy.c	/^int yyget_lineno  (void)$/;"	f
yyget_out	src/intersim2/lex.yy.c	/^FILE *yyget_out  (void)$/;"	f
yyget_text	src/intersim2/lex.yy.c	/^char *yyget_text  (void)$/;"	f
yyin	build/src/cuda-sim/lex.ptx_.c	16;"	d	file:
yyin	build/src/cuda-sim/lex.ptxinfo_.c	16;"	d	file:
yyin	src/intersim2/lex.yy.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yyinput	build/src/cuda-sim/lex.ptx_.c	/^    static int yyinput (void)$/;"	f	file:
yyinput	build/src/cuda-sim/lex.ptxinfo_.c	/^    static int yyinput (void)$/;"	f	file:
yyinput	src/intersim2/lex.yy.c	/^    static int yyinput (void)$/;"	f	file:
yyleng	build/src/cuda-sim/lex.ptx_.c	17;"	d	file:
yyleng	build/src/cuda-sim/lex.ptxinfo_.c	17;"	d	file:
yyleng	src/intersim2/lex.yy.c	/^int yyleng;$/;"	v
yyless	build/src/cuda-sim/lex.ptx_.c	208;"	d	file:
yyless	build/src/cuda-sim/lex.ptx_.c	3898;"	d	file:
yyless	build/src/cuda-sim/lex.ptx_.c	3899;"	d	file:
yyless	build/src/cuda-sim/lex.ptxinfo_.c	1859;"	d	file:
yyless	build/src/cuda-sim/lex.ptxinfo_.c	1860;"	d	file:
yyless	build/src/cuda-sim/lex.ptxinfo_.c	208;"	d	file:
yyless	src/intersim2/lex.yy.c	1630;"	d	file:
yyless	src/intersim2/lex.yy.c	1631;"	d	file:
yyless	src/intersim2/lex.yy.c	175;"	d	file:
yylex	build/src/cuda-sim/lex.ptx_.c	18;"	d	file:
yylex	build/src/cuda-sim/lex.ptxinfo_.c	18;"	d	file:
yylex	build/src/cuda-sim/ptx.tab.c	64;"	d	file:
yylex	build/src/cuda-sim/ptxinfo.tab.c	64;"	d	file:
yylex_destroy	src/intersim2/lex.yy.c	/^int yylex_destroy  (void)$/;"	f
yylineno	build/src/cuda-sim/lex.ptx_.c	19;"	d	file:
yylineno	build/src/cuda-sim/lex.ptxinfo_.c	19;"	d	file:
yylineno	src/intersim2/lex.yy.c	/^int yylineno = 1;$/;"	v
yylval	build/src/cuda-sim/ptx.tab.c	/^YYSTYPE yylval;$/;"	v
yylval	build/src/cuda-sim/ptx.tab.c	69;"	d	file:
yylval	build/src/cuda-sim/ptxinfo.tab.c	/^YYSTYPE yylval;$/;"	v
yylval	build/src/cuda-sim/ptxinfo.tab.c	69;"	d	file:
yylval	src/intersim2/y.tab.c	/^YYSTYPE yylval;$/;"	v
yymore	build/src/cuda-sim/lex.ptx_.c	1326;"	d	file:
yymore	build/src/cuda-sim/lex.ptxinfo_.c	587;"	d	file:
yymore	src/intersim2/lex.yy.c	480;"	d	file:
yynerrs	build/src/cuda-sim/ptx.tab.c	/^int yynerrs;$/;"	v
yynerrs	build/src/cuda-sim/ptx.tab.c	67;"	d	file:
yynerrs	build/src/cuda-sim/ptxinfo.tab.c	/^int yynerrs;$/;"	v
yynerrs	build/src/cuda-sim/ptxinfo.tab.c	67;"	d	file:
yynerrs	src/intersim2/y.tab.c	/^int yynerrs;$/;"	v
yyout	build/src/cuda-sim/lex.ptx_.c	20;"	d	file:
yyout	build/src/cuda-sim/lex.ptxinfo_.c	20;"	d	file:
yyout	src/intersim2/lex.yy.c	/^FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;$/;"	v
yypact	build/src/cuda-sim/ptx.tab.c	/^static const yytype_int16 yypact[] =$/;"	v	file:
yypact	build/src/cuda-sim/ptxinfo.tab.c	/^static const yytype_int8 yypact[] =$/;"	v	file:
yypact	src/intersim2/y.tab.c	/^static const yytype_int8 yypact[] =$/;"	v	file:
yypact_value_is_default	build/src/cuda-sim/ptx.tab.c	728;"	d	file:
yypact_value_is_default	build/src/cuda-sim/ptxinfo.tab.c	504;"	d	file:
yypact_value_is_default	src/intersim2/y.tab.c	474;"	d	file:
yyparse	build/src/cuda-sim/ptx.tab.c	/^yyparse (void)$/;"	f
yyparse	build/src/cuda-sim/ptx.tab.c	63;"	d	file:
yyparse	build/src/cuda-sim/ptxinfo.tab.c	/^yyparse (void)$/;"	f
yyparse	build/src/cuda-sim/ptxinfo.tab.c	63;"	d	file:
yyparse	src/intersim2/y.tab.c	/^yyparse (void)$/;"	f
yypgoto	build/src/cuda-sim/ptx.tab.c	/^static const yytype_int16 yypgoto[] =$/;"	v	file:
yypgoto	build/src/cuda-sim/ptxinfo.tab.c	/^static const yytype_int8 yypgoto[] =$/;"	v	file:
yypgoto	src/intersim2/y.tab.c	/^static const yytype_int8 yypgoto[] =$/;"	v	file:
yypop_buffer_state	src/intersim2/lex.yy.c	/^void yypop_buffer_state (void)$/;"	f
yypush_buffer_state	src/intersim2/lex.yy.c	/^void yypush_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f
yyr1	build/src/cuda-sim/ptx.tab.c	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr1	build/src/cuda-sim/ptxinfo.tab.c	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr1	src/intersim2/y.tab.c	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr2	build/src/cuda-sim/ptx.tab.c	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyr2	build/src/cuda-sim/ptxinfo.tab.c	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyr2	src/intersim2/y.tab.c	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyrealloc	build/src/cuda-sim/lex.ptx_.c	25;"	d	file:
yyrealloc	build/src/cuda-sim/lex.ptxinfo_.c	25;"	d	file:
yyrealloc	src/intersim2/lex.yy.c	/^void *yyrealloc  (void * ptr, yy_size_t  size )$/;"	f
yyrestart	build/src/cuda-sim/lex.ptx_.c	21;"	d	file:
yyrestart	build/src/cuda-sim/lex.ptxinfo_.c	21;"	d	file:
yyrestart	src/intersim2/lex.yy.c	/^    void yyrestart  (FILE * input_file )$/;"	f
yyrline	build/src/cuda-sim/ptx.tab.c	/^static const yytype_uint16 yyrline[] =$/;"	v	file:
yyrline	build/src/cuda-sim/ptxinfo.tab.c	/^static const yytype_uint8 yyrline[] =$/;"	v	file:
yyrline	src/intersim2/y.tab.c	/^static const yytype_uint8 yyrline[] =$/;"	v	file:
yyset_debug	src/intersim2/lex.yy.c	/^void yyset_debug (int  bdebug )$/;"	f
yyset_in	src/intersim2/lex.yy.c	/^void yyset_in (FILE *  in_str )$/;"	f
yyset_lineno	src/intersim2/lex.yy.c	/^void yyset_lineno (int  line_number )$/;"	f
yyset_out	src/intersim2/lex.yy.c	/^void yyset_out (FILE *  out_str )$/;"	f
yyss_alloc	build/src/cuda-sim/ptx.tab.c	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yyss_alloc	build/src/cuda-sim/ptxinfo.tab.c	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yyss_alloc	src/intersim2/y.tab.c	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yystos	build/src/cuda-sim/ptx.tab.c	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystos	build/src/cuda-sim/ptxinfo.tab.c	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystos	src/intersim2/y.tab.c	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystpcpy	build/src/cuda-sim/ptx.tab.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	build/src/cuda-sim/ptx.tab.c	1291;"	d	file:
yystpcpy	build/src/cuda-sim/ptxinfo.tab.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	build/src/cuda-sim/ptxinfo.tab.c	798;"	d	file:
yystpcpy	src/intersim2/y.tab.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	src/intersim2/y.tab.c	749;"	d	file:
yystrlen	build/src/cuda-sim/ptx.tab.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	build/src/cuda-sim/ptx.tab.c	1275;"	d	file:
yystrlen	build/src/cuda-sim/ptxinfo.tab.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	build/src/cuda-sim/ptxinfo.tab.c	782;"	d	file:
yystrlen	src/intersim2/y.tab.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	src/intersim2/y.tab.c	733;"	d	file:
yysyntax_error	build/src/cuda-sim/ptx.tab.c	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	file:
yysyntax_error	build/src/cuda-sim/ptxinfo.tab.c	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	file:
yysyntax_error	src/intersim2/y.tab.c	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	file:
yytable	build/src/cuda-sim/ptx.tab.c	/^static const yytype_int16 yytable[] =$/;"	v	file:
yytable	build/src/cuda-sim/ptxinfo.tab.c	/^static const yytype_uint8 yytable[] =$/;"	v	file:
yytable	src/intersim2/y.tab.c	/^static const yytype_uint8 yytable[] =$/;"	v	file:
yytable_value_is_error	build/src/cuda-sim/ptx.tab.c	733;"	d	file:
yytable_value_is_error	build/src/cuda-sim/ptxinfo.tab.c	509;"	d	file:
yytable_value_is_error	src/intersim2/y.tab.c	479;"	d	file:
yyterminate	build/src/cuda-sim/lex.ptx_.c	1517;"	d	file:
yyterminate	build/src/cuda-sim/lex.ptxinfo_.c	769;"	d	file:
yyterminate	src/intersim2/lex.yy.c	636;"	d	file:
yytext	build/src/cuda-sim/lex.ptx_.c	22;"	d	file:
yytext	build/src/cuda-sim/lex.ptxinfo_.c	22;"	d	file:
yytext	src/intersim2/lex.yy.c	/^char *yytext;$/;"	v
yytext_ptr	build/src/cuda-sim/lex.ptx_.c	390;"	d	file:
yytext_ptr	build/src/cuda-sim/lex.ptxinfo_.c	390;"	d	file:
yytext_ptr	src/intersim2/lex.yy.c	354;"	d	file:
yytname	build/src/cuda-sim/ptx.tab.c	/^static const char *const yytname[] =$/;"	v	file:
yytname	build/src/cuda-sim/ptxinfo.tab.c	/^static const char *const yytname[] =$/;"	v	file:
yytname	src/intersim2/y.tab.c	/^static const char *const yytname[] =$/;"	v	file:
yytnamerr	build/src/cuda-sim/ptx.tab.c	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytnamerr	build/src/cuda-sim/ptxinfo.tab.c	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytnamerr	src/intersim2/y.tab.c	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytokentype	build/src/cuda-sim/ptx.tab.c	/^  enum yytokentype$/;"	g	file:
yytokentype	build/src/cuda-sim/ptx.tab.h	/^  enum yytokentype$/;"	g
yytokentype	build/src/cuda-sim/ptxinfo.tab.c	/^  enum yytokentype$/;"	g	file:
yytokentype	build/src/cuda-sim/ptxinfo.tab.h	/^  enum yytokentype$/;"	g
yytokentype	src/intersim2/y.tab.c	/^  enum yytokentype$/;"	g	file:
yytokentype	src/intersim2/y.tab.h	/^  enum yytokentype$/;"	g
yytoknum	build/src/cuda-sim/ptx.tab.c	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytoknum	build/src/cuda-sim/ptxinfo.tab.c	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytoknum	src/intersim2/y.tab.c	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytranslate	build/src/cuda-sim/ptx.tab.c	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytranslate	build/src/cuda-sim/ptxinfo.tab.c	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytranslate	src/intersim2/y.tab.c	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytype_int16	build/src/cuda-sim/ptx.tab.c	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	build/src/cuda-sim/ptx.tab.c	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int16	build/src/cuda-sim/ptxinfo.tab.c	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	build/src/cuda-sim/ptxinfo.tab.c	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int16	src/intersim2/y.tab.c	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	src/intersim2/y.tab.c	/^typedef short int yytype_int16;$/;"	t	file:
yytype_int8	build/src/cuda-sim/ptx.tab.c	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	build/src/cuda-sim/ptx.tab.c	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_int8	build/src/cuda-sim/ptxinfo.tab.c	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	build/src/cuda-sim/ptxinfo.tab.c	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_int8	src/intersim2/y.tab.c	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	src/intersim2/y.tab.c	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_uint16	build/src/cuda-sim/ptx.tab.c	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	build/src/cuda-sim/ptx.tab.c	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint16	build/src/cuda-sim/ptxinfo.tab.c	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	build/src/cuda-sim/ptxinfo.tab.c	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint16	src/intersim2/y.tab.c	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	src/intersim2/y.tab.c	/^typedef unsigned short int yytype_uint16;$/;"	t	file:
yytype_uint8	build/src/cuda-sim/ptx.tab.c	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	build/src/cuda-sim/ptx.tab.c	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yytype_uint8	build/src/cuda-sim/ptxinfo.tab.c	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	build/src/cuda-sim/ptxinfo.tab.c	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yytype_uint8	src/intersim2/y.tab.c	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	src/intersim2/y.tab.c	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yyunput	build/src/cuda-sim/lex.ptxinfo_.c	/^    static void yyunput (int c, register char * yy_bp )$/;"	f	file:
yyunput	src/intersim2/lex.yy.c	/^    static void yyunput (int c, register char * yy_bp )$/;"	f	file:
yyvs_alloc	build/src/cuda-sim/ptx.tab.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yyvs_alloc	build/src/cuda-sim/ptxinfo.tab.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yyvs_alloc	src/intersim2/y.tab.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yywrap	build/src/cuda-sim/lex.ptx_.c	23;"	d	file:
yywrap	build/src/cuda-sim/lex.ptxinfo_.c	23;"	d	file:
yywrap	src/intersim2/lex.yy.c	/^int yywrap()$/;"	f
z	common/kernel_config.h	/^   unsigned int x, y, z;$/;"	m	struct:dim3
z	common/kernel_info_t.h	/^   unsigned int x, y, z;$/;"	m	struct:dim3
z	src/abstract_hardware_model.h	/^   int                        z;$/;"	m	struct:cudaChannelFormatDesc
z	src/cuda-sim/cuda-math.h	/^      float x, y, z, w;$/;"	m	struct:cuda_math::float4
z	src/cuda-sim/cuda-math.h	/^      int x, y, z, w;$/;"	m	struct:cuda_math::int4
z	src/cuda-sim/cuda-math.h	/^      unsigned int x, y, z, w;$/;"	m	struct:cuda_math::uint4
zero	src/ramulator_sim/StatType.h	/^  bool zero() const { return (fabs(total_val) < eps); }$/;"	f	class:Stats_Ram::Average
zero	src/ramulator_sim/StatType.h	/^  bool zero() const {$/;"	f	class:Stats_Ram::Distribution
zero	src/ramulator_sim/StatType.h	/^  bool zero() const {$/;"	f	class:Stats_Ram::Histogram
zero	src/ramulator_sim/StatType.h	/^  bool zero() const {$/;"	f	class:Stats_Ram::VectorBase
zero	src/ramulator_sim/StatType.h	/^  bool zero() const {return (fabs(_value) < eps);}$/;"	f	class:Stats_Ram::ConstValue
zero	src/ramulator_sim/StatType.h	/^  bool zero() const {return (fabs(samples) < eps);}$/;"	f	class:Stats_Ram::StandardDeviation
zero	src/ramulator_sim/StatType.h	/^  bool zero() const {return (fabs(sum) < eps);}$/;"	f	class:Stats_Ram::AverageDeviation
zero	src/ramulator_sim/StatType.h	/^  virtual bool zero() const {return (fabs(_value) < eps);}$/;"	f	class:Stats_Ram::Scalar
zero	src/ramulator_sim/Statistics.h	/^  bool zero(void) const { return stat.zero(); }$/;"	f	class:StatBase
zext	src/cuda-sim/instructions.cc	/^ptx_reg_t zext( ptx_reg_t x, unsigned from_width, unsigned to_width, int to_sign, int rounding_mode, int saturation_mode )$/;"	f
~Allocator	src/intersim/allocator.cpp	/^Allocator::~Allocator( )$/;"	f	class:Allocator
~AnyNet	src/intersim2/networks/anynet.cpp	/^AnyNet::~AnyNet(){$/;"	f	class:AnyNet
~Arbiter	src/intersim/arbiter.cpp	/^Arbiter::~Arbiter( )$/;"	f	class:Arbiter
~ArrayST	src/gpuwattch/array.cc	/^ArrayST:: ~ArrayST()$/;"	f	class:ArrayST
~AverageScalarStorage	launcher/stats/stats.h	/^  ~AverageScalarStorage()$/;"	f	class:Stats::AverageScalarStorage
~Bank	src/gpuwattch/cacti/bank.cc	/^Bank::~Bank()$/;"	f	class:Bank
~BatchTrafficManager	src/intersim2/batchtrafficmanager.cpp	/^BatchTrafficManager::~BatchTrafficManager( )$/;"	f	class:BatchTrafficManager
~BranchPredictor	src/gpuwattch/core.cc	/^BranchPredictor ::~BranchPredictor(){$/;"	f	class:BranchPredictor
~Buffer	src/intersim2/buffer.cpp	/^Buffer::~Buffer()$/;"	f	class:Buffer
~BufferState	src/intersim/buffer_state.cpp	/^BufferState::~BufferState( )$/;"	f	class:BufferState
~BufferState	src/intersim2/buffer_state.cpp	/^BufferState::~BufferState()$/;"	f	class:BufferState
~CacheDynParam	src/gpuwattch/basic_components.h	/^    ~CacheDynParam(){};$/;"	f	class:CacheDynParam
~Channel	src/intersim2/channel.hpp	/^  virtual ~Channel() {}$/;"	f	class:Channel
~ChaosRouter	src/intersim2/routers/chaos_router.cpp	/^ChaosRouter::~ChaosRouter( )$/;"	f	class:ChaosRouter
~Communicate	launcher/communicate.cc	/^Communicate::~Communicate() {$/;"	f	class:Communicate
~Component	src/gpuwattch/cacti/component.cc	/^Component::~Component()$/;"	f	class:Component
~Controller	src/ramulator_sim/Controller.h	/^    ~Controller() {$/;"	f	class:Controller
~Core	src/gpuwattch/core.cc	/^Core ::~Core(){$/;"	f	class:Core
~CoreDynParam	src/gpuwattch/basic_components.h	/^    ~CoreDynParam(){};$/;"	f	class:CoreDynParam
~CountScalarStorage	launcher/stats/stats.h	/^  ~CountScalarStorage()$/;"	f	class:Stats::CountScalarStorage
~Credit	src/intersim/credit.cpp	/^Credit::~Credit( )$/;"	f	class:Credit
~Credit	src/intersim2/credit.hpp	/^  ~Credit() {}$/;"	f	class:Credit
~Crossbar	src/gpuwattch/cacti/crossbar.cc	/^Crossbar::~Crossbar(){}$/;"	f	class:Crossbar
~DRAM	src/ramulator_sim/DRAM.h	/^DRAM<T>::~DRAM()$/;"	f	class:DRAM
~DRAMParam	src/gpuwattch/basic_components.h	/^    ~DRAMParam(){};$/;"	f	class:DRAMParam
~DataCache	src/gpuwattch/array.h	/^  ~DataCache(){$/;"	f	class:DataCache
~DenseAllocator	src/intersim/allocator.cpp	/^DenseAllocator::~DenseAllocator( )$/;"	f	class:DenseAllocator
~DynamicScheduler	launcher/mk-sched/mk_scheduler.h	/^  virtual ~DynamicScheduler() {}$/;"	f	class:DynamicScheduler
~EXECU	src/gpuwattch/core.cc	/^EXECU ::~EXECU(){$/;"	f	class:EXECU
~EvenScheduler	launcher/mk-sched/even_scheduler.h	/^  virtual ~EvenScheduler() {}$/;"	f	class:EvenScheduler
~EventNextVCState	src/intersim/event_router.cpp	/^EventNextVCState::~EventNextVCState( )$/;"	f	class:EventNextVCState
~EventRouter	src/intersim/event_router.cpp	/^EventRouter::~EventRouter( )$/;"	f	class:EventRouter
~EventRouter	src/intersim2/routers/event_router.cpp	/^EventRouter::~EventRouter( )$/;"	f	class:EventRouter
~FixedScheduler	launcher/mk-sched/fixed_scheduler.h	/^  virtual ~FixedScheduler() {}$/;"	f	class:FixedScheduler
~FlashController	src/gpuwattch/iocontrollers.h	/^    ~FlashController(){};$/;"	f	class:FlashController
~Flit	src/intersim2/flit.hpp	/^  ~Flit() {}$/;"	f	class:Flit
~GPUTrafficManager	src/intersim2/gputrafficmanager.cpp	/^GPUTrafficManager::~GPUTrafficManager()$/;"	f	class:GPUTrafficManager
~GpuWrapper	src/ramulator_sim/gpu_wrapper.cpp	/^GpuWrapper::~GpuWrapper() {$/;"	f	class:GpuWrapper
~HighRadix	src/gpuwattch/cacti/highradix.cc	/^HighRadix::~HighRadix()$/;"	f	class:HighRadix
~Htree2	src/gpuwattch/cacti/htree2.h	/^    ~Htree2() {};$/;"	f	class:Htree2
~IQRouter	src/intersim/iq_router.cpp	/^IQRouter::~IQRouter( )$/;"	f	class:IQRouter
~IQRouter	src/intersim2/routers/iq_router.cpp	/^IQRouter::~IQRouter( )$/;"	f	class:IQRouter
~InjectionProcess	src/intersim2/injection.hpp	/^  virtual ~InjectionProcess() {}$/;"	f	class:InjectionProcess
~InstCache	src/gpuwattch/array.h	/^  ~InstCache(){$/;"	f	class:InstCache
~InstFetchU	src/gpuwattch/core.cc	/^InstFetchU ::~InstFetchU(){$/;"	f	class:InstFetchU
~InterconnectInterface	src/intersim2/interconnect_interface.cpp	/^InterconnectInterface::~InterconnectInterface()$/;"	f	class:InterconnectInterface
~L2interface	src/gpgpu-sim/l2cache.h	/^    virtual ~L2interface() {}$/;"	f	class:L2interface
~LOA	src/intersim/loa.cpp	/^LOA::~LOA( )$/;"	f	class:LOA
~LauncherOptionParser	launcher/launcher_option_parser.h	/^  ~LauncherOptionParser() {$/;"	f	class:LauncherOptionParser
~LoadStoreU	src/gpuwattch/core.cc	/^LoadStoreU ::~LoadStoreU(){$/;"	f	class:LoadStoreU
~MCBackend	src/gpuwattch/memoryctrl.h	/^    ~MCBackend(){};$/;"	f	class:MCBackend
~MCFrontEnd	src/gpuwattch/memoryctrl.cc	/^MCFrontEnd ::~MCFrontEnd(){$/;"	f	class:MCFrontEnd
~MCPAT_Arbiter	src/gpuwattch/cacti/arbiter.cc	/^MCPAT_Arbiter::~MCPAT_Arbiter(){}$/;"	f	class:MCPAT_Arbiter
~MCPAT_Router	src/gpuwattch/cacti/router.cc	/^MCPAT_Router::~MCPAT_Router(){}$/;"	f	class:MCPAT_Router
~MCPHY	src/gpuwattch/memoryctrl.h	/^    ~MCPHY(){};$/;"	f	class:MCPHY
~MCParam	src/gpuwattch/basic_components.h	/^    ~MCParam(){};$/;"	f	class:MCParam
~MKScheduler	launcher/mk-sched/mk_scheduler.h	/^  virtual ~MKScheduler()$/;"	f	class:MKScheduler
~Mat	src/gpuwattch/cacti/mat.cc	/^Mat::~Mat()$/;"	f	class:Mat
~MaxScalarStorage	launcher/stats/stats.h	/^  ~MaxScalarStorage()$/;"	f	class:Stats::MaxScalarStorage
~MaxSizeMatch	src/intersim/maxsize.cpp	/^MaxSizeMatch::~MaxSizeMatch( )$/;"	f	class:MaxSizeMatch
~MaxSizeMatch	src/intersim2/allocators/maxsize.cpp	/^MaxSizeMatch::~MaxSizeMatch( )$/;"	f	class:MaxSizeMatch
~MemManU	src/gpuwattch/core.cc	/^MemManU ::~MemManU(){$/;"	f	class:MemManU
~Memory	src/ramulator_sim/Memory.h	/^    ~Memory()$/;"	f	class:Memory
~MemoryBase	src/ramulator_sim/Memory.h	/^    virtual ~MemoryBase() {}$/;"	f	class:MemoryBase
~MemoryController	src/gpuwattch/memoryctrl.cc	/^MemoryController ::~MemoryController(){$/;"	f	class:MemoryController
~Module	src/intersim/module.hpp	/^   virtual ~Module( ) {}$/;"	f	class:Module
~Module	src/intersim2/module.hpp	/^  virtual ~Module( ) { }$/;"	f	class:Module
~NIUController	src/gpuwattch/iocontrollers.h	/^    ~NIUController(){};$/;"	f	class:NIUController
~NIUParam	src/gpuwattch/basic_components.h	/^    ~NIUParam(){};$/;"	f	class:NIUParam
~NamedInfo	launcher/mk-sched/named_info.h	/^    ~NamedInfo() {}$/;"	f	class:NamedInfo
~Network	src/intersim/network.cpp	/^Network::~Network( )$/;"	f	class:Network
~Network	src/intersim2/networks/network.cpp	/^Network::~Network( )$/;"	f	class:Network
~NoC	src/gpuwattch/noc.cc	/^NoC ::~NoC(){$/;"	f	class:NoC
~NoCParam	src/gpuwattch/basic_components.h	/^    ~NoCParam(){};$/;"	f	class:NoCParam
~Nuca	src/gpuwattch/cacti/nuca.cc	/^Nuca::~Nuca(){$/;"	f	class:Nuca
~OptionParser	src/option_parser.cc	/^   ~OptionParser() $/;"	f	class:OptionParser
~OptionRegistry	src/option_parser.cc	/^   virtual ~OptionRegistry() {}$/;"	f	class:OptionRegistry
~OptionRegistryInterface	src/option_parser.cc	/^   virtual ~OptionRegistryInterface() {}$/;"	f	class:OptionRegistryInterface
~OutputSet	src/intersim/outputset.cpp	/^OutputSet::~OutputSet( )$/;"	f	class:OutputSet
~PCIeController	src/gpuwattch/iocontrollers.h	/^    ~PCIeController(){};$/;"	f	class:PCIeController
~PCIeParam	src/gpuwattch/basic_components.h	/^    ~PCIeParam(){};$/;"	f	class:PCIeParam
~PIM	src/intersim/pim.cpp	/^PIM::~PIM( )$/;"	f	class:PIM
~PIM	src/intersim2/allocators/pim.cpp	/^PIM::~PIM( )$/;"	f	class:PIM
~PacketReplyInfo	src/intersim2/packet_reply_info.hpp	/^  ~PacketReplyInfo() {}$/;"	f	class:PacketReplyInfo
~Pipeline	src/gpuwattch/logic.h	/^	~Pipeline(){$/;"	f	class:Pipeline
~PipelineFIFO	src/intersim/pipefifo.hpp	/^template<class T> PipelineFIFO<T>::~PipelineFIFO( ) $/;"	f	class:PipelineFIFO
~PipelineFIFO	src/intersim2/pipefifo.hpp	/^template<class T> PipelineFIFO<T>::~PipelineFIFO( ) $/;"	f	class:PipelineFIFO
~Power_Module	src/intersim2/power/power_module.cpp	/^Power_Module::~Power_Module(){$/;"	f	class:Power_Module
~PriorityArbiter	src/intersim/arbiter.cpp	/^PriorityArbiter::~PriorityArbiter( )$/;"	f	class:PriorityArbiter
~ProcParam	src/gpuwattch/basic_components.h	/^    ~ProcParam(){};$/;"	f	class:ProcParam
~Processor	src/gpuwattch/processor.cc	/^Processor::~Processor(){$/;"	f	class:Processor
~RENAMINGU	src/gpuwattch/core.cc	/^RENAMINGU ::~RENAMINGU(){$/;"	f	class:RENAMINGU
~Refresh	src/ramulator_sim/Refresh.h	/^  virtual ~Refresh() {$/;"	f	class:Refresh
~RegFU	src/gpuwattch/core.cc	/^RegFU ::~RegFU(){$/;"	f	class:RegFU
~Router	src/intersim/router.cpp	/^Router::~Router( )$/;"	f	class:Router
~ScalarBase	launcher/stats/stats.h	/^  ~ScalarBase()  {}$/;"	f	class:Stats::ScalarBase
~ScalarStorage	launcher/stats/stats.h	/^  ~ScalarStorage() {}$/;"	f	class:Stats::ScalarStorage
~SchedulerU	src/gpuwattch/core.cc	/^SchedulerU ::~SchedulerU(){$/;"	f	class:SchedulerU
~SelAlloc	src/intersim/selalloc.cpp	/^SelAlloc::~SelAlloc( )$/;"	f	class:SelAlloc
~SeparableAllocator	src/intersim2/allocators/separable.cpp	/^SeparableAllocator::~SeparableAllocator() {$/;"	f	class:SeparableAllocator
~SharedCache	src/gpuwattch/sharedcache.h	/^    ~SharedCache(){};$/;"	f	class:SharedCache
~Simulator	launcher/simulator.cc	/^Simulator::~Simulator()$/;"	f	class:Simulator
~SmartEvenScheduler	launcher/mk-sched/smart_even_scheduler.h	/^  virtual ~SmartEvenScheduler() {}$/;"	f	class:SmartEvenScheduler
~SparseAllocator	src/intersim/allocator.cpp	/^SparseAllocator::~SparseAllocator( )$/;"	f	class:SparseAllocator
~SpeedyController	src/ramulator_sim/SpeedyController.h	/^    ~SpeedyController() {$/;"	f	class:SpeedyController
~StatBase	launcher/stats/stats.h	/^  ~StatBase() {}$/;"	f	class:Stats::StatBase
~StatList	src/ramulator_sim/StatType.h	/^  ~StatList() {$/;"	f	class:Stats_Ram::StatList
~StaticScheduler	launcher/mk-sched/mk_scheduler.h	/^  virtual ~StaticScheduler() {}$/;"	f	class:StaticScheduler
~Stats	src/intersim/stats.cpp	/^Stats::~Stats( )$/;"	f	class:Stats
~Subarray	src/gpuwattch/cacti/subarray.cc	/^Subarray::~Subarray()$/;"	f	class:Subarray
~TimedModule	src/intersim2/timed_module.hpp	/^  virtual ~TimedModule() {}$/;"	f	class:TimedModule
~ToXMLStringTool	src/gpuwattch/xmlParser.cc	/^ToXMLStringTool::~ToXMLStringTool(){ freeBuffer(); }$/;"	f	class:ToXMLStringTool
~TrafficManager	src/intersim/trafficmanager.cpp	/^TrafficManager::~TrafficManager( )$/;"	f	class:TrafficManager
~TrafficManager	src/intersim2/trafficmanager.cpp	/^TrafficManager::~TrafficManager( )$/;"	f	class:TrafficManager
~TrafficPattern	src/intersim2/traffic.hpp	/^  virtual ~TrafficPattern() {}$/;"	f	class:TrafficPattern
~TreeArbiter	src/intersim2/arbiters/tree_arb.cpp	/^TreeArbiter::~TreeArbiter() {$/;"	f	class:TreeArbiter
~UCA	src/gpuwattch/cacti/uca.cc	/^UCA::~UCA()$/;"	f	class:UCA
~UndiffCore	src/gpuwattch/logic.h	/^	~UndiffCore(){};$/;"	f	class:UndiffCore
~VC	src/intersim/vc.cpp	/^VC::~VC( )$/;"	f	class:VC
~VC	src/intersim2/vc.cpp	/^VC::~VC()$/;"	f	class:VC
~Wavefront	src/intersim/wavefront.cpp	/^Wavefront::~Wavefront( )$/;"	f	class:Wavefront
~Wire	src/gpuwattch/cacti/wire.cc	/^Wire::~Wire()$/;"	f	class:Wire
~XMLNode	src/gpuwattch/xmlParser.cc	/^XMLNode::~XMLNode()$/;"	f	class:XMLNode
~XMLParserBase64Tool	src/gpuwattch/xmlParser.cc	/^XMLParserBase64Tool::~XMLParserBase64Tool(){ freeBuffer(); }$/;"	f	class:XMLParserBase64Tool
~arg_buffer_t	src/cuda-sim/ptx_ir.h	/^   ~arg_buffer_t()$/;"	f	class:arg_buffer_t
~baseline_cache	src/gpgpu-sim/gpu-cache.h	/^    virtual ~baseline_cache()$/;"	f	class:baseline_cache
~binned_histogram	src/gpgpu-sim/histogram.cc	/^binned_histogram::~binned_histogram () {$/;"	f	class:binned_histogram
~cache_t	src/gpgpu-sim/gpu-cache.h	/^    virtual ~cache_t() {}$/;"	f	class:cache_t
~core_t	src/abstract_hardware_model.h	/^        virtual ~core_t() { free(m_thread); }$/;"	f	class:core_t
~cuobjdumpELFSection	libcuda/cuda_runtime_api.cc	/^    virtual ~cuobjdumpELFSection() {$/;"	f	class:cuobjdumpELFSection
~cuobjdumpSection	libcuda/cuda_runtime_api.cc	/^    virtual ~cuobjdumpSection() {}$/;"	f	class:cuobjdumpSection
~data_cache	src/gpgpu-sim/gpu-cache.h	/^    virtual ~data_cache() {}$/;"	f	class:data_cache
~dep_resource_conflict_check	src/gpuwattch/logic.h	/^	~dep_resource_conflict_check(){$/;"	f	class:dep_resource_conflict_check
~fifo_pipeline	src/gpgpu-sim/delayqueue.h	/^   ~fifo_pipeline() $/;"	f	class:fifo_pipeline
~functionalCoreSim	src/cuda-sim/cuda-sim.h	/^    virtual ~functionalCoreSim(){$/;"	f	class:functionalCoreSim
~gpgpu_sim_wrapper	src/gpuwattch/gpgpu_sim_wrapper.cc	/^gpgpu_sim_wrapper::~gpgpu_sim_wrapper() { }$/;"	f	class:gpgpu_sim_wrapper
~gto_scheduler	src/gpgpu-sim/shader.h	/^	virtual ~gto_scheduler () {}$/;"	f	class:gto_scheduler
~iSLIP_Sparse	src/intersim/islip.cpp	/^iSLIP_Sparse::~iSLIP_Sparse( )$/;"	f	class:iSLIP_Sparse
~insn_warp_occ_logger	src/gpgpu-sim/stat-tool.h	/^   ~insn_warp_occ_logger() {}$/;"	f	class:insn_warp_occ_logger
~inst_decoder	src/gpuwattch/logic.cc	/^inst_decoder::~inst_decoder()$/;"	f	class:inst_decoder
~interconnect	src/gpuwattch/interconnect.h	/^    ~interconnect() {};$/;"	f	class:interconnect
~kernel_info_t	src/abstract_hardware_model.cc	/^kernel_info_t::~kernel_info_t()$/;"	f	class:kernel_info_t
~l1_cache	src/gpgpu-sim/gpu-cache.h	/^    virtual ~l1_cache(){}$/;"	f	class:l1_cache
~l2_cache	src/gpgpu-sim/gpu-cache.h	/^    virtual ~l2_cache() {}$/;"	f	class:l2_cache
~linear_histogram	src/gpgpu-sim/histogram.h	/^   ~linear_histogram() {}$/;"	f	class:linear_histogram
~linear_histogram_logger	src/gpgpu-sim/stat-tool.cc	/^linear_histogram_logger::~linear_histogram_logger() $/;"	f	class:linear_histogram_logger
~linear_histogram_snapshot	src/gpgpu-sim/stat-tool.h	/^   ~linear_histogram_snapshot() { }$/;"	f	class:linear_histogram_snapshot
~lrr_scheduler	src/gpgpu-sim/shader.h	/^	virtual ~lrr_scheduler () {}$/;"	f	class:lrr_scheduler
~mem_fetch	src/gpgpu-sim/mem_fetch.cc	/^mem_fetch::~mem_fetch()$/;"	f	class:mem_fetch
~mem_storage	src/cuda-sim/memory.h	/^   ~mem_storage()$/;"	f	class:mem_storage
~memory_partition_unit	src/gpgpu-sim/l2cache.cc	/^memory_partition_unit::~memory_partition_unit() $/;"	f	class:memory_partition_unit
~memory_space	src/cuda-sim/memory.h	/^   virtual ~memory_space() {}$/;"	f	class:memory_space
~memory_sub_partition	src/gpgpu-sim/l2cache.cc	/^memory_sub_partition::~memory_sub_partition()$/;"	f	class:memory_sub_partition
~nuca_org_t	src/gpuwattch/cacti/nuca.cc	/^nuca_org_t::~nuca_org_t() {$/;"	f	class:nuca_org_t
~pow2_histogram	src/gpgpu-sim/histogram.h	/^   ~pow2_histogram() {}$/;"	f	class:pow2_histogram
~ptx_cta_info	src/cuda-sim/ptx_sim.cc	/^ptx_cta_info::~ptx_cta_info()$/;"	f	class:ptx_cta_info
~ptx_thread_info	src/cuda-sim/ptx_sim.cc	/^ptx_thread_info::~ptx_thread_info()$/;"	f	class:ptx_thread_info
~read_only_cache	src/gpgpu-sim/gpu-cache.h	/^    virtual ~read_only_cache(){}$/;"	f	class:read_only_cache
~scheduler_unit	src/gpgpu-sim/shader.h	/^    virtual ~scheduler_unit(){}$/;"	f	class:scheduler_unit
~shader_core_stats	src/gpgpu-sim/shader.h	/^    ~shader_core_stats()$/;"	f	class:shader_core_stats
~simd_function_unit	src/gpgpu-sim/shader.h	/^    ~simd_function_unit() { delete m_dispatch_reg; }$/;"	f	class:simd_function_unit
~snap_shot_trigger	src/gpgpu-sim/stat-tool.h	/^   virtual ~snap_shot_trigger() {}$/;"	f	class:snap_shot_trigger
~spill_log_interface	src/gpgpu-sim/stat-tool.h	/^   virtual ~spill_log_interface() {}$/;"	f	class:spill_log_interface
~swl_scheduler	src/gpgpu-sim/shader.h	/^	virtual ~swl_scheduler () {}$/;"	f	class:swl_scheduler
~tag_array	src/gpgpu-sim/gpu-cache.cc	/^tag_array::~tag_array() $/;"	f	class:tag_array
~thread_CFlocality	src/gpgpu-sim/stat-tool.cc	/^thread_CFlocality::~thread_CFlocality() $/;"	f	class:thread_CFlocality
~thread_insn_span	src/gpgpu-sim/stat-tool.cc	/^thread_insn_span::~thread_insn_span() { }$/;"	f	class:thread_insn_span
~two_level_active_scheduler	src/gpgpu-sim/shader.h	/^	virtual ~two_level_active_scheduler () {}$/;"	f	class:two_level_active_scheduler
~uca_org_t	src/gpuwattch/cacti/cacti_interface.h	/^    ~uca_org_t(){};$/;"	f	class:uca_org_t
~warp_inst_t	src/abstract_hardware_model.h	/^    virtual ~warp_inst_t(){$/;"	f	class:warp_inst_t
